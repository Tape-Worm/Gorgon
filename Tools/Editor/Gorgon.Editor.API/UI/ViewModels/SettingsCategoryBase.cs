
// 
// Gorgon
// Copyright (C) 2020 Michael Winsor
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE
// 
// Created: February 5, 2020 4:30:08 PM
// 


using Gorgon.Editor.PlugIns;
using Gorgon.Editor.UI.Views;

namespace Gorgon.Editor.UI;

/// <summary>
/// A base class for a content settings category view model for a <see cref="SettingsBaseControl"/>
/// </summary>
/// <typeparam name="T">The type of parameters for this view model. Must implement <see cref="ISettingsCategory"/>.</typeparam>
/// <remarks>
/// <para>
/// This is a view model that is used provide a settings interface for a plug in. The editor will pick these up and present your custom settings view (along with the view model) so that users can make 
/// changes to plug in settings. These settings objects are returned to the host editor application by way of the <see cref="EditorPlugIn.OnGetSettings"/> method
/// </para>
/// <para>
/// To register a settings panel, the developer must inherit this view model type, and create a settings view model for the plug in settings they wish to update. A view must be registered to the 
/// the view model by using the <see cref="ViewFactory"/>.<see cref="ViewFactory.Register{T}(Func{System.Windows.Forms.Control})"/> method
/// </para>
/// <para>
/// Any parameters for this view model must inherit from the <see cref="SettingsCategoryViewModelParameters"/> class
/// </para>
/// </remarks>
/// <seealso cref="EditorPlugIn"/>
/// <seealso cref="ViewFactory"/>
/// <seealso cref="SettingsCategoryViewModelParameters"/>
public abstract class SettingsCategoryBase<T>
    : ViewModelBase<T, IHostContentServices>, ISettingsCategory
    where T : SettingsCategoryViewModelParameters
{
    /// <summary>Property to return the unqiue ID for the panel.</summary>
    /// <remarks>
    /// This ID value is generated when the object is created, and does not need to be generated by the user.
    /// </remarks>
    public Guid ID
    {
        get;
    } = Guid.NewGuid();

    /// <summary>Property to return the name of this object.</summary>
    public abstract string Name
    {
        get;
    }
}
