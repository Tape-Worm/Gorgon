version: 2.0.{build}
pull_requests:
  do_not_increment_build_number: true
branches:
  only:
  - master
  - /\d+\.\d+\.\d+/
skip_tags: false
skip_non_tags: false
configuration: ReleaseAndDeploy
platform: Any CPU
shallow_clone: true
assembly_info:
  patch: true
  file: '**\AssemblyInfo.*'
  assembly_version: '{version}'
  assembly_file_version: '{version}'
  assembly_informational_version: '{version}'
environment:
  gkey: eDKrI8Wf1hH2rloYqjD2dTEALUqY89j3yyj5KV82MHko6K62_9eWE98bOj8hif2Q
install:
- ps: >-
    nuget install secure-file -ExcludeVersion

    secure-file\tools\secure-file -decrypt Gorgon.enc -secret $env:gkey -out GorgonFull.snk
before_build:
- ps: .\ProjectSigner.exe GorgonFull.snk -y
build:
  project: Gorgon/Gorgon.sln
  parallel: true
  verbosity: normal
after_build:
- ps: "$artifactDir = \"Artifacts\"\n$artifactBin = \"$artifactDir\\\\Bin\\\\\"\n$artifactPlugIns = \"$artifactDir\\\\PlugIns\\\\\"\n$artifactTools = \"$artifactDir\\\\Tools\\\\\"\n$artifactEditor = \"$artifactTools\\\\Gorgon.Editor\"\n$artifactEditorPlugIns = \"$artifactEditor\\\\PlugIns\"\n\nif (Test-Path $artifactDir)\n{\n    rmdir $artifactDir -force -recurse\n}\n\nmkdir $artifactDir\nmkdir $artifactBin\nmkdir $artifactPlugIns\nmkdir $artifactTools\nmkdir $artifactEditor\nmkdir $artifactEditorPlugIns\n\n$gorgonDllsXmls = (Get-ChildItem \"Gorgon\\\\\" -include *.dll, *.xml -Recurse | where { $_.FullName -notmatch \"\\\\obj\\\\\" -and $_.FullName -notmatch \"\\\\debug\\\\\"})\n$plugInDlls = (Get-ChildItem \"PlugIns\\\\Bin\\\\\" -include *.dll -Recurse | where { $_.FullName -notmatch \"\\\\debug\\\\\"})\n$toolFiles = (Get-ChildItem \"Tools\\\\Gorgon.Editor\\\\Bin\\\\Release\\*\" -include *.dll, Gorgon.Editor.exe, Gorgon.Editor.exe.config, texconv.exe )\n$toolPlugIns = (Get-ChildItem \"Tools\\\\Gorgon.Editor\\\\Bin\\\\Release\\\\PlugIns\\*\" -include *.dll)\n\nForEach ($dll in $gorgonDllsXmls)\n{\n    Copy-Item $dll.FullName $artifactBin\n}\n\nForEach ($plugInDll in $plugInDlls)\n{\n    Copy-Item $plugInDll.FullName $artifactPlugIns\n}\n\nForEach ($toolFile in $toolFiles)\n{\n    Copy-Item $toolFile.FullName $artifactEditor\n}\n\nForeach ($toolPlugIn in $toolPlugIns)\n{\n    Copy-Item $toolPlugIn.FullName $artifactEditorPlugIns\n}\n\n# Begin Example Artifacts.\nfunction Patch-Config()\n{\n    Param ([string]$configFile)\n\n    [xml]$xmlFile = [xml](Get-Content $configFile)\n\n    $plugInPathNode = $xmlFile.SelectSingleNode(\"//setting[@name='PlugInLocation']\")\n\n    if ($plugInPathNode -ne $null)\n    {\n        $plugInPathNode.Value = $plugInPathNode.Value.Replace(\"..\\\", [string]::Empty)\n        $plugInPathNode.Value = $plugInPathNode.Value.Replace(\"Bin\\{0}\", [string]::Empty)\n        $plugInPathNode.Value = \"..\\{0}\" -f $plugInPathNode.Value\n    }\n\n    $plugInPathNode = $xmlFile.SelectSingleNode(\"//setting[@name='InputPlugInPath']\")\n\n    if ($plugInPathNode -ne $null)\n    {\n        $plugInPathNode.Value = $plugInPathNode.Value.Replace(\"..\\\", [string]::Empty)\n        $plugInPathNode.Value = $plugInPathNode.Value.Replace(\"Bin\\{0}\", [string]::Empty)\n        $plugInPathNode.Value = \"..\\{0}\" -f $plugInPathNode.Value\n    }\n\n    $resourcePathNode = $xmlFile.SelectSingleNode(\"//setting[@name='ResourceLocation']\")\n\n    if ($resourcePathNode -ne $null)\n    {\n        $resourcePathNode.Value = $resourcePathNode.Value.Replace(\"..\\\", [string]::Empty)\n        $resourcePathNode.Value = \"..\\{0}\" -f $resourcePathNode.Value\n    }\n\n    $xmlFile.Save($configFile)\n}\n\n$artifactDir = \"Artifacts_Examples\"\n$artifactBin = \"$artifactDir\\\\Bin\\\\\"\n$artifactPlugIns = \"$artifactDir\\\\PlugIns\\\\\"\n$artifactResources = \"$artifactDir\\Resources\\\"\n\n\nif (Test-Path $artifactDir)\n{\n    rmdir $artifactDir -force -Recurse\n}\n\nmkdir $artifactDir\nmkdir $artifactBin\nmkdir $artifactPlugIns\nmkdir $artifactResources\n\n$baseSrcResources = \"Resources\\\"\n$resourceList = (\n    \"Textures\\Balls\\BallsTexture.dds\",\n    \"FileSystems\\BZipFileSystem.gorPack\",\n    \"FileSystems\\FolderSystem\\<<DIRECTORY>>\",\n    \"FileSystems\\VFSRoot\\<<DIRECTORY>>\",\n    \"FileSystems\\VFSRoot.Zip\",\n    \"FileSystems\\FileSystem.Zip\"\n)\n\n$gorgonExamples = (Get-ChildItem \"Examples\\\\\" -include *.dll,*.exe, *.config -Recurse | where { $_.FullName -notmatch \"app.config\" -and $_.FullName -notmatch \".vshost.exe\" -and $_.FullName -notmatch \"\\\\DemoLauncher\\\\\" -and $_.FullName -notmatch \"\\\\Primitives\\\\\" -and $_.FullName -notmatch \"\\\\debug\\\\\" -and $_.FullName -notmatch \"\\\\obj\\\\\" -and $_.FullName -notmatch \"\\\\Fonts\\\\\"})\n$plugInDlls = (Get-ChildItem \"PlugIns\\\\Bin\\\\\" -include *.dll -Recurse | where { $_.FullName -notmatch \"\\\\debug\\\\\" -and $_.BaseName -notmatch \"sharpdx\"})\n$ballTexture\n\nForEach ($example in $gorgonExamples)\n{\n    if ($example.FullName.EndsWith(\".config\"))\n    {\n        Patch-Config -configFile $example.FullName\n    }\n\n    Copy-Item $example.FullName $artifactBin\n}\n\nForEach ($plugInDll in $plugInDlls)\n{\n    Copy-Item $plugInDll.FullName $artifactPlugIns\n}\n\nForEach ($resource in $resourceList)\n{\n    [string]$destDir = \"$artifactResources{0}\" -f (Split-Path $resource)\n\n    if (-not (Test-Path $destDir))\n    {\n        mkdir $destDir\n    }\n\n    if ($resource.EndsWith(\"<<DIRECTORY>>\"))\n    {\n        $srcDir = \"$baseSrcResources{0}\" -f (Split-Path $resource)\n        Get-ChildItem -Path $srcDir | Copy-Item -Destination $destDir -Recurse -Container         \n    } Else\n    {\n        Copy-Item $baseSrcResources$resource $destDir\n    }\n}"
test: off
artifacts:
- path: Artifacts\
  name: Gorgon2.0
- path: Artifacts_Examples\
  name: Gorgon2.0_Examples
deploy:
- provider: GitHub
  tag: ${appveyor_build_version}
  release: Gorgon 2.0
  description: "![gorgon_2 x_logo_full_site](https://cloud.githubusercontent.com/assets/9710137/23449195/86a8701c-fe12-11e6-9079-c4a8997bd311.png)\nZip files containing the binaries for Gorgon v2.0\n\nThe _Gorgon2.0_ zip file contains the libraries for use in development environments, and the editor. This contains only the binaries.\n\nThe _Gorgon2.0_Examples_ zip file contains the binaries for the example applications included with Gorgon. It is **highly** recommended to download this if you're uncertain whether Gorgon will suit your needs or not."
  auth_token:
    secure: UpmzL/Lmrgy8OVxV3NfBRc2OlHH1tNAw/8U/H5sOTdqSsGeU3D8HBE7Cq1l1D+23
  artifact: Gorgon2.0,Gorgon2.0_Examples
  force_update: true
  on:
    appveyor_repo_tag: true