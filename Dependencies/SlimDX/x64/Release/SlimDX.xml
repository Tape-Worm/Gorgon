<?xml version="1.0"?>
<doc>
    <assembly>
        "SlimDX"
    </assembly>
    <members>
        <member name="M:SlimDX.Vector4.Equals(SlimDX.Vector4@,SlimDX.Vector4@)">
            <summary>
Determines whether the specified Object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>objA.Equals(objB)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Equals(SlimDX.Vector4)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector4.GetHashCode">
            <summary>
Gets the hash code of the vector object. 
</summary>
            <returns>Hash code of the vector object.</returns>
        </member>
        <member name="M:SlimDX.Vector4.ToString">
            <summary>
Retrieves a string representation of the current object. 
</summary>
            <returns>A string that represents the object.</returns>
        </member>
        <member name="M:SlimDX.Vector4.op_Inequality(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Tests vectors for inequality. 
</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>
                <c>true</c> if the vectors are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector4.op_Equality(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Tests vectors for equality. 
</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>
                <c>true</c> if the vectors are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector4.op_Division(SlimDX.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector4.op_Multiply(System.Single,SlimDX.Vector4)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector4.op_Multiply(SlimDX.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector4.op_UnaryNegation(SlimDX.Vector4)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimDX.Vector4.op_Subtraction(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector4.op_Addition(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Maximize(SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SlimDX.Vector4.Maximize(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Minimize(SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SlimDX.Vector4.Minimize(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Transform(SlimDX.Vector4[],SlimDX.Quaternion@)">
            <summary>
Transforms an array of 4D vectors by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vectors">The vectors to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Transform(SlimDX.Vector4@,SlimDX.Quaternion@,SlimDX.Vector4@)">
            <summary>
Transforms a 4D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:SlimDX.Vector4.Transform(SlimDX.Vector4,SlimDX.Quaternion)">
            <summary>
Transforms a 4D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Transform(SlimDX.Vector4[],SlimDX.Matrix@)">
            <summary>
Transforms an array of 4D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectors">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />s.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Transform(SlimDX.Vector4@,SlimDX.Matrix@,SlimDX.Vector4@)">
            <summary>
Transforms a 4D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:SlimDX.Vector4.Transform(SlimDX.Vector4,SlimDX.Matrix)">
            <summary>
Transforms a 4D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Normalize(SlimDX.Vector4@,SlimDX.Vector4@)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:SlimDX.Vector4.Normalize(SlimDX.Vector4)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Dot(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Calculates the dot product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector4.DistanceSquared(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Calculates the squared distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:SlimDX.Vector4.Distance(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Calculates the distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector4.SmoothStep(SlimDX.Vector4@,SlimDX.Vector4@,System.Single,SlimDX.Vector4@)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:SlimDX.Vector4.SmoothStep(SlimDX.Vector4,SlimDX.Vector4,System.Single)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Lerp(SlimDX.Vector4@,SlimDX.Vector4@,System.Single,SlimDX.Vector4@)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:SlimDX.Vector4.Lerp(SlimDX.Vector4,SlimDX.Vector4,System.Single)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:SlimDX.Vector4.Hermite(SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@,System.Single,SlimDX.Vector4@)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SlimDX.Vector4.Hermite(SlimDX.Vector4,SlimDX.Vector4,SlimDX.Vector4,SlimDX.Vector4,System.Single)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Clamp(SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SlimDX.Vector4.Clamp(SlimDX.Vector4,SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SlimDX.Vector4.CatmullRom(SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@,System.Single,SlimDX.Vector4@)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SlimDX.Vector4.CatmullRom(SlimDX.Vector4,SlimDX.Vector4,SlimDX.Vector4,SlimDX.Vector4,System.Single)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Barycentric(SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@,System.Single,System.Single,SlimDX.Vector4@)">
            <summary>
Returns a <see cref="T:SlimDX.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
</summary>
            <param name="value1">A <see cref="T:SlimDX.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimDX.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimDX.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SlimDX.Vector4.Barycentric(SlimDX.Vector4,SlimDX.Vector4,SlimDX.Vector4,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:SlimDX.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
</summary>
            <param name="value1">A <see cref="T:SlimDX.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimDX.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimDX.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:SlimDX.Vector4" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Negate(SlimDX.Vector4@,SlimDX.Vector4@)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SlimDX.Vector4.Negate(SlimDX.Vector4)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Divide(SlimDX.Vector4@,System.Single,SlimDX.Vector4@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimDX.Vector4.Divide(SlimDX.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Multiply(SlimDX.Vector4@,System.Single,SlimDX.Vector4@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimDX.Vector4.Multiply(SlimDX.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Modulate(SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated vector.</param>
        </member>
        <member name="M:SlimDX.Vector4.Modulate(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Subtract(SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SlimDX.Vector4.Subtract(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Add(SlimDX.Vector4@,SlimDX.Vector4@,SlimDX.Vector4@)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SlimDX.Vector4.Add(SlimDX.Vector4,SlimDX.Vector4)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Normalize">
            <summary>
Converts the vector into a unit vector.
</summary>
        </member>
        <member name="M:SlimDX.Vector4.LengthSquared">
            <summary>
Calculates the squared length of the vector.
</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:SlimDX.Vector4.Length">
            <summary>
Calculates the length of the vector.
</summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:SlimDX.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Vector4" /> class.
</summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SlimDX.Vector4.#ctor(SlimDX.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Vector4" /> class.
</summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SlimDX.Vector4.#ctor(SlimDX.Vector2,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Vector4" /> class.
</summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SlimDX.Vector4.#ctor(System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Vector4" /> class.
</summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="P:SlimDX.Half3.Z">
            <summary>
Gets or sets the Z component of the vector.
</summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="P:SlimDX.Half3.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="P:SlimDX.Half3.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:SlimDX.Half3">
            <summary>
Defines a three component vector, using half precision floating point coordinates.
</summary>
        </member>
        <member name="P:SlimDX.Half2.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="P:SlimDX.Half2.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:SlimDX.Half2">
            <summary>
Defines a two component vector, using half precision floating point coordinates.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChainDescription.Flags">
            <summary>
Gets or sets swap chain options.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChainDescription.SwapEffect">
            <summary>
Gets or sets swapping effect behavior.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChainDescription.IsWindowed">
            <summary>
Gets or sets a value indicating whether or not the swap chain is in windowed mode.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChainDescription.OutputHandle">
            <summary>
Gets or sets the swap chain's output handle.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChainDescription.BufferCount">
            <summary>
Gets or sets the number of buffers in the swap chain.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChainDescription.Usage">
            <summary>
Gets or sets swap chain's surface usage.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChainDescription.SampleDescription">
            <summary>
Gets or sets the swap chain's multisampling properties.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChainDescription.ModeDescription">
            <summary>
Gets or sets the swap chain's display mode properties.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.SwapChainDescription">
            <summary>
Describes properties of a swap chain.
</summary>
        </member>
        <member name="M:SlimDX.DXGI.Surface.Unmap">
            <summary>
Relinquishes access to the surface data.
</summary>
        </member>
        <member name="M:SlimDX.DXGI.Surface.Map(SlimDX.DXGI.MapFlags)">
            <summary>
Acquires access to the surface data.
</summary>
            <param name="flags">Flags specifying CPU access permissions.</param>
            <returns>A DataRectangle for accessing the mapped data, or null on failure.</returns>.
</member>
        <member name="M:SlimDX.DXGI.Surface.FromPointer(System.IntPtr)">
            <summary>
Constructs a Surface from an unmanaged pointer.
</summary>
            <param name="pointer">The unmanaged IDXGISurface pointer.</param>
        </member>
        <member name="P:SlimDX.DXGI.Surface.Description">
            <summary>
Gets the surface's description.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.Surface">
            <summary>
A Surface represents container for image data.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.FrameStatistics.SyncGPUTime">
            <summary>
Reserved. Always returns 0.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.FrameStatistics.SyncQPCTime">
            <summary>
Gets a value equivalent to that returned by the unmanaged function QueryPerformanceCounter.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.FrameStatistics.SyncRefreshCount">
            <summary>
Gets the number of times a vertical blank has occured.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.FrameStatistics.PresentRefreshCount">
            <summary>
Gets the number of times a vertical blank has occured.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.FrameStatistics.PresentCount">
            <summary>
Gets the number of times an image has been presented to an output.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.FrameStatistics">
            <summary>
Provides basic rendering statistics. All counts are relative to machine boot. 
</summary>
        </member>
        <member name="M:SlimDX.DXGI.ModeDescription.#ctor(System.Int32,System.Int32,SlimDX.Rational,SlimDX.DXGI.Format)">
            <summary>
Constructs a new ModeDescription.
</summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="refreshRate">The refresh rate.</param>
            <param name="format">The format.</param>
        </member>
        <member name="P:SlimDX.DXGI.ModeDescription.Scaling">
            <summary>
Gets or sets the display mode scaling.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.ModeDescription.ScanlineOrdering">
            <summary>
Gets or sets the scanline ordering.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.ModeDescription.Format">
            <summary>
Gets or sets the display mode format.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.ModeDescription.RefreshRate">
            <summary>
Gets or sets the display mode refresh rate.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.ModeDescription.Height">
            <summary>
Gets or sets the display mode height.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.ModeDescription.Width">
            <summary>
Gets or sets the display mode width.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.ModeDescription">
            <summary>
Describes a display mode.
</summary>
        </member>
        <member name="T:SlimDX.Rational">
            <summary>
Defines a rational number as a numerator / denominator pair.
</summary>
        </member>
        <member name="M:SlimDX.Direct3D9.Sprite.FromPointer(System.IntPtr)">
            <summary>Creates a new instance of a sprite object from a user pointer.</summary>
            <param name="pointer">The native user pointer to use for the sprite object. This should
be a pointer to an ID3DXSprite.</param>
            <returns>The newly created sprite object.</returns>
        </member>
        <member name="M:SlimDX.Direct3D9.Sprite.#ctor(SlimDX.Direct3D9.Device)">
            <summary>Initializes a new instance of a sprite object.</summary>
            <param name="device">The device to use when creating the new sprite object.</param>
            <unmanaged>D3DXCreateSprite</unmanaged>
        </member>
        <member name="T:SlimDX.Direct3D9.Sprite">
            <summary>Provides a set of methods that simplify the process of drawing sprites.</summary>
            <unmanaged>ID3DXSprite</unmanaged>
        </member>
        <member name="P:SlimDX.DXGI.GammaControlCapabilities.ControlPoints">
            <summary>
Gets the list of curve control point positions.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.GammaControlCapabilities.MinimumConvertedValue">
            <summary>
Gets a value indicating the minimum range of the curve control point positions.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.GammaControlCapabilities.MaximumConvertedValue">
            <summary>
Gets a value indicating the maximum range of the curve control point positions.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.GammaControlCapabilities.IsScaleAndOffsetSupported">
            <summary>
Gets a value indicating whether gamma scale and offset transformation is supported.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.GammaControlCapabilities">
            <summary>
Describes gamma control capabilities.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.GammaControl.ControlPoints">
            <summary>
Gets the list of RGB control points defining the gamma curve.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.GammaControl.Offset">
            <summary>
Gets or sets an offset applied to gamma RGB values.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.GammaControl.Scale">
            <summary>
Gets or sets a scaling factor applied to gamma RGB values.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.GammaControl">
            <summary>
Describes gamma control settings.
</summary>
        </member>
        <member name="T:SlimDX.Performance">
            <summary>
Provides access to the Direct3D performance API, which allows applications to gather performance
data and integrate with PIX for Windows in order to perform detailed analysis.
</summary>
        </member>
        <member name="M:SlimDX.Vector2.Equals(SlimDX.Vector2@,SlimDX.Vector2@)">
            <summary>
Determines whether the specified Object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>objA.Equals(objB)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Equals(SlimDX.Vector2)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector2.GetHashCode">
            <summary>
Gets the hash code of the vector object. 
</summary>
            <returns>Hash code of the vector object.</returns>
        </member>
        <member name="M:SlimDX.Vector2.ToString">
            <summary>
Retrieves a string representation of the current object. 
</summary>
            <returns>A string that represents the object.</returns>
        </member>
        <member name="M:SlimDX.Vector2.op_Inequality(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Tests vectors for inequality. 
</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>
                <c>true</c> if the vectors are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector2.op_Equality(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Tests vectors for equality. 
</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>
                <c>true</c> if the vectors are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector2.op_Division(SlimDX.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector2.op_Multiply(System.Single,SlimDX.Vector2)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector2.op_Multiply(SlimDX.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector2.op_UnaryNegation(SlimDX.Vector2)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimDX.Vector2.op_Subtraction(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector2.op_Addition(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Maximize(SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SlimDX.Vector2.Maximize(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Minimize(SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SlimDX.Vector2.Minimize(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector2.TransformNormal(SlimDX.Vector2[],SlimDX.Matrix@)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normals">The normal vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed normals.</returns>
        </member>
        <member name="M:SlimDX.Vector2.TransformNormal(SlimDX.Vector2@,SlimDX.Matrix@,SlimDX.Vector2@)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
        </member>
        <member name="M:SlimDX.Vector2.TransformNormal(SlimDX.Vector2,SlimDX.Matrix)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed normal.</returns>
        </member>
        <member name="M:SlimDX.Vector2.TransformCoordinate(SlimDX.Vector2[],SlimDX.Matrix@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinates">The coordinate vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:SlimDX.Vector2.TransformCoordinate(SlimDX.Vector2@,SlimDX.Matrix@,SlimDX.Vector2@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
        </member>
        <member name="M:SlimDX.Vector2.TransformCoordinate(SlimDX.Vector2,SlimDX.Matrix)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Transform(SlimDX.Vector2[],SlimDX.Quaternion@)">
            <summary>
Transforms an array of 2D vectors by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vectors">The vectors to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Transform(SlimDX.Vector2@,SlimDX.Quaternion@,SlimDX.Vector4@)">
            <summary>
Transforms a 2D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:SlimDX.Vector2.Transform(SlimDX.Vector2,SlimDX.Quaternion)">
            <summary>
Transforms a 2D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Transform(SlimDX.Vector2[],SlimDX.Matrix@)">
            <summary>
Transforms an array of 2D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectors">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />s.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Transform(SlimDX.Vector2@,SlimDX.Matrix@,SlimDX.Vector4@)">
            <summary>
Transforms a 2D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:SlimDX.Vector2.Transform(SlimDX.Vector2,SlimDX.Matrix)">
            <summary>
Transforms a 2D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Normalize(SlimDX.Vector2@,SlimDX.Vector2@)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:SlimDX.Vector2.Normalize(SlimDX.Vector2)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Dot(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Calculates the dot product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector2.DistanceSquared(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Calculates the squared distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:SlimDX.Vector2.Distance(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Calculates the distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector2.SmoothStep(SlimDX.Vector2@,SlimDX.Vector2@,System.Single,SlimDX.Vector2@)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:SlimDX.Vector2.SmoothStep(SlimDX.Vector2,SlimDX.Vector2,System.Single)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Lerp(SlimDX.Vector2@,SlimDX.Vector2@,System.Single,SlimDX.Vector2@)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:SlimDX.Vector2.Lerp(SlimDX.Vector2,SlimDX.Vector2,System.Single)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:SlimDX.Vector2.Hermite(SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@,System.Single,SlimDX.Vector2@)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SlimDX.Vector2.Hermite(SlimDX.Vector2,SlimDX.Vector2,SlimDX.Vector2,SlimDX.Vector2,System.Single)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Clamp(SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SlimDX.Vector2.Clamp(SlimDX.Vector2,SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SlimDX.Vector2.CatmullRom(SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@,System.Single,SlimDX.Vector2@)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SlimDX.Vector2.CatmullRom(SlimDX.Vector2,SlimDX.Vector2,SlimDX.Vector2,SlimDX.Vector2,System.Single)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Barycentric(SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@,System.Single,System.Single,SlimDX.Vector2@)">
            <summary>
Returns a <see cref="T:SlimDX.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="value1">A <see cref="T:SlimDX.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimDX.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimDX.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SlimDX.Vector2.Barycentric(SlimDX.Vector2,SlimDX.Vector2,SlimDX.Vector2,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:SlimDX.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="value1">A <see cref="T:SlimDX.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimDX.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimDX.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:SlimDX.Vector2" /> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Negate(SlimDX.Vector2@,SlimDX.Vector2@)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SlimDX.Vector2.Negate(SlimDX.Vector2)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Divide(SlimDX.Vector2@,System.Single,SlimDX.Vector2@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimDX.Vector2.Divide(SlimDX.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Multiply(SlimDX.Vector2@,System.Single,SlimDX.Vector2@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimDX.Vector2.Multiply(SlimDX.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Modulate(SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated vector.</param>
        </member>
        <member name="M:SlimDX.Vector2.Modulate(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Subtract(SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SlimDX.Vector2.Subtract(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Add(SlimDX.Vector2@,SlimDX.Vector2@,SlimDX.Vector2@)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SlimDX.Vector2.Add(SlimDX.Vector2,SlimDX.Vector2)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Normalize">
            <summary>
Converts the vector into a unit vector.
</summary>
        </member>
        <member name="M:SlimDX.Vector2.LengthSquared">
            <summary>
Calculates the squared length of the vector.
</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:SlimDX.Vector2.Length">
            <summary>
Calculates the length of the vector.
</summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:SlimDX.Vector2.#ctor(System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Vector2" /> class.
</summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:SlimDX.Vector2.#ctor(System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Vector2" /> class.
</summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="T:SlimDX.Direct3D9.Line">
            <summary>Implements line drawing using textured triangles.</summary>
            <unmanaged>ID3DXLine</unmanaged>
        </member>
        <member name="M:SlimDX.DXGI.Device.QueryResourceResidency(System.Collections.Generic.IList`1{SlimDX.ComObject})">
            <summary>
Gets the residency status of a list of resources.
</summary>
            <param name="resources">The resources to query.</param>
            <returns>A list of residency status values, one for each entry in the input resources list. The result will be
null on failure.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Device.FromPointer(System.IntPtr)">
            <summary>
Constructs a Device from an unmanaged pointer.
</summary>
            <param name="pointer">The unmanaged IDXGIDevice pointer.</param>
        </member>
        <member name="P:SlimDX.DXGI.Device.Adapter">
            <summary>
Gets the adapter associated with the device.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.Device.GpuThreadPriority">
            <summary>
Gets or sets the device's GPU thread priority.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.Device">
            <summary>
An object that produces image data.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.MouseState.GetButtons">
            <summary>
Gets the state of the mouse buttons.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.MouseState.Z">
            <summary>
Gets the Z axis of the mouse.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.MouseState.Y">
            <summary>
Gets the Y axis of the mouse.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.MouseState.X">
            <summary>
Gets the X axis of the mouse.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.MouseState">
            <summary>
Describes the state of a mouse device.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.OutputDescription.MonitorHandle">
            <summary>
Gets the unmanaged HMONITOR handle for the output.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.OutputDescription.Rotation">
            <summary>
Gets rotation performed by the output on a presented image.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.OutputDescription.IsAttachedToDesktop">
            <summary>
Gets a value indicating whether the output is attached to the desktop.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.OutputDescription.DesktopBounds">
            <summary>
Gets output's bounds in desktop coordinates.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.OutputDescription.Name">
            <summary>
Gets the output's name.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.OutputDescription">
            <summary>
Describes various properties of an Output.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D9.Error">
            <summary>Defines error result codes that are returned by Direct3D 9 functions.</summary>
        </member>
        <member name="P:SlimDX.DXGI.SurfaceDescription.SampleDescription">
            <summary>
Gets the surface's multisampling properties.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SurfaceDescription.Format">
            <summary>
Gets the format of the surface.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SurfaceDescription.Height">
            <summary>
Gets the height of the surface.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SurfaceDescription.Width">
            <summary>
Gets the width of the surface.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.SurfaceDescription">
            <summary>
Describes properties of a surface.
</summary>
        </member>
        <member name="P:SlimDX.Half4.W">
            <summary>
Gets or sets the W component of the vector.
</summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="P:SlimDX.Half4.Z">
            <summary>
Gets or sets the Z component of the vector.
</summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="P:SlimDX.Half4.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="P:SlimDX.Half4.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:SlimDX.Half4">
            <summary>
Defines a four component vector, using half precision floating point coordinates.
</summary>
        </member>
        <member name="T:SlimDX.Half">
            <summary>
A half precision (16 bit) floating point value.
</summary>
        </member>
        <member name="M:SlimDX.XInput.XInputException.#ctor(SlimDX.Result)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="result">The result code that caused this exception.</param>
        </member>
        <member name="M:SlimDX.XInput.XInputException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
            <param name="innerException">The exception that caused this exception.</param>
        </member>
        <member name="M:SlimDX.XInput.XInputException.#ctor(System.String)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
        </member>
        <member name="M:SlimDX.XInput.XInputException.#ctor">
            <summary>
Constructs a new exception object.
</summary>
        </member>
        <member name="T:SlimDX.XInput.XInputException">
            <summary>
Represents errors that occur in the XInput subsystem.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Controller.IsConnected">
            <summary>
Gets a value indicating whether or not the controller is connected.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Capabilities.Flags">
            <summary>
Features of the controller. 
</summary>
        </member>
        <member name="P:SlimDX.XInput.Capabilities.Subtype">
            <summary>
Gets the controller subtype.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Capabilities.Type">
            <summary>
Gets the controller type.
</summary>
        </member>
        <member name="T:SlimDX.XInput.Capabilities">
            <summary>
Describes the capabilities of a controller.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Vibration.RightMotorSpeed">
            <summary>
Gets or sets the right motor speed. 
</summary>
            <remarks>
Valid values are in the range 0 to 65,535. Zero signifies no motor use; 65,535 signifies 100% motor use.
</remarks>
        </member>
        <member name="P:SlimDX.XInput.Vibration.LeftMotorSpeed">
            <summary>
Gets or sets the left motor speed. 
</summary>
            <remarks>
Valid values are in the range 0 to 65,535. Zero signifies no motor use; 65,535 signifies 100% motor use.
</remarks>
        </member>
        <member name="T:SlimDX.XInput.Vibration">
            <summary>
Specifies motor speed levels for the vibration function of a controller.
</summary>
            <remarks>
The left motor is the low-frequency rumble motor. The right motor is the high-frequency rumble motor. 
The two motors are not the same, and they create different vibration effects.
</remarks>
        </member>
        <member name="P:SlimDX.XInput.State.PacketNumber">
            <summary>
Gets the state packet number.
</summary>
            <remarks>
The packet number indicates whether there have been any changes in the state of the controller. If the value
does not change in sequentially returned State structures, the controller state has not changed. 
</remarks>
        </member>
        <member name="P:SlimDX.XInput.Keystroke.HidCode">
            <summary>
HID code corresponding to the input. If there is no corresponding HID code, this value is zero.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Keystroke.UserIndex">
            <summary>
Index of the signed-in gamer associated with the device. Can be a value in the range 0–3.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Keystroke.Flags">
            <summary>
Combination of flags that indicate the keyboard state at the time of the input event.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Keystroke.VirtualKey">
            <summary>
Virtual-key code of the key, button, or stick movement.
</summary>
        </member>
        <member name="F:SlimDX.XInput.Gamepad.GamepadTriggerThreshold">
            <summary>
This constantmay be used as the value which LeftTrigger and RightTrigger must be greater than to register as pressed.
</summary>
        </member>
        <member name="F:SlimDX.XInput.Gamepad.GamepadRightThumbDeadZone">
            <summary>
Can be used as a positive and negative value to filter the right thumbstick input.
</summary>
        </member>
        <member name="F:SlimDX.XInput.Gamepad.GamepadLeftThumbDeadZone">
            <summary>
Can be used as a positive and negative value to filter the left thumbstick input.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Gamepad.RightThumbY">
            <summary>
Right thumbstick y-axis value. The value is between -32768 and 32767.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Gamepad.RightThumbX">
            <summary>
Right thumbstick x-axis value. The value is between -32768 and 32767.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Gamepad.LeftThumbY">
            <summary>
Left thumbstick y-axis value. The value is between -32768 and 32767.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Gamepad.LeftThumbX">
            <summary>
Right thumbstick y-axis value. The value is between -32768 and 32767.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Gamepad.RightTrigger">
            <summary>
The current value of the right trigger analog control. The value is between 0 and 255.
</summary>
        </member>
        <member name="P:SlimDX.XInput.Gamepad.LeftTrigger">
            <summary>
The current value of the left trigger analog control. The value is between 0 and 255.
</summary>
        </member>
        <member name="T:SlimDX.XInput.Gamepad">
            <summary>
Describes the current state of the Xbox 360 Controller.
</summary>
            <remarks>
Each of the thumbstick axis members is a signed value between -32768 and 32767 describing the position of the thumbstick.
A value of 0 is centered. Negative values signify down or to the left. Positive values signify up or to the right.
The constants GamepadLeftThumbDeadZone or GamepadRightThumbDeadZone can be used as a positive and negative value to filter a
thumbstick input.
</remarks>
        </member>
        <member name="T:SlimDX.XInput.DeviceSubtype">
            <summary>
Values specifying controller subtype.
</summary>
        </member>
        <member name="T:SlimDX.XInput.DeviceType">
            <summary>
Vales specifying controller type.
</summary>
        </member>
        <member name="F:SlimDX.XInput.DeviceType.Gamepad">
            <summary>
The device is a game controller.
</summary>
        </member>
        <member name="F:SlimDX.XInput.CapabilityFlags.VoiceSupported">
            <summary>
The device has an integrated voice device.
</summary>
        </member>
        <member name="T:SlimDX.XInput.BatteryLevel">
            <summary>
Values indicating the amount of charge remaining in a battery.
</summary>
            <remarks>
These are only valid for wireless, connected devices, with known battery types. The amount of use time remaining depends on the type of device.
</remarks>
        </member>
        <member name="M:SlimDX.DXGI.Output.WaitForVerticalBlank">
            <summary>
Halts the current thread until a vertical blank occurs.
</summary>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Output.ReleaseOwnership">
            <summary>
Release ownership of an output.
</summary>
        </member>
        <member name="M:SlimDX.DXGI.Output.TakeOwnership(SlimDX.ComObject,System.Boolean)">
            <summary>
Take ownership of an output.
</summary>
            <param name="device">The device interface.</param>
            <param name="exclusive">If true, ownership is exclusive.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Output.CopyDisplaySurfaceTo(SlimDX.DXGI.Surface)">
            <summary>
Copies the display surface content to the specified destination surface.
</summary>
            <param name="surface">The destination surface.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Output.SetDisplaySurface(SlimDX.DXGI.Surface)">
            <summary>
Changes the current display surface to the specified surface.
</summary>
            <param name="surface">The new display surface.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Output.SetGammaControl(SlimDX.DXGI.GammaControl)">
            <summary>
Sets gamma control information.
</summary>
            <param name="control">The gamma control information.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Output.GetClosestMatchingMode(SlimDX.ComObject,SlimDX.DXGI.ModeDescription,SlimDX.DXGI.ModeDescription@)">
            <summary>
Gets the display mode that best matches the requested mode.
</summary>
            <param name="device">The device interface. If this parameter is null, only
modes whose format matches the specified mode will be returned; otherwise, only those
formats that are supported for scan-out by the device are returned.</param>
            <param name="modeToMatch">The description of the display mode to match.</param>
            <param name="result">Receives the best-matching display mode.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Output.GetDisplayModeList(SlimDX.DXGI.Format,SlimDX.DXGI.DisplayModeEnumerationFlags)">
            <summary>
Gets a list of display modes matching certain specifications.
</summary>
            <param name="format">The display mode color format.</param>
            <param name="flags">Flags indicating how the display mode scanline order and scaling.</param>
            <returns>A list of matching display mode descriptions. The list is null if an error occured.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Output.FromPointer(System.IntPtr)">
            <summary>
Constructs an Output from an unmanaged pointer.
</summary>
            <param name="pointer">The unmanaged IDXGIOutput pointer.</param>
        </member>
        <member name="P:SlimDX.DXGI.Output.GammaControlCapabilities">
            <summary>
Gets a description of the output's gamma-control capabilities.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.Output.FrameStatistics">
            <summary>
Gets statistics about recent frames.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.Output.Description">
            <summary>
Gets the output's description.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.Output">
            <summary>
Represents the output of an adapter (such as a monitor).
</summary>
        </member>
        <member name="P:SlimDX.DXGI.AdapterDescription.Luid">
            <summary>
Gets the adapter's unique identifier.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.AdapterDescription.SharedSystemMemory">
            <summary>
Gets the number of bytes of system memory shared with the CPU.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.AdapterDescription.DedicatedSystemMemory">
            <summary>
Gets the number of bytes of system memory not shared with the CPU.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.AdapterDescription.DedicatedVideoMemory">
            <summary>
Gets the number of bytes of video memory not shared with the CPU.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.AdapterDescription.Revision">
            <summary>
Gets the adapter's revision number.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.AdapterDescription.SubsystemId">
            <summary>
Gets the adapter's subsystem ID.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.AdapterDescription.DeviceId">
            <summary>
Gets the adapter's device ID.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.AdapterDescription.VendorId">
            <summary>
Gets the adapter's vendor ID.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.AdapterDescription.Description">
            <summary>
Gets the adapter's description.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.AdapterDescription">
            <summary>
Describes various properties of an Adapter.
</summary>
        </member>
        <member name="M:SlimDX.DXGI.Adapter.IsInterfaceSupported(System.Type,System.Int64@)">
            <summary>
Determines if a device interface for a graphics component is supported by the adapter.
</summary>
            <param name="type">The device interface type.</param>
            <param name="userModeVersion">Receives the user-mode driver version of the interface.</param>
            <returns>True if the device interface is supported, false otherwise.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Adapter.IsInterfaceSupported(System.Type)">
            <summary>
Determines if a device interface for a graphics component is supported by the adapter.
</summary>
            <param name="type">The device interface type.</param>
            <returns>True if the device interface is supported, false otherwise.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Adapter.GetOutput(System.Int32)">
            <summary>
Gets the specified output.
</summary>
            <returns>The desired output, or null on failure.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Adapter.GetOutputCount">
            <summary>
Gets the number of outputs on the adapter.
</summary>
            <returns>The number of outputs on the adapter.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Adapter.FromPointer(System.IntPtr)">
            <summary>
Constructs an Adapter from an unmanaged pointer.
</summary>
            <param name="pointer">The unmanaged IDXGIAdapter pointer.</param>
        </member>
        <member name="P:SlimDX.DXGI.Adapter.Description">
            <summary>
Gets the adapter's description.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.Adapter">
            <summary>
A display subsystem (one or more GPUs, DACs, and video memory).
</summary>
        </member>
        <member name="M:SlimDX.DXGI.DXGIException.#ctor(SlimDX.Result)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="result">The result code that caused this exception.</param>
        </member>
        <member name="M:SlimDX.DXGI.DXGIException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
            <param name="innerException">The exception that caused this exception.</param>
        </member>
        <member name="M:SlimDX.DXGI.DXGIException.#ctor(System.String)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
        </member>
        <member name="M:SlimDX.DXGI.DXGIException.#ctor">
            <summary>
Constructs a new exception object.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.DXGIException">
            <summary>
Represents errors that occur in the DXGI subsystem.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DirectInputNotFoundException">
            <summary>
An exception indicating that the appropriate DirectInput runtime could not be found or initialized.
</summary>
        </member>
        <member name="P:SlimDX.Color3.Blue">
            <summary>
Gets or sets the color's blue component.
</summary>
        </member>
        <member name="P:SlimDX.Color3.Green">
            <summary>
Gets or sets the color's green component.
</summary>
        </member>
        <member name="P:SlimDX.Color3.Red">
            <summary>
Gets or sets the color's red component.
</summary>
        </member>
        <member name="T:SlimDX.Color3">
            <summary>
A three-component (RGB) color value; each component is a float in the range [0,1].
</summary>
        </member>
        <member name="M:SlimDX.Plane.Equals(SlimDX.Plane@,SlimDX.Plane@)">
            <summary>
Determines whether the specified Object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>objA.Equals(objB)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimDX.Plane.Equals(SlimDX.Plane)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Plane.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Plane.GetHashCode">
            <summary>
Gets the hash code of the plane object. 
</summary>
            <returns>Hash code of the plane object.</returns>
        </member>
        <member name="M:SlimDX.Plane.ToString">
            <summary>
Retrieves a string representation of the current object. 
</summary>
            <returns>A string that represents the object.</returns>
        </member>
        <member name="M:SlimDX.Plane.op_Inequality(SlimDX.Plane,SlimDX.Plane)">
            <summary>
Tests planes for inequality. 
</summary>
            <param name="left">The first source plane.</param>
            <param name="right">The second source plane.</param>
            <returns>
                <c>true</c> if the planes are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Plane.op_Equality(SlimDX.Plane,SlimDX.Plane)">
            <summary>
Tests planes for equality. 
</summary>
            <param name="left">The first source plane.</param>
            <param name="right">The second source plane.</param>
            <returns>
                <c>true</c> if the planes are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Plane.op_Multiply(System.Single,SlimDX.Plane)">
            <summary>
Scales the plane by the given scaling factor.
</summary>
            <param name="plane">The source plane.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SlimDX.Plane.op_Multiply(SlimDX.Plane,System.Single)">
            <summary>
Scales the plane by the given scaling factor.
</summary>
            <param name="plane">The source plane.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SlimDX.Plane.Intersects(SlimDX.Plane,SlimDX.Vector3,SlimDX.Vector3,SlimDX.Vector3@)">
            <summary>
Finds the intersection between a plane and a line.
</summary>
            <param name="plane">The source plane.</param>
            <param name="start">The start point of the line.</param>
            <param name="end">The end point of the line.</param>
            <param name="intersectPoint">If an intersection is found, contains the intersection point between the line and the plane.</param>
            <returns>
                <c>true</c> if an intersection is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Plane.Transform(SlimDX.Plane[],SlimDX.Quaternion@)">
            <summary>
Transforms an array of normalized planes by a quaternion rotation.
</summary>
            <param name="planes">The normalized source planes.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed planes.</returns>
        </member>
        <member name="M:SlimDX.Plane.Transform(SlimDX.Plane@,SlimDX.Quaternion@,SlimDX.Plane@)">
            <summary>
Transforms a normalized plane by a quaternion rotation.
</summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:SlimDX.Plane.Transform(SlimDX.Plane,SlimDX.Quaternion)">
            <summary>
Transforms a normalized plane by a quaternion rotation.
</summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:SlimDX.Plane.Transform(SlimDX.Plane[],SlimDX.Matrix@)">
            <summary>
Transforms an array of normalized planes by a matrix.
</summary>
            <param name="planes">The normalized source planes.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>The transformed planes.</returns>
        </member>
        <member name="M:SlimDX.Plane.Transform(SlimDX.Plane@,SlimDX.Matrix@,SlimDX.Plane@)">
            <summary>
Transforms a normalized plane by a matrix.
</summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:SlimDX.Plane.Transform(SlimDX.Plane,SlimDX.Matrix)">
            <summary>
Transforms a normalized plane by a matrix.
</summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:SlimDX.Plane.Normalize(SlimDX.Plane@,SlimDX.Plane@)">
            <summary>
Changes the coefficients of the normal vector of the plane to make it of unit length.
</summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:SlimDX.Plane.Normalize(SlimDX.Plane)">
            <summary>
Changes the coefficients of the normal vector of the plane to make it of unit length.
</summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:SlimDX.Plane.Normalize">
            <summary>
Changes the coefficients of the normal vector of the plane to make it of unit length.
</summary>
        </member>
        <member name="M:SlimDX.Plane.DotNormal(SlimDX.Plane,SlimDX.Vector3)">
            <summary>
Calculates the dot product of the specified vector and the normal of the plane.
</summary>
            <param name="plane">The source plane.</param>
            <param name="point">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:SlimDX.Plane.DotCoordinate(SlimDX.Plane,SlimDX.Vector3)">
            <summary>
Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
</summary>
            <param name="plane">The source plane.</param>
            <param name="point">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:SlimDX.Plane.Dot(SlimDX.Plane,SlimDX.Vector4)">
            <summary>
Calculates the dot product of the specified vector and plane.
</summary>
            <param name="plane">The source plane.</param>
            <param name="point">The source vector.</param>
            <returns>The dot product of the specified vector and plane.</returns>
        </member>
        <member name="M:SlimDX.Plane.#ctor(SlimDX.Vector4)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Plane" /> class.
</summary>
            <param name="value">
A vector with the X, Y, and Z components defining the normal to the plane.
The W component defines the distance of the plane along its normal from the origin.
</param>
        </member>
        <member name="M:SlimDX.Plane.#ctor(SlimDX.Vector3,SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Plane" /> class.
</summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:SlimDX.Plane.#ctor(SlimDX.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Plane" /> class.
</summary>
            <param name="normal">The normal vector to the plane.</param>
            <param name="d">Distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:SlimDX.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Plane" /> class.
</summary>
            <param name="a">X component of the normal defining the plane.</param>
            <param name="b">Y component of the normal defining the plane.</param>
            <param name="c">Z component of the normal defining the plane.</param>
            <param name="d">Distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:SlimDX.Direct3D10.Debug.ValidatePipelineState">
            <summary>
Validates the current pipeline state.
</summary>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.Direct3D10.Debug.#ctor(SlimDX.Direct3D10.Device)">
            <summary>
Constructs a new Debug interface.
</summary>
            <param name="device">The Device with which the Debug interface is to be associated.</param>
        </member>
        <member name="P:SlimDX.Direct3D10.Debug.SwapChain">
            <summary>
Gets or sets the swap chain the runtime will use for automatic presentation.
</summary>
        </member>
        <member name="P:SlimDX.Direct3D10.Debug.PresentDelay">
            <summary>
Gets or sets the number of milliseconds to delay after a swap chain is presented.
</summary>
        </member>
        <member name="P:SlimDX.Direct3D10.Debug.FeatureFlags">
            <summary>
Gets or sets the flags indicating which debug features are enabled.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D10.Debug">
            <summary>
An interface for controlling debug state and validating pipeline settings.
</summary>
        </member>
        <member name="M:SlimDX.DXGI.SwapChain.Present(System.Int32,SlimDX.DXGI.PresentFlags)">
            <summary>
Presents a rendered image to the attached output.
</summary>
            <param name="syncInterval">Specified how to synchronize the presentation with the vertical blank interrupt. 0
indicates that presentation should occur immediately, without synchronization. Any other value indicates that
presentation should be synchonized with the specified next vertical blank.</param>
            <param name="flags">Flags controlling presentation behavior.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.SwapChain.ResizeTarget(SlimDX.DXGI.ModeDescription)">
            <summary>
Changes the output target's size.
</summary>
            <param name="description">Properties of the new output display mode.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SlimDX.DXGI.Format,SlimDX.DXGI.SwapChainFlags)">
            <summary>
Changes the swap chain's back buffer size, format, and count.
</summary>
            <param name="count">The new back buffer count.</param>
            <param name="width">The new back buffer width.</param>
            <param name="height">The new back buffer height.</param>
            <param name="format">The new back buffer format.</param>
            <param name="flags">Flags controlling swap chain functionality.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.SwapChain.SetFullScreenState(System.Boolean,SlimDX.DXGI.Output)">
            <summary>
Sets the full screen state.
</summary>
            <param name="isFullScreen">Set to true for full screen mode, false for windowed mode.</param>
            <param name="target">If the current display mode is full screen, this parameter must be the
output containing the swap chain; otherwise, this parameter is ignored. If you set this parameter
to null, DXGI will choose the output based on the swap-chain's device and the output window's placement.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.SwapChain.GetFullScreenState(System.Boolean@,SlimDX.DXGI.Output@)">
            <summary>
Gets the full screen state.
</summary>
            <param name="isFullScreen">Receives a value indicating if the swap chain is running in full screen mode.</param>
            <param name="target">Receives the full screen ouput if the swap chain is in full screen mode. Otherwise ignored.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.SwapChain.GetBuffer``1(System.Int32)">
            <summary>
Gets a swap chain back buffer.
</summary>
            <param name="buffer">The index of the desired buffer.</param>
            <returns>The buffer interface, or null on failure.</returns>
        </member>
        <member name="M:SlimDX.DXGI.SwapChain.#ctor(SlimDX.DXGI.Factory,SlimDX.ComObject,SlimDX.DXGI.SwapChainDescription)">
            <summary>
Constructs a SwapChain.
</summary>
            <param name="factory">The factory used to create the swap chain.</param>
            <param name="device">The device used to present images to the swap chain.</param>
            <param name="description">Swap chain properties.</param>
        </member>
        <member name="M:SlimDX.DXGI.SwapChain.FromPointer(System.IntPtr)">
            <summary>
Constructs a SwapChain from an unmanaged pointer.
</summary>
            <param name="pointer">The unmanaged IDXGISwapChain pointer.</param>
        </member>
        <member name="P:SlimDX.DXGI.SwapChain.ContainingOutput">
            <summary>
Gets the output containing the swap chain target.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChain.PresentCount">
            <summary>
Gets the number of times this swap chain's Present method has been called.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChain.FrameStatistics">
            <summary>
Gets statistics about recent frames.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SwapChain.Description">
            <summary>
Gets the swap chain's description.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.SwapChain">
            <summary>
Holds one or more surfaces that store rendered data prior to presenting
that data to an output.
</summary>
        </member>
        <member name="M:SlimDX.DXGI.Factory.SetWindowAssociation(System.IntPtr,SlimDX.DXGI.WindowAssociationFlags)">
            <summary>
Sets the window handle associated with the factory (the window through which the user signals fullscreen
transitions).
</summary>
            <param name="handle">The window handle.</param>
            <param name="flags">Flags controlling window association behavior.</param>
            <returns>A Result code.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Factory.GetWindowAssociation">
            <summary>
Gets the window handle associated with the factory (the window through which the user signals fullscreen
transitions).
</summary>
            <returns>The window handle.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Factory.CreateSoftwareAdapter(System.Reflection.Module)">
            <summary>
Creates a software adapater interface.
</summary>
            <param name="module">The module for the software adapter DLL.</param>
            <returns>The specified adapter, or null on failure.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Factory.CreateSoftwareAdapter(System.IntPtr)">
            <summary>
Creates a software adapater interface.
</summary>
            <param name="module">The unmanaged HMODULE for the software adapter DLL.</param>
            <returns>The specified adapter, or null on failure.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Factory.GetAdapter(System.Int32)">
            <summary>
Gets the specified adapter.
</summary>
            <param name="index">The index of the desired adapter.</param>
            <returns>The specified adapter, or null on failure.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Factory.GetAdapterCount">
            <summary>
Gets the number of available adapters.
</summary>
            <returns>The number of available adapters.</returns>
        </member>
        <member name="M:SlimDX.DXGI.Factory.FromPointer(System.IntPtr)">
            <summary>
Constructs a Factory from an unmanaged pointer.
</summary>
            <param name="pointer">The unmanaged IDXGIFactory pointer.</param>
        </member>
        <member name="M:SlimDX.DXGI.Factory.#ctor">
            <summary>
Constructs a new Factory.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.Factory">
            <summary>
Provides access to connected adapters and window associations. A Factory
is also required to create most DXGI objects.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.DeviceChild.Device">
            <summary>
Gets the device the object is bound to.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.DeviceChild">
            <summary>
An object that is bound to a Device.
</summary>
        </member>
        <member name="M:SlimDX.Direct3D9.Texture.Fill(SlimDX.Direct3D9.Fill2DCallback)">
            <summary>
Uses a user-provided function to fill each texel of each mip level of a given texture.
</summary>
            <param name="callback">A function that uses the signature of the Fill2DCallback delegate.</param>
            <summary>
Uses a user-provided function to fill each texel of each mip level of a given texture.
</summary>
            <param name="callback">A function that uses the signature of the Fill2DCallback delegate.</param>
        </member>
        <member name="M:SlimDX.Direct3D9.Texture.CheckRequirements(SlimDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,SlimDX.Direct3D9.Usage,SlimDX.Direct3D9.Format,SlimDX.Direct3D9.Pool)">
            <summary>
Checks texture-creation parameters.
</summary>
            <param name="device">Device associated with the texture.</param>
            <param name="width">Requested width of the texture.</param>
            <param name="height">Requested height of the texture.</param>
            <param name="mipLevelCount">Requested number of mip-map levels for the texture.</param>
            <param name="usage">Usage.None or Usage.RenderTarget.</param>
            <param name="format">Requested format for the texture.</param>
            <param name="pool">Memory class where the resource will be placed.</param>
            <returns>A value type containing the proposed values to pass to the texture creation functions.</returns>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.TorqueZ">
            <summary>
Gets the Z-axis torque.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.TorqueY">
            <summary>
Gets the Y-axis torque.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.TorqueX">
            <summary>
Gets the X-axis torque.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.ForceZ">
            <summary>
Gets the Z-axis force.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.ForceY">
            <summary>
Gets the Y-axis force.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.ForceX">
            <summary>
Gets the X-axis force.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.AngularAccelerationZ">
            <summary>
Gets the Z-axis angular acceleration.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.AngularAccelerationY">
            <summary>
Gets the Y-axis angular acceleration.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.AngularAccelerationX">
            <summary>
Gets the X-axis angular acceleration.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.AccelerationZ">
            <summary>
Gets the Z-axis acceleration.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.AccelerationY">
            <summary>
Gets the Y-axis acceleration.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.AccelerationX">
            <summary>
Gets the X-axis acceleration.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.AngularVelocityZ">
            <summary>
Gets the Z-axis angular velocity.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.AngularVelocityY">
            <summary>
Gets the Y-axis angular velocity.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.AngularVelocityX">
            <summary>
Gets the X-axis angular velocity.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.VelocityZ">
            <summary>
Gets the Z-axis velocity.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.VelocityY">
            <summary>
Gets the Y-axis velocity.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.VelocityX">
            <summary>
Gets the X-axis velocity.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.RotationZ">
            <summary>
Gets the Z-axis rotation.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.RotationY">
            <summary>
Gets the Y-axis rotation.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.RotationX">
            <summary>
Gets the X-axis rotation.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.Z">
            <summary>
Gets the Z-axis, often the throttle control.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.Y">
            <summary>
Gets the Y-axis, usually the forward-backward movement of a stick.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.JoystickState.X">
            <summary>
Gets the X-axis, usually the left-right movement of a stick.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.JoystickState.GetButtons">
            <summary>
Gets the state of each button on the joystick.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.JoystickState.GetForceSliders">
            <summary>
Gets the force of each slider on the joystick.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.JoystickState.GetAccelerationSliders">
            <summary>
Gets the acceleration of each slider on the joystick.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.JoystickState.GetVelocitySliders">
            <summary>
Gets the velocity of each slider on the joystick.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.JoystickState.GetSliders">
            <summary>
Gets the position of each slider on the joystick.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.JoystickState.GetPointOfViewControllers">
            <summary>
Gets the state of each point-of-view controller on the joystick.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.JoystickState">
            <summary>
Describes the state of a joystick device.
</summary>
        </member>
        <member name="M:SlimDX.Direct3D9.ImageInformation.FromStream(System.IO.Stream)">
            <summary>
Function to extract image information from a stream.
</summary>
            <param name="stream">Stream containing the image.</param>
            <returns>Information about the image.</returns>
            <summary>
Function to extract image information from a stream.
</summary>
            <param name="stream">Stream containing the image.</param>
            <returns>Information about the image.</returns>
        </member>
        <member name="M:SlimDX.Direct3D9.ImageInformation.FromStream(System.IO.Stream,System.Boolean)">
            <summary>
Function to extract image information from a stream.
</summary>
            <param name="stream">Stream containing the image.</param>
            <param name="peek">TRUE to preserve the stream position, FALSE will move the stream pointer.</param>
            <returns>Information about the image.</returns>
            <summary>
Function to extract image information from a stream.
</summary>
            <param name="stream">Stream containing the image.</param>
            <param name="peek">TRUE to preserve the stream position, FALSE will move the stream pointer.</param>
            <returns>Information about the image.</returns>
        </member>
        <member name="T:SlimDX.Direct3D9.Fill2DCallback">
            <summary>
Callback function used by FillTexture.
</summary>
            <param name="coordinate">Texture coordinate being sampled.</param>
            <param name="texelSize">Dimensions of the texel.</param>
            <returns>A 4 dimensional vector, representing a color value.  X maps to R, G to Y, etc...</returns>
        </member>
        <member name="P:SlimDX.DataBox.Data">
            <summary>
Gets the DataStream containing the actual data bytes.
</summary>
        </member>
        <member name="P:SlimDX.DataBox.SlicePitch">
            <summary>
Gets the number of bytes of data between two consecutive (2D) slices of data.
</summary>
        </member>
        <member name="P:SlimDX.DataBox.RowPitch">
            <summary>
Gets the number of bytes of data between two consecutive (1D) rows of data.
</summary>
        </member>
        <member name="T:SlimDX.DataBox">
            <summary>
A DataBox provides supporting information for a DataStream whose
data is organized within three dimensions (a box).
</summary>
        </member>
        <member name="M:SlimDX.Direct3D9.IResettable.OnResetDevice">
            <summary>Should be called when the Direct3D device has been reset.</summary>
        </member>
        <member name="M:SlimDX.Direct3D9.IResettable.OnLostDevice">
            <summary>Should be called when the Direct3D device has been lost.</summary>
        </member>
        <member name="T:SlimDX.Direct3D9.IResettable">
            <summary>Interface for classes which can respond to device lost and reset events.</summary>
        </member>
        <member name="P:SlimDX.DataRectangle.Data">
            <summary>
Gets the DataStream containing the actual data bytes.
</summary>
        </member>
        <member name="P:SlimDX.DataRectangle.Pitch">
            <summary>
Gets the number of bytes of data between two consecutive (1D) rows of data.
</summary>
        </member>
        <member name="T:SlimDX.DataRectangle">
            <summary>
A DataRectangle provides supporting information for a DataStream whose
data is organized within two dimensions (a rectangle).
</summary>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3DX9NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
            <param name="innerException">The exception that caused this exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3DX9NotFoundException.#ctor(System.String)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3DX9NotFoundException.#ctor">
            <summary>
Constructs a new exception object.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D9.Direct3DX9NotFoundException">
            <summary>
An exception indicating that the appropriate Direct3DX 9 runtime could not be found or initialized.
</summary>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3D9NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
            <param name="innerException">The exception that caused this exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3D9NotFoundException.#ctor(System.String)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3D9NotFoundException.#ctor">
            <summary>
Constructs a new exception object.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D9.Direct3D9NotFoundException">
            <summary>
An exception indicating that the appropriate Direct3D 9 runtime could not be found or initialized.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D10.SpriteInstance">
            <summary>
Describes instance data for a single sprite rendered by the
<see cref="T:SlimDX.Direct3D10.Sprite" /> interface.
</summary>
            <unmanaged>D3DX10_SPRITE</unmanaged>
        </member>
        <member name="T:SlimDX.DirectInput.KeyboardState">
            <summary>
Describes the state of a keyboard device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Device`1.DeviceInformation">
            <summary>
Obtains information about the device's identity.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Device`1.Caps">
            <summary>
Gets the capabilities of the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Device`1.Properties">
            <summary>
Gets a set of properties that control the behavior of the device.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.Poll">
            <summary>
Retrieves data from polled objects on a DirectInput device.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.GetBufferedData">
            <summary>
Retrieves buffered data from the device.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.GetCurrentState(`0@)">
            <summary>
Retrieves the current device state.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.GetCurrentState">
            <summary>
Retrieves the current device state.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.RunControlPanel(System.Windows.Forms.Control)">
            <summary>
Runs the DirectInput control panel associated with this device. If the
device does not have a control panel associated with it, the default
device control panel is launched.
</summary>
            <param name="parent">The parent control.</param>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.RunControlPanel">
            <summary>
Runs the DirectInput control panel associated with this device. If the
device does not have a control panel associated with it, the default
device control panel is launched.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.SetCooperativeLevel(System.Windows.Forms.Control,SlimDX.DirectInput.CooperativeLevel)">
            <summary>
Sets the device's cooperative level.
</summary>
            <param name="control">A control to associate with the device.</param>
            <param name="flags">Flags that describe the cooperative level of the device.</param>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.SetCooperativeLevel(System.IntPtr,SlimDX.DirectInput.CooperativeLevel)">
            <summary>
Sets the device's cooperative level.
</summary>
            <param name="handle">A handle of a window to associate with the device.</param>
            <param name="flags">Flags that describe the cooperative level of the device.</param>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.Unacquire">
            <summary>
Releases access to the device.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.Acquire">
            <summary>
Obtains access to the input device.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.FromPointer(System.IntPtr)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.DirectInput.Device`1" /> class.
</summary>
            <param name="pointer">A pointer to a previously created DirectInput device.</param>
        </member>
        <member name="M:SlimDX.DirectInput.Device`1.#ctor(System.Guid)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.DirectInput.Device`1" /> class.
</summary>
            <param name="subsystem">The subsystem identifier.</param>
        </member>
        <member name="T:SlimDX.DirectInput.Device`1">
            <summary>
Used to gain and release access to Microsoft DirectInput devices, manage device
properties and information, set behavior, perform initialization, create and
play force-feedback effects, and open a device's control panel.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.ObjectProperties.PhysicalRange">
            <summary>
Gets the range of data returned from axis as suggested by the manufacturer.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.ObjectProperties.LogicalRange">
            <summary>
Gets the range of raw data returned from the object.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.ObjectProperties.Saturation">
            <summary>
Gets or sets the saturation zone of the object.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.ObjectProperties.LowerRange">
            <summary>
Gets the lower range of values that the object can possibly report.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.ObjectProperties.UpperRange">
            <summary>
Gets the upper range of values that the object can possibly report.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.ObjectProperties.Granularity">
            <summary>
Gets the granularity of the object.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.ObjectProperties.DeadZone">
            <summary>
Gets or sets the dead zone for the object.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.ObjectProperties.ApplicationData">
            <summary>
Gets or sets an application-defined value associated with the object.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.ObjectProperties.SetRange(System.Int32,System.Int32)">
            <summary>
Sets the object's data range.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.ObjectProperties">
            <summary>
Contains properties that define object behavior.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.BufferedData`1.Sequence">
            <summary>
Gets the DirectInput sequence number for the event. All input events are assigned an increasing
sequence number.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.BufferedData`1.TimeStamp">
            <summary>
Gets the system time at which the input event was generated, in milliseconds. This value
wraps around approximately every 50 days.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.BufferedData`1.Data">
            <summary>
Gets or sets the data obtained from or sent to the device. For axis input, the data reflects
the absolute or relative mode of the object.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.BufferedData`1.#ctor(`0)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.DirectInput.BufferedData`1" /> class.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.BufferedData`1.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.DirectInput.BufferedData`1" /> class.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.BufferedData`1">
            <summary>
Contains buffered device information.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.HumanInterfaceDevice">
            <summary>
Gets a value indicating whether the device is a Human Interface Device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.HardwareRevision">
            <summary>
Gets the hardware revision number.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.FirmwareRevision">
            <summary>
Gets the firmware revision number.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.DriverVersion">
            <summary>
Gets the driver version number.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.ForceFeedbackMinimumTimeResolution">
            <summary>
Gets the minimum time, in microseconds, that the device can resolve. The device
rounds any times to the nearest supported increment.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.ForceFeedbackSamplePeriod">
            <summary>
Gets the minimum time between playback of consecutive raw force commands, in microseconds.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.PovCount">
            <summary>
Gets the number of Point-Of-View controllers available on the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.ButtonCount">
            <summary>
Gets the number of buttons available on the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.AxesCount">
            <summary>
Gets the number of axes available on the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.Subtype">
            <summary>
Gets the device sub-type specifier.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.Type">
            <summary>
Gets the device type specifier.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.Capabilities.Flags">
            <summary>
Gets the flags associated with the device.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.Capabilities">
            <summary>
Describes a DirectInput device's capabilities.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DataObjectAttribute.Flags">
            <summary>
Gets or sets extra flags for the object data format.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DataObjectAttribute.Type">
            <summary>
Gets or sets the device type that describes the object.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DataObjectAttribute.InstanceNumber">
            <summary>
Gets or sets the object instance number. Setting this value to -1
indicates that any object instance is permissible.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DataObjectAttribute.SourceGuid">
            <summary>
Gets or sets the unique identifier for the axis, button, or other input
source. When requesting a data format, making this member equal to
<see cref="F:System.Guid.Empty" /> indicates that any type of object
is permissible.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DataObjectAttribute.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.DirectInput.DataObjectAttribute" /> class.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DataObjectAttribute">
            <summary>
Indicates that a type is a data format specification for DirectInput.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DataFormatAttribute.Flags">
            <summary>
Gets or sets the flags describing other attributes of the data format.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DataFormatAttribute.#ctor(SlimDX.DirectInput.DataFormatFlag)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.DirectInput.DataFormatAttribute" /> class.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DataFormatAttribute">
            <summary>
Indicates that a type is a data format specification for DirectInput.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DirectInput.FindDevice(System.Guid,System.String)">
            <summary>
Retrieves the instance identifier of a device that
has been newly attached to the system.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DirectInput.IsDeviceAttached(System.Guid)">
            <summary>
Gets a value indicating whether the specified device is
attached to the user's system.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DirectInput.RunControlPanel(System.Windows.Forms.Control)">
            <summary>
Runs Control Panel to enable the user to install a new
input device or modify configurations.
</summary>
            <param name="parent">The parent control.</param>
        </member>
        <member name="M:SlimDX.DirectInput.DirectInput.RunControlPanel">
            <summary>
Runs Control Panel to enable the user to install a new
input device or modify configurations.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DirectInput.Terminate">
            <summary>
Called by the application to release DirectInput and free resources.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DirectInput.Initialize">
            <summary>
Called by the application to initialize DirectInput. This method must be called before
any other DirectInput methods.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DirectInput">
            <summary>
Provides an interface to DirectInput.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.HumanInterfaceDevice">
            <summary>
Gets a value indicating whether the device is a Human Interface Device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.UsagePage">
            <summary>
If the device is a Human Interface Device, this member contains
the HID usage page code.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.Usage">
            <summary>
If the device is a Human Interface Device, this member contains
the HID usage code.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.ProductName">
            <summary>
Gets the friendly name for the product.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.InstanceName">
            <summary>
Gets the friendly name for the instance.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.Subtype">
            <summary>
Gets the secondary device type specifier.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.Type">
            <summary>
Gets the main device type specifier.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.ForceFeedbackDriverGuid">
            <summary>
Gets the unique identifier for the driver being used for force-feedback. The
driver's manufacturer establishes this identifier.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.ProductGuid">
            <summary>
Gets the unique identifier for the product. This identifier is established
by the manufacturer of the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceInstance.InstanceGuid">
            <summary>
Gets the unique identifier for the instance of the device. Instance Guids are
specific to a particular computer.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DeviceInstance">
            <summary>
Contains information about a device's identity.
</summary>
        </member>
        <member name="M:SlimDX.Vector3.Equals(SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Determines whether the specified Object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>objA.Equals(objB)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Equals(SlimDX.Vector3)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector3.GetHashCode">
            <summary>
Gets the hash code of the vector object. 
</summary>
            <returns>Hash code of the vector object.</returns>
        </member>
        <member name="M:SlimDX.Vector3.ToString">
            <summary>
Retrieves a string representation of the current object. 
</summary>
            <returns>A string that represents the object.</returns>
        </member>
        <member name="M:SlimDX.Vector3.op_Inequality(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Tests vectors for inequality. 
</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>
                <c>true</c> if the vectors are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector3.op_Equality(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Tests vectors for equality. 
</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>
                <c>true</c> if the vectors are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimDX.Vector3.op_Division(SlimDX.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector3.op_Multiply(System.Single,SlimDX.Vector3)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector3.op_Multiply(SlimDX.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector3.op_UnaryNegation(SlimDX.Vector3)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimDX.Vector3.op_Subtraction(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.op_Addition(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Maximize(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SlimDX.Vector3.Maximize(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Minimize(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SlimDX.Vector3.Minimize(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Unproject(SlimDX.Vector3@,SlimDX.Viewport@,SlimDX.Matrix@,SlimDX.Matrix@,SlimDX.Matrix@,SlimDX.Vector3@)">
            <summary>
Projects a 3D vector from screen space into object space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="viewport">The viewport representing screen space.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:SlimDX.Vector3.Unproject(SlimDX.Vector3,SlimDX.Viewport,SlimDX.Matrix,SlimDX.Matrix,SlimDX.Matrix)">
            <summary>
Projects a 3D vector from screen space into object space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="viewport">The viewport representing screen space.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Project(SlimDX.Vector3@,SlimDX.Viewport@,SlimDX.Matrix@,SlimDX.Matrix@,SlimDX.Matrix@,SlimDX.Vector3@)">
            <summary>
Projects a 3D vector from object space into screen space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="viewport">The viewport representing screen space.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:SlimDX.Vector3.Project(SlimDX.Vector3,SlimDX.Viewport,SlimDX.Matrix,SlimDX.Matrix,SlimDX.Matrix)">
            <summary>
Projects a 3D vector from object space into screen space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="viewport">The viewport representing screen space.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:SlimDX.Vector3.TransformNormal(SlimDX.Vector3[],SlimDX.Matrix@)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normals">The normal vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed normals.</returns>
        </member>
        <member name="M:SlimDX.Vector3.TransformNormal(SlimDX.Vector3@,SlimDX.Matrix@,SlimDX.Vector3@)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
        </member>
        <member name="M:SlimDX.Vector3.TransformNormal(SlimDX.Vector3,SlimDX.Matrix)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed normal.</returns>
        </member>
        <member name="M:SlimDX.Vector3.TransformCoordinate(SlimDX.Vector3[],SlimDX.Matrix@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinates">The coordinate vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:SlimDX.Vector3.TransformCoordinate(SlimDX.Vector3@,SlimDX.Matrix@,SlimDX.Vector3@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
        </member>
        <member name="M:SlimDX.Vector3.TransformCoordinate(SlimDX.Vector3,SlimDX.Matrix)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Transform(SlimDX.Vector3[],SlimDX.Quaternion@)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vectors">The vectors to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Transform(SlimDX.Vector3@,SlimDX.Quaternion@,SlimDX.Vector4@)">
            <summary>
Transforms a 3D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:SlimDX.Vector3.Transform(SlimDX.Vector3,SlimDX.Quaternion)">
            <summary>
Transforms a 3D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Transform(SlimDX.Vector3[],SlimDX.Matrix@)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectors">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />s.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Transform(SlimDX.Vector3@,SlimDX.Matrix@,SlimDX.Vector4@)">
            <summary>
Transforms a 3D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:SlimDX.Vector3.Transform(SlimDX.Vector3,SlimDX.Matrix)">
            <summary>
Transforms a 3D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Normalize(SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:SlimDX.Vector3.Normalize(SlimDX.Vector3)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Reflect(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SlimDX.Vector3.Reflect(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SlimDX.Vector3.Cross(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Calculates the cross product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Cross(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Calculates the cross product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Dot(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Calculates the dot product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.DistanceSquared(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Calculates the squared distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:SlimDX.Vector3.Distance(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Calculates the distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.SmoothStep(SlimDX.Vector3@,SlimDX.Vector3@,System.Single,SlimDX.Vector3@)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:SlimDX.Vector3.SmoothStep(SlimDX.Vector3,SlimDX.Vector3,System.Single)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Lerp(SlimDX.Vector3@,SlimDX.Vector3@,System.Single,SlimDX.Vector3@)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:SlimDX.Vector3.Lerp(SlimDX.Vector3,SlimDX.Vector3,System.Single)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:SlimDX.Vector3.Hermite(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@,System.Single,SlimDX.Vector3@)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SlimDX.Vector3.Hermite(SlimDX.Vector3,SlimDX.Vector3,SlimDX.Vector3,SlimDX.Vector3,System.Single)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Clamp(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SlimDX.Vector3.Clamp(SlimDX.Vector3,SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SlimDX.Vector3.CatmullRom(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@,System.Single,SlimDX.Vector3@)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SlimDX.Vector3.CatmullRom(SlimDX.Vector3,SlimDX.Vector3,SlimDX.Vector3,SlimDX.Vector3,System.Single)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Barycentric(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@,System.Single,System.Single,SlimDX.Vector3@)">
            <summary>
Returns a <see cref="T:SlimDX.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
</summary>
            <param name="value1">A <see cref="T:SlimDX.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimDX.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimDX.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SlimDX.Vector3.Barycentric(SlimDX.Vector3,SlimDX.Vector3,SlimDX.Vector3,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:SlimDX.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
</summary>
            <param name="value1">A <see cref="T:SlimDX.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimDX.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimDX.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:SlimDX.Vector3" /> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Negate(SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SlimDX.Vector3.Negate(SlimDX.Vector3)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Divide(SlimDX.Vector3@,System.Single,SlimDX.Vector3@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimDX.Vector3.Divide(SlimDX.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Multiply(SlimDX.Vector3@,System.Single,SlimDX.Vector3@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimDX.Vector3.Multiply(SlimDX.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Modulate(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated vector.</param>
        </member>
        <member name="M:SlimDX.Vector3.Modulate(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Subtract(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SlimDX.Vector3.Subtract(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Add(SlimDX.Vector3@,SlimDX.Vector3@,SlimDX.Vector3@)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SlimDX.Vector3.Add(SlimDX.Vector3,SlimDX.Vector3)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Normalize">
            <summary>
Converts the vector into a unit vector.
</summary>
        </member>
        <member name="M:SlimDX.Vector3.LengthSquared">
            <summary>
Calculates the squared length of the vector.
</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:SlimDX.Vector3.Length">
            <summary>
Calculates the length of the vector.
</summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:SlimDX.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Vector3" /> class.
</summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:SlimDX.Vector3.#ctor(SlimDX.Vector2,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Vector3" /> class.
</summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:SlimDX.Vector3.#ctor(System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:SlimDX.Vector3" /> class.
</summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="P:SlimDX.Vector2.UnitY">
            <summary>
Gets the Y unit <see cref="T:SlimDX.Vector2" /> (0, 1).
</summary>
            <value>A <see cref="T:SlimDX.Vector2" /> that has a value of (0, 1).</value>
        </member>
        <member name="P:SlimDX.Vector2.UnitX">
            <summary>
Gets the X unit <see cref="T:SlimDX.Vector2" /> (1, 0).
</summary>
            <value>A <see cref="T:SlimDX.Vector2" /> that has a value of (1, 0).</value>
        </member>
        <member name="P:SlimDX.Vector2.Zero">
            <summary>
Gets a <see cref="T:SlimDX.Vector2" /> with all of its components set to zero.
</summary>
            <value>A <see cref="T:SlimDX.Vector2" /> that has all of its components set to zero.</value>
        </member>
        <member name="P:SlimDX.Vector2.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="P:SlimDX.Vector2.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:SlimDX.Vector2">
            <summary>
Defines a two component vector.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.ObjectGuid">
            <summary>
Contains system-defined identifiers for device objects.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.SystemGuid.Mouse">
            <summary>
Gets the system mouse identifier.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.SystemGuid.Keyboard">
            <summary>
Gets the system keyboard identifier.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.SystemGuid">
            <summary>
Contains system-defined identifiers for DirectInput devices.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.ProductId">
            <summary>
Gets the product identifer.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.VendorId">
            <summary>
Gets the vendor identifier.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.UserName">
            <summary>
Gets the user name for a user currently assigned to the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.TypeName">
            <summary>
Gets the type name of the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.Saturation">
            <summary>
Gets or sets the saturation zone of a joystick device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.LowerRange">
            <summary>
Gets or sets the lower range of values that the device can possibly report.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.UpperRange">
            <summary>
Gets or sets the upper range of values that the device can possibly report.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.ProductName">
            <summary>
Gets or sets the friendly product name of the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.JoystickId">
            <summary>
Gets the instance number of a joystick device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.InstanceName">
            <summary>
Gets or sets the friendly instance name of the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.InterfacePath">
            <summary>
Gets the physical interface path to which the device is connected.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.ClassGuid">
            <summary>
Gets the class identifier for the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.Granularity">
            <summary>
Gets the input granularity for the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.PortDisplayName">
            <summary>
Gets the human-readable display name of the port to which the device is connected.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.MemoryLoad">
            <summary>
Gets the memory load for the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.ForceFeedbackGain">
            <summary>
Gets or sets the gain of the device for force-feedback effects.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.DeadZone">
            <summary>
Gets or sets the dead zone for a joystick device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.BufferSize">
            <summary>
Gets or sets the buffer input size.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.AxisMode">
            <summary>
Gets or sets the axis mode for the device.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.AutoCenter">
            <summary>
Gets or sets a value indicating whether device objects are self centering.
</summary>
        </member>
        <member name="P:SlimDX.DirectInput.DeviceProperties.ApplicationData">
            <summary>
Gets or sets an application-defined value associated with the device.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DeviceProperties.SetRange(System.Int32,System.Int32)">
            <summary>
Sets the data range for the device.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DeviceProperties.GetKeyCode(SlimDX.DirectInput.Key)">
            <summary>
Retrieves the scan code for the specified keyboard key.
</summary>
        </member>
        <member name="M:SlimDX.DirectInput.DeviceProperties.GetKeyName(SlimDX.DirectInput.Key)">
            <summary>
Retrieves the localized key name for the specified keyboard key.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DeviceProperties">
            <summary>
Contains properties that define device behavior. These
properties include input buffer size and axis mode.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.ObjectDeviceType">
            <summary>
Specifies the device type of an object data format.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.VendorDefined">
            <summary>
The object must be a type defined by the manufacturer.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.ToggleButton">
            <summary>
The object must be a toggle button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.PushButton">
            <summary>
The object must be a push button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.PointOfViewController">
            <summary>
The object must be a Point-Of-View controller.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.ForceFeedbackEffectTrigger">
            <summary>
The object must be a valid force-feedback effect trigger.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.ForceFeedbackActuator">
            <summary>
The object must contain a force-feedback actuator.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.Button">
            <summary>
The object must be a toggle or push button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.RelativeAxis">
            <summary>
The object must be a relative axis.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.Axis">
            <summary>
The object must be an absolute or relative axis.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDeviceType.AbsoluteAxis">
            <summary>
The object must be an absolute axis.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.ObjectDataFormatFlags">
            <summary>
Specifies other attributes of an object data format.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDataFormatFlags.Velocity">
            <summary>
The object must report velocity information.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDataFormatFlags.Position">
            <summary>
The object must report position information.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDataFormatFlags.Force">
            <summary>
The object must report force information.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDataFormatFlags.Acceleration">
            <summary>
The object must report acceleration information.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.ObjectDataFormatFlags.None">
            <summary>
No extra flags specified.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.MouseObject">
            <summary>
Defines possible mouse object codes.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.ZAxis">
            <summary>
The Z axis.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.YAxis">
            <summary>
The Y axis.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.XAxis">
            <summary>
The X axis.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.Button8">
            <summary>
The eighth button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.Button7">
            <summary>
The seventh button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.Button6">
            <summary>
The sixth button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.Button5">
            <summary>
The fifth button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.Button4">
            <summary>
The fourth button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.Button3">
            <summary>
The third button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.Button2">
            <summary>
The second button.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.MouseObject.Button1">
            <summary>
The first button.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.Key">
            <summary>
Defines possible keyboard key codes.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Yen">
            <summary>
The Japanese Yen key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.WebStop">
            <summary>
The Web Stop key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.WebSearch">
            <summary>
The Web Search key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.WebRefresh">
            <summary>
The Web Refresh key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.WebHome">
            <summary>
The Web Home key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.WebForward">
            <summary>
The Web Forwards key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.WebFavorites">
            <summary>
The Web Favorites key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.WebBack">
            <summary>
The Web Backwards key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Wake">
            <summary>
The Wake key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.VolumeUp">
            <summary>
The Volume Up key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.VolumeDown">
            <summary>
The Volume Down key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.UpArrow">
            <summary>
The Up Arrow key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Unlabeled">
            <summary>
An unlabeled key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Underline">
            <summary>
The Japanese Underline key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Tab">
            <summary>
The Tab key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.PrintScreen">
            <summary>
The Print Screen key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Stop">
            <summary>
The Stop key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Space">
            <summary>
The Spacebar.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Sleep">
            <summary>
The Sleep key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Slash">
            <summary>
The slash key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Semicolon">
            <summary>
The semicolon key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.ScrollLock">
            <summary>
The Scroll Lock key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.RightWindowsKey">
            <summary>
The right Windows key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.RightShift">
            <summary>
The right Shift key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.RightAlt">
            <summary>
The right Alt key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.RightArrow">
            <summary>
The Right Arrow key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Return">
            <summary>
The Return/Enter key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.RightControl">
            <summary>
The right Ctrl key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.RightBracket">
            <summary>
The right square bracket key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.PreviousTrack">
            <summary>
The Previous Track key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Power">
            <summary>
The Power key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.PlayPause">
            <summary>
The Play/Pause key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Period">
            <summary>
The period key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Pause">
            <summary>
The Pause key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.PageUp">
            <summary>
The Page Up key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.PageDown">
            <summary>
The Page Down key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Oem102">
            <summary>
The British and German OEM102 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPadStar">
            <summary>
The asterisk key on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPadSlash">
            <summary>
The slash key on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPadPlus">
            <summary>
The plus key on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPadPeriod">
            <summary>
The period key on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPadMinus">
            <summary>
The minus key on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPadEquals">
            <summary>
The equals key on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPadEnter">
            <summary>
The Enter key on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPadComma">
            <summary>
The comma key on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad9">
            <summary>
The number 9 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad8">
            <summary>
The number 8 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad7">
            <summary>
The number 7 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad6">
            <summary>
The number 6 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad5">
            <summary>
The number 5 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad4">
            <summary>
The number 4 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad3">
            <summary>
The number 3 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad2">
            <summary>
The number 2 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad1">
            <summary>
The number 1 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberPad0">
            <summary>
The number 0 on the NumberPad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NumberLock">
            <summary>
The NumberLock key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NoConvert">
            <summary>
The Japanese No Convert key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.NextTrack">
            <summary>
The Next Track key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.MyComputer">
            <summary>
The My Computer key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Mute">
            <summary>
The Mute key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Minus">
            <summary>
The minus key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.MediaStop">
            <summary>
The Media Stop key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.MediaSelect">
            <summary>
The Media Select key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Mail">
            <summary>
The Mail key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.LeftWindowsKey">
            <summary>
The left Windows key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.LeftShift">
            <summary>
The left Shift key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.LeftAlt">
            <summary>
The left Alt key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.LeftArrow">
            <summary>
The Left Arrow key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.LeftControl">
            <summary>
The left Ctrl key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.LeftBracket">
            <summary>
The left square bracket key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Kanji">
            <summary>
The Japanese Kanji key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Kana">
            <summary>
The Japanese Kana key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Insert">
            <summary>
The Insert key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Home">
            <summary>
The Home key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Grave">
            <summary>
The grav accent (`) key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F15">
            <summary>
The F15 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F14">
            <summary>
The F14 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F13">
            <summary>
The F13 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F12">
            <summary>
The F12 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F11">
            <summary>
The F11 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F10">
            <summary>
The F10 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F9">
            <summary>
The F9 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F8">
            <summary>
The F8 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F7">
            <summary>
The F7 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F6">
            <summary>
The F6 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F5">
            <summary>
The F5 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F4">
            <summary>
The F4 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F3">
            <summary>
The F3 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F2">
            <summary>
The F2 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F1">
            <summary>
The F1 key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Escape">
            <summary>
The Escape key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Equals">
            <summary>
The equals key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.End">
            <summary>
The End key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.DownArrow">
            <summary>
The Down Arrow key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Delete">
            <summary>
The Delete key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Convert">
            <summary>
The Japanese Convert key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Comma">
            <summary>
The comma key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Colon">
            <summary>
The colon key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.CapsLock">
            <summary>
The Caps Lock key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Calculator">
            <summary>
The calculator key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Backslash">
            <summary>
The back slash key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Backspace">
            <summary>
The Backspace.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.AX">
            <summary>
The Japanese Ax key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.AT">
            <summary>
The Japanese At key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Applications">
            <summary>
The Applications key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Apostrophe">
            <summary>
The apostrophe key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.AbntC2">
            <summary>
The AbntC2 key on Brazillian keyboards.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.AbntC1">
            <summary>
The AbntC1 key on Brazillian keyboards.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Z">
            <summary>
The letter Z.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Y">
            <summary>
The letter Y.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.X">
            <summary>
The letter X.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.W">
            <summary>
The letter W.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.V">
            <summary>
The letter V.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.U">
            <summary>
The letter U.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.T">
            <summary>
The letter T.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.S">
            <summary>
The letter S.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.R">
            <summary>
The letter R.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.Q">
            <summary>
The letter Q.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.P">
            <summary>
The letter P.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.O">
            <summary>
The letter O.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.N">
            <summary>
The letter N.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.M">
            <summary>
The letter M.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.L">
            <summary>
The letter L.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.K">
            <summary>
The letter K.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.J">
            <summary>
The letter J.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.I">
            <summary>
The letter I.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.H">
            <summary>
The letter H.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.G">
            <summary>
The letter G.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.F">
            <summary>
The letter F.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.E">
            <summary>
The letter E.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D">
            <summary>
The letter D.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.C">
            <summary>
The letter C.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.B">
            <summary>
The letter B.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.A">
            <summary>
The letter A.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D9">
            <summary>
The number 9.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D8">
            <summary>
The number 8.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D7">
            <summary>
The number 7.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D6">
            <summary>
The number 6.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D5">
            <summary>
The number 5.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D4">
            <summary>
The number 4.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D3">
            <summary>
The number 3.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D2">
            <summary>
The number 2.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D1">
            <summary>
The number 1.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.Key.D0">
            <summary>
The number 0.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DeviceType">
            <summary>
Specifies the main type of a DirectInput device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.Supplemental">
            <summary>
A specialized device with functionality unsuitable for main control of an application,
such as pedals with a wheel.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.ScreenPointer">
            <summary>
A screen pointer device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.Remote">
            <summary>
A remote-control device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.Mouse">
            <summary>
A mouse or mouse-like device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.Keyboard">
            <summary>
A keyboard or keyboard-like device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.Joystick">
            <summary>
A generic joystick.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.Gamepad">
            <summary>
A console game pad.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.Flight">
            <summary>
Controller for a flight simulation.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.Driving">
            <summary>
A device for steering.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.ControlDevice">
            <summary>
Input device used to control another type of device from within the context of
the application.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.Other">
            <summary>
A device that does not fall into any other category.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceType.FirstPerson">
            <summary>
A first-person action game device.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DeviceFlags">
            <summary>
Specifies the flags that can be associated with a DirectInput device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.StartDelay">
            <summary>
The force-feedback system supports the start delay parameter for at least one effect.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.Saturation">
            <summary>
The force-feedback system supports the saturation of condition effects for at least
one condition.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.PositiveNegativeSaturation">
            <summary>
The force-feedback system supports a maximum saturation for both positive and negative
force output for at least one condition.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.PositiveNegativeCoefficients">
            <summary>
The force-feedback system supports two coefficient values for conditions.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.PolledDevice">
            <summary>
At least one object on the device is polled, rather than interrupt driven.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.PolledDataFormat">
            <summary>
At least one object in the current data format is polled, rather than interrupt driven.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.Phantom">
            <summary>
The device is a placeholder.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.Hidden">
            <summary>
The device is a fictious device created by a device driver so that is can generate
mouse and keyboard events.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.ForceFeedbackAttack">
            <summary>
The force-feedback system supports the attack parameter for at least one effect.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.ForceFeedbackFade">
            <summary>
The force-feedback system supports the fade parameter for at least one effect.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.ForceFeedback">
            <summary>
The device supports force-feedback.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.Emulated">
            <summary>
Specifies that the device's data is coming from a user mode device interface.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.DeadBand">
            <summary>
The device supports deadband for at least one force-feedback condition.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.Attached">
            <summary>
The device is physically attached to the user's computer.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceFlags.Alias">
            <summary>
The device is a duplicate of another DirectInput device.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DeviceDataFormat">
            <summary>
The data format for a DirectInput device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceDataFormat.Joystick">
            <summary>
Joystick data.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceDataFormat.Mouse">
            <summary>
Mouse data.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceDataFormat.Keyboard">
            <summary>
Keyboard data.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DeviceAxisMode">
            <summary>
Specifies the axis mode for the device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceAxisMode.Relative">
            <summary>
The axis works with relative data.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DeviceAxisMode.Absolute">
            <summary>
The axis works with absolute data.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DataFormatFlag">
            <summary>
Specifies other attributes of a data format.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DataFormatFlag.RelativeAxis">
            <summary>
The axes are in relative mode.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.DataFormatFlag.AbsoluteAxis">
            <summary>
The axes are in absolute mode.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.CooperativeLevel">
            <summary>
Specifies the cooperative level for a DirectInput device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.CooperativeLevel.NoWinKey">
            <summary>
Disables the Windows logo key.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.CooperativeLevel.Background">
            <summary>
Background operation of the device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.CooperativeLevel.Foreground">
            <summary>
Foreground operation of the device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.CooperativeLevel.Nonexclusive">
            <summary>
Non exclusive access to the device.
</summary>
        </member>
        <member name="F:SlimDX.DirectInput.CooperativeLevel.Exclusive">
            <summary>
Exclusive access to the device.
</summary>
        </member>
        <member name="T:SlimDX.DirectInput.DirectInputException">
            <summary>
Represents errors that occur in the XInput subsystem.
</summary>
        </member>
        <member name="M:SlimDX.DXGI.SampleDescription.#ctor(System.Int32,System.Int32)">
            <summary>
Constructs a new SampleDescription.
</summary>
            <param name="count">The sample count.</param>
            <param name="quality">The sample quality.</param>
        </member>
        <member name="P:SlimDX.DXGI.SampleDescription.Quality">
            <summary>
Gets or sets the sample quality.
</summary>
        </member>
        <member name="P:SlimDX.DXGI.SampleDescription.Count">
            <summary>
Gets or sets the number of samples per pixel.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.SampleDescription">
            <summary>
Describes multisample parameters.
</summary>
        </member>
        <member name="P:SlimDX.Viewport.MaxZ">
            <summary>
Gets or sets the viewport's maximum Z depth.
</summary>
        </member>
        <member name="P:SlimDX.Viewport.MinZ">
            <summary>
Gets or sets the viewport's minimum Z depth.
</summary>
        </member>
        <member name="P:SlimDX.Viewport.Height">
            <summary>
Gets or sets the viewport's height.
</summary>
        </member>
        <member name="P:SlimDX.Viewport.Width">
            <summary>
Gets or sets the viewport's width.
</summary>
        </member>
        <member name="P:SlimDX.Viewport.Y">
            <summary>
Gets or sets the viewport's Y position.
</summary>
        </member>
        <member name="P:SlimDX.Viewport.X">
            <summary>
Gets or sets the viewport's X position.
</summary>
        </member>
        <member name="T:SlimDX.Viewport">
            <summary>
Defines a rectangular region of a render-target surface onto which 
a 3D rendering is projected.
</summary>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3D.CheckDeviceFormatConversion(System.Int32,SlimDX.Direct3D9.DeviceType,SlimDX.Direct3D9.Format,SlimDX.Direct3D9.Format)">
            <summary>
Tests the device to see if it supports conversion from one display format to another.
</summary>
            <param name="adapter">Index of the adapter to use.</param>
            <param name="deviceType">One of the DeviceType members.</param>
            <param name="sourceFormat">Format to convert from.</param>
            <param name="targetFormat">Format to convert into.</param>
            <returns>TRUE if successful, FALSE if not.</returns>
            <summary>
Tests the device to see if it supports conversion from one display format to another.
</summary>
            <param name="adapter">Index of the adapter to use.</param>
            <param name="deviceType">One of the DeviceType members.</param>
            <param name="sourceFormat">Format to convert from.</param>
            <param name="targetFormat">Format to convert into.</param>
            <returns>TRUE if successful, FALSE if not.</returns>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3D.CheckDeviceFormatConversion(System.Int32,SlimDX.Direct3D9.DeviceType,SlimDX.Direct3D9.Format,SlimDX.Direct3D9.Format,System.Int32@)">
            <summary>
Tests the device to see if it supports conversion from one display format to another.
</summary>
            <param name="adapter">Index of the adapter to use.</param>
            <param name="deviceType">One of the DeviceType members.</param>
            <param name="sourceFormat">Format to convert from.</param>
            <param name="targetFormat">Format to convert into.</param>
            <param name="result">0 if successful.  Otherwise an HRESULT error code for the function.</param>
            <returns>TRUE if successful, FALSE if not.</returns>
            <summary>
Tests the device to see if it supports conversion from one display format to another.
</summary>
            <param name="adapter">Index of the adapter to use.</param>
            <param name="deviceType">One of the DeviceType members.</param>
            <param name="sourceFormat">Format to convert from.</param>
            <param name="targetFormat">Format to convert into.</param>
            <param name="result">0 if successful.  Otherwise an HRESULT error code for the function.</param>
            <returns>TRUE if successful, FALSE if not.</returns>
        </member>
        <member name="P:SlimDX.DataStream.DataPointer">
            <summary>Gets the internal pointer to the current stream's backing store.</summary>
            <value>An IntPtr to the buffer being used as a backing store.</value>
        </member>
        <member name="P:SlimDX.DataStream.Position">
            <summary>Gets or sets the position within the current stream.</summary>
            <value>The current position within the stream.</value>
            <seealso cref="T:System.IO.Stream">Stream Class</seealso>
        </member>
        <member name="P:SlimDX.DataStream.Length">
            <summary>Gets the length in bytes of the stream.</summary>
            <value>A long value representing the length of the stream in bytes.</value>
        </member>
        <member name="P:SlimDX.DataStream.CanWrite">
            <summary>Gets a value indicating whether the current stream supports writing.</summary>
            <value>
                <c>true</c> if the stream supports writing; <c>false</c> otherwise.</value>
        </member>
        <member name="P:SlimDX.DataStream.CanSeek">
            <summary>Gets a value indicating whether the current stream supports seeking.</summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:SlimDX.DataStream.CanRead">
            <summary>Gets a value indicating whether the current stream supports reading.</summary>
            <value>
                <c>true</c> if the stream supports reading; <c>false</c> otherwise.</value>
        </member>
        <member name="M:SlimDX.DataStream.SetLength(System.Int64)">
            <summary>
Not supported.
</summary>
            <param name="value">Always ignored.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:SlimDX.DataStream.Flush">
            <summary>
Not supported.
</summary>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:SlimDX.DataStream.ReadRange``1(System.Int32)">
            <summary>
Reads an array of values from the current stream, and advances the current position
within this stream by the number of bytes written.
</summary>
            <typeparam name="T">The type of the values to be read from the stream.</typeparam>
            <returns>An array of values that was read from the current stream.</returns>
            <exception cref="T:System.NotSupportedException">This stream does not support reading.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is less than zero.</exception>
        </member>
        <member name="M:SlimDX.DataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
Reads a sequence of bytes from the current stream and advances the position
within the stream by the number of bytes read.
</summary>
            <param name="buffer">An array of values to be read from the stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing
the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <exception cref="T:System.NotSupportedException">This stream does not support reading.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer" /> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> or <paramref name="count" /> leads outside the bounds of <paramref name="buffer" />.</exception>
        </member>
        <member name="M:SlimDX.DataStream.Read``1">
            <summary>
Reads a single value from the current stream and advances the current
position within this stream by the number of bytes read.
</summary>
            <typeparam name="T">The type of the value to be read from the stream.</typeparam>
            <returns>The value that was read.</returns>
            <exception cref="T:System.NotSupportedException">This stream does not support reading.</exception>
            <exception cref="T:System.InvalidOperationException">There is not enough space in the current
stream to read a value of this type.</exception>
        </member>
        <member name="M:SlimDX.DataStream.WriteRange(System.IntPtr,System.Int64)">
            <summary>
Writes a range of bytes to the current stream, and advances the current position
within this stream by the number of bytes written.
</summary>
            <param name="source">A pointer to the location to start copying from.</param>
            <param name="count">The number of bytes to copy from source to the current stream.</param>
            <exception cref="T:System.NotSupportedException">This stream does not support writing.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is a zero pointer.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is less than zero.</exception>
        </member>
        <member name="M:SlimDX.DataStream.WriteRange``1(``0[])">
            <summary>
Writes an array of values to the current stream, and advances the current position
within this stream by the number of bytes written.
</summary>
            <param name="data">An array of values to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">This stream does not support writing.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="data" /> is a null reference.</exception>
        </member>
        <member name="M:SlimDX.DataStream.WriteRange``1(``0[],System.Int32,System.Int32)">
            <summary>
Writes an array of values to the current stream, and advances the current position
within this stream by the number of bytes written.
</summary>
            <typeparam name="T">The type of the values to be written to the stream.</typeparam>
            <param name="data">An array of values to be written to the stream.</param>
            <param name="offset">The zero-based offset in data at which to begin copying values to the current stream.</param>
            <param name="count">The number of values to be written to the current stream. If this is zero,
all of the contents <paramref name="data" /> will be written.</param>
            <exception cref="T:System.NotSupportedException">This stream does not support writing.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="data" /> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> or <paramref name="count" /> leads outside the bounds of <paramref name="data" />.</exception>
        </member>
        <member name="M:SlimDX.DataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
Writes a sequence of bytes to the current stream and advances the current
position within this stream by the number of bytes written.
</summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">This stream does not support writing.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer" /> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> or <paramref name="count" /> leads outside the bounds of <paramref name="buffer" />.</exception>
        </member>
        <member name="M:SlimDX.DataStream.Write``1(``0)">
            <summary>
Writes a single value to the stream, and advances the current position
within this stream by the number of bytes written.
</summary>
            <typeparam name="T">The type of the value to be written to the stream.</typeparam>
            <param name="value">The value to write to the stream.</param>
            <exception cref="T:System.NotSupportedException">This stream does not support writing.</exception>
            <exception cref="T:System.InvalidOperationException">There is not enough space
remaining in the stream to write this type of value.</exception>
        </member>
        <member name="M:SlimDX.DataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Sets the position within the current stream.</summary>
            <exception cref="T:System.InvalidOperationException">Attempted to seek outside of the bounds of the stream.</exception>
        </member>
        <member name="M:SlimDX.DataStream.#ctor(System.IntPtr,System.Int64,System.Boolean,System.Boolean)">
            <summary>
Initializes a new instance of the DataStream class, using a user provided buffer as a backing store.
</summary>
            <param name="userBuffer">A pointer to the buffer to be used as a backing store.</param>
            <param name="sizeInBytes">The size of the buffer provided, in bytes.</param>
            <param name="canRead">
                <c>true</c> if reading from the buffer should be allowed, <c>false</c> otherwise.</param>
            <param name="canWrite">
                <c>true</c> if writing to the buffer should be allowed, <c>false</c> otherwise.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="userBuffer" /> is a zero pointer.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="sizeInBytes" /> is less than 1.</exception>
        </member>
        <member name="M:SlimDX.DataStream.#ctor(System.Int64,System.Boolean,System.Boolean)">
            <summary>
Initializes a new instance of the DataStream class, and allocates a new buffer to use as a backing store.
</summary>
            <param name="sizeInBytes">The size of the buffer to be allocated, in bytes.</param>
            <param name="canRead">
                <c>true</c> if reading from the buffer should be allowed, <c>false</c> otherwise.</param>
            <param name="canWrite">
                <c>true</c> if writing to the buffer should be allowed, <c>false</c> otherwise.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="sizeInBytes" /> is less than 1.</exception>
        </member>
        <member name="T:SlimDX.DataStream">
            <summary>
Provides a stream interface to a buffer located in unmanaged memory.
</summary>
        </member>
        <member name="M:SlimDX.Direct3D10.Direct3D10Exception.#ctor(SlimDX.Result)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="result">The result code that caused this exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D10.Direct3D10Exception.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
            <param name="innerException">The exception that caused this exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D10.Direct3D10Exception.#ctor(System.String)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D10.Direct3D10Exception.#ctor">
            <summary>
Constructs a new exception object.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D10.Direct3D10Exception">
            <summary>
Represents errors that occur in the Direct3D 10 subsystem.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D9.ZBufferType">
            <summary>
Z-buffer usage types.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.ZBufferType.UseWBuffer">
            <summary>
Used to enable a W-buffer.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.ZBufferType.DontUseZBuffer">
            <summary>
Used to disable the depth buffer.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.ZBufferType.UseZBuffer">
            <summary>
Used to enable the depth buffer.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D9.StencilOperation">
            <summary>
Stencil operations.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.StencilOperation.Decrement">
            <summary>
Decrement the stencil value.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.StencilOperation.Increment">
            <summary>
Increment the stencil value.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.StencilOperation.Invert">
            <summary>
Invert the stencil value.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.StencilOperation.DecrementSaturate">
            <summary>
Decrement and clamp stencil value.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.StencilOperation.IncrementSaturate">
            <summary>
Increment and clamp stencil value.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.StencilOperation.Replace">
            <summary>
Replace the stencil value.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.StencilOperation.Zero">
            <summary>
Zero the stencil value.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.StencilOperation.Keep">
            <summary>
Keep the stencil value.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D9.ShadeMode">
            <summary>
Shading modes.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.ShadeMode.Gouraud">
            <summary>
Gouraud shading.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.ShadeMode.Flat">
            <summary>
Flat shading.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D9.Compare">
            <summary>
Comparison operations.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.Compare.Always">
            <summary>
Always accept.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.Compare.GreaterEqual">
            <summary>
Accept if greater than or equal
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.Compare.NotEqual">
            <summary>
Accept if not equal.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.Compare.Greater">
            <summary>
Accept if greater than.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.Compare.LessEqual">
            <summary>
Accept if equal or less than.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.Compare.Equal">
            <summary>
Accept if equal.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.Compare.Less">
            <summary>
Accept if less than.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D9.Compare.Never">
            <summary>
Never accept
</summary>
        </member>
        <member name="P:SlimDX.Quaternion.W">
            <summary>
Gets or sets the W component of the quaternion.
</summary>
            <value>The W component of the quaternion.</value>
        </member>
        <member name="P:SlimDX.Quaternion.Z">
            <summary>
Gets or sets the Z component of the quaternion.
</summary>
            <value>The Z component of the quaternion.</value>
        </member>
        <member name="P:SlimDX.Quaternion.Y">
            <summary>
Gets or sets the Y component of the quaternion.
</summary>
            <value>The Y component of the quaternion.</value>
        </member>
        <member name="P:SlimDX.Quaternion.X">
            <summary>
Gets or sets the X component of the quaternion.
</summary>
            <value>The X component of the quaternion.</value>
        </member>
        <member name="T:SlimDX.Quaternion">
            <summary>
Defines a quaternion.
</summary>
        </member>
        <member name="P:SlimDX.Direct3D10.Resource.Dimension">
            <summary>
Gets the resource's dimension (type).
</summary>
        </member>
        <member name="P:SlimDX.Direct3D10.Resource.EvictionPriority">
            <summary>
Gets or sets the resource's eviction priority.
</summary>
        </member>
        <member name="M:SlimDX.Direct3D10.Resource.#ctor(System.IntPtr)">
            <summary>
Constructs a Resource from an unmanaged pointer.
</summary>
            <param name="pointer">The unmanaged ID3D10Resource pointer.</param>
        </member>
        <member name="P:SlimDX.Direct3D10.DeviceChild.Device">
            <summary>
Gets the device the object is bound to.
</summary>
            <returns>The device, or null on failure.</returns>
        </member>
        <member name="M:SlimDX.Direct3D10.DeviceChild.FromPointer(System.IntPtr)">
            <summary>
Constructs a DeviceChild from an unmanaged pointer.
</summary>
            <param name="pointer">The unmanaged ID3D10DeviceChild pointer.</param>
        </member>
        <member name="T:SlimDX.Direct3D10.DeviceChild">
            <summary>
An object that is bound to a Device.
</summary>
        </member>
        <member name="T:SlimDX.DXGI.WindowAssociationFlags">
            <summary>
Values which control a swap chain's window association behavior.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D10.SpriteFlags">
            <summary>
Flags that control the behavior of <see cref="T:SlimDX.Direct3D10.Sprite" /> rendering.
</summary>
            <unmanaged>D3DX10_SPRITE_FLAG</unmanaged>
        </member>
        <member name="F:SlimDX.Direct3D10.SpriteFlags.IncreaseTextureReferenceCount">
            <summary>
Increases the reference count of textures when DrawSpritesBuffered is called.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D10.SpriteFlags.SaveState">
            <summary>
Saves render state when sprites are rendered, and restores the previous state once rendering
is complete.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D10.SpriteFlags.SortFrontToBack">
            <summary>
Sort the sprites from front to back based on their depth; sprites closer to the
camera will be rendered first.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D10.SpriteFlags.SortBackToFront">
            <summary>
Sort the sprites from back to front based on their depth; sprites further away from the
camera will be rendered first.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D10.SpriteFlags.GroupByTexture">
            <summary>
Group sprites by texture before rendering; improves performance when many sprites
share textures.
</summary>
        </member>
        <member name="F:SlimDX.Direct3D10.SpriteFlags.None">
            <summary>
No flags.
</summary>
        </member>
        <member name="P:SlimDX.Color4.Alpha">
            <summary>
Gets or sets the color's alpha component.
</summary>
        </member>
        <member name="P:SlimDX.Color4.Blue">
            <summary>
Gets or sets the color's blue component.
</summary>
        </member>
        <member name="P:SlimDX.Color4.Green">
            <summary>
Gets or sets the color's green component.
</summary>
        </member>
        <member name="P:SlimDX.Color4.Red">
            <summary>
Gets or sets the color's red component.
</summary>
        </member>
        <member name="T:SlimDX.Color4">
            <summary>
A four-component (RGBA) color value; each component is a float in the range [0,1].
</summary>
        </member>
        <member name="T:SlimDX.Ray">
            <summary>
Defines a ray in three dimensions, specified by a starting position and a direction.
</summary>
        </member>
        <member name="F:SlimDX.Plane.D">
            <summary>
Gets or sets the distance of the plane along its normal from the origin.
</summary>
            <value>The distance of the plane along its normal from the origin.</value>
        </member>
        <member name="F:SlimDX.Plane.Normal">
            <summary>
Gets or sets the normal vector of the plane.
</summary>
            <value>The normal vector of the plane.</value>
        </member>
        <member name="T:SlimDX.Plane">
            <summary>
Defines a plane in three dimensions.
</summary>
        </member>
        <member name="T:SlimDX.BoundingSphere">
            <summary>
A bounding sphere, specified by a center vector and a radius.
</summary>
        </member>
        <member name="T:SlimDX.BoundingBox">
            <summary>
An axis aligned bounding box, specified by minimum and maximum vectors.
</summary>
        </member>
        <member name="T:SlimDX.PlaneIntersectionType">
            <summary>
Describes the result of an intersection with a plane in three dimensions.
</summary>
        </member>
        <member name="T:SlimDX.ContainmentType">
            <summary>
Describes how one bounding volume contains another.
</summary>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3D9Exception.#ctor(SlimDX.Result)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="result">The result code that caused this exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3D9Exception.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
            <param name="innerException">The exception that caused this exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3D9Exception.#ctor(System.String)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
        </member>
        <member name="M:SlimDX.Direct3D9.Direct3D9Exception.#ctor">
            <summary>
Constructs a new exception object.
</summary>
        </member>
        <member name="T:SlimDX.Direct3D9.Direct3D9Exception">
            <summary>
Represents errors that occur in the XInput subsystem.
</summary>
        </member>
        <member name="M:SlimDX.SlimDXException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
When overridden in a derived class, sets the SerializationInfo with information about the exception.
</summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:SlimDX.SlimDXException.#ctor(SlimDX.Result)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="result">The result code that caused this exception.</param>
        </member>
        <member name="M:SlimDX.SlimDXException.#ctor(System.String,System.Exception)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
            <param name="innerException">The exception that caused this exception.</param>
        </member>
        <member name="M:SlimDX.SlimDXException.#ctor(System.String)">
            <summary>
Constructs a new exception object.
</summary>
            <param name="message">The message describing the exception.</param>
        </member>
        <member name="M:SlimDX.SlimDXException.#ctor">
            <summary>
Constructs a new exception object.
</summary>
        </member>
        <member name="P:SlimDX.SlimDXException.ResultCode">
            <summary>
Gets the <see cref="T:SlimDX.Result">Result code</see> for the exception. This value indicates
the specific type of failure that occured within SlimDX.
</summary>
        </member>
        <member name="T:SlimDX.SlimDXException">
            <summary>
The base class for errors that occur in SlimDX.
</summary>
        </member>
        <member name="P:SlimDX.Vector3.UnitZ">
            <summary>
Gets the Z unit <see cref="T:SlimDX.Vector3" /> (0, 0, 1).
</summary>
            <value>A <see cref="T:SlimDX.Vector3" /> that has a value of (0, 0, 1).</value>
        </member>
        <member name="P:SlimDX.Vector3.UnitY">
            <summary>
Gets the Y unit <see cref="T:SlimDX.Vector3" /> (0, 1, 0).
</summary>
            <value>A <see cref="T:SlimDX.Vector3" /> that has a value of (0, 1, 0).</value>
        </member>
        <member name="P:SlimDX.Vector3.UnitX">
            <summary>
Gets the X unit <see cref="T:SlimDX.Vector3" /> (1, 0, 0).
</summary>
            <value>A <see cref="T:SlimDX.Vector3" /> that has a value of (1, 0, 0).</value>
        </member>
        <member name="P:SlimDX.Vector3.Zero">
            <summary>
Gets a <see cref="T:SlimDX.Vector3" /> with all of its components set to zero.
</summary>
            <value>A <see cref="T:SlimDX.Vector3" /> that has all of its components set to zero.</value>
        </member>
        <member name="P:SlimDX.Vector3.Z">
            <summary>
Gets or sets the Z component of the vector.
</summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="P:SlimDX.Vector3.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="P:SlimDX.Vector3.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:SlimDX.Vector3">
            <summary>
Defines a three component vector.
</summary>
        </member>
        <member name="P:SlimDX.Vector4.UnitW">
            <summary>
Gets the W unit <see cref="T:SlimDX.Vector4" /> (0, 0, 0, 1).
</summary>
            <value>A <see cref="T:SlimDX.Vector4" /> that has a value of (0, 0, 0, 1).</value>
        </member>
        <member name="P:SlimDX.Vector4.UnitZ">
            <summary>
Gets the Z unit <see cref="T:SlimDX.Vector4" /> (0, 0, 1, 0).
</summary>
            <value>A <see cref="T:SlimDX.Vector4" /> that has a value of (0, 0, 1, 0).</value>
        </member>
        <member name="P:SlimDX.Vector4.UnitY">
            <summary>
Gets the Y unit <see cref="T:SlimDX.Vector4" /> (0, 1, 0, 0).
</summary>
            <value>A <see cref="T:SlimDX.Vector4" /> that has a value of (0, 1, 0, 0).</value>
        </member>
        <member name="P:SlimDX.Vector4.UnitX">
            <summary>
Gets the X unit <see cref="T:SlimDX.Vector4" /> (1, 0, 0, 0).
</summary>
            <value>A <see cref="T:SlimDX.Vector4" /> that has a value of (1, 0, 0, 0).</value>
        </member>
        <member name="P:SlimDX.Vector4.Zero">
            <summary>
Gets a <see cref="T:SlimDX.Vector4" /> with all of its components set to zero.
</summary>
            <value>A <see cref="T:SlimDX.Vector4" /> that has all of its components set to zero.</value>
        </member>
        <member name="P:SlimDX.Vector4.W">
            <summary>
Gets or sets the W component of the vector.
</summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="P:SlimDX.Vector4.Z">
            <summary>
Gets or sets the Z component of the vector.
</summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="P:SlimDX.Vector4.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="P:SlimDX.Vector4.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:SlimDX.Vector4">
            <summary>
Defines a four component vector.
</summary>
        </member>
        <member name="T:SlimDX.Matrix">
            <summary>
Defines a 4x4 matrix.
</summary>
        </member>
        <member name="M:SlimDX.ComObject.Dispose">
            <summary>
Performs object cleanup.
</summary>
        </member>
        <member name="P:SlimDX.ComObject.DebugName">
            <summary>
Gets or sets a string identifying the object for debug purposes.
</summary>
        </member>
        <member name="P:SlimDX.ComObject.IsDefaultPool">
            <summary>
Gets or sets a value indicating whether or not the object is in the default allocation pool.
</summary>
        </member>
        <member name="P:SlimDX.ComObject.CreationSource">
            <summary>
Gets a <see cref="T:System.Diagnostics.StackTrace">stack trace</see> to the location
that the object was created.
</summary>
        </member>
        <member name="P:SlimDX.ComObject.ComPointer">
            <summary>
Gets an <see cref="T:System.IntPtr">IntPtr</see> to the underlying native COM interface.
</summary>
        </member>
        <member name="P:SlimDX.ComObject.Disposed">
            <summary>
Gets a value that indicates whether the object has been disposed.
</summary>
        </member>
        <member name="T:SlimDX.ComObject">
            <summary>
The base class for all SlimDX types which represent COM interfaces.
</summary>
        </member>
        <member name="M:SlimDX.Configuration.ClearResultWatches">
            <summary>
Clear out all watches on all <see cref="T:SlimDX.Result">result codes</see>.
</summary>
        </member>
        <member name="M:SlimDX.Configuration.RemoveResultWatch(SlimDX.Result)">
            <summary>
Remove a watch on the specified <see cref="T:SlimDX.Result">result code</see>.
If no watch was set, this call is ignored.
</summary>
            <param>The result code to stop watching.</param>
        </member>
        <member name="M:SlimDX.Configuration.AddResultWatch(SlimDX.Result,SlimDX.ResultWatchFlags)">
            <summary>
Add a watch indicating the action to be taken when a method returns the
specified <see cref="T:SlimDX.Result">result code</see> is returned.
</summary>
            <param name="result">The result code to watch for.</param>
            <param name="flags">The action to take when the specified result code occurs.</param>
        </member>
        <member name="P:SlimDX.Configuration.DetectDoubleDispose">
            <summary>
Gets or sets whether SlimDX detects double disposal of objects. If set to true, SlimDX will throw
an ObjectDisposedException when an already disposed object is disposed. If set to false, double
disposals will be silently ignored. The default value is false.
</summary>
        </member>
        <member name="P:SlimDX.Configuration.ThrowOnError">
            <summary>
Gets or sets whether SlimDX defaults to throwing exceptions on <see cref="T:SlimDX.Result">result codes</see>
that indicate errors. The default value is true.
</summary>
        </member>
        <member name="P:SlimDX.Configuration.EnableObjectTracking">
            <summary>
Gets or sets whether SlimDX is currently tracking call stacks from object creation. If set to false,
objects will not carry a call stack from when they were created. The default value is false.
</summary>
            <remarks>Object tracking is a useful debugging facility, but may have a significant negative
impact on performance. It will default to enabled when the DEBUG symbol is defined.</remarks>
        </member>
        <member name="T:SlimDX.Configuration">
            <summary>
Used to control global options that affect all of SlimDX.
</summary>
        </member>
        <member name="M:SlimDX.Result.Equals(SlimDX.Result@,SlimDX.Result@)">
            <summary>
Returns a value indicating whether the two results are equivalent.
</summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="value1" /> has the same value as <paramref name="value2" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimDX.Result.Equals(SlimDX.Result)">
            <summary>
Returns a value indicating whether this instance is equal to the specified result.
</summary>
            <param name="other">A <see cref="T:SlimDX.Result" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if <paramref name="other" /> has the same value as this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimDX.Result.Equals(System.Object)">
            <summary>
Returns a value indicating whether this instance is equal to the specified object.
</summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
                <c>true</c> if <paramref name="obj" /> has the same value as this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimDX.Result.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SlimDX.Result.ToString">
            <summary>
Converts the value of the result to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:SlimDX.Result.op_Inequality(SlimDX.Result,SlimDX.Result)">
            <summary>
Tests for inequality between two results.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimDX.Result.op_Equality(SlimDX.Result,SlimDX.Result)">
            <summary>
Tests for equality between two results.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SlimDX.Result.Last">
            <summary>
Gets the last recorded result of a method or operation.
</summary>
        </member>
        <member name="P:SlimDX.Result.IsFailure">
            <summary>
Gets a value indicating whether or not the result represents a failed operation.
</summary>
        </member>
        <member name="P:SlimDX.Result.IsSuccess">
            <summary>
Gets a value indicating whether or not the result represents a successful operation.
</summary>
        </member>
        <member name="P:SlimDX.Result.Description">
            <summary>
Gets the friendly description of the result.
</summary>
        </member>
        <member name="P:SlimDX.Result.Name">
            <summary>
Gets the name of the result.
</summary>
        </member>
        <member name="P:SlimDX.Result.Code">
            <summary>
Gets the actual HRESULT result code.
</summary>
        </member>
        <member name="T:SlimDX.Result">
            <summary>
Represents the result of a method or operation.
</summary>
        </member>
        <member name="T:SlimDX.ResultWatchFlags">
            <summary>
Specifies possible behaviors of result watches.
</summary>
        </member>
        <member name="F:SlimDX.ResultWatchFlags.Throw">
            <summary>
Throw an exception whenever the result occurs.
</summary>
        </member>
        <member name="F:SlimDX.ResultWatchFlags.Break">
            <summary>
Break whenever the result occurs.
</summary>
        </member>
        <member name="F:SlimDX.ResultWatchFlags.AlwaysIgnore">
            <summary>
Always ignore the result.
</summary>
        </member>
        <member name="T:SlimDX.PerformanceOptions">
            <summary>
Specifies possible performance profiling options.
</summary>
        </member>
        <member name="F:SlimDX.PerformanceOptions.DoNotAllowProfiling">
            <summary>
Do not allow performance profiling.
</summary>
        </member>
        <member name="F:SlimDX.PerformanceOptions.None">
            <summary>
No performance options specified.
</summary>
        </member>
        <member name="M:SlimDX.ObjectTable.ReportLeaks">
            <summary>
Generates a report of all outstanding COM objects (objects that have not been disposed)
tracked by SlimDX. The report includes the object's type and a stack trace to its creation point.
</summary>
            <returns>A string containing the leak report.</returns>
        </member>
        <member name="M:SlimDX.ObjectTable.Remove(SlimDX.ComObject)">
            <summary>
Removes a COM object from the table.
</summary>
            <param name="object">The object to remove.</param>
            <returns>
                <c>true</c> if the object was in the table and was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimDX.ObjectTable.Add(SlimDX.ComObject)">
            <summary>
Adds a COM object to the table. This will set the object's CreationSource parameter if
<see cref="T:SlimDX.Configuration">object tracking</see> is on.
</summary>
            <param name="object">The object to add.</param>
        </member>
        <member name="P:SlimDX.ObjectTable.Objects">
            <summary>
Gets a list of all the COM objects tracked by SlimDX.
</summary>
        </member>
        <member name="T:SlimDX.ObjectTable">
            <summary>
Maintains a list of all the <see cref="T:SlimDX.ComObject">COM objects</see> managed by SlimDX.
</summary>
        </member>
    </members>
</doc>