<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SlimMath</name>
    </assembly>
    <members>
        <member name="T:SlimMath.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:SlimMath.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:SlimMath.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="M:SlimMath.BoundingBox.#ctor(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.BoundingBox"/> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:SlimMath.BoundingBox.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.BoundingBox"/> struct.
            </summary>
            <param name="minimumX">The minimum x-coordinate of the bounding box.</param>
            <param name="minimumY">The minimum y-coordinate of the bounding box.</param>
            <param name="minimumZ">The minimum z-coordinate of the bounding box.</param>
            <param name="maximumX">The maximum x-coordinate of the bounding box.</param>
            <param name="maximumY">The maximum y-coordinate of the bounding box.</param>
            <param name="maximumZ">The maximum z-coordinate of the bounding box.</param>
        </member>
        <member name="M:SlimMath.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Intersects(SlimMath.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Intersects(SlimMath.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Intersects(SlimMath.Ray@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Intersects(SlimMath.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Intersects(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Intersects(SlimMath.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Intersects(SlimMath.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Contains(SlimMath.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Contains(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Contains(SlimMath.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Contains(SlimMath.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.SupportMapping(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Generates a supporting point for this instance.
            </summary>
            <param name="direction">The direction for which to build the supporting point.</param>
            <param name="result">When the method completes, contains the supporting point.</param>
        </member>
        <member name="M:SlimMath.BoundingBox.SupportMapping(SlimMath.Vector3)">
            <summary>
            Generates a support mapping for this instance.
            </summary>
            <param name="direction">The direction for which to build the support mapping.</param>
            <returns>The resulting support mapping.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.FromPoints(System.Collections.Generic.IList{SlimMath.Vector3},SlimMath.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SlimMath.BoundingBox.FromPoints(System.Collections.Generic.IList{SlimMath.Vector3})">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SlimMath.BoundingBox.FromSphere(SlimMath.BoundingSphere@,SlimMath.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:SlimMath.BoundingBox.FromSphere(SlimMath.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Merge(SlimMath.BoundingBox@,SlimMath.BoundingBox@,SlimMath.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:SlimMath.BoundingBox.Merge(SlimMath.BoundingBox,SlimMath.BoundingBox)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.op_Equality(SlimMath.BoundingBox,SlimMath.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.op_Inequality(SlimMath.BoundingBox,SlimMath.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Equals(SlimMath.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:SlimMath.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SlimMath.BoundingFrustum">
            <summary>
            Represents a bounding frustum in three dimensional space.
            </summary>
        </member>
        <member name="M:SlimMath.BoundingFrustum.#ctor(SlimMath.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.BoundingFrustum"/> class.
            </summary>
            <param name="value">The <see cref="T:SlimMath.Matrix"/> to extract the planes from.</param>
        </member>
        <member name="M:SlimMath.BoundingFrustum.SetMatrix(SlimMath.Matrix@)">
            <summary>
            Sets the matrix that represents this instance of <see cref="T:SlimMath.BoundingFrustum"/>.
            </summary>
            <param name="value">The <see cref="T:SlimMath.Matrix"/> to extract the planes from.</param>
        </member>
        <member name="T:SlimMath.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:SlimMath.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:SlimMath.BoundingSphere.Radius">
            <summary>
            The radious of the sphere.
            </summary>
        </member>
        <member name="M:SlimMath.BoundingSphere.#ctor(SlimMath.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.BoundingBox"/> struct.
            </summary>
            <param name="center">The center of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:SlimMath.BoundingSphere.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.BoundingBox"/> struct.
            </summary>
            <param name="centerX">The x-coordinate for the center of the sphere.</param>
            <param name="centerY">The y-coordinate for the center of the sphere.</param>
            <param name="centerZ">The z-coordinate for the center of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:SlimMath.BoundingSphere.Intersects(SlimMath.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Intersects(SlimMath.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Intersects(SlimMath.Ray@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Intersects(SlimMath.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Intersects(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Intersects(SlimMath.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Intersects(SlimMath.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Contains(SlimMath.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Contains(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Contains(SlimMath.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Contains(SlimMath.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Transform(SlimMath.Matrix@,SlimMath.BoundingSphere@)">
            <summary>
            Translates and scales this instance by a <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="matrix">The <see cref="T:SlimMath.Matrix"/> to transform this instance by.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimMath.BoundingSphere"/>.</param>
            <remarks>
            The result of this operation is undefined if the matrix contains any transformations other than
            translation, rotation, and uniform scaling.
            </remarks>
        </member>
        <member name="M:SlimMath.BoundingSphere.Transform(SlimMath.Matrix)">
            <summary>
            Translates and scales this instance by a <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="matrix">The <see cref="T:SlimMath.Matrix"/> to transform this instance by.</param>
            <returns>The transformed <see cref="T:SlimMath.BoundingSphere"/>.</returns>
            <remarks>
            The result of this operation is undefined if the matrix contains any transformations other than
            translation, rotation, and uniform scaling.
            </remarks>
        </member>
        <member name="M:SlimMath.BoundingSphere.SupportMapping(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Generates a supporting point for this instance.
            </summary>
            <param name="direction">The direction for which to build the supporting point.</param>
            <param name="result">When the method completes, contains the supporting point.</param>
        </member>
        <member name="M:SlimMath.BoundingSphere.SupportMapping(SlimMath.Vector3)">
            <summary>
            Generates a support mapping for this instance.
            </summary>
            <param name="direction">The direction for which to build the support mapping.</param>
            <returns>The resulting support mapping.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.FromPoints(System.Collections.Generic.IList{SlimMath.Vector3},SlimMath.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:SlimMath.BoundingSphere.FromPoints(System.Collections.Generic.IList{SlimMath.Vector3})">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.FromBox(SlimMath.BoundingBox@,SlimMath.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:SlimMath.BoundingSphere.FromBox(SlimMath.BoundingBox)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Merge(SlimMath.BoundingSphere@,SlimMath.BoundingSphere@,SlimMath.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:SlimMath.BoundingSphere.Merge(SlimMath.BoundingSphere,SlimMath.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:SlimMath.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.op_Equality(SlimMath.BoundingSphere,SlimMath.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.op_Inequality(SlimMath.BoundingSphere,SlimMath.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Equals(SlimMath.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:SlimMath.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SlimMath.Collision">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:SlimMath.Collision.ClosestPointOnSegmentToPoint(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines the closest point between a point and a segment.
            </summary>
            <param name="point">The point to test.</param>
            <param name="segment1">The starting point of the segment to test.</param>
            <param name="segment2">The ending point of the segment to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SlimMath.Collision.ClosestPointOnPlaneToPoint(SlimMath.Plane@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SlimMath.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SlimMath.Collision.ClosestPointOnTriangleToPoint(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SlimMath.Collision.ClosestPointOnBoxToPoint(SlimMath.BoundingBox@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SlimMath.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SlimMath.Collision.ClosestPointOnSphereToPoint(SlimMath.BoundingSphere@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SlimMath.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:SlimMath.Vector3.Zero"/>.</param>
        </member>
        <member name="M:SlimMath.Collision.ClosestPointOnSphereToSphere(SlimMath.BoundingSphere@,SlimMath.BoundingSphere@,SlimMath.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SlimMath.BoundingSphere"/> and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:SlimMath.Vector3.Zero"/>.</param>
            <remarks>
            If the two spheres are overlapping, but not directly ontop of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:SlimMath.Collision.DistancePlanePoint(SlimMath.Plane@,SlimMath.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:SlimMath.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SlimMath.Collision.DistanceBoxPoint(SlimMath.BoundingBox@,SlimMath.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:SlimMath.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SlimMath.Collision.DistanceBoxBox(SlimMath.BoundingBox@,SlimMath.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:SlimMath.BoundingBox"/> and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SlimMath.Collision.DistanceSpherePoint(SlimMath.BoundingSphere@,SlimMath.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:SlimMath.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SlimMath.Collision.DistanceSphereSphere(SlimMath.BoundingSphere@,SlimMath.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:SlimMath.BoundingSphere"/> and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsPoint(SlimMath.Ray@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsRay(SlimMath.Ray@,SlimMath.Ray@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o₂ − o₁, d₂, d₁ ⨯ d₂]) / ‖d₁ ⨯ d₂‖²</code>
            <code>t = det([o₂ − o₁, d₁, d₁ ⨯ d₂]) / ‖d₁ ⨯ d₂‖²</code>
            Where o₁ is the position of the first ray, o₂ is the position of the second ray,
            d₁ is the normalized direction of the first ray, d₂ is the normalized direction
            of the second ray, det denotes the determinant of a matrix, ⨯ denotes the cross
            product, [ ] denotes a matrix, and ‖ ‖ denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsPlane(SlimMath.Ray@,SlimMath.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsPlane(SlimMath.Ray@,SlimMath.Plane@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsTriangle(SlimMath.Ray@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsTriangle(SlimMath.Ray@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsBox(SlimMath.Ray@,SlimMath.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsBox(SlimMath.Ray@,SlimMath.BoundingBox@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsSphere(SlimMath.Ray@,SlimMath.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            <para>
            This method uses the following math to compute the intersection:
            ‖x − c‖² = r²           Equation of sphere
            x = s + td              Equation of ray
            
            Solve for t
            ‖s + td − c‖² = r²      Substitute equation of ray into equation of sphere
            v ≝ s − c
            ‖v + td‖² = r²
            v² + 2v⋅td + t²d² = r²
            d²t² + (2v⋅d)t + (v² − r²) = 0
            t² + (2v⋅d)t + (v² − r²) = 0    If d is a normalized vector
            
            Quadratic equation gives us
            t = (−(2v⋅d) ± √((2v⋅d)² − 4(v² − r)²)) / 2
            t = −(v⋅d) ± √((v⋅d)² − (v² − r)²)
            </para>
            <para>
            Entrance of intersection is given by the smaller t
            t = −(v⋅d) − √((v⋅d)² − (v² − r)²)
            
            Exit of intersection is given by the larger t
            t = −(v⋅d) + √((v⋅d)² − (v² − r)²)
            
            If the smaller t value is &lt; 0 than the ray started inside of the sphere.
            
            If the descriminant (v⋅d)² − (v² − r)² is &lt; 0 than no intersection occured. If the
            descriminant (v⋅d)² − (v² − r)² is = 0 than the ray is tangential to the sphere. If
            the descriminant (v⋅d)² − (v² − r)² is &gt; 0 than the ray passes through the sphere.
            </para>
            </remarks>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsSphere(SlimMath.Ray@,SlimMath.BoundingSphere@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a <see cref="T:SlimMath.BoundingSphere"/>. 
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            <para>
            This method uses the following math to compute the intersection:
            ‖x − c‖² = r²           Equation of sphere
            x = s + td              Equation of ray
            
            Solve for t
            ‖s + td − c‖² = r²      Substitute equation of ray into equation of sphere
            v ≝ s − c
            ‖v + td‖² = r²
            v² + 2v⋅td + t²d² = r²
            d²t² + (2v⋅d)t + (v² − r²) = 0
            t² + (2v⋅d)t + (v² − r²) = 0    If d is a normalized vector
            
            Quadratic equation gives us
            t = (−(2v⋅d) ± √((2v⋅d)² − 4(v² − r)²)) / 2
            t = −(v⋅d) ± √((v⋅d)² − (v² − r)²)
            </para>
            <para>
            Entrance of intersection is given by the smaller t
            t = −(v⋅d) − √((v⋅d)² − (v² − r)²)
            
            Exit of intersection is given by the larger t
            t = −(v⋅d) + √((v⋅d)² − (v² − r)²)
            
            If the smaller t value is &lt; 0 than the ray started inside of the sphere.
            
            If the descriminant (v⋅d)² − (v² − r)² is &lt; 0 than no intersection occured. If the
            descriminant (v⋅d)² − (v² − r)² is = 0 than the ray is tangential to the sphere. If
            the descriminant (v⋅d)² − (v² − r)² is &gt; 0 than the ray passes through the sphere.
            </para>
            </remarks>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsSphere(SlimMath.Ray@,SlimMath.BoundingSphere@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a <see cref="T:SlimMath.BoundingSphere"/>. 
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <param name="normal">When the method completes, contains the normal vector on the
            sphere at the point of intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            <para>
            This method uses the following math to compute the intersection:
            ‖x − c‖² = r²           Equation of sphere
            x = s + td              Equation of ray
            
            Solve for t
            ‖s + td − c‖² = r²      Substitute equation of ray into equation of sphere
            v ≝ s − c
            ‖v + td‖² = r²
            v² + 2v⋅td + t²d² = r²
            d²t² + (2v⋅d)t + (v² − r²) = 0
            t² + (2v⋅d)t + (v² − r²) = 0    If d is a normalized vector
            
            Quadratic equation gives us
            t = (−(2v⋅d) ± √((2v⋅d)² − 4(v² − r)²)) / 2
            t = −(v⋅d) ± √((v⋅d)² − (v² − r)²)
            </para>
            <para>
            Entrance of intersection is given by the smaller t
            t = −(v⋅d) − √((v⋅d)² − (v² − r)²)
            
            Exit of intersection is given by the larger t
            t = −(v⋅d) + √((v⋅d)² − (v² − r)²)
            
            If the smaller t value is &lt; 0 than the ray started inside of the sphere.
            
            If the descriminant (v⋅d)² − (v² − r)² is &lt; 0 than no intersection occured. If the
            descriminant (v⋅d)² − (v² − r)² is = 0 than the ray is tangential to the sphere. If
            the descriminant (v⋅d)² − (v² − r)² is &gt; 0 than the ray passes through the sphere.
            </para>
            </remarks>
        </member>
        <member name="M:SlimMath.Collision.RayIntersectsSphere(SlimMath.Ray@,SlimMath.BoundingSphere@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Ray"/> and a <see cref="T:SlimMath.BoundingSphere"/>. 
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="entrancePoint">When the method completes, contains the closest point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <param name="entranceNormal">When the method completes, contains the normal vector on the
            sphere at the point of closest intersection.</param>
            <param name="exitPoint">When the method completes, contains the farthest point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <param name="exitNormal">Whent he method completes, contains the normal vector on the
            sphere at the point of farthest intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            <para>
            This method uses the following math to compute the intersection:
            ‖x − c‖² = r²           Equation of sphere
            x = s + td              Equation of ray
            
            Solve for t
            ‖s + td − c‖² = r²      Substitute equation of ray into equation of sphere
            v ≝ s − c
            ‖v + td‖² = r²
            v² + 2v⋅td + t²d² = r²
            d²t² + (2v⋅d)t + (v² − r²) = 0
            t² + (2v⋅d)t + (v² − r²) = 0    If d is a normalized vector
            
            Quadratic equation gives us
            t = (−(2v⋅d) ± √((2v⋅d)² − 4(v² − r)²)) / 2
            t = −(v⋅d) ± √((v⋅d)² − (v² − r)²)
            </para>
            <para>
            Entrance of intersection is given by the smaller t
            t = −(v⋅d) − √((v⋅d)² − (v² − r)²)
            
            Exit of intersection is given by the larger t
            t = −(v⋅d) + √((v⋅d)² − (v² − r)²)
            
            If the smaller t value is &lt; 0 than the ray started inside of the sphere.
            
            If the descriminant (v⋅d)² − (v² − r)² is &lt; 0 than no intersection occured. If the
            descriminant (v⋅d)² − (v² − r)² is = 0 than the ray is tangential to the sphere. If
            the descriminant (v⋅d)² − (v² − r)² is &gt; 0 than the ray passes through the sphere.
            </para>
            </remarks>
        </member>
        <member name="M:SlimMath.Collision.PlaneIntersectsPoint(SlimMath.Plane@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.PlaneIntersectsPlane(SlimMath.Plane@,SlimMath.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Plane"/> and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.PlaneIntersectsPlane(SlimMath.Plane@,SlimMath.Plane@,SlimMath.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Plane"/> and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:SlimMath.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:SlimMath.Collision.PlaneIntersectsTriangle(SlimMath.Plane@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Plane"/> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.PlaneIntersectsBox(SlimMath.Plane@,SlimMath.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Plane"/> and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.PlaneIntersectsSphere(SlimMath.Plane@,SlimMath.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.Plane"/> and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.BoxIntersectsTriangle(SlimMath.BoundingBox@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.BoundingBox"/> and a triangle.
            </summary>
            <param name="box">The box to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.BoxIntersectsBox(SlimMath.BoundingBox@,SlimMath.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.BoundingBox"/> and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.BoxIntersectsSphere(SlimMath.BoundingBox@,SlimMath.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.BoundingBox"/> and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.SphereIntersectsTriangle(SlimMath.BoundingSphere@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.BoundingSphere"/> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.SphereIntersectsSphere(SlimMath.BoundingSphere@,SlimMath.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SlimMath.BoundingSphere"/> and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Collision.BoxContainsPoint(SlimMath.BoundingBox@,SlimMath.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SlimMath.BoundingBox"/> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.Collision.BoxContainsTriangle(SlimMath.BoundingBox@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SlimMath.BoundingBox"/> contains a triangle.
            </summary>
            <param name="box">The box to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.Collision.BoxContainsBox(SlimMath.BoundingBox@,SlimMath.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:SlimMath.BoundingBox"/> contains a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.Collision.BoxContainsSphere(SlimMath.BoundingBox@,SlimMath.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:SlimMath.BoundingBox"/> contains a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.Collision.SphereContainsPoint(SlimMath.BoundingSphere@,SlimMath.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SlimMath.BoundingSphere"/> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.Collision.SphereContainsTriangle(SlimMath.BoundingSphere@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SlimMath.BoundingSphere"/> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.Collision.SphereContainsBox(SlimMath.BoundingSphere@,SlimMath.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:SlimMath.BoundingSphere"/> contains a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.Collision.SphereContainsSphere(SlimMath.BoundingSphere@,SlimMath.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:SlimMath.BoundingSphere"/> contains a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SlimMath.Collision.SupportPoint(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Generates a supporting point from a specific triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle.</param>
            <param name="vertex2">The second vertex of the triangle.</param>
            <param name="vertex3">The third vertex of the triangle</param>
            <param name="direction">The direction for which to build the supporting point.</param>
            <param name="result">When the method completes, contains the supporting point.</param>
        </member>
        <member name="M:SlimMath.Collision.SupportPoint(SlimMath.BoundingBox@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Generates a supporting point from a specific <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box">The box to generate the supporting point for.</param>
            <param name="direction">The direction for which to build the supporting point.</param>
            <param name="result">When the method completes, contains the supporting point.</param>
        </member>
        <member name="M:SlimMath.Collision.SupportPoint(SlimMath.BoundingSphere@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Generates a supporting point from a specific <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to generate the supporting point for.</param>
            <param name="direction">The direction for which to build the supporting point.</param>
            <param name="result">When the method completes, contains the supporting point.</param>
        </member>
        <member name="M:SlimMath.Collision.SupportPoint(System.Collections.Generic.IEnumerable{SlimMath.Vector3},SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Generates a supporting point from a polyhedra.
            </summary>
            <param name="points">The points that make up the polyhedra.</param>
            <param name="direction">The direction for which to build the supporting point.</param>
            <param name="result">When the method completes, contains the supporting point.</param>
        </member>
        <member name="T:SlimMath.Design.Half2Converter">
            <summary>
            Defines a type converter for <see cref="T:SlimMath.Half2"/>.
            </summary>
        </member>
        <member name="T:SlimMath.Design.BaseConverter">
            <summary>
            Provides a base class for mathematical type converters.
            </summary>
        </member>
        <member name="M:SlimMath.Design.BaseConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:SlimMath.Design.BaseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:SlimMath.Design.BaseConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value; otherwise, false.
            </returns>
        </member>
        <member name="M:SlimMath.Design.BaseConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:SlimMath.Design.BaseConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="P:SlimMath.Design.BaseConverter.Properties">
            <summary>
            Gets or sets the collection of exposed properties.
            </summary>
            <value>The collection of exposed properties.</value>
        </member>
        <member name="M:SlimMath.Design.Half2Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Design.Half2Converter"/> class.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Half2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Half2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Half2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SlimMath.Design.Half3Converter">
            <summary>
            Defines a type converter for <see cref="T:SlimMath.Half3"/>.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Half3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Design.Half3Converter"/> class.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Half3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Half3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Half3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SlimMath.Design.Half4Converter">
            <summary>
            Defines a type converter for <see cref="T:SlimMath.Half4"/>.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Half4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Design.Half4Converter"/> class.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Half4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Half4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Half4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SlimMath.Design.HalfConverter">
            <summary>
            Provides a type converter to convert <c>SlimDX.Half</c> objects to and from various 
            other representations.
            </summary>
        </member>
        <member name="M:SlimMath.Design.HalfConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A System::Type that represents the type you want to convert from.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Design.HalfConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Design.HalfConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="M:SlimMath.Design.HalfConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If <c>null</c> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
        </member>
        <member name="T:SlimMath.Gjk">
            <summary>
            Implements the Gilbert-Johnson-Keerthi algorithm for convex polyhedra collision detection.
            </summary>
        </member>
        <member name="M:SlimMath.Gjk.Reset">
            <summary>
            Resets the state of this instance.
            </summary>
        </member>
        <member name="M:SlimMath.Gjk.Initialize">
            <summary>
            Prepares the simplex to an empty state.
            </summary>
        </member>
        <member name="M:SlimMath.Gjk.Initialize(SlimMath.Vector3)">
            <summary>
            Prepares the simplex with one initial point.
            </summary>
            <param name="point1">The point to initialize the simplex with.</param>
        </member>
        <member name="M:SlimMath.Gjk.Initialize(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Prepares the simplex with two initial points.
            </summary>
            <param name="point1">The first point to initialize the simplex with.</param>
            <param name="point2">The second point to initialize the simplex with.</param>
        </member>
        <member name="M:SlimMath.Gjk.Initialize(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Prepares the simplex with three initial points.
            </summary>
            <param name="point1">The first point to initialize the simplex with.</param>
            <param name="point2">The second point to initialize the simplex with.</param>
            <param name="point3">The third point to initialize the simplex with.</param>
        </member>
        <member name="M:SlimMath.Gjk.Intersects(System.Func{SlimMath.Vector3,SlimMath.Vector3},System.Int32)">
            <summary>
            Checks for a collision between two convex polyhedra.
            </summary>
            <param name="supportFunction">The function delegate responsible for returning support points.</param>
            <param name="maxIterations">The maximum amount of iterations allowed.</param>
            <returns><c>true</c> if there was an intersection between the two convex polyhedra; otherwise, <c>falce</c>.</returns>
        </member>
        <member name="M:SlimMath.Gjk.GetMinimumDistance(System.Func{SlimMath.Vector3,SlimMath.Vector3},System.Int32,System.Single)">
            <summary>
            Gets the minimum distance between two convex polyhedra.
            </summary>
            <param name="supportFunction">The function delegate responsible for returning support points.</param>
            <param name="epsilon">The amount of allotted error in the result.</param>
            <param name="maxIterations"><c>true</c> if there was an intersection between the two convex polyhedra; otherwise, <c>falce</c>.</param>
            <returns>The minimum distance between the two convex polyhedra.</returns>
        </member>
        <member name="M:SlimMath.Gjk.DoLineNoDirection(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Simplifies a line simplex.
            </summary>
            <param name="a">The newly added point in the simplex.</param>
            <param name="b">The old point in the simplex.</param>
        </member>
        <member name="M:SlimMath.Gjk.DoTriangleNoDirection(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Simplifies a triangle simplex;
            </summary>
            <param name="a">The newly added point in the simplex.</param>
            <param name="b">The old point in the simplex.</param>
            <param name="c">The oldest point in the simplex.</param>
        </member>
        <member name="M:SlimMath.Gjk.DoTetrahedronNoDirection(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Simplifies a tetrahedron simplex.
            </summary>
            <param name="a">The newly added point in the simplex.</param>
            <param name="b">The old point in the simplex.</param>
            <param name="c">The older point in the simplex.</param>
            <param name="d">The oldest point in the simplex.</param>
            <returns><c>true</c> if the origin is contained by this simplex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Gjk.DoLine(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Simplifies a line simplex and finds the new direction.
            </summary>
            <param name="a">The newly added point in the simplex.</param>
            <param name="b">The old point in the simplex.</param>
        </member>
        <member name="M:SlimMath.Gjk.DoTriangle(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Simplifies a triangle simplex and finds the new direction.
            </summary>
            <param name="a">The newly added point in the simplex.</param>
            <param name="b">The old point in the simplex.</param>
            <param name="c">The oldest point in the simplex.</param>
        </member>
        <member name="M:SlimMath.Gjk.DoTetrahedron(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Simplifies a tetrahedron simplex and finds the new direction.
            </summary>
            <param name="a">The newly added point in the simplex.</param>
            <param name="b">The old point in the simplex.</param>
            <param name="c">The older point in the simplex.</param>
            <param name="d">The oldest point in the simplex.</param>
            <returns><c>true</c> if the origin is contained by this simplex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SlimMath.Gjk.Direction">
            <summary>
            Gets or sets the direction for which to search for a support point.
            </summary>
        </member>
        <member name="T:SlimMath.Design.MatrixConverter">
            <summary>
            Defines a type converter for <see cref="T:SlimMath.Matrix"/>.
            </summary>
        </member>
        <member name="M:SlimMath.Design.MatrixConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Design.MatrixConverter"/> class.
            </summary>
        </member>
        <member name="M:SlimMath.Design.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.MatrixConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SlimMath.Design.QuaternionConverter">
            <summary>
            Defines a type converter for <see cref="T:SlimMath.Quaternion"/>.
            </summary>
        </member>
        <member name="M:SlimMath.Design.QuaternionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Design.QuaternionConverter"/> class.
            </summary>
        </member>
        <member name="M:SlimMath.Design.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.QuaternionConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SlimMath.Design.Vector2Converter">
            <summary>
            Defines a type converter for <see cref="T:SlimMath.Vector2"/>.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Vector2Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Design.Vector2Converter"/> class.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Vector2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SlimMath.Design.Vector3Converter">
            <summary>
            Defines a type converter for <see cref="T:SlimMath.Vector3"/>.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Vector3Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Design.Vector3Converter"/> class.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Vector3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SlimMath.Design.Vector4Converter">
            <summary>
            Defines a type converter for <see cref="T:SlimMath.Vector4"/>.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Vector4Converter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Design.Vector4Converter"/> class.
            </summary>
        </member>
        <member name="M:SlimMath.Design.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:SlimMath.Design.Vector4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.
            </returns>
        </member>
        <member name="T:SlimMath.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:SlimMath.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:SlimMath.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:SlimMath.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:SlimMath.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:SlimMath.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:SlimMath.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:SlimMath.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="T:SlimMath.Half">
            <summary>
            A half precision (16 bit) floating point value.
            </summary>
        </member>
        <member name="F:SlimMath.Half.PrecisionDigits">
            <summary>
            Number of decimal digits of precision.
            </summary>
        </member>
        <member name="F:SlimMath.Half.MantissaBits">
            <summary>
            Number of bits in the mantissa.
            </summary>
        </member>
        <member name="F:SlimMath.Half.MaximumDecimalExponent">
            <summary>
            Maximum decimal exponent.
            </summary>
        </member>
        <member name="F:SlimMath.Half.MaximumBinaryExponent">
            <summary>
            Maximum binary exponent.
            </summary>
        </member>
        <member name="F:SlimMath.Half.MinimumDecimalExponent">
            <summary>
            Minimum decimal exponent.
            </summary>
        </member>
        <member name="F:SlimMath.Half.MinimumBinaryExponent">
            <summary>
            Minimum binary exponent.
            </summary>
        </member>
        <member name="F:SlimMath.Half.ExponentRadix">
            <summary>
            Exponent radix.
            </summary>
        </member>
        <member name="F:SlimMath.Half.AdditionRounding">
            <summary>
            Additional rounding.
            </summary>
        </member>
        <member name="F:SlimMath.Half.Epsilon">
            <summary>
            Smallest value such that 1.0 + epsilon != 1.0
            </summary>
        </member>
        <member name="F:SlimMath.Half.MaxValue">
            <summary>
            Maximum value of the number.
            </summary>
        </member>
        <member name="F:SlimMath.Half.MinValue">
            <summary>
            Minimum value of the number.
            </summary>
        </member>
        <member name="F:SlimMath.Half.NaN">
            <summary>
            Represents not a number (NaN).
            </summary>
        </member>
        <member name="F:SlimMath.Half.NegativeInfinity">
            <summary>
            Represents negative infinity.
            </summary>
        </member>
        <member name="F:SlimMath.Half.PositiveInfinity">
            <summary>
            Represents positive infinity.
            </summary>
        </member>
        <member name="M:SlimMath.Half.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half"/> structure.
            </summary>
            <param name="value">The floating point value that should be stored in 16 bit format.</param>
        </member>
        <member name="M:SlimMath.Half.ConvertToFloat(SlimMath.Half[])">
            <summary>
            Converts an array of half precision values into full precision values.
            </summary>
            <param name="values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:SlimMath.Half.ConvertToHalf(System.Single[])">
            <summary>
            Converts an array of full precision values into half precision values.
            </summary>
            <param name="values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:SlimMath.Half.IsInfinity(SlimMath.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="half">The <see cref="T:SlimMath.Half"/> to check.</param>
            <returns><c>true</c> if <paramref name="half"/> evaluates to positive or negative infinity; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.IsNaN(SlimMath.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to NaN.
            </summary>
            <param name="half">The <see cref="T:SlimMath.Half"/> to check.</param>
            <returns><c>true</c> if <paramref name="half"/> evaluates to NaN; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.IsNegativeInfinity(SlimMath.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="half">The <see cref="T:SlimMath.Half"/> to check.</param>
            <returns><c>true</c> if <paramref name="half"/> evaluates to negative infinity; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.IsPositiveInfinity(SlimMath.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="half">The <see cref="T:SlimMath.Half"/> to check.</param>
            <returns><c>true</c> if <paramref name="half"/> evaluates to positive infinity; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.op_LessThan(SlimMath.Half,SlimMath.Half)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:SlimMath.Half"/> value is
            less than another specified <see cref="T:SlimMath.Half"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.op_GreaterThan(SlimMath.Half,SlimMath.Half)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:SlimMath.Half"/> value is
            greater than another specified <see cref="T:SlimMath.Half"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.op_LessThanOrEqual(SlimMath.Half,SlimMath.Half)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:SlimMath.Half"/> value is
            less than or equal to another specified <see cref="T:SlimMath.Half"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.op_GreaterThanOrEqual(SlimMath.Half,SlimMath.Half)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:SlimMath.Half"/> value is
            greater than or equal to another specified <see cref="T:SlimMath.Half"/> value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> is greater than or equal to right; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.op_Equality(SlimMath.Half,SlimMath.Half)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.op_Inequality(SlimMath.Half,SlimMath.Half)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.op_Explicit(System.Single)~SlimMath.Half">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Single"/> to <see cref="T:SlimMath.Half"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SlimMath.Half.op_Implicit(SlimMath.Half)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:SlimMath.Half"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SlimMath.Half.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:SlimMath.Half.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SlimMath.Half.CompareTo(SlimMath.Half)">
            <summary>
            Compares this instance to another instance of the same type.
            </summary>
            <param name="value">The other value to compare to this instance.</param>
            <returns>A value that specifies if this instance is greater than, less than, or equal to <paramref name="value"/>.</returns>
        </member>
        <member name="M:SlimMath.Half.CompareTo(System.Object)">
            <summary>
            Compares this instance to another instance of another type.
            </summary>
            <param name="value">The other value to compare to this instance.</param>
            <returns>A value that specifies if this instance is greater than, less than, or equal to <paramref name="value"/>.</returns>
        </member>
        <member name="M:SlimMath.Half.Equals(SlimMath.Half@,SlimMath.Half@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="value1"/>
            <param name="value2"/>
            <returns>
            <c>true</c> if <paramref name="value1"/> is the same instance as <paramref name="value2"/> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half.Equals(SlimMath.Half)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimMath.Half.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimMath.Half.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:SlimMath.Half"/>.
            </summary>
            <returns>The type code.</returns>
        </member>
        <member name="P:SlimMath.Half.RawValue">
            <summary>
            Gets the raw 16 bit value used to back this half-float.
            </summary>
        </member>
        <member name="T:SlimMath.Half2">
            <summary>
            Defines a two component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:SlimMath.Half2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:SlimMath.Half2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="M:SlimMath.Half2.#ctor(SlimMath.Half,SlimMath.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half2"/> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:SlimMath.Half2.#ctor(SlimMath.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half2"/> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:SlimMath.Half2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half2"/> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:SlimMath.Half2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half2"/> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:SlimMath.Half2.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half2"/> struct.
            </summary>
            <param name="values">The values to assign to the X and Y components of the vector. This must be an array with two elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        </member>
        <member name="M:SlimMath.Half2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SlimMath.Half2.op_Equality(SlimMath.Half2,SlimMath.Half2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half2.op_Inequality(SlimMath.Half2,SlimMath.Half2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half2.op_Explicit(SlimMath.Vector2)~SlimMath.Half2">
            <summary>
            Performs an explicit conversion from <see cref="T:SlimMath.Vector2"/> to <see cref="T:SlimMath.Half2"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SlimMath.Half2.op_Implicit(SlimMath.Half2)~SlimMath.Vector2">
            <summary>
            Performs an implicit conversion from <see cref="T:SlimMath.Half2"/> to <see cref="T:SlimMath.Vector2"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SlimMath.Half2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SlimMath.Half2.Equals(SlimMath.Half2@,SlimMath.Half2@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1"/>
            <param name="value2"/>
            <returns>
            <c>true</c> if <paramref name="value1"/> is the same instance as <paramref name="value2"/> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half2.Equals(SlimMath.Half2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimMath.Half2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SlimMath.Half3">
            <summary>
            Defines a three component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:SlimMath.Half3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:SlimMath.Half3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:SlimMath.Half3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="M:SlimMath.Half3.#ctor(SlimMath.Half,SlimMath.Half,SlimMath.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half3"/> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:SlimMath.Half3.#ctor(SlimMath.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half3"/> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:SlimMath.Half3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half3"/> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:SlimMath.Half3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half3"/> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:SlimMath.Half3.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half3"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, and Z components of the vector. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than three elements.</exception>
        </member>
        <member name="M:SlimMath.Half3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SlimMath.Half3.op_Equality(SlimMath.Half3,SlimMath.Half3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half3.op_Inequality(SlimMath.Half3,SlimMath.Half3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half3.op_Explicit(SlimMath.Vector3)~SlimMath.Half3">
            <summary>
            Performs an explicit conversion from <see cref="T:SlimMath.Vector3"/> to <see cref="T:SlimMath.Half3"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SlimMath.Half3.op_Implicit(SlimMath.Half3)~SlimMath.Vector3">
            <summary>
            Performs an implicit conversion from <see cref="T:SlimMath.Half3"/> to <see cref="T:SlimMath.Vector3"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SlimMath.Half3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SlimMath.Half3.Equals(SlimMath.Half3@,SlimMath.Half3@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1"/>
            <param name="value2"/>
            <returns>
            <c>true</c> if <paramref name="value1"/> is the same instance as <paramref name="value2"/> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half3.Equals(SlimMath.Half3)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimMath.Half3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SlimMath.Half4">
            <summary>
            Defines a four component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:SlimMath.Half4.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:SlimMath.Half4.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:SlimMath.Half4.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:SlimMath.Half4.W">
            <summary>
            Gets or sets the W component of the vector.
            </summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="M:SlimMath.Half4.#ctor(SlimMath.Half,SlimMath.Half,SlimMath.Half,SlimMath.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half4"/> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:SlimMath.Half4.#ctor(SlimMath.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half4"/> structure.
            </summary>
            <param name="value">The value to set for the X, Y, Z, and W components.</param>
        </member>
        <member name="M:SlimMath.Half4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half4"/> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:SlimMath.Half4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half4"/> structure.
            </summary>
            <param name="value">The value to set for the X, Y, Z, and W components.</param>
        </member>
        <member name="M:SlimMath.Half4.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half4"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SlimMath.Half4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SlimMath.Half4.op_Equality(SlimMath.Half4,SlimMath.Half4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half4.op_Inequality(SlimMath.Half4,SlimMath.Half4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half4.op_Explicit(SlimMath.Vector4)~SlimMath.Half4">
            <summary>
            Performs an explicit conversion from <see cref="T:SlimMath.Vector4"/> to <see cref="T:SlimMath.Half4"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SlimMath.Half4.op_Implicit(SlimMath.Half4)~SlimMath.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:SlimMath.Half4"/> to <see cref="T:SlimMath.Vector4"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SlimMath.Half4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Half4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SlimMath.Half4.Equals(SlimMath.Half4@,SlimMath.Half4@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1"/>
            <param name="value2"/>
            <returns>
            <c>true</c> if <paramref name="value1"/> is the same instance as <paramref name="value2"/> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Half4.Equals(SlimMath.Half4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SlimMath.Half4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SlimMath.HalfUtilities">
            <summary>
            Helper class to perform Half/Float conversion.
            </summary>
        </member>
        <member name="M:SlimMath.HalfUtilities.Unpack(System.UInt16)">
            <summary>
            Unpacks the specified half.
            </summary>
            <param name="value">The half to unpack.</param>
            <returns>The floating point representation of the half.</returns>
        </member>
        <member name="M:SlimMath.HalfUtilities.Pack(System.Single)">
            <summary>
            Packs the specified float.
            </summary>
            <param name="value">The float to pack.</param>
            <returns>The half represntation of the float.</returns>
        </member>
        <member name="T:SlimMath.Matrix">
            <summary>
            Represents a 4x4 mathematical matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.SizeInBytes">
            <summary>
            The size of the <see cref="T:SlimMath.Matrix"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.Zero">
            <summary>
            A <see cref="T:SlimMath.Matrix"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.Identity">
            <summary>
            The identity <see cref="T:SlimMath.Matrix"/>.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SlimMath.Matrix.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="M:SlimMath.Matrix.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Matrix"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SlimMath.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Matrix"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M13">The value to assign at row 1 column 3 of the matrix.</param>
            <param name="M14">The value to assign at row 1 column 4 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="M23">The value to assign at row 2 column 3 of the matrix.</param>
            <param name="M24">The value to assign at row 2 column 4 of the matrix.</param>
            <param name="M31">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="M32">The value to assign at row 3 column 2 of the matrix.</param>
            <param name="M33">The value to assign at row 3 column 3 of the matrix.</param>
            <param name="M34">The value to assign at row 3 column 4 of the matrix.</param>
            <param name="M41">The value to assign at row 4 column 1 of the matrix.</param>
            <param name="M42">The value to assign at row 4 column 2 of the matrix.</param>
            <param name="M43">The value to assign at row 4 column 3 of the matrix.</param>
            <param name="M44">The value to assign at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Matrix"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="M:SlimMath.Matrix.Negate">
            <summary>
            Negates a matrix.
            </summary>
        </member>
        <member name="M:SlimMath.Matrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:SlimMath.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:SlimMath.Matrix.Exponent(System.Int32)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:SlimMath.Matrix.Orthogonalize">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.Orthonormalize">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.DecomposeQR(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Decomposes a matrix into an orthonormalized matrix Q and a right traingular matrix R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular matrix of the decomposition.</param>
        </member>
        <member name="M:SlimMath.Matrix.DecomposeLQ(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Decomposes a matrix into a lower triangular matrix L and an orthonormalized matrix Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular matrix of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
        </member>
        <member name="M:SlimMath.Matrix.Decompose(SlimMath.Vector3@,SlimMath.Quaternion@,SlimMath.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <returns><b>true</b> if the matrix contains a rotation matrix, <b>false</b> if not.</returns>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the matrix.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:SlimMath.Matrix.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Function to exchange two sets of column values within the matrix.
            </summary>
            <param name="firstColumn">The source column to exchange.</param>
            <param name="secondColumn">The destination column to exchange.</param>
        </member>
        <member name="M:SlimMath.Matrix.ToArray">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Add(SlimMath.Matrix@,SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:SlimMath.Matrix.Add(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Subtract(SlimMath.Matrix@,SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:SlimMath.Matrix.Subtract(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Multiply(SlimMath.Matrix@,System.Single,SlimMath.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="scalar">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Multiply(SlimMath.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="scalar">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Multiply(SlimMath.Matrix@,SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:SlimMath.Matrix.Multiply(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Divide(SlimMath.Matrix@,System.Single,SlimMath.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="scalar">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Divide(SlimMath.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="scalar">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Divide(SlimMath.Matrix@,SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:SlimMath.Matrix.Divide(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Exponent(SlimMath.Matrix@,System.Int32,SlimMath.Matrix@)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <param name="result">When the method completes, contains the exponential matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:SlimMath.Matrix.Exponent(SlimMath.Matrix,System.Int32)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <returns>The exponential matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:SlimMath.Matrix.Negate(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Negate(SlimMath.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Lerp(SlimMath.Matrix@,SlimMath.Matrix@,System.Single,SlimMath.Matrix@)">
            <summary>
            Performs a linear interpolation between two matricies.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matricies.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.Lerp(SlimMath.Matrix,SlimMath.Matrix,System.Single)">
            <summary>
            Performs a linear interpolation between two matricies.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.SmoothStep(SlimMath.Matrix@,SlimMath.Matrix@,System.Single,SlimMath.Matrix@)">
            <summary>
            Performs a cubic interpolation between two matricies.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:SlimMath.Matrix.SmoothStep(SlimMath.Matrix,SlimMath.Matrix,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Transpose(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Transpose(SlimMath.Matrix)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Invert(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Invert(SlimMath.Matrix)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Orthogonalize(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized matrix.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.Orthogonalize(SlimMath.Matrix)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <returns>The orthogonalized matrix.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.Orthonormalize(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized matrix.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.Orthonormalize(SlimMath.Matrix)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <returns>The orthonormalized matrix.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.UpperTriangularForm(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Brings the matrix into upper triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular matrix.</param>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.UpperTriangularForm(SlimMath.Matrix)">
            <summary>
            Brings the matrix into upper triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <returns>The upper triangular matrix.</returns>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.LowerTriangularForm(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Brings the matrix into lower triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular matrix.</param>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.LowerTriangularForm(SlimMath.Matrix)">
            <summary>
            Brings the matrix into lower triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <returns>The lower triangular matrix.</returns>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.RowEchelonForm(SlimMath.Matrix@,SlimMath.Matrix@)">
            <summary>
            Brings the matrix into row echelon form using elementry row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.RowEchelonForm(SlimMath.Matrix)">
            <summary>
            Brings the matrix into row echelon form using elementry row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.ReducedRowEchelonForm(SlimMath.Matrix@,SlimMath.Vector4@,SlimMath.Matrix@,SlimMath.Vector4@)">
            <summary>
            Brings the matrix into reduced row echelon form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into reduced row echelon form.</param>
            <param name="augment">The fifth column of the matrix.</param>
            <param name="result">When the method completes, contains the resultant matrix after the operation.</param>
            <param name="augmentResult">When the method completes, contains the resultant fifth column of the matrix.</param>
            <remarks>
            <para>The fifth column is often called the agumented part of the matrix. This is because the fifth
            column is really just an extension of the matrix so that there is a place to put all of the
            non-zero components after the operation is complete.</para>
            <para>Often times the resultant matrix will the identity matrix or a matrix similar to the identity
            matrix. Sometimes, however, that is not possible and numbers other than zero and one may appear.</para>
            <para>This method can be used to solve systems of linear equations. Upon completion of this method,
            the <paramref name="augmentResult"/> will contain the solution for the system. It is up to the user
            to analyze both the input and the result to determine if a solution really exists.</para>
            </remarks>
        </member>
        <member name="M:SlimMath.Matrix.Billboard(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Matrix@)">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Billboard(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.LookAtLH(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Matrix@)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.LookAtLH(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.LookAtRH(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Matrix@)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.LookAtRH(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Reflection(SlimMath.Plane@,SlimMath.Matrix@)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="plane">The plane for which the reflection occurs. This parameter is assumed to be normalized.</param>
            <param name="result">When the method completes, contains the reflection matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Reflection(SlimMath.Plane)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="plane">The plane for which the reflection occurs. This parameter is assumed to be normalized.</param>
            <returns>The reflection matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Shadow(SlimMath.Vector4@,SlimMath.Plane@,SlimMath.Matrix@)">
            <summary>
            Creates a matrix that flattens geometry into a shadow.
            </summary>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <param name="plane">The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized.</param>
            <param name="result">When the method completes, contains the shadow matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Shadow(SlimMath.Vector4,SlimMath.Plane)">
            <summary>
            Creates a matrix that flattens geometry into a shadow.
            </summary>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <param name="plane">The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized.</param>
            <returns>The shadow matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Scaling(SlimMath.Vector3@,SlimMath.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Scaling(SlimMath.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Scaling(System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Scaling(System.Single)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Scaling(System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.RotationX(System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.RotationY(System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.RotationZ(System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.RotationAxis(SlimMath.Vector3@,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a matrix that rotates around an arbitary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.RotationAxis(SlimMath.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.RotationQuaternion(SlimMath.Quaternion@,SlimMath.Matrix@)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <param name="result">The created rotation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.RotationQuaternion(SlimMath.Quaternion)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Translation(SlimMath.Vector3@,SlimMath.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Translation(SlimMath.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Translation(System.Single,System.Single,System.Single,SlimMath.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.AffineTransformation(System.Single,SlimMath.Quaternion@,SlimMath.Vector3@,SlimMath.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.AffineTransformation(System.Single,SlimMath.Quaternion,SlimMath.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.AffineTransformation(System.Single,SlimMath.Vector3@,SlimMath.Quaternion@,SlimMath.Vector3@,SlimMath.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.AffineTransformation(System.Single,SlimMath.Vector3,SlimMath.Quaternion,SlimMath.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.AffineTransformation2D(System.Single,System.Single,SlimMath.Vector2@,SlimMath.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.AffineTransformation2D(System.Single,System.Single,SlimMath.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.AffineTransformation2D(System.Single,SlimMath.Vector2@,System.Single,SlimMath.Vector2@,SlimMath.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.AffineTransformation2D(System.Single,SlimMath.Vector2,System.Single,SlimMath.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Transformation(SlimMath.Vector3@,SlimMath.Quaternion@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Quaternion@,SlimMath.Vector3@,SlimMath.Matrix@)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Transformation(SlimMath.Vector3,SlimMath.Quaternion,SlimMath.Vector3,SlimMath.Vector3,SlimMath.Quaternion,SlimMath.Vector3)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.Transformation2D(SlimMath.Vector2@,System.Single,SlimMath.Vector2@,SlimMath.Vector2@,System.Single,SlimMath.Vector2@,SlimMath.Matrix@)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:SlimMath.Matrix.Transformation2D(SlimMath.Vector2,System.Single,SlimMath.Vector2,SlimMath.Vector2,System.Single,SlimMath.Vector2)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_Addition(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_UnaryPlus(SlimMath.Matrix)">
            <summary>
            Assert a matrix (return it unchanged).
            </summary>
            <param name="value">The matrix to assert (unchange).</param>
            <returns>The asserted (unchanged) matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_Subtraction(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_UnaryNegation(SlimMath.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_Multiply(System.Single,SlimMath.Matrix)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="scalar">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_Multiply(SlimMath.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="scalar">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_Multiply(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Multiplies two matricies.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_Division(SlimMath.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="scalar">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_Division(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Divides two matricies.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matricies.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_Equality(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Matrix.op_Inequality(SlimMath.Matrix,SlimMath.Matrix)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Matrix.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SlimMath.Matrix.Equals(SlimMath.Matrix)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Matrix"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Matrix"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Matrix"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Matrix.Equals(SlimMath.Matrix,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Matrix"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Matrix"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Matrix"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SlimMath.Matrix.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.TranslationVector">
            <summary>
            Gets or sets the translation of the matrix; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.ScaleVector">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:SlimMath.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SlimMath.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="P:SlimMath.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:SlimMath.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="T:SlimMath.Plane">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="F:SlimMath.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:SlimMath.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:SlimMath.Plane.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Plane"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SlimMath.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Plane"/> struct.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:SlimMath.Plane.#ctor(SlimMath.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Plane"/> struct.
            </summary>
            <param name="value">The normal of the plane.</param>
            <param name="d">The distance of the plane along its normal from the origin</param>
        </member>
        <member name="M:SlimMath.Plane.#ctor(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Plane"/> struct.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal of the plane.</param>
        </member>
        <member name="M:SlimMath.Plane.#ctor(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Plane"/> struct.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:SlimMath.Plane.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Plane"/> struct.
            </summary>
            <param name="values">The values to assign to the A, B, C, and D components of the plane. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SlimMath.Plane.Normalize">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:SlimMath.Plane.ToArray">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.Intersects(SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Plane.Intersects(SlimMath.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Plane.Intersects(SlimMath.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Plane.Intersects(SlimMath.Ray@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Plane.Intersects(SlimMath.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Plane.Intersects(SlimMath.Plane@,SlimMath.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:SlimMath.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Plane.Intersects(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Plane.Intersects(SlimMath.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Plane.Intersects(SlimMath.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Plane.Multiply(SlimMath.Plane@,System.Single,SlimMath.Plane@)">
            <summary>
            Scales each component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:SlimMath.Plane.Multiply(SlimMath.Plane,System.Single)">
            <summary>
            Scales each component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.Scale(SlimMath.Plane@,System.Single,SlimMath.Plane@)">
            <summary>
            Scales the distance component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:SlimMath.Plane.Scale(SlimMath.Plane,System.Single)">
            <summary>
            Scales the distance component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.Dot(SlimMath.Plane@,SlimMath.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified plane and vector.</param>
        </member>
        <member name="M:SlimMath.Plane.Dot(SlimMath.Plane,SlimMath.Vector4)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified plane and vector.</returns>
        </member>
        <member name="M:SlimMath.Plane.DotCoordinate(SlimMath.Plane@,SlimMath.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</param>
        </member>
        <member name="M:SlimMath.Plane.DotCoordinate(SlimMath.Plane,SlimMath.Vector3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.DotNormal(SlimMath.Plane@,SlimMath.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified vector and the normal of the plane.</param>
        </member>
        <member name="M:SlimMath.Plane.DotNormal(SlimMath.Plane,SlimMath.Vector3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.Normalize(SlimMath.Plane@,SlimMath.Plane@)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:SlimMath.Plane.Normalize(SlimMath.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.Transform(SlimMath.Plane@,SlimMath.Quaternion@,SlimMath.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:SlimMath.Plane.Transform(SlimMath.Plane,SlimMath.Quaternion)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.Transform(System.Collections.Generic.IList{SlimMath.Plane},SlimMath.Quaternion@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SlimMath.Plane.Transform(SlimMath.Plane@,SlimMath.Matrix@,SlimMath.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:SlimMath.Plane.Transform(SlimMath.Plane,SlimMath.Matrix)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>When the method completes, contains the transformed plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.Transform(System.Collections.Generic.IList{SlimMath.Plane},SlimMath.Matrix@)">
            <summary>
            Transforms an array of normalized planes by a matrix.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="transformation">The transformation matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SlimMath.Plane.op_Multiply(System.Single,SlimMath.Plane)">
            <summary>
            Scales each component of the plane by the given value.
            </summary>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="plane">The plane to scale.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.op_Multiply(SlimMath.Plane,System.Single)">
            <summary>
            Scales each component of the plane by the given value.
            </summary>
            <param name="plane">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SlimMath.Plane.op_Equality(SlimMath.Plane,SlimMath.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Plane.op_Inequality(SlimMath.Plane,SlimMath.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Plane.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Plane.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SlimMath.Plane.Equals(SlimMath.Plane)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:SlimMath.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SlimMath.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:SlimMath.Quaternion">
            <summary>
            Represents a four dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="F:SlimMath.Quaternion.SizeInBytes">
            <summary>
            The size of the <see cref="T:SlimMath.Quaternion"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SlimMath.Quaternion.Zero">
            <summary>
            A <see cref="T:SlimMath.Quaternion"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SlimMath.Quaternion.One">
            <summary>
            A <see cref="T:SlimMath.Quaternion"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SlimMath.Quaternion.Identity">
            <summary>
            The identity <see cref="T:SlimMath.Quaternion"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:SlimMath.Quaternion.X">
            <summary>
            The X component of the quaternion.
            </summary>
        </member>
        <member name="F:SlimMath.Quaternion.Y">
            <summary>
            The Y component of the quaternion.
            </summary>
        </member>
        <member name="F:SlimMath.Quaternion.Z">
            <summary>
            The Z component of the quaternion.
            </summary>
        </member>
        <member name="F:SlimMath.Quaternion.W">
            <summary>
            The W component of the quaternion.
            </summary>
        </member>
        <member name="M:SlimMath.Quaternion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Quaternion"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SlimMath.Quaternion.#ctor(SlimMath.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the components.</param>
        </member>
        <member name="M:SlimMath.Quaternion.#ctor(SlimMath.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.#ctor(SlimMath.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Quaternion"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the quaternion.</param>
            <param name="y">Initial value for the Y component of the quaternion.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Quaternion"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the quaternion. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SlimMath.Quaternion.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:SlimMath.Quaternion.Negate">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
        </member>
        <member name="M:SlimMath.Quaternion.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="M:SlimMath.Quaternion.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:SlimMath.Quaternion.Exponential">
            <summary>
            Exponentiates a quaternion.
            </summary>
        </member>
        <member name="M:SlimMath.Quaternion.Logarithm">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
        </member>
        <member name="M:SlimMath.Quaternion.ToArray">
            <summary>
            Creates an array containing the elements of the quaternion.
            </summary>
            <returns>A four-element array containing the components of the quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Add(SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <param name="result">When the method completes, contains the sum of the two quaternions.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Add(SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Subtract(SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two quaternions.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Subtract(SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Multiply(SlimMath.Quaternion@,System.Single,SlimMath.Quaternion@)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scalar">The amount by which to scale the quaternion.</param>
            <param name="result">When the method completes, contains the scaled quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Multiply(SlimMath.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scalar">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Multiply(SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Modulates a quaternion by another.
            </summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Multiply(SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Modulates a quaternion by another.
            </summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <returns>The modulated quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Divide(SlimMath.Quaternion@,System.Single,SlimMath.Quaternion@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Divide(SlimMath.Quaternion,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Negate(SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <param name="result">When the method completes, contains a quaternion facing in the opposite direction.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Negate(SlimMath.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Barycentric(SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@,System.Single,System.Single,SlimMath.Quaternion@)">
            <summary>
            Returns a <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains a new <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Barycentric(SlimMath.Quaternion,SlimMath.Quaternion,SlimMath.Quaternion,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:SlimMath.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Conjugate(SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Conjugate(SlimMath.Quaternion)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Dot(SlimMath.Quaternion@,SlimMath.Quaternion@,System.Single@)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <param name="result">When the method completes, contains the dot product of the two quaternions.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Dot(SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Exponential(SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Exponential(SlimMath.Quaternion)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Invert(SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Invert(SlimMath.Quaternion)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Lerp(SlimMath.Quaternion@,SlimMath.Quaternion@,System.Single,SlimMath.Quaternion@)">
            <summary>
            Performs a linear interpolation between two quaternions.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Quaternion.Lerp(SlimMath.Quaternion,SlimMath.Quaternion,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Quaternion.Logarithm(SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Logarithm(SlimMath.Quaternion)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Normalize(SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Normalize(SlimMath.Quaternion)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.RotationAxis(SlimMath.Vector3@,System.Single,SlimMath.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.RotationAxis(SlimMath.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.RotationMatrix(SlimMath.Matrix@,SlimMath.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.RotationMatrix(SlimMath.Matrix)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single,SlimMath.Quaternion@)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:SlimMath.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Slerp(SlimMath.Quaternion@,SlimMath.Quaternion@,System.Single,SlimMath.Quaternion@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Slerp(SlimMath.Quaternion,SlimMath.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.Squad(SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@,System.Single,SlimMath.Quaternion@)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Thrid source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:SlimMath.Quaternion.Squad(SlimMath.Quaternion,SlimMath.Quaternion,SlimMath.Quaternion,SlimMath.Quaternion,System.Single)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Thrid source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.SquadSetup(SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@,SlimMath.Quaternion@)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="result1">When the method completes, contains the first control point for spherical quadrangle interpolation.</param>
            <param name="result2">When the method completes, contains the second control point for spherical quadrangle interpolation.</param>
            <param name="result3">When the method completes, contains the third control point for spherical quadrangle interpolation.</param>
        </member>
        <member name="M:SlimMath.Quaternion.SquadSetup(SlimMath.Quaternion,SlimMath.Quaternion,SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.op_Addition(SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.op_Subtraction(SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.op_UnaryNegation(SlimMath.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.op_Multiply(System.Single,SlimMath.Quaternion)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scalar">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.op_Multiply(SlimMath.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scalar">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.op_Multiply(SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.op_Division(SlimMath.Quaternion,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.op_Equality(SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.op_Inequality(SlimMath.Quaternion,SlimMath.Quaternion)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Quaternion.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Quaternion.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SlimMath.Quaternion.Equals(SlimMath.Quaternion)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Quaternion"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Quaternion"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Quaternion"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Quaternion.Equals(SlimMath.Quaternion,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Quaternion"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Quaternion"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Quaternion"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SlimMath.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is equivalent to the identity quaternion.
            </summary>
            <value>
            <c>true</c> if this instance is an identity quaternion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SlimMath.Quaternion.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:SlimMath.Quaternion.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
            <value>The quaternion's angle.</value>
        </member>
        <member name="P:SlimMath.Quaternion.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
            <value>The axis components of the quaternion.</value>
        </member>
        <member name="P:SlimMath.Quaternion.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <remarks>
            <see cref="P:SlimMath.Quaternion.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:SlimMath.Quaternion.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <remarks>
            This property may be preferred to <see cref="P:SlimMath.Quaternion.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:SlimMath.Quaternion.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:SlimMath.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="F:SlimMath.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:SlimMath.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="M:SlimMath.Ray.#ctor(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Ray"/> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.Ray@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.Plane@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.BoundingBox@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.Intersects(SlimMath.BoundingSphere@,SlimMath.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SlimMath.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:SlimMath.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SlimMath.Ray.op_Equality(SlimMath.Ray,SlimMath.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Ray.op_Inequality(SlimMath.Ray,SlimMath.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SlimMath.Ray.Equals(SlimMath.Ray)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:SlimMath.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:SlimMath.Utilities.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="M:SlimMath.Utilities.RoundInt(System.Single)">
            <summary>
            Function to round a floating point value to an integer.
            </summary>
            <param name="value">Value to round.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="M:SlimMath.Utilities.RoundUInt(System.Single)">
            <summary>
            Function to round a floating point value to an unsigned integer.
            </summary>
            <param name="value">Value to round.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="M:SlimMath.Utilities.Round(System.Single)">
            <summary>
            Function to round a floating point value to an integer.
            </summary>
            <param name="value">Value to round.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="M:SlimMath.Utilities.EpsilonEquals(System.Single,System.Single)">
            <summary>
            Compares two floating point numbers based on an epsilon zero tolerance.
            </summary>
            <param name="left">The first number to compare.</param>
            <param name="right">The second number to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> is within epsilon of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Utilities.EpsilonEquals(System.Single,System.Single,System.Single)">
            <summary>
            Compares two floating point numbers based on an epsilon zero tolerance.
            </summary>
            <param name="left">The first number to compare.</param>
            <param name="right">The second number to compare.</param>
            <param name="epsilon">The epsilon value to use for zero tolerance.</param>
            <returns><c>true</c> if <paramref name="left"/> is within epsilon of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Utilities.Swap``1(``0@,``0@)">
            <summary>
            Swaps two items.
            </summary>
            <typeparam name="T">The type of the items to swap.</typeparam>
            <param name="left">The first item to swap.</param>
            <param name="right">The second item to swap.</param>
        </member>
        <member name="M:SlimMath.Utilities.Array``1(``0,System.Int32)">
            <summary>
            Does something with arrays.
            </summary>
            <typeparam name="T">Most likely the type of elements in the array.</typeparam>
            <param name="value">Who knows what this is for.</param>
            <param name="count">Probably the length of the array.</param>
            <returns>An array of who knows what.</returns>
        </member>
        <member name="T:SlimMath.Vector2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:SlimMath.Vector2.SizeInBytes">
            <summary>
            The size of the <see cref="T:SlimMath.Vector2"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SlimMath.Vector2.Zero">
            <summary>
            A <see cref="T:SlimMath.Vector2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SlimMath.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:SlimMath.Vector2"/> (1, 0).
            </summary>
        </member>
        <member name="F:SlimMath.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:SlimMath.Vector2"/> (0, 1).
            </summary>
        </member>
        <member name="F:SlimMath.Vector2.One">
            <summary>
            A <see cref="T:SlimMath.Vector2"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SlimMath.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:SlimMath.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:SlimMath.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SlimMath.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector2"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector2"/> struct.
            </summary>
            <param name="values">The values to assign to the X and Y components of the vector. This must be an array with two elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        </member>
        <member name="M:SlimMath.Vector2.Round(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Function to round the vector elements to their nearest whole values.
            </summary>
            <param name="vector">Vector to round.</param>
            <param name="result">Rounded vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Round(SlimMath.Vector2)">
            <summary>
            Function to round the vector elements to their nearest whole values.
            </summary>
            <param name="vector">Vector to round.</param>
            <returns>Rounded vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Implicit(System.Drawing.Point)~SlimMath.Vector2">
            <summary>
            Operator to convert a System.Drawing.System.Drawing.Point to a 2D vector.
            </summary>
            <param name="point">System.Drawing.System.Drawing.Point to convert.</param>
            <returns>A new 2D vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Implicit(System.Drawing.PointF)~SlimMath.Vector2">
            <summary>
            Operator to convert a System.Drawing.System.Drawing.PointF to a 2D vector.
            </summary>
            <param name="point">System.Drawing.System.Drawing.PointF to convert.</param>
            <returns>A new 2D vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Implicit(System.Drawing.Size)~SlimMath.Vector2">
            <summary>
            Operator to convert a System.Drawing.System.Drawing.Size to a 2D vector.
            </summary>
            <param name="point">System.Drawing.System.Drawing.Size to convert.</param>
            <returns>A new 2D vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Implicit(System.Drawing.SizeF)~SlimMath.Vector2">
            <summary>
            Operator to convert a System.Drawing.System.Drawing.SizeF to a 2D vector.
            </summary>
            <param name="point">System.Drawing.System.Drawing.SizeF to convert.</param>
            <returns>A new 2D vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Explicit(SlimMath.Vector2)~System.Drawing.Point">
            <summary>
            Operator to convert a 2D vector to a System.Drawing.System.Drawing.Point.
            </summary>
            <param name="vector">2D Gorgon vector.</param>
            <returns>A new point with the values from the vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Implicit(SlimMath.Vector2)~System.Drawing.PointF">
            <summary>
            Operator to convert a 2D vector to a System.Drawing.System.Drawing.PointF.
            </summary>
            <param name="vector">2D Gorgon vector.</param>
            <returns>A new point with the values from the vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Explicit(SlimMath.Vector2)~System.Drawing.Size">
            <summary>
            Operator to convert a 2D vector to a System.Drawing.System.Drawing.Size.
            </summary>
            <param name="vector">2D Gorgon vector.</param>
            <returns>A new point with the values from the vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Implicit(SlimMath.Vector2)~System.Drawing.SizeF">
            <summary>
            Operator to convert a 2D vector to a System.Drawing.System.Drawing.SizeF.
            </summary>
            <param name="vector">2D Gorgon vector.</param>
            <returns>A new point with the values from the vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector2"/> struct.
            </summary>
            <param name="point">A System.Drawing point.</param>
        </member>
        <member name="M:SlimMath.Vector2.#ctor(System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector2"/> struct.
            </summary>
            <param name="point">A System.Drawing point.</param>
        </member>
        <member name="M:SlimMath.Vector2.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector2"/> struct.
            </summary>
            <param name="size">A System.Drawing size.</param>
        </member>
        <member name="M:SlimMath.Vector2.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector2"/> struct.
            </summary>
            <param name="point">A System.Drawing point.</param>
        </member>
        <member name="M:SlimMath.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:SlimMath.Vector2.Negate">
            <summary>
            Reverses the direction of a given vector.
            </summary>
        </member>
        <member name="M:SlimMath.Vector2.Abs">
            <summary>
            Takes the absolute value of each component.
            </summary>
        </member>
        <member name="M:SlimMath.Vector2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Sqrt(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Takes the square root of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root of.</param>
            <param name="result">When the method completes, contains a vector that is the square root of the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Sqrt(SlimMath.Vector2)">
            <summary>
            Takes the square root of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root of.</param>
            <returns>A vector that is the square root of the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Reciprocal(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the reciprocal of.</param>
            <param name="result">When the method completes, contains a vector that is the reciprocal of the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Reciprocal(SlimMath.Vector2)">
            <summary>
            Takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the reciprocal of.</param>
            <returns>A vector that is the reciprocal of the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.ReciprocalSqrt(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Takes the square root of each component in the vector and than takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root and recpirocal of.</param>
            <param name="result">When the method completes, contains a vector that is the square root and reciprocal of the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.ReciprocalSqrt(SlimMath.Vector2)">
            <summary>
            Takes the square root of each component in the vector and than takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root and recpirocal of.</param>
            <returns>A vector that is the square root and reciprocal of the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Exp(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Takes e raised to the component in the vector.
            </summary>
            <param name="value">The value to take e raised to each component of.</param>
            <param name="result">When the method completes, contains a vector that has e raised to each of the components in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Exp(SlimMath.Vector2)">
            <summary>
            Takes e raised to the component in the vector.
            </summary>
            <param name="value">The value to take e raised to each component of.</param>
            <returns>A vector that has e raised to each of the components in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.SinCos(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Takes the sine and than the cosine of each component in the vector.
            </summary>
            <param name="value">The vector to take the sine and cosine of.</param>
            <param name="sinResult">When the method completes, contains the sine of each component in the input vector.</param>
            <param name="cosResult">When the method completes, contains the cpsome pf each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Sin(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Takes the sine of each component in the vector.
            </summary>
            <param name="value">The vector to take the sine of.</param>
            <param name="result">When the method completes, a vector that contains the sine of each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Sin(SlimMath.Vector2)">
            <summary>
            Takes the sine of each component in the vector.
            </summary>
            <param name="value">The vector to take the sine of.</param>
            <returns>A vector that contains the sine of each component in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Cos(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Takes the cosine of each component in the vector.
            </summary>
            <param name="value">The vector to take the cosine of.</param>
            <param name="result">When the method completes, contains a vector that contains the cosine of each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Cos(SlimMath.Vector2)">
            <summary>
            Takes the cosine of each component in the vector.
            </summary>
            <param name="value">The vector to take the cosine of.</param>
            <returns>A vector that contains the cosine of each component in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Tan(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Takes the tangent of each component in the vector.
            </summary>
            <param name="value">The vector to take the tangent of.</param>
            <param name="result">When the method completes, contains a vector that contains the tangent of each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Tan(SlimMath.Vector2)">
            <summary>
            Takes the tangent of each component in the vector.
            </summary>
            <param name="value">The vector to take the tangent of.</param>
            <returns>A vector that contains the tangent of each component in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Add(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector2.Add(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Subtract(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector2.Subtract(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Multiply(SlimMath.Vector2@,System.Single,SlimMath.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Multiply(SlimMath.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Modulate(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Modulate(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Divide(SlimMath.Vector2@,System.Single,SlimMath.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Divide(SlimMath.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Negate(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SlimMath.Vector2.Negate(SlimMath.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Abs(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Takes the absolute value of each component.
            </summary>
            <param name="value">The vector to take the absolute value of.</param>
            <param name="result">When the method completes, contains a vector that has all positive components.</param>
        </member>
        <member name="M:SlimMath.Vector2.Abs(SlimMath.Vector2)">
            <summary>
            Takes the absolute value of each component.
            </summary>
            <param name="value">The vector to take the absolute value of.</param>
            <returns>A vector that has all positive components.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Barycentric(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@,System.Single,System.Single,SlimMath.Vector2@)">
            <summary>
            Returns a <see cref="T:SlimMath.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:SlimMath.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimMath.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimMath.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SlimMath.Vector2.Barycentric(SlimMath.Vector2,SlimMath.Vector2,SlimMath.Vector2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:SlimMath.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:SlimMath.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimMath.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimMath.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:SlimMath.Vector2"/> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Clamp(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SlimMath.Vector2.Clamp(SlimMath.Vector2,SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Distance(SlimMath.Vector2@,SlimMath.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:SlimMath.Vector2.DistanceSquared(SlimMath.Vector2@,SlimMath.Vector2@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.Distance(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:SlimMath.Vector2.DistanceSquared(SlimMath.Vector2,SlimMath.Vector2)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.DistanceSquared(SlimMath.Vector2@,SlimMath.Vector2@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.DistanceSquared(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.Dot(SlimMath.Vector2@,SlimMath.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector2.Dot(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Perp(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Calculates a vector that is perpendicular to the given vector.
            </summary>
            <param name="value">The vector to base the perpendicular vector on.</param>
            <param name="result">When the method completes, contains the perpendicular vector.</param>
            <remarks>
            This method finds the perpendicular vector using a 90 degree counterclockwise rotation.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.Perp(SlimMath.Vector2)">
            <summary>
            Calculates a vector that is perpendicular to the given vector.
            </summary>
            <param name="value">The vector to base the perpendicular vector on.</param>
            <returns>The perpendicular vector.</returns>
            <remarks>
            This method finds the perpendicular vector using a 90 degree counterclockwise rotation.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.PerpDot(SlimMath.Vector2@,SlimMath.Vector2@,System.Single@)">
            <summary>
            Calculates the perp dot product.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the perp dot product of the two vectors.</param>
            <remarks>
            The perp dot product is defined as taking the dot product of the perpendicular vector
            of the left vector with the right vector.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.PerpDot(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Calculates the perp dot product.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The perp dot product of the two vectors.</returns>
            <remarks>
            The perp dot product is defined as taking the dot product of the perpendicular vector
            of the left vector with the right vector.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.Normalize(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Normalize(SlimMath.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Lerp(SlimMath.Vector2@,SlimMath.Vector2@,System.Single,SlimMath.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.Lerp(SlimMath.Vector2,SlimMath.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.SmoothStep(SlimMath.Vector2@,SlimMath.Vector2@,System.Single,SlimMath.Vector2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector2.SmoothStep(SlimMath.Vector2,SlimMath.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Hermite(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@,System.Single,SlimMath.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SlimMath.Vector2.Hermite(SlimMath.Vector2,SlimMath.Vector2,SlimMath.Vector2,SlimMath.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SlimMath.Vector2.CatmullRom(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@,System.Single,SlimMath.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SlimMath.Vector2.CatmullRom(SlimMath.Vector2,SlimMath.Vector2,SlimMath.Vector2,SlimMath.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Max(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SlimMath.Vector2.Max(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Min(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SlimMath.Vector2.Min(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Reflect(SlimMath.Vector2@,SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SlimMath.Vector2.Reflect(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SlimMath.Vector2.Refract(SlimMath.Vector2@,SlimMath.Vector2@,System.Single,SlimMath.Vector2@)">
            <summary>
            Returns the fraction of a vector off a surface that has the specified normal and index.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="index">Index of refraction.</param>
            <param name="result">When the method completes, contains the refracted vector.</param>
        </member>
        <member name="M:SlimMath.Vector2.Refract(SlimMath.Vector2,SlimMath.Vector2,System.Single)">
            <summary>
            Returns the fraction of a vector off a surface that has the specified normal and index.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="index">Index of refraction.</param>
            <returns>The refracted vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Orthogonalize(System.Collections.Generic.IList{SlimMath.Vector2},System.Collections.Generic.IList{SlimMath.Vector2})">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector2.Orthonormalize(System.Collections.Generic.IList{SlimMath.Vector2},System.Collections.Generic.IList{SlimMath.Vector2})">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector2.Transform(SlimMath.Vector2@,SlimMath.Quaternion@,SlimMath.Vector2@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:SlimMath.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimMath.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimMath.Vector4"/>.</param>
        </member>
        <member name="M:SlimMath.Vector2.Transform(SlimMath.Vector2,SlimMath.Quaternion)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:SlimMath.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimMath.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimMath.Vector4"/>.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Transform(System.Collections.Generic.IList{SlimMath.Vector2},SlimMath.Quaternion@,System.Collections.Generic.IList{SlimMath.Vector2})">
            <summary>
            Transforms an array of vectors by the given <see cref="T:SlimMath.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:SlimMath.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector2.Transform(SlimMath.Vector2@,SlimMath.Matrix@,SlimMath.Vector4@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimMath.Vector4"/>.</param>
        </member>
        <member name="M:SlimMath.Vector2.Transform(SlimMath.Vector2,SlimMath.Matrix)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <returns>The transformed <see cref="T:SlimMath.Vector4"/>.</returns>
        </member>
        <member name="M:SlimMath.Vector2.Transform(System.Collections.Generic.IList{SlimMath.Vector2},SlimMath.Matrix@,System.Collections.Generic.IList{SlimMath.Vector4})">
            <summary>
            Transforms an array of 2D vectors by the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector2.TransformCoordinate(SlimMath.Vector2@,SlimMath.Matrix@,SlimMath.Vector2@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.TransformCoordinate(SlimMath.Vector2,SlimMath.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.TransformCoordinate(System.Collections.Generic.IList{SlimMath.Vector2},SlimMath.Matrix@,System.Collections.Generic.IList{SlimMath.Vector2})">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="source">The array of coordinate vectors to trasnform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.TransformNormal(SlimMath.Vector2@,SlimMath.Matrix@,SlimMath.Vector2@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.TransformNormal(SlimMath.Vector2,SlimMath.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.TransformNormal(System.Collections.Generic.IList{SlimMath.Vector2},SlimMath.Matrix@,System.Collections.Generic.IList{SlimMath.Vector2})">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector2.op_Addition(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_UnaryPlus(SlimMath.Vector2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Subtraction(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_UnaryNegation(SlimMath.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Multiply(System.Single,SlimMath.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Multiply(SlimMath.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Division(SlimMath.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Equality(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Inequality(SlimMath.Vector2,SlimMath.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Implicit(SlimMath.Vector2)~SlimMath.Vector3">
            <summary>
            Performs an implicit conversion from <see cref="T:SlimMath.Vector2"/> to <see cref="T:SlimMath.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SlimMath.Vector2.op_Implicit(SlimMath.Vector2)~SlimMath.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:SlimMath.Vector2"/> to <see cref="T:SlimMath.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SlimMath.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SlimMath.Vector2.Equals(SlimMath.Vector2)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Vector2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Vector2.Equals(SlimMath.Vector2,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector2"/> is equal to this instance using an epsilon value.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Vector2"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SlimMath.Vector2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:SlimMath.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <remarks>
            <see cref="P:SlimMath.Vector2.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:SlimMath.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <remarks>
            This property may be preferred to <see cref="P:SlimMath.Vector2.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:SlimMath.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="T:SlimMath.Vector3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:SlimMath.Vector3.SizeInBytes">
            <summary>
            The size of the <see cref="T:SlimMath.Vector3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SlimMath.Vector3.Zero">
            <summary>
            A <see cref="T:SlimMath.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SlimMath.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:SlimMath.Vector3"/> (1, 0, 0).
            </summary>
        </member>
        <member name="F:SlimMath.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:SlimMath.Vector3"/> (0, 1, 0).
            </summary>
        </member>
        <member name="F:SlimMath.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:SlimMath.Vector3"/> (0, 0, 1).
            </summary>
        </member>
        <member name="F:SlimMath.Vector3.One">
            <summary>
            A <see cref="T:SlimMath.Vector3"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SlimMath.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:SlimMath.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:SlimMath.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:SlimMath.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SlimMath.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector3"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.#ctor(SlimMath.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector3"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector3"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, and Z components of the vector. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than three elements.</exception>
        </member>
        <member name="M:SlimMath.Vector3.Round(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Function to round the vector elements to their nearest whole values.
            </summary>
            <param name="vector">Vector to round.</param>
            <param name="result">Rounded vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Round(SlimMath.Vector3)">
            <summary>
            Function to round the vector elements to their nearest whole values.
            </summary>
            <param name="vector">Vector to round.</param>
            <returns>Rounded vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:SlimMath.Vector3.Negate">
            <summary>
            Reverses the direction of a given vector.
            </summary>
        </member>
        <member name="M:SlimMath.Vector3.Abs">
            <summary>
            Takes the absolute value of each component.
            </summary>
        </member>
        <member name="M:SlimMath.Vector3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Sqrt(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Takes the square root of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root of.</param>
            <param name="result">When the method completes, contains a vector that is the square root of the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Sqrt(SlimMath.Vector3)">
            <summary>
            Takes the square root of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root of.</param>
            <returns>A vector that is the square root of the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Reciprocal(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the reciprocal of.</param>
            <param name="result">When the method completes, contains a vector that is the reciprocal of the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Reciprocal(SlimMath.Vector3)">
            <summary>
            Takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the reciprocal of.</param>
            <returns>A vector that is the reciprocal of the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.ReciprocalSqrt(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Takes the square root of each component in the vector and than takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root and recpirocal of.</param>
            <param name="result">When the method completes, contains a vector that is the square root and reciprocal of the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.ReciprocalSqrt(SlimMath.Vector3)">
            <summary>
            Takes the square root of each component in the vector and than takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root and recpirocal of.</param>
            <returns>A vector that is the square root and reciprocal of the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Exp(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Takes e raised to the component in the vector.
            </summary>
            <param name="value">The value to take e raised to each component of.</param>
            <param name="result">When the method completes, contains a vector that has e raised to each of the components in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Exp(SlimMath.Vector3)">
            <summary>
            Takes e raised to the component in the vector.
            </summary>
            <param name="value">The value to take e raised to each component of.</param>
            <returns>A vector that has e raised to each of the components in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.SinCos(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Takes the sine and than the cosine of each component in the vector.
            </summary>
            <param name="value">The vector to take the sine and cosine of.</param>
            <param name="sinResult">When the method completes, contains the sine of each component in the input vector.</param>
            <param name="cosResult">When the method completes, contains the cpsome pf each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Sin(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Takes the sine of each component in the vector.
            </summary>
            <param name="value">The vector to take the sine of.</param>
            <param name="result">When the method completes, a vector that contains the sine of each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Sin(SlimMath.Vector3)">
            <summary>
            Takes the sine of each component in the vector.
            </summary>
            <param name="value">The vector to take the sine of.</param>
            <returns>A vector that contains the sine of each component in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Cos(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Takes the cosine of each component in the vector.
            </summary>
            <param name="value">The vector to take the cosine of.</param>
            <param name="result">When the method completes, contains a vector that contains the cosine of each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Cos(SlimMath.Vector3)">
            <summary>
            Takes the cosine of each component in the vector.
            </summary>
            <param name="value">The vector to take the cosine of.</param>
            <returns>A vector that contains the cosine of each component in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Tan(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Takes the tangent of each component in the vector.
            </summary>
            <param name="value">The vector to take the tangent of.</param>
            <param name="result">When the method completes, contains a vector that contains the tangent of each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Tan(SlimMath.Vector3)">
            <summary>
            Takes the tangent of each component in the vector.
            </summary>
            <param name="value">The vector to take the tangent of.</param>
            <returns>A vector that contains the tangent of each component in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Add(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector3.Add(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Subtract(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector3.Subtract(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Multiply(SlimMath.Vector3@,System.Single,SlimMath.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Multiply(SlimMath.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Modulate(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Modulate(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Divide(SlimMath.Vector3@,System.Single,SlimMath.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Divide(SlimMath.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Negate(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SlimMath.Vector3.Negate(SlimMath.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Abs(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Takes the absolute value of each component.
            </summary>
            <param name="value">The vector to take the absolute value of.</param>
            <param name="result">When the method completes, contains a vector that has all positive components.</param>
        </member>
        <member name="M:SlimMath.Vector3.Abs(SlimMath.Vector3)">
            <summary>
            Takes the absolute value of each component.
            </summary>
            <param name="value">The vector to take the absolute value of.</param>
            <returns>A vector that has all positive components.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Barycentric(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,System.Single,System.Single,SlimMath.Vector3@)">
            <summary>
            Returns a <see cref="T:SlimMath.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:SlimMath.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimMath.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimMath.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SlimMath.Vector3.Barycentric(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:SlimMath.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:SlimMath.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimMath.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimMath.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:SlimMath.Vector3"/> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Clamp(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SlimMath.Vector3.Clamp(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Cross(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector3.Cross(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.TripleProduct(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,System.Single@)">
            <summary>
            Calculates the tripple cross product of three vectors.
            </summary>
            <param name="value1">First source vector.</param>
            <param name="value2">Second source vector.</param>
            <param name="value3">Third source vector.</param>
            <param name="result">When the method completes, contains the tripple cross product of the three vectors.</param>
        </member>
        <member name="M:SlimMath.Vector3.TripleProduct(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Calculates the tripple cross product of three vectors.
            </summary>
            <param name="value1">First source vector.</param>
            <param name="value2">Second source vector.</param>
            <param name="value3">Third source vector.</param>
            <returns>The tripple cross product of the three vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Distance(SlimMath.Vector3@,SlimMath.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:SlimMath.Vector3.DistanceSquared(SlimMath.Vector3@,SlimMath.Vector3@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.Distance(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:SlimMath.Vector3.DistanceSquared(SlimMath.Vector3,SlimMath.Vector3)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.DistanceSquared(SlimMath.Vector3@,SlimMath.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.DistanceSquared(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.Dot(SlimMath.Vector3@,SlimMath.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector3.Dot(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Normalize(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Normalize(SlimMath.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Lerp(SlimMath.Vector3@,SlimMath.Vector3@,System.Single,SlimMath.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.Lerp(SlimMath.Vector3,SlimMath.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.SmoothStep(SlimMath.Vector3@,SlimMath.Vector3@,System.Single,SlimMath.Vector3@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector3.SmoothStep(SlimMath.Vector3,SlimMath.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Hermite(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,System.Single,SlimMath.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SlimMath.Vector3.Hermite(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SlimMath.Vector3.CatmullRom(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@,System.Single,SlimMath.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SlimMath.Vector3.CatmullRom(SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3,SlimMath.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Max(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SlimMath.Vector3.Max(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Min(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SlimMath.Vector3.Min(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Project(SlimMath.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@,SlimMath.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:SlimMath.Vector3.Project(SlimMath.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Unproject(SlimMath.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix@,SlimMath.Vector3@)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:SlimMath.Vector3.Unproject(SlimMath.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SlimMath.Matrix)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Reflect(SlimMath.Vector3@,SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SlimMath.Vector3.Reflect(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:SlimMath.Vector3.Refract(SlimMath.Vector3@,SlimMath.Vector3@,System.Single,SlimMath.Vector3@)">
            <summary>
            Returns the fraction of a vector off a surface that has the specified normal and index.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="index">Index of refraction.</param>
            <param name="result">When the method completes, contains the refracted vector.</param>
        </member>
        <member name="M:SlimMath.Vector3.Refract(SlimMath.Vector3,SlimMath.Vector3,System.Single)">
            <summary>
            Returns the fraction of a vector off a surface that has the specified normal and index.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="index">Index of refraction.</param>
            <returns>The refracted vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Orthogonalize(System.Collections.Generic.IList{SlimMath.Vector3},System.Collections.Generic.IList{SlimMath.Vector3})">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector3.Orthonormalize(System.Collections.Generic.IList{SlimMath.Vector3},System.Collections.Generic.IList{SlimMath.Vector3})">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector3.Transform(SlimMath.Vector3@,SlimMath.Quaternion@,SlimMath.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:SlimMath.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimMath.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimMath.Vector4"/>.</param>
        </member>
        <member name="M:SlimMath.Vector3.Transform(SlimMath.Vector3,SlimMath.Quaternion)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:SlimMath.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimMath.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimMath.Vector4"/>.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Transform(System.Collections.Generic.IList{SlimMath.Vector3},SlimMath.Quaternion@,System.Collections.Generic.IList{SlimMath.Vector3})">
            <summary>
            Transforms an array of vectors by the given <see cref="T:SlimMath.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:SlimMath.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector3.Transform(SlimMath.Vector3@,SlimMath.Matrix@,SlimMath.Vector4@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimMath.Vector4"/>.</param>
        </member>
        <member name="M:SlimMath.Vector3.Transform(SlimMath.Vector3,SlimMath.Matrix)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <returns>The transformed <see cref="T:SlimMath.Vector4"/>.</returns>
        </member>
        <member name="M:SlimMath.Vector3.Transform(System.Collections.Generic.IList{SlimMath.Vector3},SlimMath.Matrix@,System.Collections.Generic.IList{SlimMath.Vector4})">
            <summary>
            Transforms an array of 3D vectors by the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector3.TransformCoordinate(SlimMath.Vector3@,SlimMath.Matrix@,SlimMath.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.TransformCoordinate(SlimMath.Vector3,SlimMath.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.TransformCoordinate(System.Collections.Generic.IList{SlimMath.Vector3},SlimMath.Matrix@,System.Collections.Generic.IList{SlimMath.Vector3})">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="source">The array of coordinate vectors to trasnform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.TransformNormal(SlimMath.Vector3@,SlimMath.Matrix@,SlimMath.Vector3@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.TransformNormal(SlimMath.Vector3,SlimMath.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.TransformNormal(System.Collections.Generic.IList{SlimMath.Vector3},SlimMath.Matrix@,System.Collections.Generic.IList{SlimMath.Vector3})">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector3.op_Addition(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_UnaryPlus(SlimMath.Vector3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_Subtraction(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_UnaryNegation(SlimMath.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_Multiply(System.Single,SlimMath.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_Multiply(SlimMath.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_Division(SlimMath.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_Equality(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_Inequality(SlimMath.Vector3,SlimMath.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_Explicit(SlimMath.Vector3)~SlimMath.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:SlimMath.Vector3"/> to <see cref="T:SlimMath.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SlimMath.Vector3.op_Implicit(SlimMath.Vector3)~SlimMath.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:SlimMath.Vector3"/> to <see cref="T:SlimMath.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SlimMath.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SlimMath.Vector3.Equals(SlimMath.Vector3)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Vector3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Vector3.Equals(SlimMath.Vector3,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Vector3"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SlimMath.Vector3.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:SlimMath.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <remarks>
            <see cref="P:SlimMath.Vector3.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:SlimMath.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <remarks>
            This property may be preferred to <see cref="P:SlimMath.Vector3.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:SlimMath.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="T:SlimMath.Vector4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.SizeInBytes">
            <summary>
            The size of the <see cref="T:SlimMath.Vector4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.Zero">
            <summary>
            A <see cref="T:SlimMath.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.UnitX">
            <summary>
            The X unit <see cref="T:SlimMath.Vector4"/> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.UnitY">
            <summary>
            The Y unit <see cref="T:SlimMath.Vector4"/> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.UnitZ">
            <summary>
            The Z unit <see cref="T:SlimMath.Vector4"/> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.UnitW">
            <summary>
            The W unit <see cref="T:SlimMath.Vector4"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.One">
            <summary>
            A <see cref="T:SlimMath.Vector4"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:SlimMath.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:SlimMath.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SlimMath.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.#ctor(SlimMath.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.#ctor(SlimMath.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Vector4"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SlimMath.Vector4.Round(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Function to round the vector elements to their nearest whole values.
            </summary>
            <param name="vector">Vector to round.</param>
            <param name="result">Rounded vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Round(SlimMath.Vector4)">
            <summary>
            Function to round the vector elements to their nearest whole values.
            </summary>
            <param name="vector">Vector to round.</param>
            <returns>Rounded vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:SlimMath.Vector4.Negate">
            <summary>
            Reverses the direction of a given vector.
            </summary>
        </member>
        <member name="M:SlimMath.Vector4.Abs">
            <summary>
            Takes the absolute value of each component.
            </summary>
        </member>
        <member name="M:SlimMath.Vector4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Sqrt(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Takes the square root of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root of.</param>
            <param name="result">When the method completes, contains a vector that is the square root of the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Sqrt(SlimMath.Vector4)">
            <summary>
            Takes the square root of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root of.</param>
            <returns>A vector that is the square root of the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Reciprocal(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the reciprocal of.</param>
            <param name="result">When the method completes, contains a vector that is the reciprocal of the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Reciprocal(SlimMath.Vector4)">
            <summary>
            Takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the reciprocal of.</param>
            <returns>A vector that is the reciprocal of the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.ReciprocalSqrt(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Takes the square root of each component in the vector and than takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root and recpirocal of.</param>
            <param name="result">When the method completes, contains a vector that is the square root and reciprocal of the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.ReciprocalSqrt(SlimMath.Vector4)">
            <summary>
            Takes the square root of each component in the vector and than takes the reciprocal of each component in the vector.
            </summary>
            <param name="value">The vector to take the square root and recpirocal of.</param>
            <returns>A vector that is the square root and reciprocal of the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Exp(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Takes e raised to the component in the vector.
            </summary>
            <param name="value">The value to take e raised to each component of.</param>
            <param name="result">When the method completes, contains a vector that has e raised to each of the components in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Exp(SlimMath.Vector4)">
            <summary>
            Takes e raised to the component in the vector.
            </summary>
            <param name="value">The value to take e raised to each component of.</param>
            <returns>A vector that has e raised to each of the components in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.SinCos(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Takes the sine and than the cosine of each component in the vector.
            </summary>
            <param name="value">The vector to take the sine and cosine of.</param>
            <param name="sinResult">When the method completes, contains the sine of each component in the input vector.</param>
            <param name="cosResult">When the method completes, contains the cpsome pf each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Sin(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Takes the sine of each component in the vector.
            </summary>
            <param name="value">The vector to take the sine of.</param>
            <param name="result">When the method completes, a vector that contains the sine of each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Sin(SlimMath.Vector4)">
            <summary>
            Takes the sine of each component in the vector.
            </summary>
            <param name="value">The vector to take the sine of.</param>
            <returns>A vector that contains the sine of each component in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Cos(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Takes the cosine of each component in the vector.
            </summary>
            <param name="value">The vector to take the cosine of.</param>
            <param name="result">When the method completes, contains a vector that contains the cosine of each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Cos(SlimMath.Vector4)">
            <summary>
            Takes the cosine of each component in the vector.
            </summary>
            <param name="value">The vector to take the cosine of.</param>
            <returns>A vector that contains the cosine of each component in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Tan(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Takes the tangent of each component in the vector.
            </summary>
            <param name="value">The vector to take the tangent of.</param>
            <param name="result">When the method completes, contains a vector that contains the tangent of each component in the input vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Tan(SlimMath.Vector4)">
            <summary>
            Takes the tangent of each component in the vector.
            </summary>
            <param name="value">The vector to take the tangent of.</param>
            <returns>A vector that contains the tangent of each component in the input vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Add(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector4.Add(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Subtract(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector4.Subtract(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Multiply(SlimMath.Vector4@,System.Single,SlimMath.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Multiply(SlimMath.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Modulate(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Modulate(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Divide(SlimMath.Vector4@,System.Single,SlimMath.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Divide(SlimMath.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Negate(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SlimMath.Vector4.Negate(SlimMath.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Abs(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Takes the absolute value of each component.
            </summary>
            <param name="value">The vector to take the absolute value of.</param>
            <param name="result">When the method completes, contains a vector that has all positive components.</param>
        </member>
        <member name="M:SlimMath.Vector4.Abs(SlimMath.Vector4)">
            <summary>
            Takes the absolute value of each component.
            </summary>
            <param name="value">The vector to take the absolute value of.</param>
            <returns>A vector that has all positive components.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Barycentric(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@,System.Single,System.Single,SlimMath.Vector4@)">
            <summary>
            Returns a <see cref="T:SlimMath.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:SlimMath.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimMath.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimMath.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:SlimMath.Vector4.Barycentric(SlimMath.Vector4,SlimMath.Vector4,SlimMath.Vector4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:SlimMath.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:SlimMath.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:SlimMath.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:SlimMath.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:SlimMath.Vector4"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Clamp(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SlimMath.Vector4.Clamp(SlimMath.Vector4,SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Distance(SlimMath.Vector4@,SlimMath.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:SlimMath.Vector4.DistanceSquared(SlimMath.Vector4@,SlimMath.Vector4@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector4.Distance(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:SlimMath.Vector4.DistanceSquared(SlimMath.Vector4,SlimMath.Vector4)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector4.DistanceSquared(SlimMath.Vector4@,SlimMath.Vector4@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector4.DistanceSquared(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:SlimMath.Vector4.Dot(SlimMath.Vector4@,SlimMath.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector4.Dot(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Normalize(SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:SlimMath.Vector4.Normalize(SlimMath.Vector4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Lerp(SlimMath.Vector4@,SlimMath.Vector4@,System.Single,SlimMath.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Vector4.Lerp(SlimMath.Vector4,SlimMath.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SlimMath.Vector4.SmoothStep(SlimMath.Vector4@,SlimMath.Vector4@,System.Single,SlimMath.Vector4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:SlimMath.Vector4.SmoothStep(SlimMath.Vector4,SlimMath.Vector4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Hermite(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@,System.Single,SlimMath.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SlimMath.Vector4.Hermite(SlimMath.Vector4,SlimMath.Vector4,SlimMath.Vector4,SlimMath.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:SlimMath.Vector4.CatmullRom(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@,System.Single,SlimMath.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SlimMath.Vector4.CatmullRom(SlimMath.Vector4,SlimMath.Vector4,SlimMath.Vector4,SlimMath.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Max(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SlimMath.Vector4.Max(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Min(SlimMath.Vector4@,SlimMath.Vector4@,SlimMath.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SlimMath.Vector4.Min(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Orthogonalize(System.Collections.Generic.IList{SlimMath.Vector4},System.Collections.Generic.IList{SlimMath.Vector4})">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector4.Orthonormalize(System.Collections.Generic.IList{SlimMath.Vector4},System.Collections.Generic.IList{SlimMath.Vector4})">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector4.Transform(SlimMath.Vector4@,SlimMath.Quaternion@,SlimMath.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:SlimMath.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimMath.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimMath.Vector4"/>.</param>
        </member>
        <member name="M:SlimMath.Vector4.Transform(SlimMath.Vector4,SlimMath.Quaternion)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:SlimMath.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimMath.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimMath.Vector4"/>.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Transform(System.Collections.Generic.IList{SlimMath.Vector4},SlimMath.Quaternion@,System.Collections.Generic.IList{SlimMath.Vector4})">
            <summary>
            Transforms an array of vectors by the given <see cref="T:SlimMath.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:SlimMath.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector4.Transform(SlimMath.Vector4@,SlimMath.Matrix@,SlimMath.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimMath.Vector4"/>.</param>
        </member>
        <member name="M:SlimMath.Vector4.Transform(SlimMath.Vector4,SlimMath.Matrix)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <returns>The transformed <see cref="T:SlimMath.Vector4"/>.</returns>
        </member>
        <member name="M:SlimMath.Vector4.Transform(System.Collections.Generic.IList{SlimMath.Vector4},SlimMath.Matrix@,System.Collections.Generic.IList{SlimMath.Vector4})">
            <summary>
            Transforms an array of 4D vectors by the given <see cref="T:SlimMath.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:SlimMath.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:SlimMath.Vector4.op_Addition(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_UnaryPlus(SlimMath.Vector4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_Subtraction(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_UnaryNegation(SlimMath.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_Multiply(System.Single,SlimMath.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_Multiply(SlimMath.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_Division(SlimMath.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scalar">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_Equality(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_Inequality(SlimMath.Vector4,SlimMath.Vector4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_Explicit(SlimMath.Vector4)~SlimMath.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:SlimMath.Vector4"/> to <see cref="T:SlimMath.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SlimMath.Vector4.op_Explicit(SlimMath.Vector4)~SlimMath.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SlimMath.Vector4"/> to <see cref="T:SlimMath.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SlimMath.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SlimMath.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SlimMath.Vector4.Equals(SlimMath.Vector4)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Vector4.Equals(SlimMath.Vector4,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SlimMath.Vector4"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SlimMath.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SlimMath.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SlimMath.Vector4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:SlimMath.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <remarks>
            <see cref="P:SlimMath.Vector4.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:SlimMath.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <remarks>
            This property may be preferred to <see cref="P:SlimMath.Vector4.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:SlimMath.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
    </members>
</doc>
