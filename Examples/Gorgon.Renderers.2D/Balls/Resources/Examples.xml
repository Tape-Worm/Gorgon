<?xml version="1.0" encoding="utf-8" ?>
<Examples>
  <Category name="Gorgon.Core">
    <Example icon="1" caption="Example 1 - Core functions" path="Gorgon.Common\Example001\bin\Debug\Example001.exe">This example shows some of the functionality available in the common library for Gorgon.
      
The common library houses several utility functions such as:
      
&#x00b7; Basic dialogs.  &#x00b7; System information.   &#x00b7; Various extensions.  &#x00b7; Debugging utilities.
&#x00b7; Plug-in support.  &#x00b7; Log files.   &#x00b7; Base named object collections.   &#x00b7; And a custom data stream type.
    </Example>
    <Example icon="2" caption="Example 2 - Idle time processing" path="Gorgon.Common\Example002\bin\Debug\Example002.exe">Demonstrates how to use the idle loop to do application processing when the CPU is not busy handling UI functionality.  

Gorgon is capable of running an idle loop from anywhere, including inside the form (the previous version only allowed this mode), in an application context or any function that returns true/false values.
    </Example>
    <Example icon="3" caption="Example 3 - Advanced idle time processing and contexts" path="Gorgon.Common\Example003\bin\Debug\Example003.exe">This example extends the previous example and shows how to switch between two different idle loops.  It will also demonstrate how to use an application context to display a logo.

Gorgon can switch between idle processing loops simply by changing a property. This allows for different types of processing to occour given some sort of state change.  Gorgon also supports an application context.  These are useful for displaying splash screens while your main application loads.  Once the app loads, the state is updated and the main UI can be displayed.
    </Example>
    <Example icon="4" caption="Example 4 - Plug-ins" path="Gorgon.Common\Example004\bin\Debug\Example004.exe">Demonstrates how to build and load a plug-in for your application.

Plug-ins allow for extensible application development.  For example, imagine writing a paint application like Gimp.  The basic functionality is fine for simple things, but to really get the most out of it we need to use filters.  Filters are nothing more than image manipulation plug-ins used to extend the functionality of the parent application.

Gorgon allows this along with functionality to check the signing for plug-ins to ensure some level of authenticity, and it will also allow multiple plug-in objects to exist within a single assembly.  This is handy when you don't want to distribute a ton of DLLs.
    </Example>
  </Category>
  <Category name="2D Renderer">
    <Example icon="0" caption="Balls" path="Gorgon.Renderers.2D\Balls\Bin\Debug\Balls.exe">Just some balls bouncing all over the screen.  This is used as a stress test to see how many sprites can be displayed, animated, blended and optionally, blurred at the same time.
    
Note:  This example requires a minimum resoultion of 1280x800.  However, this may be changed by altering the ScreenWidth/ScreenHeight values in the Ball.exe.config file.
    </Example>
  </Category>
</Examples>