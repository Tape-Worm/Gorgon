//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gorgon.Graphics.Example.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Gorgon.Graphics.Example.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // This is the reference to our texture that we&apos;ve loaded.
        ///// Note how it has a &quot;t0&quot; register.  This means that the texture is expected to be 
        ///// located in slot 0, and as such, on the C# side we must ensure that our texture 
        ///// is also bound to slot 0.
        ///Texture2D _texture : register(t0);
        ///// This is a reference to our texture sampler information.
        ///// Like the texture, it too must be assigned to a register slot.
        ///SamplerState _sampler : register(s0);
        ///
        ///
        ///// The transformation matrices combined together. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GlassCubeShaders {
            get {
                return ResourceManager.GetString("GlassCubeShaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #define MAX_KERNEL_SIZE 13
        ///
        ///// Pull in the blitter shader functions.
        ///#GorgonInclude &quot;__Gorgon_TextureBlitter_Shader__&quot;
        ///
        ///// Gaussian blur kernal.
        ///cbuffer GorgonGaussKernelData : register(b0)
        ///{
        ///	int _blurRadius = 6;
        ///	float _weights[MAX_KERNEL_SIZE];
        ///	float4 _offsets[MAX_KERNEL_SIZE];
        ///}
        ///
        ///// Gaussian blur data.
        ///cbuffer GorgonGaussPassSettings : register(b1)
        ///{
        ///	int _passIndex = 0;
        ///}
        ///
        ///// Our pixel shader for blitting textures.
        ///// Function to gather the a single pass of the separable gaussian b [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TestGauss {
            get {
                return ResourceManager.GetString("TestGauss", resourceCulture);
            }
        }
    }
}
