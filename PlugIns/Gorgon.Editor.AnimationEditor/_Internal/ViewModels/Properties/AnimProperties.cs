#region MIT
// 
// Gorgon.
// Copyright (C) 2020 Michael Winsor
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 
// Created: June 28, 2020 6:26:26 PM
// 
#endregion

using Gorgon.Editor.UI;
using Gorgon.Math;

namespace Gorgon.Editor.AnimationEditor
{
    /// <summary>
    /// The view model for animation properties.
    /// </summary>
    internal class AnimProperties
        : HostedPanelViewModelBase<PropertiesParameters>, IProperties
    {
        #region Variables.
        // The length of the animation, in seconds.
        private float _length;
        // The frames per second for the animation.
        private float _fps;
        // Flag to indicate that the animation is looping.
        private bool _looped;
        // The number of loops before the animation ends.
        private int _loopCount;        
        #endregion

        #region Properties.
        /// <summary>Property to return whether the panel is modal.</summary>
        public override bool IsModal => true;

        /// <summary>Property to set or return the length of the animation, in seconds.</summary>
        public float Length
        {
            get => _length;
            set
            {
                if (_length.EqualsEpsilon(value))
                {
                    return;
                }

                NotifyPropertyChanging(nameof(KeyCount));
                OnPropertyChanging();
                _length = value;
                OnPropertyChanged();
                NotifyPropertyChanged(nameof(KeyCount));
            }
        }

        /// <summary>Property to set or return the frames per second for the animation.</summary>
        public float Fps
        {
            get => _fps;
            set
            {
                if (_fps.EqualsEpsilon(value))
                {
                    return;
                }

                NotifyPropertyChanging(nameof(KeyCount));
                OnPropertyChanging();                
                _fps = value;
                OnPropertyChanged();
                NotifyPropertyChanged(nameof(KeyCount));
            }
        }

        /// <summary>Property to set or return whether the animation is looping or not.</summary>
        public bool IsLooped
        {
            get => _looped;
            set
            {
                if (_looped == value)
                {
                    return;
                }

                OnPropertyChanging();
                _looped = value;
                OnPropertyChanged();
            }
        }

        /// <summary>Property to set or return the number of times the animation may loop.</summary>
        public int LoopCount
        {
            get => _loopCount;
            set
            {
                if (_loopCount == value)
                {
                    return;
                }

                OnPropertyChanging();
                _loopCount = value;
                OnPropertyChanged();
            }
        }

        /// <summary>Property to return the number of keys generated by the length/fps.</summary>
        public int KeyCount => (int)(_length * _fps).Round();
        #endregion

        #region Methods.
        /// <summary>Function to inject dependencies for the view model.</summary>
        /// <param name="injectionParameters">The parameters to inject.</param>
        /// <remarks>
        ///   <para>
        /// Applications should call this when setting up the view model for complex operations and/or dependency injection. The constructor should only be used for simple set up and initialization of objects.
        /// </para>
        ///   <para>
        /// This method is only ever called after the view model has been created, and never again during the lifetime of the view model.
        /// </para>
        /// </remarks>
        protected override void OnInitialize(PropertiesParameters injectionParameters)
        {
            _length = injectionParameters.Animation.Length;
            _fps = injectionParameters.Animation.Fps;
            _looped = injectionParameters.Animation.IsLooped;
            _loopCount = injectionParameters.Animation.LoopCount;
        }
        #endregion

        #region Constructor/Finalizer.
        /// <summary>Initializes a new instance of the <see cref="AnimProperties"/> class.</summary>
        public AnimProperties()
        {
        
        }
        #endregion
    }
}
