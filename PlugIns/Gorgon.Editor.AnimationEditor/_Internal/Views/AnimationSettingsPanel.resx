<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="TipSettings.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="label1.ToolTip" xml:space="preserve">
    <value>The default resolution defines the ideal area in which the sprite should be 
rendered when no background image is present.

This mostly affects the default positioning of the sprite when animating.

If a background image is loaded with the animation, then the resolution 
of the image will be used instead of the default.

The initial value is the current screen resolution of the primary monitor.

Note: This is not a hard limit, that is, the animated sprite will NOT clip to 
the resolution provided.</value>
  </data>
  <data name="label2.ToolTip" xml:space="preserve">
    <value>The default resolution defines the ideal area in which the sprite should be 
rendered when no background image is present.

This mostly affects the default positioning of the sprite when animating.

If a background image is loaded with the animation, then the resolution 
of the image will be used instead of the default.

The initial value is the current screen resolution of the primary monitor.

Note: This is not a hard limit, that is, the animated sprite will NOT clip to 
the resolution provided.</value>
  </data>
  <data name="NumericXRes.ToolTip" xml:space="preserve">
    <value>The default resolution defines the ideal area in which the sprite should be 
rendered when no background image is present.

This mostly affects the default positioning of the sprite when animating.

If a background image is loaded with the animation, then the resolution 
of the image will be used instead of the default.

The initial value is the current screen resolution of the primary monitor.

Note: This is not a hard limit, that is, the animated sprite will NOT clip to 
the resolution provided.</value>
  </data>
  <data name="NumericYRes.ToolTip" xml:space="preserve">
    <value>The default resolution defines the ideal area in which the sprite should be 
rendered when no background image is present.

This mostly affects the default positioning of the sprite when animating.

If a background image is loaded with the animation, then the resolution 
of the image will be used instead of the default.

The initial value is the current screen resolution of the primary monitor.

Note: This is not a hard limit, that is, the animated sprite will NOT clip to 
the resolution provided.</value>
  </data>
  <data name="CheckAnimatePrimaryBg.ToolTip" xml:space="preserve">
    <value>If the animation does not have a sprite to animate, then a little animation will
play in the background of the main editor area.  

This setting will turn off the animation if users find it annoying.</value>
  </data>
  <data name="CheckOnionSkin.ToolTip" xml:space="preserve">
    <value>Onion skinning shows the previous and next key frame value in the edit area as 
translucent silhouettes of the sprite being animated. This is useful for acting as a 
guide when trying to determine how to update the current key frame.

Note: Some tracks do not support onion skinning, in those cases no 
silhouettes will be shown.


</value>
  </data>
  <data name="CheckUnsupported.ToolTip" xml:space="preserve">
    <value>When checked, a warning will be shown when an animation is loaded 
into the editor and contains any tracks not supported by this editor.

Unchecking this will suppress this warning. However, the warnings will 
still appear in the application log.</value>
  </data>
</root>