#region MIT
// 
// Gorgon.
// Copyright (C) 2019 Michael Winsor
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 
// Created: March 27, 2019 12:38:51 PM
// 
#endregion

using System.Collections.Generic;
using System.Threading.Tasks;
using Gorgon.Editor.Metadata;

namespace Gorgon.Editor.SpriteEditor
{
    /// <summary>
    /// Provides functionality to build objects for the sprite content.
    /// </summary>
    internal interface ISpriteContentFactory
    {
        #region Methods.
        /// <summary>Function to retrieve the default content name, and data.</summary>
        /// <param name="generatedName">A default name generated by the application.</param>
        /// <param name="existingNames">The existing content file names in the same location as the new content file.</param>
        /// <returns>The content name along with the content data serialized as a byte array, and the metadata for the content file. If either the name or data are <b>null</b>, then the user cancelled the operation.</returns>
        /// <remarks>
        /// <para>
        /// If an empty string (or whitespace) is returned for the name, then the <paramref name="generatedName"/> will be used.
        /// </para>
        /// </remarks>
        Task<(string name, byte[] data, ProjectItemMetadata metadata)> GetDefaultContentAsync(string generatedName, HashSet<string> existingNames);
        #endregion
    }
}
