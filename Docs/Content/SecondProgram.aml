<?xml version="1.0" encoding="utf-8"?>
<topic id="3F43A9BF-35A1-4BD4-A02A-503D257F0119" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <alert type="cs">This is the second tutorial in a short series that will ultimately culminate in having an application that will draw an animated sprite on the screen.</alert>
      <para>In the previous section, we built a small application that displays the amount of time since the application started running. In this section we will get to the 
      fun stuff. Graphics. Which, well, is likely why you downloaded this in the first place.</para>
      <para>Gorgon, unlike many tools such as Unity, Godot, or Unreal is designed to be a programmers tool. There's no fancy editor to build your application, and there will be  
      work required in getting something meaningful up and running. This doesn't mean that you have to do every little thing yourself, otherwise, you could just use Direct3D or 
      OpenGL directly to achieve what you want. But, if you want a simple drag + drop editor and scripting, you probably want to look elsewhere (better to find out now right?)
      </para>
      <para>
        But, if the previous paragraph didn't scare you off, and you've ever set up an OpenGL or Direct 3D application directly, you'll know that it's a bit long winded. It's 
        because of this that Gorgon was created. I got real tired of having to write that tedious setup code whenever I wanted to prototype something (great for memorization 
        though, also, this is wayyyy back in the day - I'm old).  So, I decided to wrap things up in order to simplify things for myself. 
      </para>
      <para>
        And this is what Gorgon does: It wraps up the mundane details and deals with the more low level  annoyances so you don't have to. This means you can focus on writing your 
        application without worrying about the details of the underlying rendering technology (Direct 3D in the case of Gorgon). And because it's code based, you have a great deal 
        more control than you'd have with an editor based system, which can be a blessing... and a curse.
      </para>
      <para>
        So, in this example, we'll build on our previous code and create a simple application which initializes the graphics system of Gorgon.
      </para>
    </introduction>        
    <sections>
      <section>      
        <title>Prerequisites</title>      
        <content>
          <para>Please see the <link xlink:href="564985CC-F18F-4711-A2BC-0796D266E54D"/>, <link xlink:href="6DFFD6AF-951B-44FC-B9D0-A222D7CBF359"/> and the <link xlink:href="6F8A9863-C003-4503-9310-70E75D7E5C81"/> topics to ensure your project is set up correctly.</para>
          <alert class="note">Note that this application will be using C# (language specification v7.3).</alert>
        </content>
      </section>
      <section>
        <title>Namespaces</title>
        <content>
          <para>
            OK, so, how do we get started with graphics? Well, we'll continue with our program from <link xlink:href="6F8A9863-C003-4503-9310-70E75D7E5C81" /> 
            by adding the required <codeInline>using</codeInline> statements at the top of the file. They should look like this:
          </para>
					<code language="cs" title="Program.cs">
						<![CDATA[
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using Gorgon.Core;
using Gorgon.Graphics;
using Gorgon.Graphics.Core;
using Gorgon.Timing;
using Gorgon.UI;						
						]]>
					</code>
				</content>
			</section>
			<section>
				<title>Setup</title>
				<content>
					<para>
						Now, remove all of the code, except for the <codeInline>return</codeInline> statement in the <codeInline>Idle</codeInline> method like so:
					</para>
          <code language="cs" title="Program.cs">
            <![CDATA[
		/// <summary>
		/// This will be called while the application is in an idle state.
		/// This means it'll be called continuously while the application is running, but not 
		/// processing window messages.
		/// </summary>		
		private static bool Idle()
		{
			// We return true here because we want to continue processing.
			// If we wanted to stop, we'd return false.
			return true;
		}            
            ]]>
          </code>
          <para>
            Next, we'll add a new, empty method called <codeInline>Initialize()</codeInline>, and give it a parameter of the type <codeEntityReference qualifyHint="false">T:System.Windows.Forms.Form</codeEntityReference> and call it 
            <codeInline>form</codeInline> . This code method will be used to create the necessary objects for rendering graphics. For now, leave it empty.
          </para>
          <code language="cs" title="Program.cs">
            <![CDATA[
		/// <summary>
		/// This function is used to intialize our objects. Just helps to keep
		/// things clean.
		/// </summary>
		private static void Initialize(Form form)
		{
		}
            ]]>
          </code>
          <para>
            Finally, we'll modify the <codeInline>Main</codeInline> method. We'll start by adding in some error handling because, y'know, it might be good to display what went wrong 
            should the application crash. We'll do this by wrapping the code in the body of the method in <codeInline>try/catch/finally</codeInline> blocks like so:
          </para>
          <code language="cs" title="Program.cs">
            <![CDATA[
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main()
		{
			try
			{
				Application.EnableVisualStyles();
				Application.SetCompatibleTextRenderingDefault(false);

				// We've moved the form creation to here.
				var form = new Form1();

				GorgonApplication.Run(form, Idle);
			}
			catch (Exception ex)
			{
				// TODO
			}
			finally
			{
				// We'll use this area for clean up.
			}
		}
            ]]>
          </code>
          <para>
            Next, we'll add a call to our <codeInline>Initialize</codeInline> method immediately after the form creation code.
          </para>
          <code language="cs" title="Program.cs">
            <![CDATA[
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main()
		{
			try
			{
				Application.EnableVisualStyles();
				Application.SetCompatibleTextRenderingDefault(false);

				// We've moved the form creation to here.
				var form = new Form1();

				// Now we'll initialize our application so we can do more fun things.
				Initialize(form);
        
				GorgonApplication.Run(form, Idle);
			}
			catch (Exception ex)
			{
				// TODO
			}
			finally
			{
				// We'll use this area for clean up.
			}
		}]]>
          </code>
					<para>
						In the <codeInline>catch</codeInline> block, type the following:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
				ex.Catch(_ => GorgonDialogs.ErrorBox(null, ex));						
						]]>
					</code>
					<para>
						This will handle any exceptions by displaying an error dialog with the exception message and stack trace in a hidden panel (viewable by clicking the <ui>Details</ui> button). 
					</para>
				</content>
			</section>
			<section>
				<title>Graphics</title>
				<content>
					<para>
						And now for the fun stuff. We'll add some variable declarations for our required graphics objects:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
		// Our graphics interface. This is the root of our drawing functionality.
		private static GorgonGraphics _graphics;
		// This is what's used to send our rendered image to our window.
		private static GorgonSwapChain _screen;						
						]]>
					</code>
					<para>
						These two objects are our entry points into the graphics system. The first is the core graphics interface, this is what communicates with the GPU to send rendering commands 
						known as <codeEntityReference qualifyHint="false" linkText="draw calls" >T:Gorgon.Graphics.Core.GorgonDrawCall</codeEntityReference>. For now, this is beyond the scope of this 
						series of tutorials.
					</para>
					<para>
						The second object is our <codeEntityReference qualifyHint="false" linkText="swap chain">T:Gorgon.Graphics.Core.GorgonSwapChain</codeEntityReference>. This is the 
						object that is responsible for getting our graphics data to our window. Think of it as your screen buffer (hence the variable name).
					</para>
					<para>
						Next, we'll add code to our <codeInline>finally</codeInline> block to dispose of these objects. It's good practice to ensure you dispose of any object that implements 
						<codeEntityReference qualifyHint="true">T:System.IDisposable</codeEntityReference>. Since many of the graphics objects provided by Gorgon implements <codeInline>IDisposable</codeInline>
						to deal with the native resources used by Direct 3D, it is especially prudent to call the <codeInline>Dispose</codeInline> method.						
					</para>
					<alert type="cs">
						<para>It is good practice to set up your disposal as early as possible so you don't forget to do it. While a memory leak is very unlikely due to the nature of the 
						.NET garbage collector, it's still best if objects are cleaned up as near to the end of their lifetimes as possible.</para>
					</alert>
					<para>
						Our disposal code will look like this:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
			finally
			{
				// ALWAYS perform clean up. Especially since we're using 
				// Direct3D stuff here (COM objects). These live in native land 
				// and should be cleaned up as soon as we don't require them 
				// any more.

				_screen?.Dispose();
				_graphics?.Dispose();
			}
						]]>
					</code>
					<para>
						Now that we have our object declarations, it's time to create the objects in your <codeInline>Initialize</codeInline> method that you added earlier. So, in that 
						method we'll add the following code:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
		/// <summary>
		/// This function is used to intialize our objects. Just helps to keep
		/// things clean.
		/// 
		/// We pass the form we created in the Run method so we can hook our 
		/// swap chain into it.
		/// </summary>
		private static void Initialize(Form form)
		{
			// Before we use any graphics functionality, we have to tell Gorgon which video device 
			// it should use for rendering. Some machines (although not as common as it used to be) 
			// can have more than 1 GPU installed, this allows us to hook up instances of Gorgon to 
			// each GPU. 
			IReadOnlyList<IGorgonVideoAdapterInfo> videoDevices = GorgonGraphics.EnumerateAdapters();

			// Normally, you should filter the list for the best device available (has the highest 
			// feature level). But for brevity, we'll just go with device #1 and assume everything's
			// fine. Because it is .. right?  Your card DOES support D3D 11.4 right?
			_graphics = new GorgonGraphics(videoDevices[0]);

			// Now we'll create a swap chain to act as our screen. The swap chain is a series of 
			// buffers (render targets) that will receive our drawing data and present them to our 
			// window in seqence (or not, depending on how you set things up).
			//
			// Note that you can name many of the objects in Gorgon. This name is optional and is 
			// primarily used for debugging purposes, and sometimes used for looking up objects 
			// internally.
			_screen = new GorgonSwapChain(_graphics, form, new GorgonSwapChainInfo("Our Screen")
			{
				Width = 1280,			// We'll set our window client area and buffer size to 1280x800.
				Height = 800,			// If you prefer something different, then by all means, set it to that.
				// This tells the system that the pixel format of our swap chain will be 8 bits per channel
				// and unsigned normalized data (basically each channel, R, G, B & Alpha will be within the range 
				// of 0-255.
				Format = BufferFormat.R8G8B8A8_UNorm
			});
		}
						]]>
					</code>
					<para>
						As mentioned in the code comments, our first step is to enumerate which GPUs are present on the computer. 
					</para>
					<alert class="note">
						<para>
							Why do we do this? Well, a machine can have more than 1 GPU active at a time, and in some laptops the operating system will switch GPUs based on 
							workload (less usage, move to less powerful GPU).  							
						</para>
					</alert>
					<para>
						Using the <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Gorgon.Graphics.Core.GorgonGraphics.EnumerateAdapters(System.Boolean,Gorgon.Diagnostics.IGorgonLog)</codeEntityReference> 
						method allows us to determine which GPU is best for our purposes by using <codeInline>feature levels</codeInline> to determine the capabilities of the GPU. 
					</para>
					<alert class="cs">
						<para>
							The <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Gorgon.Graphics.Core.GorgonGraphics.EnumerateAdapters(System.Boolean,Gorgon.Diagnostics.IGorgonLog)</codeEntityReference> 
							method will only return GPUs capable of supporting Direct 3D 11.4 or better. This means that your GPU should be able support, at a minimum, version 12 of Direct 3D. 
							Confused? Yeah, me too. Basically if your GPU supports Direct 3D 11.4, it means it supports Direct 3D 12.
						</para>
					</alert>
					<para>
						Normally you would vet the returned list of GPUs and exit with a friendly error message if no supported GPUs are available (i.e. the list will be empty). But for this 
						example, we'll just use the first available GPU. We're rebels you see. The "man" will not keep us down and so forth. This leads us to the next line where we create an 
						instance of the <codeEntityReference qualifyHint="false">T:Gorgon.Graphics.Core.GorgonGraphics</codeEntityReference> object. 
					</para>					
					<para>
						Finally, we create our <codeEntityReference qualifyHint="false" linkText="swap chain">T:Gorgon.Graphics.Core.GorgonSwapChain</codeEntityReference>. Note the parameters 
						we pass in during creation:
					</para>
					<table>
						<row>
							<entry><para><codeInline>_graphics</codeInline></para></entry>
							<entry><para>Our previously created graphics instance. Almost every object at this level will need to pass this on construction.</para></entry>
						</row>
						<row>
							<entry><para><codeInline>form</codeInline></para></entry>
							<entry><para>This binds our swap chain to the client area of the form. We don't necessarily need to pass a form object, any object based on <codeEntityReference qualifyHint="false">T:System.Windows.Forms.Control</codeEntityReference> will suffice. Yes, including TextBoxes. No, don't do that, it's useless.</para></entry>
						</row>
						<row>
							<entry><para><codeEntityReference qualifyHint="false">T:Gorgon.Graphics.Core.GorgonSwapChainInfo</codeEntityReference></para></entry>
							<entry><para>These are other parameters used to define how the swap chain is used, including its pixel format, and buffer resolution.</para></entry>
						</row>
					</table>
					<para>
						Additional information passed to the constructor is provided by the <codeEntityReference qualifyHint="false">T:Gorgon.Graphics.Core.IGorgonSwapChainInfo</codeEntityReference> 
						type. In this example we're setting the resolution of the swap chain, and window to 1280x800 (you may choose a different resolution that suits you), and a 
						32 bit per channel pixel format (8 bits for Red, Green, Blue and Alpha). This is typically the standard format used by most, if not all Windows systems. Back in 
						my day, we had to contend with 8 bit, 256 colour modes, 15 and 16 bit per channel colour modes, 24 bit (8 bit per channel, no alpha) colour modes and 32 bit... 
						it was terrifying. But I digress...
					</para>
					<para>
						Now that we're done, you should compile your application to ensure it'll run. I'll wait...
					</para>
					<para>
						Alrighty then. So you probably noticed that nothing is happening. Just the window pops up and... that's pretty much it. So, let's display some colour.
					</para>
					<para>
						In the <codeInline>Idle</codeInline> method we'll add the the following code:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
			_screen.RenderTargetView.Clear(GorgonColor.CornFlowerBlue);

			_screen.Present(1);
						]]>
					</code>
					<para>
						This code tells Gorgon to clear the render target view of the swap chain to CornFlowerBlue and then flip the contents of its render target back buffer(s) to the 
						window client area. Very exciting. I can barely contain myself.
					</para>
					<alert class="cs">
						Whoa. Wait. What's that 1 doing in our <codeInline>Present</codeInline> call? Well that limits the presentation interval of the application to 1 refresh cycle. On most 
						systems I've used, this limits to around 60 FPS (and 30 through Remote Desktop). But this depends solely on the display hardware. The reason we limit like this is because 
						we have nothing to prove here. There's little point to blasting things out at ridiculous speed, and it's wasteful, especially if you're on a system powered by a battery. 
						If you're hell bent on pissing laptop owners off, then remove the one and this thing will just slam the GPU. Good for rocket engine sound effects from your GPU.
					</alert>
					<alert class="cs">
						<para>
							What's a render target view? Well, the data sent to the GPU in a buffer (a texture, for example, is merely a buffer with texel data formatted in a specific manner) 
							is just that, raw data. In order to make sense of it we need some way to give it context. Thus we have a view. These views give us a way of looking at the data from 
							a specific usage scenario. In some cases, we can even provide limited format conversion to present our data in a different manner. A simple way of looking at it is 
							by thinking of a view as a way of looking at data in a different way. Similar to a database view of a table (or tables).
						</para>
						<para>
							In this case, we have a render target view. This tells the underlying Direct 3D code that the back buffers in the swap chain should be treated as an output that will 
							receive rendering data. In other render target data types, we can also specify a shader resource view which allows that same data to be bound to a shader when 
							rendering.
						</para>
					</alert>
				</content>
			</section>
			<section>
				<title>And we're done.</title>
				<content>
					<para>
						And that's it. Long winded as it seems, this example is quite short compared to setting up Direct 3D, and rendering directly. Here's a screenshot of what you should be 
						seeing:
					</para>
					<mediaLink>
						<image xlink:href="ExampleSwapChain"/>
					</mediaLink>
					<para>
						Here's the finished code:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using Gorgon.Core;
using Gorgon.Graphics;
using Gorgon.Graphics.Core;
using Gorgon.UI;

namespace GorgonGettingStarted
{
	static class Program
	{
		// Our graphics interface. This is the root of our drawing functionality.
		private static GorgonGraphics _graphics;
		// This is what's used to send our rendered image to our window.
		private static GorgonSwapChain _screen;

		/// <summary>
		/// This will be called while the application is in an idle state.
		/// This means it'll be called continuously while the application is running, but not 
		/// processing window messages.
		/// </summary>		
		private static bool Idle()
		{
			// We'll now just update our swap chain by clearing it to a specific color.
			// We use our custom color type to specify the color. Why? Well, it supports a normalized 
			// floating point value (0.0 - 1.0) for each channel. This is more in line with how the 
			// GPU operates.
			//
			// Note that we're clearing the render target for the swap chain and not the swap chain 
			// itself. This is because the render target is a view into the actual buffer that will 
			// be transferred on to the screen. This buffer is not guaranteed to be the same buffer
			// on each iteration of the idle loop.
			_screen.RenderTargetView.Clear(GorgonColor.CornFlowerBlue);


			// This call copies the swap chain buffer data to the window client area.
			// We pass in 1 to basically limit our refresh rate to 60 FPS (in most cases).
			_screen.Present(1);

			// We return true here because we want to continue processing.
			// If we wanted to stop, we'd return false.
			return true;
		}

		/// <summary>
		/// This function is used to intialize our objects. Just helps to keep
		/// things clean.
		/// 
		/// We pass the form we created in the Run method so we can hook our 
		/// swap chain into it.
		/// </summary>
		private static void Initialize(Form form)
		{
			// Before we use any graphics functionality, we have to tell Gorgon which video device 
			// it should use for rendering. Some machines (although not as common as it used to be) 
			// can have more than 1 GPU installed, this allows us to hook up instances of Gorgon to 
			// each GPU. 
			IReadOnlyList<IGorgonVideoAdapterInfo> videoDevices = GorgonGraphics.EnumerateAdapters();

			// Normally, you should filter the list for the best device available (has the highest 
			// feature level). But for brevity, we'll just go with device #1 and assume everything's
			// fine. Because it is .. right?  Your card DOES support D3D 11.4 right?
			_graphics = new GorgonGraphics(videoDevices[0]);

			// Now we'll create a swap chain to act as our screen. The swap chain is a series of 
			// buffers (render targets) that will receive our drawing data and present them to our 
			// window in seqence (or not, depending on how you set things up).
			//
			// Note that you can name many of the objects in Gorgon. This name is optional and is 
			// primarily used for debugging purposes, and sometimes used for looking up objects 
			// internally.
			_screen = new GorgonSwapChain(_graphics, form, new GorgonSwapChainInfo("Our Screen")
			{
				Width = 1280,			// We'll set our window client area and buffer size to 1280x800.
				Height = 800,			// If you prefer something different, then by all means, set it to that.
				// This tells the system that the pixel format of our swap chain will be 8 bits per channel
				// and unsigned normalized data (basically each channel, R, G, B & Alpha will be within the range 
				// of 0-255.
				Format = BufferFormat.R8G8B8A8_UNorm
			});
		}

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main()
		{
			try
			{
				Application.EnableVisualStyles();
				Application.SetCompatibleTextRenderingDefault(false);

				// We've moved the form creation to here.
				var form = new Form1();

				// Now we'll initialize our application so we can do more fun things.
				Initialize(form);

				GorgonApplication.Run(form, Idle);
			}
			catch (Exception ex)
			{
				// We'll use this to display any error messages.
				// Much nicer than having our app just up and die.
				ex.Catch(_ => GorgonDialogs.ErrorBox(null, ex));
			}
			finally
			{
				// ALWAYS perform clean up. Especially since we're using 
				// Direct3D stuff here (COM objects). These live in native land 
				// and should be cleaned up as soon as we don't require them 
				// any more.

				_screen?.Dispose();
				_graphics?.Dispose();
			}
		}
	}
}
						]]>
					</code>
					<para>
						As you can see the majority of it is commentary. In the final tutorial, we'll use the 2D renderer to draw, and animate a simple sprite.
					</para>
        </content>      
      </section>      
    </sections>
    <relatedTopics>
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="564985CC-F18F-4711-A2BC-0796D266E54D" />            
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="6DFFD6AF-951B-44FC-B9D0-A222D7CBF359" />            
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="6F8A9863-C003-4503-9310-70E75D7E5C81" />            
			<link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="FD2302C9-66E7-4AF2-9927-EC1CBFC27F43" />            
    </relatedTopics>    
  </developerConceptualDocument>
</topic>