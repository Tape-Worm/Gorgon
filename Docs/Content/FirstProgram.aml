<?xml version="1.0" encoding="utf-8"?>
<topic id="6F8A9863-C003-4503-9310-70E75D7E5C81" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <alert type="cs">This is the first tutorial in a short series that will ultimately culminate in having an application that will draw an animated sprite on the screen.</alert>
      <para>So you went through the process of setting up your project. Now what?</para>        
      <para>In this section we will start a an application that will utilize Gorgon to update a window during idle time.</para>
    </introduction>    
    
    <sections>
      <section>      
        <title>Prerequisites</title>      
        <content>
          <para>Please see the <link xlink:href="564985CC-F18F-4711-A2BC-0796D266E54D">Getting Started</link> and <link xlink:href="6DFFD6AF-951B-44FC-B9D0-A222D7CBF359">Which assemblies</link> topics to ensure your project is set up correctly.</para>
          <alert class="note">Note that this application will be using C# (language specification v7.3).</alert>
        </content>
      </section>
      <section>
        <title>Program.cs</title>
        <content>
          <para>This file is the entry point into our Windows Forms application. Normally, execute starts with the <codeInline>Application.Run</codeInline> call, but for Gorgon, we take over this call by calling <codeEntityReference qualifyHint="true" autoUpgrade="true">M:Gorgon.UI.GorgonApplication.Run(System.Windows.Forms.Form,System.Func{System.Boolean})</codeEntityReference>.</para>
					<para>Before we start, we need to add the required <codeInline>using</codeInline> statements at the top of the file like so:</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
using System;
using System.Windows.Forms;
using Gorgon.UI;
						]]>
					</code>
          <para>Next, go ahead and replace <codeInline>Application.Run(new Form1())</codeInline> with call to <codeInline>GogronApplication.Run</codeInline>, but instead of creating the form in the constructor parameter (bad form in my opinion), 
          put its creation on the line prior to the <codeInline>Run</codeInline> call, like this <codeInline>var form = new Form1();</codeInline>.</para>
          <code language="cs" title="Program.cs">
            <![CDATA[
            using System;
            using System.Windows.Forms;
            using Gorgon.UI;

            namespace GorgonGettingStarted
            {
	            static class Program
	            {
		            /// <summary>
		            /// The main entry point for the application.
		            /// </summary>
		            [STAThread]
		            static void Main()
		            {
			            Application.EnableVisualStyles();
			            Application.SetCompatibleTextRenderingDefault(false);

                  // We've moved the form creation to here.
			            var form = new Form1();

			            GorgonApplication.Run(form);
		            }
	            }
            }]]>            
          </code>
          <para>Compile and run your code by pressing <codeInline>F5</codeInline>. How exciting. A form. That does. Nothing. Let's make it do something.</para>
        </content>      
        <sections>
          <section>
            <title>Something a little more... not as boring.</title>
            <content>
              <para>C#, unlike Visual C++ and Win32, doesn't really give us a <application>good</application> means of handling Idle time for a windows application. It has something called <codeInline>Application.Idle</codeInline>, but it doesn't work 
              quite the way you might expect and has a host of issues when paired with <codeInline>Application.DoEvents</codeInline>. However, in order to do something a little less... boring, we'll need to have the CPU call our functionality over 
              and over until the application closes. This requires that we hook into the time when window messages are done processing and the applicatino is doing nothing.</para>
              <para>
                Fortunately, Gorgon has built-in functionality to allow you to hook the idle time for a windows forms application. This is done via 2nd parameter on the <codeEntityReference qualifyHint="true">M:Gorgon.UI.GorgonApplication.Run(System.Windows.Forms.Form,System.Func{System.Boolean})</codeEntityReference> method.               
              </para>
              <para>
                To use this idle time processing, we will create a new method in <codeInline>Program.cs</codeInline>, and name it with the most creative name ever: <codeInline>Idle</codeInline>. This method should return a <codeInline>bool</codeInline> 
                value, and we will return the value of <application>true</application>. What this does is tell Gorgon that we want to continue processing. If we had returned <application>false</application>, then the <codeInline>Run</codeInline> method would 
                return and the application, in this case, would close.
              </para>
              <para>
                Of course, this idle method is not useful unless it does something. So let's update the code so that it displays the number of seconds since the application started. Very exciting.
              </para>						
              <code language="cs" title="Program.cs">
                <![CDATA[
using System;
using System.Windows.Forms;
using Gorgon.Timing;
using Gorgon.UI;

namespace GorgonGettingStarted
{
	static class Program
	{
		/// <summary>
		/// This will be called while the application is in an idle state.
		/// This means it'll be called continuously while the application is running, but not 
		/// processing window messages.
		/// 
		/// If we set the GorgonApplication.AllowBackground to true, we can even run while the 
		/// window is not focused. But that's considered wasteful, so for now we'll stop running
		/// when the application does not have focus.
		/// </summary>		
		private static bool Idle()
		{
			string upTime = $"Uptime: {GorgonTiming.SecondsSinceStart:0} seconds";

			// Update the caption only when the text changes. Winforms REALLY doesn't like it
			// when you pound on it and generate non-stop window messages. So it's best to 
			// let it trickle out like this.
			if (!string.Equals(GorgonApplication.MainForm.Text, upTime, 
								StringComparison.CurrentCultureIgnoreCase))
			{
				GorgonApplication.MainForm.Text = upTime;
			}

			// We return true here because we want to continue processing.
			// If we wanted to stop, we'd return false.
			return true;
		}

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main()
		{
			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(false);

			// We've moved the form creation to here.
			var form = new Form1();

			GorgonApplication.Run(form, Idle);
		}
	}
}]]>                
              </code>
              <para>
                You'll notice we've got a new object, <codeEntityReference qualifyHint="true">T:Gorgon.Timing.GorgonTiming</codeEntityReference>, and the new <codeInline>using</codeInline> namespace <codeInline>Gorgon.Timing</codeInline>. 
								This is a timing object that provides a bunch of useful information about how long the application has been running, the number of frames per second (basically the number of times <codeInline>Idle</codeInline> is called per second), 
								frame delta (the length of time it takes <codeInline>Idle</codeInline> to execute), and so on. Many of these functions are especially useful for graphics applications.
            </para>
            </content>
          </section>
        </sections>
      </section>      
    </sections>
    <relatedTopics>
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="564985CC-F18F-4711-A2BC-0796D266E54D" />            
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="6DFFD6AF-951B-44FC-B9D0-A222D7CBF359" />           
			<link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="3F43A9BF-35A1-4BD4-A02A-503D257F0119" />
    </relatedTopics>    
  </developerConceptualDocument>
</topic>