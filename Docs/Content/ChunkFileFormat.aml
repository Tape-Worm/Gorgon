<?xml version="1.0" encoding="utf-8"?>
<topic id="7b81343e-e2fc-4f0f-926a-d9193ae481fe" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This page gives a detailed explanation of the Gorgon chunk file format.</para>
      <para>
      A chunk file is a binary file format that breaks up parts of the data into logical groupings called chunks. These chunks are unsigned 64 bit integer values
      that represent an ID for the chunk, followed by an arbitrary amount of application specific binary data. The chunked file format is advantageous because it 
      allows an application to read only the parts it cares about, discarding the rest. Through this we can achieve a simple form of versioning for the file format.       
      </para>      
      <para>
      Because we can choose to skip or include chunks, we may also have optional chunk values. Meaning that if an object has a value that's not been set at runtime 
      before serialization, we can choose not to write its chunk. When deserialzing this data back into an object, we can check for the existence of this chunk and 
      if it is there, read the data, or if not, move on to the next item.
      </para>
    </introduction>
    
    <section>
      <title>File layout</title>
      <content>
        <para>The following is a detailed breakdown of the Gorgon chunk file format.</para>
      </content>
      <sections>
      	<section>
      		<title>File header</title>
      		<content>      		
			<table>				
				<tableHeader>
					<row>
						<entry><para>Name</para></entry>
						<entry><para>Data type</para></entry>
						<entry><para>Expected value</para></entry>
						<entry><para>Data size</para></entry>
						<entry><para>Description</para></entry>
					</row>
				</tableHeader>
				<row>
					<entry><para>The file header ID</para></entry>
					<entry><para><codeEntityReference>T:System.UInt64</codeEntityReference></para></entry>
					<entry><para><codeInline>GCFF + [4 bytes for version] (0xvvvvvvvv46464347)</codeInline></para></entry>
					<entry><para>8 bytes</para></entry>
					<entry>
					<para>This is the header ID for the file format. The 8 bytes compose an ASCII string indicating the header ID. The first 4 bytes make up the ID string 'GCFF',
					while the last 4 bytes indicate the file format version.</para>
					<para>This version number is formatted as such: 0100 - Version 1.0, 0101 - Version 1.1, 0203 - Version 2.3, etc...</para>
					</entry>
				</row>
				<row>
					<entry><para>Application specific header ID</para></entry>
					<entry><para><codeEntityReference>T:System.UInt64</codeEntityReference></para></entry>
					<entry><para><legacyItalic>Implementation specific</legacyItalic></para></entry>
					<entry><para>8 bytes</para></entry>
					<entry><para>This is an application defined file header ID for the data stored within this file. It is up to the application implementing the file format 
					to define the value here.</para>
					<para>Applications can use the <codeEntityReference>M:Gorgon.IO.GorgonIOExtensions.ChunkID(System.String)</codeEntityReference> method to build this ID value.</para>
					</entry>
				</row>
				<row>
					<entry><para>File size</para></entry>
					<entry><para><codeEntityReference>T:System.Int64</codeEntityReference></para></entry>
					<entry><para><legacyItalic>N/A</legacyItalic></para></entry>
					<entry><para>8 bytes</para></entry>
					<entry><para>This is the total size of the file, in bytes.</para></entry>
				</row>
				<row>
					<entry><para>Chunk table offset</para></entry>
					<entry><para><codeEntityReference>T:System.Int64</codeEntityReference></para></entry>
					<entry><para><legacyItalic>N/A</legacyItalic></para></entry>
					<entry><para>8 bytes</para></entry>
					<entry><para>This is an offset, in bytes, into the chunk file where the chunk descriptors are stored. This is typically at the end of the file, after all 
					the chunk data. This value is relative to the beginning of the file.</para></entry>
				</row>
			</table>
			</content>
      	</section>
      	<section>
      		<title>Chunks</title>
      		<content>
      			<para>
      			Following the header is a series of chunk values. Each chunk will begin with an application specific <codeEntityReference>T:System.Int64</codeEntityReference>
      			chunk ID. The size of a chunk will vary depending on the data stored within the chunk. These IDs are <legacyItalic>not</legacyItalic> unique. That is, a chunk 
      			ID may appear more than once in the file.
      			</para>
      			<para>
      			A chunk is an application specific set of binary data that represents a serialized object. The file may contain many chunks, all of which are
      			catalogued in the chunk file table at the end of the file. 
      			</para>
      		</content>      		
      	</section>
      	<section>
      		<title>Chunk table</title>
      		<content>
      			<para>
      			The chunk table is a special chunk with a signature of <codeInline>CHUNKTBL (0x4C42544B4E554843)</codeInline>. It contains a list of all the chunks 
      			available in the file as individual chunk descriptors. This chunk is located at the offset specified by the Chunk table offset in the file header, typically 
      			this is at the end of the file.
      			</para>
      			<alert class="caution">
      			<para>
      			This chunk ID is unique, no other chunk must have the same ID as the chunk table. Gorgon will enforce this by throwing an exception if an attempt to use this 
      			chunk ID is attempted.
      			</para>
      			</alert>
				<table>				
					<title>Chunk table layout</title>
					<tableHeader>
						<row>
							<entry><para>Name</para></entry>
							<entry><para>Data type</para></entry>
							<entry><para>Expected value</para></entry>
							<entry><para>Data size</para></entry>
							<entry><para>Description</para></entry>
						</row>
					</tableHeader>
					<row>
						<entry><para>Chunk entry count</para></entry>
						<entry><para><codeEntityReference>T:System.Int32</codeEntityReference></para></entry>
						<entry><para><legacyItalic>N/A</legacyItalic></para></entry>
						<entry><para>4 bytes</para></entry>
						<entry>
						<para>This is the number of chunk entries in the file. </para>
						</entry>
					</row>
				</table>
				<table>				
					<title>Chunk descriptor</title>
					<tableHeader>
						<row>
							<entry><para>Name</para></entry>
							<entry><para>Data type</para></entry>
							<entry><para>Expected value</para></entry>
							<entry><para>Data size</para></entry>
							<entry><para>Description</para></entry>
						</row>
					</tableHeader>
					<row>
						<entry><para>ID</para></entry>
						<entry><para><codeEntityReference>T:System.UInt64</codeEntityReference></para></entry>
						<entry><para><legacyItalic>N/A</legacyItalic></para></entry>
						<entry><para>8 bytes</para></entry>
						<entry>
						<para>This is the ID for the chunk.</para>
						</entry>
					</row>
					<row>
						<entry><para>Chunk size</para></entry>
						<entry><para><codeEntityReference>T:System.Int32</codeEntityReference></para></entry>
						<entry><para><legacyItalic>N/A</legacyItalic></para></entry>
						<entry><para>4 bytes</para></entry>
						<entry>
						<para>This is the size of the chunk, in bytes.</para>
						</entry>
					</row>
					<row>
						<entry><para>Chunk offset</para></entry>
						<entry><para><codeEntityReference>T:System.Int64</codeEntityReference></para></entry>
						<entry><para><legacyItalic>N/A</legacyItalic></para></entry>
						<entry><para>8 bytes</para></entry>
						<entry>
						<para>This is the offset to the location of the chunk within the chunk file, in bytes. The offset is relative to the end of the header.</para>
						</entry>
					</row>
				</table>
			</content>
      	</section>      	
      </sections>
    </section>
    <relatedTopics>
      <codeEntityReference>T:Gorgon.IO.GorgonChunkFileReader</codeEntityReference>
      <codeEntityReference>T:Gorgon.IO.GorgonChunkFileWriter</codeEntityReference>
      <codeEntityReference>T:Gorgon.IO.GorgonChunk</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>