<?xml version="1.0" encoding="utf-8"?>
<topic id="FD2302C9-66E7-4AF2-9927-EC1CBFC27F43" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <alert type="cs">This is the final tutorial in a short series that will ultimately culminate in having an application that will draw an animated sprite on the screen.</alert>
      <para>In the previous section, we built a small application that sets up the graphics and displays the contents of a swap chain.</para>
      <para>
        In this example, we'll build on our previous code and create a simple application which sets up the 2D renderer, load a texture, and draw/animate a sprite.
      </para>
    </introduction>        
    <sections>
      <section>      
        <title>Prerequisites</title>      
        <content>
          <para>Please see the <link xlink:href="564985CC-F18F-4711-A2BC-0796D266E54D"/>, <link xlink:href="6DFFD6AF-951B-44FC-B9D0-A222D7CBF359"/>, <link xlink:href="6F8A9863-C003-4503-9310-70E75D7E5C81"/> 
					and <link xlink:href="3F43A9BF-35A1-4BD4-A02A-503D257F0119"/> topics to ensure your project is set up correctly.</para>
          <alert class="note">Note that this application will be using C# (language specification v7.3).</alert>
        </content>
      </section>
      <section>
        <title>Namespaces</title>
        <content>
          <para>
            Continuing with our program from <link xlink:href="3F43A9BF-35A1-4BD4-A02A-503D257F0119" /> we will add new namespace <codeInline>using</codeInline> statements at 
						the top of the file:
          </para>
					<code language="cs" title="Program.cs">
						<![CDATA[
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using DX = SharpDX;
using Gorgon.Core;
using Gorgon.Graphics;
using Gorgon.Graphics.Core;
using Gorgon.Graphics.Imaging.Codecs;
using Gorgon.Renderers;
using Gorgon.UI;
using Gorgon.Timing;
						]]>
					</code>
					<para>
						You'll notice we've added one for SharpDX, and have aliased it to the <codeInline>DX</codeInline> namespace. We require the sharp DX namespace because it contains 
						types that we need to perform calculations for positioning on our sprite, and the alias is there to avoid any namespace collisions since SharpDX uses a lot of the 
						same type names that exist in other standard .NET assemblies.
					</para>
					<para>
						And as you can see, we've added several new namespaces from Gorgon to the mix. We'll be requiring image codecs so we can load the image required for the sprite, 
						and of course we have the renderers namespace which will contain the 2D renderer object.
					</para>
				</content>
      </section>      
			<section>
				<title>Setup</title>
				<content>
					<para>
						To get us going, we'll need some new objects so we can render our sprite data. To start, we'll need to add the following variables to the top of the file, just 
						below the <codeInline>_screen</codeInline> variable:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
			// This is our 2D renderer, we'll be using this to draw our sprite.
			private static Gorgon2D _renderer;
			// The texture holding our sprite image.
			private static GorgonTexture2DView _texture;
			// The sprite to draw.
			private static GorgonSprite _sprite;
						]]>
					</code>
					<para>
						The first of these is the 2D renderer. This is what's responsible for drawing our sprites. The next is the texture we use as the backing image for our sprite. 
						Without texture data, the sprite is nothing more than a rectangle, so we use this give our sprite some life. And finally, the sprite itself. 					
					</para>
					<para>
						Like the previous section, we need to dispose of objects when we no longer need them, and in this case we need to dispose of the texture and the renderer so 
						we can free native resources allocated for Direct 3D. We will add the following lines to our <codeInline>finally</codeInline> block in our <codeInline>Main</codeInline> 
						method:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
					_texture?.Dispose();
					_renderer?.Dispose();
						]]>
					</code>
					<para>
						Next, we'll add a method called <codeInline>UpdateSprite</codeInline> to the class, but we will leave it empty for now:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
			private static void UpdateSprite()
			{
			}
						]]>
					</code>
					<para>
						Finally, in the <codeInline>Idle</codeInline> method, we'll add a call to our recently created <codeInline>UpdateSprite</codeInline> method. Put this line at the 
						very beginning of the method body so that it is the first thing called when Idle time starts:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
			private static bool Idle()
			{
				// Before we render anything, let's update our sprite.
				UpdateSprite();
						]]>
					</code>
				</content>
			</section>
			<section>
				<title>Creating the sprite</title>
				<content>
					<para>To create our sprite we need to:</para>
					<list class="ordered">
						<listItem>Create our 2D renderer.</listItem>
						<listItem>Load the texture from a PNG file.</listItem>
						<listItem>Assign the texture to the sprite.</listItem>
					</list>
					<para>
						For this part, place your code after the creation of the <codeInline>_screen</codeInline> in the <codeInline>Initialize</codeInline> method:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
			_screen = new GorgonSwapChain(_graphics, form, new GorgonSwapChainInfo("Our Screen")
			{
				Width = 1280,			// We'll set our window client area and buffer size to 1280x800.
				Height = 800,			// If you prefer something different, then by all means, set it to that.
				// This tells the system that the pixel format of our swap chain will be 8 bits per channel
				// and unsigned normalized data (basically each channel, R, G, B & Alpha will be within the range 
				// of 0-255.
				Format = BufferFormat.R8G8B8A8_UNorm
			});

			// YOUR CODE STARTS HERE.
						]]>
					</code>
					<para>
						First, we need to create the 2D renderer interface. This gives us the means to send sprite data to the GPU. Add the following line of code:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
			_renderer = new Gorgon2D(_graphics);						
						]]>
					</code>
					<para>
						Next, we'll need to create a codec that allows us to read PNG files. So, we will create a 
						<codeEntityReference qualifyHint="false">T:Gorgon.Graphics.Imaging.Codecs.IGorgonImageCodec</codeEntityReference> object and instantiate a new 
						<codeEntityReference qualifyHint="false">T:Gorgon.Graphics.Imaging.Codecs.GorgonCodecPng</codeEntityReference> object:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
			IGorgonImageCodec codec = new GorgonCodecPng();
						]]>
					</code>
					<para>
						Sprites take a texture, or part of a texture image and allows us to display and manipulate that texture on the screen. So, in order to render a sprite, 
						we need something to render. And since we now have a means of reading a PNG image, we can load that image into a texture:
					</para>
					<alert class="cs">
						<para>This does not mean that a sprite requires a texture to operate. A sprite can be displayed with, or without a texture. Without a texture, a sprite becomes nothing more than a coloured rectangle.</para>
					</alert>
					<code language="cs" title="Program.cs">
						<![CDATA[
			_texture = GorgonTexture2DView.FromFile(_graphics,
													@"<<<<YOUR PATH TO GORGON>>>>\Resources\Textures\Balls\E0_128x128.png",
													codec);
						]]>
					</code>
					<para>
						This will load the resource image into a texture view (which is a shader resource view that allows us to bind to shaders, and is required for proper rendering) 
						so we can assign it to a sprite. You will note that the path says <application>YOUR PATH TO GORGON</application>. This is the path in which you extracted the 
						Gorgon archive file that you downloaded from GitHub. If you are using the source code repo, then you may point the directory to whereever you've checked out the 
						code.
					</para>
					<para>
						Finally, we'll create the actual sprite to render. We'll need to define a few things for the sprite:
					</para>
					<list class="bullet">
						<listItem>The texture we'll be using.</listItem>
						<listItem>The area on the texture where our sprite image resides.</listItem>
						<listItem>The size of the sprite, in pixel space.</listItem>
					</list>
					<para>
						The first, we already have. The 2nd requires some explanation: To achieve the best possible performance, we need to minimize state changes on the GPU. A state 
						change can be a texture change, blending state change, etc... The more of these that happen during a frame, the more performance will degrade. So, one way to 
						minimize this, particularly in 2D, is to use a single large texture called a sprite sheet (or texture atlas) that contains all of the images we'll be using for 
						our sprites. Here is an example:						
					</para>
					<mediaLink>
						<image xlink:href="SpriteSheet"/>
					</mediaLink>
					<para>
						Of course, now we can't use the whole image when we render our sprite as it'd look odd, so we define where on the image the sprite will be located. This is done 
						in texture space using texel coordinates. These coordinates are relative to the size of the image. So, for example, if your image is 512x512 pixels, and you specify 
						a texel region of (0, 0)-(0.5, 0.5), then it would map to the pixel coordinates (0,0)-(256,256). The texture objects in Gorgon have methods that will assist in 
						converting pixel space into texel space, and back again.
					</para>
					<para>
						The 3rd item is how big our sprite will actually be in pixel space. So, using our 512x512 texture example, and we have a sprite 
						image located at 128x128, and it has a width of 64x64 pixels, our size will be 64, 64 and our texture region will be (0.25, 0.25)-(0.375, 0.375) (assuming top, 
						left, right and bottom coordinates for our region, this would give us a texel width and height of 0.125, 0.125).
					</para>
					<para>
						OK, with that out of the way, we'll need to map our pixel coordinates to texel coordinates for our sprite. To do this we'll use the 
						<codeEntityReference qualifyHint="true" autoUpgrade="true">M:Gorgon.Graphics.Core.GorgonTexture2DView.ToTexel(SharpDX.Rectangle,System.Nullable{System.Int32})</codeEntityReference> method. In the
						case of this example, our texture only contains our single sprite, so we can use the entire size of the texture as our sprite width and height, and our texel region 
						by adding the following code:
					</para>
					<code language="cs" title="Program.cs">
						<![CDATA[
			DX.RectangleF textureRegion = _texture.ToTexel(new DX.Rectangle(0, 0, _texture.Width, _texture.Height));
						]]>
					</code>
					<para>
						Now we have enough info to construct a sprite. So go ahead and put this code in:
					</para>
					<code language="cs" title="Project.cs">
						<![CDATA[
			_sprite = new GorgonSprite
			{
				Texture = _texture,
				TextureRegion = textureRegion, 
				Position = new DX.Vector2(_screen.Width + _texture.Width, _screen.Height - _texture.Height * 0.5f - 4),
				Size = new DX.Size2F(_texture.Width, _texture.Height),
				Anchor = new DX.Vector2(0.5f, 0.5f)
			};
						]]>
					</code>
					<para>
						The one there here to note is the <codeEntityReference qualifyHint="false">P:Gorgon.Renderers.GorgonSprite.Anchor</codeEntityReference> property. 
						This allows us to set a pivot point for rotations and also acts as an offset in the sprite area. This value is relative to the size of the sprite, meaning 
						that if our sprite is 128x128, setting an anchor value of 0.5, 0.5 will offset the sprite by 64 pixels left and 64 pixels up, essentially centering 
						the sprite. Setting the anchor to 1, 1 will offset 128 pixels left, and 128 pixels up, essentially making the bottom right corner the pivot point.
					</para>
					<para>
						Where this is useful when you wish to rotate the sprite around a particular point. Otherwise any rotation animation applied to the sprite may be wonky.
					</para>
					<para>
						Now that you have all of this put in, please take some time to compile and run the application. At this point, you won't see anything since our sprite is 
						not being rendered yet, but it will confirm that everything is working as it should.
					</para>
				</content>
			</section>
			<section>
				<title>Rendering the sprite</title>
				<content>
					<para>
						Now is the time for rendering. In the <codeInline>Idle</codeInline> method, we'll add these lines just before the call to 
						<codeEntityReference qualifyHint="false" autoUpgrade="true">M:Gorgon.Graphics.Core.GorgonSwapChain.Present(System.Int32)</codeEntityReference>:
					</para>
					<code language="cs" title="Project.cs">
						<![CDATA[
			_renderer.Begin();

			_renderer.DrawSprite(_sprite);

			_renderer.End();
						]]>
					</code>
					<para>
						Some explanation is obviously in order, especially if you've used older versions of Gorgon. 
					</para>
					<para>
						Before we can draw anything, we must set up a batch by calling <codeEntityReference>M:Gorgon.Renderers.Gorgon2D.Begin(Gorgon.Renderers.Gorgon2DBatchState,Gorgon.Renderers.IGorgon2DCamera)</codeEntityReference>. 
						What this does is tell the GPU that the states are currently locked down and will not change between this and the call to <codeEntityReference>M:Gorgon.Renderers.Gorgon2D.End</codeEntityReference> (except textures). 
						This gives us the best performance as the GPU no longer needs to submit commands until the <codeInline>End</codeInline> call because we're guaranteed that state will not change. By limiting our states 
						we can send off thousands upon thousands of sprites to the GPU and it'll blast them out very quickly, often in a single draw call. But only if the state is constant. If you need to change the blending mode mid batch, 
						then you will need to split the batch up (if you wish to preserve sprite ordering). Because of this, it is paramount to sort out drawing so that it'll give the best batch performance.
					</para>
					<alert class="cs">
						<para>
							There are 2 exceptions to this: textures and texture samplers. If you draw a sprite, and then another sprite with a different texture, or texture sampler, the batch will internally stop and restart. This is 
							done for convenience as requiring the user to split the batch based on texture becomes very tedious. But this comes at a price, if you render 100,000 sprites, with every 2nd sprite using a different texture, 
							your performance will plummet. This is mitigated by using sprite sheets as described earlier. 
						</para>
					</alert>
					<para>
						The 2nd line is pretty self explanatory. Does pretty much what's advertised really. But the 3rd is absolutely required when you call <codeInline>Begin</codeInline>. Without a call to <codeInline>End</codeInline> 
						nothing will be rendered as no draw call will be submitted to the GPU. Furthermore, Gorgon will get angry and throw an exception if you try to call <codeInline>Begin</codeInline> twice in a row, so calling the 
						<codeInline>End</codeInline> method is absolutely required when you're done with a batch.
					</para>
					<para>
						Finally, each line calls into the 2D renderer object. This is the central source for rendering 2D data. All lines, circles, rectangles, text, sprites, etc... are drawn using this interface.
					</para>
					<para>
						OK, that's pretty much it for the rendering. Again, compile the application and run it to ensure there are no errors. You still won't see anything, but it's good to be sure it's working.
					</para>
				</content>
			</section>
			<section>
				<title>Animating the sprite</title>
				<content>
					<para>
						OK, let's do something so we can actually see that sprite. So, we'll fill in that <codeInline>UpdateSprite</codeInline> method we created earlier.
					</para>					
					<para>
						In this method, we'll insert code that will move the sprite from the right side of the screen, to the left side while rotating. We'll do this by updating the position of the sprite by 1/10th of 
						the total screen width per second. To achieve a smooth motion, we'll use the <codeEntityReference qualifyHint="false">P:Gorgon.Timing.GorgonTiming.Delta</codeEntityReference> property on the 
						<codeEntityReference qualifyHint="false">T:Gorgon.Timing.GorgonTiming</codeEntityReference> class. This value is the number of seconds it takes for a frame to render, and it can vary depending on 
						CPU usage among other things. If we just move the sprite by an arbitrary amount our movement can stutter and certainly won't be smooth. By using this value and multiplying it by our movement amount 
						we can smooth out the movement over a period of time and make our motion more predictable.
					</para>
					<para>
						Along with moving the sprite, we will rotate it as well. We'll do the same thing to smooth out the rotation animation by using our <codeInline>Delta</codeInline> value to control the rate of rotation. 
						For this example, our rate of rotation will be 90 degrees per second.
					</para>
					<para>
						This code will move and rotate the sprite along the bottom of the screen. Once it reaches beyond the left side, it will reset and start over. The code to perform this update we'll use the following code:
					</para>
					<code language="cs" title="Project.cs">
						<![CDATA[
			// If our sprite is fully beyond the left hand side (i.e. it's not visible), then 
			// we'll reset it back to its original starting point.
			if (_sprite.Position.X < (0 - _sprite.Size.Width))
			{
				// Reset the sprite to its original position.
				_sprite.Position = new DX.Vector2(_screen.Width + _sprite.Size.Width, 
												  _screen.Height - _sprite.Size.Height * 0.5f - 4);
				return;
			}

			_sprite.Position = new DX.Vector2(_sprite.Position.X - (_screen.Width / 10) * GorgonTiming.Delta, 
											  _sprite.Position.Y);

			_sprite.Angle -= 90.0f * GorgonTiming.Delta;

			if (_sprite.Angle < 0)
			{
				_sprite.Angle = 360.0f + _sprite.Angle;
			}
						]]>
					</code>
					<para>
						Once this code is in, compile and run the application to see your animated sprite.
					</para>
				</content>
			</section>
			<section>
				<title>Finishing up</title>
				<content>
					<para>
						So now that we've finished the application, you should see an image that looks like this (animated of course):
					</para>
					<mediaLink>
						<image xlink:href="ExampleSprite"/>
					</mediaLink>
					<para>
						Here is the complete code for the application:
					</para>
					<code language="cs" title="Project.cs">
						<![CDATA[
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using DX = SharpDX;
using Gorgon.Core;
using Gorgon.Graphics;
using Gorgon.Graphics.Core;
using Gorgon.Graphics.Imaging.Codecs;
using Gorgon.Renderers;
using Gorgon.UI;
using Gorgon.Timing;

namespace GorgonGettingStarted
{
	static class Program
	{
		// Our graphics interface. This is the root of our drawing functionality.
		private static GorgonGraphics _graphics;
		// This is what's used to send our rendered image to our window.
		private static GorgonSwapChain _screen;
		// This is our 2D renderer, we'll be using this to draw our sprite.
		private static Gorgon2D _renderer;
		// The texture holding our sprite image.
		private static GorgonTexture2DView _texture;
		// The sprite to draw.
		private static GorgonSprite _sprite;

		/// <summary>
		/// This is called to update the sprite animaton for each frame.
		/// 
		/// It will move the sprite from the right hand side of the window to the left hand side, 
		/// and wrap around when off screen.
		/// 
		/// It will also rotate the sprite.
		/// </summary>
		private static void UpdateSprite()
		{
			// If our sprite is fully beyond the left hand side (i.e. it's not visible), then 
			// we'll reset it back to its original starting point.
			if (_sprite.Position.X < (0 - _sprite.Size.Width))
			{
				// Reset the sprite to its original position.
				_sprite.Position = new DX.Vector2(_screen.Width + _sprite.Size.Width, 
												  _screen.Height - _sprite.Size.Height * 0.5f - 4);
				return;
			}

			// First, we'll adjust the position.
			// We'll use the frame delta to determine how much to move during 1 second. The delta 
			// is the measure of how long it takes for a frame to draw. Various circumstances can 
			// cause this value to fluctuate, so by providing it to our calculation, we can smooth 
			// out the motion. If we didn't, motion would appear very jerky during periods where the 
			// CPU is busy.
			//
			// In this case, we're moving 10% of the total width of the screen every second.
			_sprite.Position = new DX.Vector2(_sprite.Position.X - (_screen.Width / 10) * GorgonTiming.Delta, 
											  _sprite.Position.Y);

			// We'll rotate our sprite 90 degrees every second.
			_sprite.Angle -= 90.0f * GorgonTiming.Delta;

			// If we move past 0 degrees, just wrap the value around by 360 degrees.
			if (_sprite.Angle < 0)
			{
				_sprite.Angle = 360.0f + _sprite.Angle;
			}
		}

		/// <summary>
		/// This will be called while the application is in an idle state.
		/// This means it'll be called continuously while the application is running, but not 
		/// processing window messages.
		/// </summary>		
		private static bool Idle()
		{
			// Before we render anything, let's update our sprite.
			UpdateSprite();

			// We'll now just update our swap chain by clearing it to a specific color.
			// We use our custom color type to specify the color. Why? Well, it supports a normalized 
			// floating point value (0.0 - 1.0) for each channel. This is more in line with how the 
			// GPU operates.
			//
			// Note that we're clearing the render target for the swap chain and not the swap chain 
			// itself. This is because the render target is a view into the actual buffer that will 
			// be transferred on to the screen. This buffer is not guaranteed to be the same buffer
			// on each iteration of the idle loop.
			_screen.RenderTargetView.Clear(GorgonColor.CornFlowerBlue);

			// This tells the graphics API to use the swap chain's render target view as the final 
			// output for our rendered graphics. If we fail to do this, nothing will show on the 
			// screen.
			_graphics.SetRenderTarget(_screen.RenderTargetView);

			// To render sprites, we start a batch. A batch allows us to control the various states 
			// (e.g. blending) that get set when rendering. For GPU rendering, it is most efficient 
			// to minimize the number of state changes. So, to facilitate this, a batch is used to 
			// state that we are using these states for the duration of our drawing operation.
			// Within this batch we can send as many drawing operations as we like, and as long as 
			// the state remains the same, Gorgon will render very efficiently. 
			//
			// Please note that a texture change (e.g. 2 sprites with different textures) will cause 
			// the batch to stop and restart internally. So minimizing texture changes by using sprite 
			// sheets (texture atlas) is very important.
			_renderer.Begin();

			// And here's our sprite drawing. Complex.
			_renderer.DrawSprite(_sprite);

			// We must always end our batch with a call to End. If we don't the data will not be sent 
			// to the GPU for display.
			_renderer.End();

			// This call copies the swap chain buffer data to the window client area.
			// We pass in 1 to basically limit our refresh rate to 60 FPS (in most cases).
			_screen.Present(1);

			// We return true here because we want to continue processing.
			// If we wanted to stop, we'd return false.
			return true;
		}

		/// <summary>
		/// This function is used to intialize our objects. Just helps to keep
		/// things clean.
		/// 
		/// We pass the form we created in the Run method so we can hook our 
		/// swap chain into it.
		/// </summary>
		private static void Initialize(Form form)
		{
			// Before we use any graphics functionality, we have to tell Gorgon which video device 
			// it should use for rendering. Some machines (although not as common as it used to be) 
			// can have more than 1 GPU installed, this allows us to hook up instances of Gorgon to 
			// each GPU. 
			IReadOnlyList<IGorgonVideoAdapterInfo> videoDevices = GorgonGraphics.EnumerateAdapters();

			// Normally, you should filter the list for the best device available (has the highest 
			// feature level). But for brevity, we'll just go with device #1 and assume everything's
			// fine. Because it is .. right?  Your card DOES support D3D 11.2 right?
			_graphics = new GorgonGraphics(videoDevices[0]);

			// Now we'll create a swap chain to act as our screen. The swap chain is a series of 
			// buffers (render targets) that will receive our drawing data and present them to our 
			// window in seqence (or not, depending on how you set things up).
			//
			// Note that you can name many of the objects in Gorgon. This name is optional and is 
			// primarily used for debugging purposes, and sometimes used for looking up objects 
			// internally.
			_screen = new GorgonSwapChain(_graphics, form, new GorgonSwapChainInfo("Our Screen")
			{
				Width = 1280,			// We'll set our window client area and buffer size to 1280x800.
				Height = 800,			// If you prefer something different, then by all means, set it to that.
				// This tells the system that the pixel format of our swap chain will be 8 bits per channel
				// and unsigned normalized data (basically each channel, R, G, B & Alpha will be within the range 
				// of 0-255.
				Format = BufferFormat.R8G8B8A8_UNorm
			});

			// Now we'll initialize our 2D renderer.
			_renderer = new Gorgon2D(_graphics);

			// A sprite is an image, or a part of an image that we can manipulate. But before we can have a 
			// sprite, we need image data to map the sprite onto.  So, we'll load a texture first. 
			//
			// The texture is stored as a PNG file, so we'll need to create a codec so we can read PNG image 
			// data into the texture.
			IGorgonImageCodec codec = new GorgonCodecPng();

			// Next we'll load the image from a location on the drive.
			// This location will vary based on where you unpacked the Gorgon assemblies.
			// Note that this method will automatically set up the texture view to be bound as a shader resource. 
			// This is important because if it wasn't able to be bound to a shader, it would not render. Depending 
			// on the context, you may be required to define the binding yourself.
			_texture = GorgonTexture2DView.FromFile(_graphics,
													@"<<THE LOCATION OF YOUR GORGON INSTALL>>\Resources\Textures\Balls\E0_128x128.png",
													codec);

			// Now we can map this image to our sprite.
			// Textures are mapped using texel coordinates where coordinates are relative to the pixel coordinates 
			// of the image. So, if the image were 128x128, then 0,0 - 1, 1 would map to 0,0 - 128, 128 on the 
			// texture image. For convenience, there is a method available on the texture object to convert from 
			// pixel space into texel space (and there are methods to convert back to pixel space as well).
			DX.RectangleF textureRegion = _texture.ToTexel(new DX.Rectangle(0, 0, _texture.Width, _texture.Height));


			// We set the position to appear offscreen, at the bottom.  This is for our animation. You'll see that 
			// we've shifted the sprite position up by only 1/2 of the sprite height (minus some buffer) room. This 
			// is to accomodate our anchor point. 
			//
			// The sprite Anchor is used as a pivot point, or offset. It is used to shift the sprite when drawing so 
			// that it doesn't start drawing from the upper left corner.
			//
			// The anchor value is relative to the size of the sprite, so if you have an anchor value of 0.5 for x 
			// and y, and your sprite is 128x128 pixels, then the sprite will be shifted to the left, and up by 
			// 64 pixels. This would give the appearance of having the sprite's offset at the center of the sprite.
			// This is particularly useful when we wish to rotate the sprite around its center.
			//
			// We've set our size to the entire image. In this case, we're fine to do this, but in a real world 
			// scenario, with multiple sprites, you'd have as many sprite images as you can pack onto a single 
			// texture for the most efficient drawing. In those cases, we'd define our texture region to be a portion 
			// of the image, and the size to be whatever the width and height of the sprite should be (in pixels).
			_sprite = new GorgonSprite
			{
				Texture = _texture,
				TextureRegion = textureRegion, 
				Position = new DX.Vector2(_screen.Width + _texture.Width, _screen.Height - _texture.Height * 0.5f - 4),
				Size = new DX.Size2F(_texture.Width, _texture.Height),
				Anchor = new DX.Vector2(0.5f, 0.5f)
			};
		}

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main()
		{
			try
			{
				Application.EnableVisualStyles();
				Application.SetCompatibleTextRenderingDefault(false);

				// We've moved the form creation to here.
				var form = new Form1();

				// Now we'll initialize our application so we can do more fun things.
				Initialize(form);

				GorgonApplication.Run(form, Idle);
			}
			catch (Exception ex)
			{
				// We'll use this to display any error messages.
				// Much nicer than having our app just up and die.
				ex.Catch(_ => GorgonDialogs.ErrorBox(null, ex));
			}
			finally
			{
				// ALWAYS perform clean up. Especially since we're using 
				// Direct3D stuff here (COM objects). These live in native land 
				// and should be cleaned up as soon as we don't require them 
				// any more.

				_texture?.Dispose();
				_renderer?.Dispose();
				_screen?.Dispose();
				_graphics?.Dispose();
			}
		}
	}
}
						]]>
					</code>
				</content>
			</section>
    </sections>
    <relatedTopics>
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="564985CC-F18F-4711-A2BC-0796D266E54D" />            
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="6DFFD6AF-951B-44FC-B9D0-A222D7CBF359" />            
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="6F8A9863-C003-4503-9310-70E75D7E5C81" />            
			<link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="3F43A9BF-35A1-4BD4-A02A-503D257F0119" />
    </relatedTopics>    
  </developerConceptualDocument>
</topic>