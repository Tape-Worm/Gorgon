//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;

namespace Gorgon.Graphics.Properties {
	/// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [DebuggerNonUserCode()]
    [CompilerGenerated()]
    internal class Resources {
        
        private static ResourceManager resourceMan;
        
        private static CultureInfo resourceCulture;
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal static ResourceManager ResourceManager {
            get {
                if (ReferenceEquals(resourceMan, null)) {
                    ResourceManager temp = new ResourceManager("Gorgon.Graphics.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal static CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value must be be equal to or greater than {0} and less than {1}..
        /// </summary>
        internal static string GORGFX_ARG_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_ARG_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No encoder was found for the format [{0}]..
        /// </summary>
        internal static string GORGFX_BC_NO_ENCODER {
            get {
                return ResourceManager.GetString("GORGFX_BC_NO_ENCODER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Box: {0}x{1}x{2}-{3}x{4}x{5} (Width: {6}, Height: {7}, Depth {8}).
        /// </summary>
        internal static string GORGFX_BOX_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_BOX_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A generic dynamic buffer must be accessible via a shader view..
        /// </summary>
        internal static string GORGFX_BUFFER_DYNAMIC_NEEDS_SHADER_VIEW {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_DYNAMIC_NEEDS_SHADER_VIEW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This buffer is immutable and this cannot be updated..
        /// </summary>
        internal static string GORGFX_BUFFER_IMMUTABLE {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_IMMUTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create an immutable buffer without initial data to populate it..
        /// </summary>
        internal static string GORGFX_BUFFER_IMMUTABLE_REQUIRES_DATA {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_IMMUTABLE_REQUIRES_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffers that allow unordered access views, render target views, or can be used for output cannot have a usage of [Dynamic]..
        /// </summary>
        internal static string GORGFX_BUFFER_NO_DYNAMIC_INVALID_FLAGS {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_NO_DYNAMIC_INVALID_FLAGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} buffer type cannot output data..
        /// </summary>
        internal static string GORGFX_BUFFER_NO_OUTPUT_INVALID_TYPE {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_NO_OUTPUT_INVALID_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot lock this buffer with a lock type of [NoOverwrite].
        /// </summary>
        internal static string GORGFX_BUFFER_NO_OVERWRITE_NOT_VALID {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_NO_OVERWRITE_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer does not allow raw views..
        /// </summary>
        internal static string GORGFX_BUFFER_NO_RAW_VIEWS {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_NO_RAW_VIEWS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer does not allow shader resource views..
        /// </summary>
        internal static string GORGFX_BUFFER_NO_SHADER_VIEWS {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_NO_SHADER_VIEWS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffers that allow indirect arguments, shader views, unordered access views, raw views, render target views or can be used for output cannot have a usage of [Staging]..
        /// </summary>
        internal static string GORGFX_BUFFER_NO_STAGING_INVALID_FLAGS {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_NO_STAGING_INVALID_FLAGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer &apos;{0}&apos; was not created as an indirect argument buffer..
        /// </summary>
        internal static string GORGFX_BUFFER_NOT_INDIRECT {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_NOT_INDIRECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create the buffer.  The buffer size of {0} bytes is not a multiple of {1}..
        /// </summary>
        internal static string GORGFX_BUFFER_NOT_MULTIPLE {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_NOT_MULTIPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer &apos;{0}&apos; was not created with IsOutput = true..
        /// </summary>
        internal static string GORGFX_BUFFER_NOT_OUTPUT {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_NOT_OUTPUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A buffer that allows stream output cannot have unordered access..
        /// </summary>
        internal static string GORGFX_BUFFER_OUTPUT_NO_UNORDERED {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_OUTPUT_NO_UNORDERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A buffer that provides raw access must allow shader views and/or unordered resource views..
        /// </summary>
        internal static string GORGFX_BUFFER_RAW_ACCESS_REQUIRES_VIEW_ACCESS {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_RAW_ACCESS_REQUIRES_VIEW_ACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer must use [NoOverwrite] or [Discard] when locking..
        /// </summary>
        internal static string GORGFX_BUFFER_REQUIRES_NOOVERWRITE_DISCARD {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_REQUIRES_NOOVERWRITE_DISCARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the buffers do not match..
        /// </summary>
        internal static string GORGFX_BUFFER_SIZE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_SIZE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer requires at least {0} byte(s)..
        /// </summary>
        internal static string GORGFX_BUFFER_SIZE_TOO_SMALL {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_SIZE_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a staging buffer because the source buffer is immutable..
        /// </summary>
        internal static string GORGFX_BUFFER_STAGING_NO_IMMUTABLE {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_STAGING_NO_IMMUTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The structure size must be greater than 0 and no greater than 2048 bytes..
        /// </summary>
        internal static string GORGFX_BUFFER_STRUCTURE_SIZE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_STRUCTURE_SIZE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A buffer with a usage of [{0}] cannot be locked..
        /// </summary>
        internal static string GORGFX_BUFFER_USAGE_CANT_LOCK {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_USAGE_CANT_LOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot read this buffer..
        /// </summary>
        internal static string GORGFX_BUFFER_WRITE_ONLY {
            get {
                return ResourceManager.GetString("GORGFX_BUFFER_WRITE_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a deferred context to create another deferred context.  Only an immediate context may created a deferred context..
        /// </summary>
        internal static string GORGFX_CANNOT_CREATE_CONTEXT_FROM_CONTEXT {
            get {
                return ResourceManager.GetString("GORGFX_CANNOT_CREATE_CONTEXT_FROM_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot call this method from a deferred context..
        /// </summary>
        internal static string GORGFX_CANNOT_USE_DEFERRED_CONTEXT {
            get {
                return ResourceManager.GetString("GORGFX_CANNOT_USE_DEFERRED_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot call this method from an immediate context..
        /// </summary>
        internal static string GORGFX_CANNOT_USE_IMMEDIATE_CONTEXT {
            get {
                return ResourceManager.GetString("GORGFX_CANNOT_USE_IMMEDIATE_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a catastrophic error in Gorgon.
        ///
        ///Please report this error by pasting the details to the bug tracker in Gorgon&apos;s google code repository.  If possible, please attach the log file generated by Gorgon to the bug report.
        ///
        ///Log file location: &quot;{0}&quot;.
        /// </summary>
        internal static string GORGFX_CATASTROPHIC_ERROR {
            get {
                return ResourceManager.GetString("GORGFX_CATASTROPHIC_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Color Value: Red={0}, Green={1}, Blue={2}, Alpha={3}.
        /// </summary>
        internal static string GORGFX_COLOR_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_COLOR_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constant buffer &apos;{0}&apos; is already bound at slot [{1}]..
        /// </summary>
        internal static string GORGFX_CONSTANTBUFFER_ALREADY_BOUND {
            get {
                return ResourceManager.GetString("GORGFX_CONSTANTBUFFER_ALREADY_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot update a texture used as a depth/stencil buffer..
        /// </summary>
        internal static string GORGFX_DEPTH_OPERATION_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_DEPTH_OPERATION_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find any supported video devices.  Gorgon requires a device that can support a minimum of pixel shader model 2b and a vertex shader model of 2a..
        /// </summary>
        internal static string GORGFX_DEVICE_CANNOT_FIND_DEVICES {
            get {
                return ResourceManager.GetString("GORGFX_DEVICE_CANNOT_FIND_DEVICES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference rasterizer.
        /// </summary>
        internal static string GORGFX_DEVICE_NAME_REFRAST {
            get {
                return ResourceManager.GetString("GORGFX_DEVICE_NAME_REFRAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARP software rasterizer.
        /// </summary>
        internal static string GORGFX_DEVICE_NAME_WARP {
            get {
                return ResourceManager.GetString("GORGFX_DEVICE_NAME_WARP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Graphics Video Device: {0}.
        /// </summary>
        internal static string GORGFX_DEVICE_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_DEVICE_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following parameters:\n{0}\nAre required for this effect, but are not present in the parameters list..
        /// </summary>
        internal static string GORGFX_EFFECT_MISSING_REQUIRED_PARAMS {
            get {
                return ResourceManager.GetString("GORGFX_EFFECT_MISSING_REQUIRED_PARAMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Effect Parameter: {0}, Value = {1}.
        /// </summary>
        internal static string GORGFX_EFFECT_PARAM_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_EFFECT_PARAM_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a multi-sampled texture as a texture cube..
        /// </summary>
        internal static string GORGFX_ERR_CANNOT_MULTISAMPLE_CUBE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_CANNOT_MULTISAMPLE_CUBE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must supply a known feature level..
        /// </summary>
        internal static string GORGFX_FEATURE_LEVEL_UNKNOWN {
            get {
                return ResourceManager.GetString("GORGFX_FEATURE_LEVEL_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &apos;{0}&apos; was not found..
        /// </summary>
        internal static string GORGFX_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("GORGFX_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Image pitch information.  Width={0} bytes, Size={1} bytes.  Format is compressed. Block count width: {2}, Block count height: {3}.
        /// </summary>
        internal static string GORGFX_FMTPITCH_COMPRESSED_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_FMTPITCH_COMPRESSED_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Image pitch information.  Width={0} bytes, Size={1} bytes..
        /// </summary>
        internal static string GORGFX_FMTPITCH_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_FMTPITCH_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Weighted interpolation at {0}.  Color: R={1}, G={2}, B={3}, A={4}..
        /// </summary>
        internal static string GORGFX_FONT_BRUSH_INTERPOL_TOSTRING {
            get {
                return ResourceManager.GetString("GORGFX_FONT_BRUSH_INTERPOL_TOSTRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not retrieve character widths for the specified characters..
        /// </summary>
        internal static string GORGFX_FONT_CANNOT_RETRIEVE_ABC {
            get {
                return ResourceManager.GetString("GORGFX_FONT_CANNOT_RETRIEVE_ABC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot retrieve kerning pairs..
        /// </summary>
        internal static string GORGFX_FONT_CANNOT_RETRIEVE_KERNING {
            get {
                return ResourceManager.GetString("GORGFX_FONT_CANNOT_RETRIEVE_KERNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default character &apos;{0}&apos; does not exist in the font character set..
        /// </summary>
        internal static string GORGFX_FONT_DEFAULT_CHAR_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("GORGFX_FONT_DEFAULT_CHAR_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The font family name must not be NULL or empty..
        /// </summary>
        internal static string GORGFX_FONT_FAMILY_NAME_MUST_NOT_BE_EMPTY {
            get {
                return ResourceManager.GetString("GORGFX_FONT_FAMILY_NAME_MUST_NOT_BE_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The glyph for character &apos;{0}&apos; does not have a texture assigned to it..
        /// </summary>
        internal static string GORGFX_FONT_GLYPH_HAS_NO_TEXTURE {
            get {
                return ResourceManager.GetString("GORGFX_FONT_GLYPH_HAS_NO_TEXTURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Glyph node size is too large for the image..
        /// </summary>
        internal static string GORGFX_FONT_GLYPH_NODE_TOO_LARGE {
            get {
                return ResourceManager.GetString("GORGFX_FONT_GLYPH_NODE_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture &apos;{0}&apos; was not found..
        /// </summary>
        internal static string GORGFX_FONT_GLYPH_TEXTURE_NOT_FOUND {
            get {
                return ResourceManager.GetString("GORGFX_FONT_GLYPH_TEXTURE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Font Glyph: {0}.
        /// </summary>
        internal static string GORGFX_FONT_GLYPH_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_FONT_GLYPH_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}/{1}.
        /// </summary>
        internal static string GORGFX_FONT_KERNING_PAIR_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_FONT_KERNING_PAIR_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External textures require a System.IO.FileStream object..
        /// </summary>
        internal static string GORGFX_FONT_MUST_BE_FILE_STREAM {
            get {
                return ResourceManager.GetString("GORGFX_FONT_MUST_BE_FILE_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture &apos;{0}&apos; already exists in this collection..
        /// </summary>
        internal static string GORGFX_FONT_TEXTURE_EXISTS {
            get {
                return ResourceManager.GetString("GORGFX_FONT_TEXTURE_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture &apos;{0}&apos; was not found in this collection..
        /// </summary>
        internal static string GORGFX_FONT_TEXTURE_NOT_FOUND {
            get {
                return ResourceManager.GetString("GORGFX_FONT_TEXTURE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The font texture size ({0}x{1}) is too large..
        /// </summary>
        internal static string GORGFX_FONT_TEXTURE_SIZE_TOO_LARGE {
            get {
                return ResourceManager.GetString("GORGFX_FONT_TEXTURE_SIZE_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format [{0}] is not supported..
        /// </summary>
        internal static string GORGFX_FORMAT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_FORMAT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image is already compressed..
        /// </summary>
        internal static string GORGFX_IMAGE_ALREADY_COMPRESSED {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_ALREADY_COMPRESSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows Bitmap.
        /// </summary>
        internal static string GORGFX_IMAGE_BMP_CODEC_DESC {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_BMP_CODEC_DESC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot copy a buffer into itself..
        /// </summary>
        internal static string GORGFX_IMAGE_BUFFER_CANT_BE_SAME {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_BUFFER_CANT_BE_SAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a mismatch between the image size, and the buffer size..
        /// </summary>
        internal static string GORGFX_IMAGE_BUFFER_SIZE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_BUFFER_SIZE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot copy the image.  The source width, height (if applicable) and format must be the same as the destination..
        /// </summary>
        internal static string GORGFX_IMAGE_CANNOT_COPY_IMAGE_DATA_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_CANNOT_COPY_IMAGE_DATA_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon {0} Image Codec.
        /// </summary>
        internal static string GORGFX_IMAGE_CODEC_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_CODEC_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Direct Draw Surface.
        /// </summary>
        internal static string GORGFX_IMAGE_DDS_CODEC_DESC {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_DDS_CODEC_DESC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data in the stream could not be decoded as a {0} file..
        /// </summary>
        internal static string GORGFX_IMAGE_FILE_INCORRECT_DECODER {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_FILE_INCORRECT_DECODER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data could not be encoded into a {0} file..
        /// </summary>
        internal static string GORGFX_IMAGE_FILE_INCORRECT_ENCODER {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_FILE_INCORRECT_ENCODER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture format [{0}] must match the image data format [{1}]..
        /// </summary>
        internal static string GORGFX_IMAGE_FORMAT_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_FORMAT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format &apos;{0}&apos; is not a valid compressed format..
        /// </summary>
        internal static string GORGFX_IMAGE_FORMAT_NOT_COMPRESSED {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_FORMAT_NOT_COMPRESSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Graphics Interchange Format.
        /// </summary>
        internal static string GORGFX_IMAGE_GIF_CODEC_DESC {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_GIF_CODEC_DESC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HD Photo format.
        /// </summary>
        internal static string GORGFX_IMAGE_HDP_CODEC_DESC {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_HDP_CODEC_DESC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An indexed image requires a palette with {0} entries..
        /// </summary>
        internal static string GORGFX_IMAGE_INDEXED_NO_PALETTE {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_INDEXED_NO_PALETTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Joint photographics experts group.
        /// </summary>
        internal static string GORGFX_IMAGE_JPG_CODEC_DESC {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_JPG_CODEC_DESC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mip level count and the array count exceed the length of the array..
        /// </summary>
        internal static string GORGFX_IMAGE_MIPCOUNT_ARRAYCOUNT_TOO_LARGE {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_MIPCOUNT_ARRAYCOUNT_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pixel format for all elements must be [{0}]..
        /// </summary>
        internal static string GORGFX_IMAGE_MUST_BE_SAME_FORMAT {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_MUST_BE_SAME_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format [0] is not a standard 16BPP format ([B5G6R5] or [B5G5R5A1])..
        /// </summary>
        internal static string GORGFX_IMAGE_NOT_16BPP {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_NOT_16BPP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pitch for the image must be greater than 0..
        /// </summary>
        internal static string GORGFX_IMAGE_PITCH_TOO_SMALL {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_PITCH_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Portable Network Graphics.
        /// </summary>
        internal static string GORGFX_IMAGE_PNG_CODEC_DESC {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_PNG_CODEC_DESC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Truevision Targa.
        /// </summary>
        internal static string GORGFX_IMAGE_TGA_CODEC_DESC {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_TGA_CODEC_DESC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tagged Image File Format.
        /// </summary>
        internal static string GORGFX_IMAGE_TIF_CODEC_DESC {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_TIF_CODEC_DESC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image type &apos;{0}&apos; is not a valid image type..
        /// </summary>
        internal static string GORGFX_IMAGE_TYPE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_TYPE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mip level count and the depth slice count exceed the length of the array..
        /// </summary>
        internal static string GORGFX_IMAGE_VOLUME_MIPCOUNT_DEPTHCOUNT_TOO_LARGE {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_VOLUME_MIPCOUNT_DEPTHCOUNT_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a volume texture mip chain unless the dimensions are powers of 2..
        /// </summary>
        internal static string GORGFX_IMAGE_VOLUME_NOT_POWER_OF_TWO {
            get {
                return ResourceManager.GetString("GORGFX_IMAGE_VOLUME_NOT_POWER_OF_TWO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index is out of range.  The index value [{0}] must be be {1} or less than {2}..
        /// </summary>
        internal static string GORGFX_INDEX_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_INDEX_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A valid device context was not found..
        /// </summary>
        internal static string GORGFX_INVALID_D3D_CONTEXT {
            get {
                return ResourceManager.GetString("GORGFX_INVALID_D3D_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value [{0}] for parameter &apos;{1}&apos; is not valid..
        /// </summary>
        internal static string GORGFX_INVALID_ENUM_VALUE {
            get {
                return ResourceManager.GetString("GORGFX_INVALID_ENUM_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Gorgon Graphics interface requires Windows Vista Service Pack 2 or greater..
        /// </summary>
        internal static string GORGFX_INVALID_OS {
            get {
                return ResourceManager.GetString("GORGFX_INVALID_OS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a &apos;{0}&apos; settings object with a &apos;{1}&apos; object..
        /// </summary>
        internal static string GORGFX_INVALID_SETTINGS {
            get {
                return ResourceManager.GetString("GORGFX_INVALID_SETTINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The offset [{0}] or context &apos;{1}&apos; is in use by another item with the same index or slot..
        /// </summary>
        internal static string GORGFX_LAYOUT_ELEMENT_IN_USE {
            get {
                return ResourceManager.GetString("GORGFX_LAYOUT_ELEMENT_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; is not a valid type for an input element..
        /// </summary>
        internal static string GORGFX_LAYOUT_INVALID_ELEMENT_TYPE {
            get {
                return ResourceManager.GetString("GORGFX_LAYOUT_INVALID_ELEMENT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot lock a buffer for reading if the resource does not have a usage of [Staging]..
        /// </summary>
        internal static string GORGFX_LOCK_CANNOT_READ_NON_STAGING {
            get {
                return ResourceManager.GetString("GORGFX_LOCK_CANNOT_READ_NON_STAGING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use [Discard] or [NoOverwrite] with a [Read] flag..
        /// </summary>
        internal static string GORGFX_LOCK_CANNOT_USE_WITH_READ {
            get {
                return ResourceManager.GetString("GORGFX_LOCK_CANNOT_USE_WITH_READ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calling lock on a resource when using a deferred context requires at least the [Discard] and/or the [NoOverwrite] flags..
        /// </summary>
        internal static string GORGFX_LOCK_NEED_DISCARD_NOOVERWRITE {
            get {
                return ResourceManager.GetString("GORGFX_LOCK_NEED_DISCARD_NOOVERWRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video device &apos;{0}&apos; does not support multisampling with a count of {1} and a quality of {2} for format [{3}]..
        /// </summary>
        internal static string GORGFX_MULTISAMPLE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_MULTISAMPLE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multisampling count: {0}, quality: {1}..
        /// </summary>
        internal static string GORGFX_MULTISAMPLE_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_MULTISAMPLE_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The usage for this object must be set to &apos;Default&apos;..
        /// </summary>
        internal static string GORGFX_NOT_DEFAULT_USAGE {
            get {
                return ResourceManager.GetString("GORGFX_NOT_DEFAULT_USAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Software device output.
        /// </summary>
        internal static string GORGFX_OUTPUT_SOFTWARE_DEV_NAME {
            get {
                return ResourceManager.GetString("GORGFX_OUTPUT_SOFTWARE_DEV_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream output buffer binding.  Offset: {0}, Buffer: {1}.
        /// </summary>
        internal static string GORGFX_OUTPUTBUFFER_BINDING_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_OUTPUTBUFFER_BINDING_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter must not be empty..
        /// </summary>
        internal static string GORGFX_PARAMETER_MUST_NOT_BE_EMPTY {
            get {
                return ResourceManager.GetString("GORGFX_PARAMETER_MUST_NOT_BE_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a full screen swap chain active on the video output &apos;{0}&apos;..
        /// </summary>
        internal static string GORGFX_RENDERTARGET_ALREADY_FULLSCREEN {
            get {
                return ResourceManager.GetString("GORGFX_RENDERTARGET_ALREADY_FULLSCREEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A render target must have a usage of [Default]..
        /// </summary>
        internal static string GORGFX_RENDERTARGET_NEED_DEFAULT {
            get {
                return ResourceManager.GetString("GORGFX_RENDERTARGET_NEED_DEFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the video output for the specified window..
        /// </summary>
        internal static string GORGFX_RENDERTARGET_NO_OUTPUT {
            get {
                return ResourceManager.GetString("GORGFX_RENDERTARGET_NO_OUTPUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No window to bind with the swap chain..
        /// </summary>
        internal static string GORGFX_RENDERTARGET_NO_WINDOW {
            get {
                return ResourceManager.GetString("GORGFX_RENDERTARGET_NO_WINDOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The render target &apos;{0}&apos; is not bound to a swap chain..
        /// </summary>
        internal static string GORGFX_RENDERTARGET_NOT_SWAPCHAIN {
            get {
                return ResourceManager.GetString("GORGFX_RENDERTARGET_NOT_SWAPCHAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A device with feature level {0} (or better) is necessary to use this object or perform this operation..
        /// </summary>
        internal static string GORGFX_REQUIRES_SM {
            get {
                return ResourceManager.GetString("GORGFX_REQUIRES_SM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource type [{0}] is invalid..
        /// </summary>
        internal static string GORGFX_RESOURCE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_RESOURCE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The render target &apos;{0}&apos; view is already bound at slot [{1}].
        /// </summary>
        internal static string GORGFX_RTV_ALREADY_BOUND {
            get {
                return ResourceManager.GetString("GORGFX_RTV_ALREADY_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the render target &apos;{0}&apos;. Render targets must all have the same number of array indices.  Expected: {1}, Got: {2}.
        /// </summary>
        internal static string GORGFX_RTV_ARRAY_COUNT_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_ARRAY_COUNT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the render target &apos;{0}&apos;. SM2_a_b video devices require that all render targets have the same bit depth..
        /// </summary>
        internal static string GORGFX_RTV_BIT_DEPTH_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_BIT_DEPTH_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the render target &apos;{0}&apos;. Render target buffers must be the same size. Expected: {1}, Got: {2}.
        /// </summary>
        internal static string GORGFX_RTV_BUFFER_SIZE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_BUFFER_SIZE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the depth/stencil buffer, the render target &apos;{0}&apos; has a texture with a different array count than the depth/stencil buffer..
        /// </summary>
        internal static string GORGFX_RTV_DEPTH_ARRAYCOUNT_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_DEPTH_ARRAYCOUNT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the depth/stencil buffer, the render target &apos;{0}&apos; has a texture with a different mip level count than the depth/stencil buffer..
        /// </summary>
        internal static string GORGFX_RTV_DEPTH_MIPCOUNT_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_DEPTH_MIPCOUNT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the depth/stencil buffer, the render target &apos;{0}&apos; has a multisampling count/quaity of {1}/{2} and the depth/stencil buffer has a multisampling count/quality of {3}/{4}..
        /// </summary>
        internal static string GORGFX_RTV_DEPTH_MULTISAMPLE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_DEPTH_MULTISAMPLE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the depth/stencil buffer, there is a render target bound with the resource type of [{0}] and the depth/stencil is bound to a [{1}] resource type..
        /// </summary>
        internal static string GORGFX_RTV_DEPTH_RESOURCE_TYPE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_RTV_DEPTH_RESOURCE_TYPE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the depth/stencil buffer, there are render targets with the resource type of [{0}] bound to the pipeline..
        /// </summary>
        internal static string GORGFX_RTV_DEPTH_RT_TYPE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_RTV_DEPTH_RT_TYPE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the render target &apos;{0}&apos;. Render targets must all have the same dimensions.  Expected: {1}x{2}x{3}, Got: {4}x{5}x{6}.
        /// </summary>
        internal static string GORGFX_RTV_DIMENSIONS_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_DIMENSIONS_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the render target &apos;{0}&apos;. Render targets must all have the same number of mip levels.  Expected: {1}, Got: {2}.
        /// </summary>
        internal static string GORGFX_RTV_MIP_COUNT_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_MIP_COUNT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the render target &apos;{0}&apos;. Render targets must all have the same multisample settings. Expected count/quality: {1}/{2}, Got count/quality: {3}/{4}.
        /// </summary>
        internal static string GORGFX_RTV_MULTISAMPLE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_MULTISAMPLE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the render target &apos;{0}&apos;. There is a render target bound with the resource type of [{1}] and the depth/stencil is bound to a [{2}] resource type..
        /// </summary>
        internal static string GORGFX_RTV_RESOURCE_TYPE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_RTV_RESOURCE_TYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot have more than [{0}] render target views + unordered access views..
        /// </summary>
        internal static string GORGFX_RTV_TOO_MANY {
            get {
                return ResourceManager.GetString("GORGFX_RTV_TOO_MANY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The include file in line &apos;{0}&apos; was not found in the include list..
        /// </summary>
        internal static string GORGFX_SHADER_INCLUDE_NOT_FOUND {
            get {
                return ResourceManager.GetString("GORGFX_SHADER_INCLUDE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The include line &apos;{0}&apos; is not valid..
        /// </summary>
        internal static string GORGFX_SHADER_INCLUDE_PATH_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_SHADER_INCLUDE_PATH_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Shader Include &apos;{0}&apos;.
        /// </summary>
        internal static string GORGFX_SHADER_INCLUDE_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_SHADER_INCLUDE_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Shader Macro Definition &apos;{0}&apos;..
        /// </summary>
        internal static string GORGFX_SHADER_MACRO_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_SHADER_MACRO_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot save the shader as a source code file.  There was no source code found for the this shader..
        /// </summary>
        internal static string GORGFX_SHADER_NO_CODE {
            get {
                return ResourceManager.GetString("GORGFX_SHADER_NO_CODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a stream output shader with this method..
        /// </summary>
        internal static string GORGFX_SHADER_NO_SO {
            get {
                return ResourceManager.GetString("GORGFX_SHADER_NO_SO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The shader type [{0}] is not a valid type..
        /// </summary>
        internal static string GORGFX_SHADER_UNKNOWN_TYPE {
            get {
                return ResourceManager.GetString("GORGFX_SHADER_UNKNOWN_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Shader View.  Format: [{0}].
        /// </summary>
        internal static string GORGFX_SHADER_VIEW_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_SHADER_VIEW_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stride at index [{0}] is not a multiple of 4..
        /// </summary>
        internal static string GORGFX_SO_BUFFER_NOT_MULTIPLE_OF_4 {
            get {
                return ResourceManager.GetString("GORGFX_SO_BUFFER_NOT_MULTIPLE_OF_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stride at index [{0}] must be less than 2048 bytes..
        /// </summary>
        internal static string GORGFX_SO_STRIDE_TOO_LARGE {
            get {
                return ResourceManager.GetString("GORGFX_SO_STRIDE_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stride at index [{0}] has a size of {1} bytes. It must be equal to or greater than {2} bytes.  .
        /// </summary>
        internal static string GORGFX_SO_STRIDE_TOO_SMALL {
            get {
                return ResourceManager.GetString("GORGFX_SO_STRIDE_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot read beyond the end of a stream..
        /// </summary>
        internal static string GORGFX_STREAM_EOF {
            get {
                return ResourceManager.GetString("GORGFX_STREAM_EOF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream cannot perform seek operations..
        /// </summary>
        internal static string GORGFX_STREAM_NO_SEEK {
            get {
                return ResourceManager.GetString("GORGFX_STREAM_NO_SEEK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream is read only..
        /// </summary>
        internal static string GORGFX_STREAM_READ_ONLY {
            get {
                return ResourceManager.GetString("GORGFX_STREAM_READ_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream is write-only..
        /// </summary>
        internal static string GORGFX_STREAM_WRITE_ONLY {
            get {
                return ResourceManager.GetString("GORGFX_STREAM_WRITE_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This render target is not a swap chain..
        /// </summary>
        internal static string GORGFX_TARGET_IS_NOT_SWAPCHAIN {
            get {
                return ResourceManager.GetString("GORGFX_TARGET_IS_NOT_SWAPCHAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This 3D texture is CPU accessible and cannot be copied..
        /// </summary>
        internal static string GORGFX_TEXTURE_3D_CPU_ACCESSIBLE {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_3D_CPU_ACCESSIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A compressed texture must have a width and height that is a multiple of 4..
        /// </summary>
        internal static string GORGFX_TEXTURE_BC_SIZE_NOT_MOD_4 {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_BC_SIZE_NOT_MOD_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature level SM2_a_b video devices cannot copy non-staging textures..
        /// </summary>
        internal static string GORGFX_TEXTURE_CANNOT_COPY_NONSTAGING {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_CANNOT_COPY_NONSTAGING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot copy to and from the same sub resource on the same texture..
        /// </summary>
        internal static string GORGFX_TEXTURE_CANNOT_COPY_SAME_SUBRESOURCE {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_CANNOT_COPY_SAME_SUBRESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot copy because these formats: [{0}] and [{1}] cannot be converted..
        /// </summary>
        internal static string GORGFX_TEXTURE_COPY_CANNOT_CONVERT {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_COPY_CANNOT_CONVERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create the texture cube array.  The array count is not a multiple of 6..
        /// </summary>
        internal static string GORGFX_TEXTURE_CUBE_MULTIPLE_OF_SIX {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_CUBE_MULTIPLE_OF_SIX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create the texture cube array.  SM4 devices require a maximum of 6 faces..
        /// </summary>
        internal static string GORGFX_TEXTURE_CUBE_NEEDS_MAX_SIX_SM4 {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_CUBE_NEEDS_MAX_SIX_SM4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a &apos;{0}&apos; with a depth of {1}.  The depth must be between 0 and {2}..
        /// </summary>
        internal static string GORGFX_TEXTURE_DEPTH_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_DEPTH_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use [Discard] with a texture that has not been created with a [Dynamic] usage..
        /// </summary>
        internal static string GORGFX_TEXTURE_DISCARD_NEEDS_DYNAMIC {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_DISCARD_NEEDS_DYNAMIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format &apos;{0}&apos; is not supported for a &apos;{1}&apos; texture..
        /// </summary>
        internal static string GORGFX_TEXTURE_FORMAT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_FORMAT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a &apos;{0}&apos; with a height of {1}.  The height must be between 0 and {2}..
        /// </summary>
        internal static string GORGFX_TEXTURE_HEIGHT_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_HEIGHT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture is immutable and cannot be updated..
        /// </summary>
        internal static string GORGFX_TEXTURE_IMMUTABLE {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_IMMUTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Immutable textures require initialization data..
        /// </summary>
        internal static string GORGFX_TEXTURE_IMMUTABLE_REQUIRES_DATA {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_IMMUTABLE_REQUIRES_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot update a texture that is Dynamic or Immutable..
        /// </summary>
        internal static string GORGFX_TEXTURE_IS_DYNAMIC_IMMUTABLE {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_IS_DYNAMIC_IMMUTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source texture and this texture are the same.  Cannot copy..
        /// </summary>
        internal static string GORGFX_TEXTURE_IS_SAME {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_IS_SAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The textures have different multisampling parameters.  This operation requires that all textures have the same multisampling parameters..
        /// </summary>
        internal static string GORGFX_TEXTURE_MULTISAMPLE_PARAMS_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_MULTISAMPLE_PARAMS_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation does not support multisampled textures..
        /// </summary>
        internal static string GORGFX_TEXTURE_MULTISAMPLED {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_MULTISAMPLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The textures must be the same width and height..
        /// </summary>
        internal static string GORGFX_TEXTURE_MUST_BE_SAME_SIZE {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_MUST_BE_SAME_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture format [{0}] must be used with a mip map count of 1..
        /// </summary>
        internal static string GORGFX_TEXTURE_NO_MIP_SUPPORT {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_NO_MIP_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot lock this texture with a lock type of [NoOverwrite].
        /// </summary>
        internal static string GORGFX_TEXTURE_NO_OVERWRITE_NOT_VALID {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_NO_OVERWRITE_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texure &apos;{0}&apos; is a [{1}] and cannot be copied to or from the type [{2}]..
        /// </summary>
        internal static string GORGFX_TEXTURE_NOT_SAME_TYPE {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_NOT_SAME_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The region ({0},{1})x({2},{3}) is out of bounds for the texture &apos;{4}&apos;..
        /// </summary>
        internal static string GORGFX_TEXTURE_OUT_OF_BOUNDS {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_OUT_OF_BOUNDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The destination texture &apos;{0}&apos; must have a default usage..
        /// </summary>
        internal static string GORGFX_TEXTURE_RESOLVE_DEST_NOT_DEFAULT {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_RESOLVE_DEST_NOT_DEFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resolve format must not be typeless..
        /// </summary>
        internal static string GORGFX_TEXTURE_RESOLVE_FORMAT_CANNOT_BE_TYPELESS {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_RESOLVE_FORMAT_CANNOT_BE_TYPELESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format used to resolve this multisampled texture must be set to unknown because the textures have identical formats..
        /// </summary>
        internal static string GORGFX_TEXTURE_RESOLVE_FORMAT_MUST_BE_UNKNOWN {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_RESOLVE_FORMAT_MUST_BE_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source and destination have the same typeless format of &apos;{0}&apos;.  The resolve format is not a part of the same format grouping..
        /// </summary>
        internal static string GORGFX_TEXTURE_RESOLVE_FORMAT_NOT_SAME_GROUP {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_RESOLVE_FORMAT_NOT_SAME_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The destination texture must have a format of &apos;{0}&apos;..
        /// </summary>
        internal static string GORGFX_TEXTURE_RESOLVE_FORMATS_NOT_SAME {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_RESOLVE_FORMATS_NOT_SAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source format &apos;{0}&apos; is not in the same group as the destination format of &apos;{1}&apos;..
        /// </summary>
        internal static string GORGFX_TEXTURE_RESOLVE_SRC_DEST_NOT_SAME_GROUP {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_RESOLVE_SRC_DEST_NOT_SAME_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source texture &apos;{0}&apos; is not multisampled..
        /// </summary>
        internal static string GORGFX_TEXTURE_SRC_NOT_MULTISAMPLED {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_SRC_NOT_MULTISAMPLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A texture with a usage of [{0}] cannot be locked..
        /// </summary>
        internal static string GORGFX_TEXTURE_USAGE_CANT_LOCK {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_USAGE_CANT_LOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a &apos;{0}&apos; with a width of {1}.  The width must be between 0 and {2}..
        /// </summary>
        internal static string GORGFX_TEXTURE_WIDTH_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_TEXTURE_WIDTH_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; cannot use with this method..
        /// </summary>
        internal static string GORGFX_TYPE_CANNOT_BE_USED {
            get {
                return ResourceManager.GetString("GORGFX_TYPE_CANNOT_BE_USED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The starting unordered access view slot must be between 0 and 7..
        /// </summary>
        internal static string GORGFX_UAV_SLOT_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_UAV_SLOT_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The starting slot [{0}] + the number of views [{1}] is greater than the maximum number of slots [8]..
        /// </summary>
        internal static string GORGFX_UAV_TOO_MANY {
            get {
                return ResourceManager.GetString("GORGFX_UAV_TOO_MANY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value is out of range.  The value [{0}] must be be 0 or less than {1}..
        /// </summary>
        internal static string GORGFX_VALUE_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_VALUE_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The vertex buffer &apos;{0}&apos; is already bound at slot [{1}]..
        /// </summary>
        internal static string GORGFX_VERTEXBUFFER_ALREADY_BOUND {
            get {
                return ResourceManager.GetString("GORGFX_VERTEXBUFFER_ALREADY_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertex buffer binding.  Stride: {0}, Offset: {1}, VertexBuffer: {2}.
        /// </summary>
        internal static string GORGFX_VERTEXBUFFER_BINDING_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_VERTEXBUFFER_BINDING_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Video Mode: {0}x{1} Refresh Num/Denom: {2}/{3} Format: {4}.
        /// </summary>
        internal static string GORGFX_VIDEOMODE_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_VIDEOMODE_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The view was already bound to the shader at index [{0}]..
        /// </summary>
        internal static string GORGFX_VIEW_ALREADY_BOUND {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_ALREADY_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array count must be between 1 and {0}..
        /// </summary>
        internal static string GORGFX_VIEW_ARRAY_COUNT_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_ARRAY_COUNT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array start must be between 0 and less than {0}..
        /// </summary>
        internal static string GORGFX_VIEW_ARRAY_START_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_ARRAY_START_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the view to the resource, the resource type is not known..
        /// </summary>
        internal static string GORGFX_VIEW_CANNOT_BIND_UNKNOWN_RESOURCE {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_CANNOT_BIND_UNKNOWN_RESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format [{0}] is not compatiable or cannot be cast to [{1}]..
        /// </summary>
        internal static string GORGFX_VIEW_CANNOT_CAST_FORMAT {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_CANNOT_CAST_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource view cannot be bound, it is either a staging resource or has no default shader view..
        /// </summary>
        internal static string GORGFX_VIEW_CANT_BIND_STAGING_NO_VIEW {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_CANT_BIND_STAGING_NO_VIEW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array count for a cube texture must be a multiple of 6..
        /// </summary>
        internal static string GORGFX_VIEW_CUBE_ARRAY_SIZE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_CUBE_ARRAY_SIZE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The depth count must be between 1 and {0}..
        /// </summary>
        internal static string GORGFX_VIEW_DEPTH_COUNT_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_DEPTH_COUNT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The depth start must be between 0 and less than {0}..
        /// </summary>
        internal static string GORGFX_VIEW_DEPTH_START_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_DEPTH_START_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Depth views cannot be bound to resources that have a usage of [Staging]..
        /// </summary>
        internal static string GORGFX_VIEW_DRV_NO_STAGING {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_DRV_NO_STAGING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The start element must be between 0 and {0}, and the element count must be between 1 and {1}..
        /// </summary>
        internal static string GORGFX_VIEW_ELEMENT_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_ELEMENT_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource format [{0}] is not the same group as the view format [{1}]..
        /// </summary>
        internal static string GORGFX_VIEW_FORMAT_GROUP_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_FORMAT_GROUP_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format [{0}] is not valid for an unordered access view..
        /// </summary>
        internal static string GORGFX_VIEW_FORMAT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_FORMAT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mip map count must be between 1 and {0}..
        /// </summary>
        internal static string GORGFX_VIEW_MIP_COUNT_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_MIP_COUNT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mip map start must be between 0 and less than {0}..
        /// </summary>
        internal static string GORGFX_VIEW_MIP_START_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_MIP_START_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create the view, the resource does not allow {0} views..
        /// </summary>
        internal static string GORGFX_VIEW_NO_SUPPORT {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_NO_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The view cannot use a typeless format..
        /// </summary>
        internal static string GORGFX_VIEW_NO_TYPELESS {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_NO_TYPELESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raw shader views require a format of [R32_Uint], [R32_Int], or [R32_Float]..
        /// </summary>
        internal static string GORGFX_VIEW_RAW_INVALID_FORMAT {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_RAW_INVALID_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This view has a resource &apos;{0}&apos; that is already bound with a {2} at index [{1}]..
        /// </summary>
        internal static string GORGFX_VIEW_RESOURCE_ALREADY_BOUND {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_RESOURCE_ALREADY_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource attached to this view is not a {0} buffer..
        /// </summary>
        internal static string GORGFX_VIEW_RESOURCE_NOT_BUFFER {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_RESOURCE_NOT_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource attached to this view is not a {0} depth/stencil buffer..
        /// </summary>
        internal static string GORGFX_VIEW_RESOURCE_NOT_DEPTHSTENCIL {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_RESOURCE_NOT_DEPTHSTENCIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource attached to this view is not a {0} render target..
        /// </summary>
        internal static string GORGFX_VIEW_RESOURCE_NOT_TARGET {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_RESOURCE_NOT_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This resource attched to this view is not a {0} texture..
        /// </summary>
        internal static string GORGFX_VIEW_RESOURCE_NOT_TEXTURE {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_RESOURCE_NOT_TEXTURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The view at index [{0}] is not bound to a resource of type &apos;{1}&apos;..
        /// </summary>
        internal static string GORGFX_VIEW_RESOURCE_NOT_TYPE {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_RESOURCE_NOT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shader resource views cannot be bound to resources that have a usage of [Staging] or [Dynamic]..
        /// </summary>
        internal static string GORGFX_VIEW_SRV_NO_STAGING_OR_DYNAMIC {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_SRV_NO_STAGING_OR_DYNAMIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unordered access views cannot be applied to texture cubes or multi-sampled textures..
        /// </summary>
        internal static string GORGFX_VIEW_UAV_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_UAV_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unordered access views for textures requires a SM5 or better video device..
        /// </summary>
        internal static string GORGFX_VIEW_UAV_REQUIRES_SM5 {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_UAV_REQUIRES_SM5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format for the view must not be [Unknown]..
        /// </summary>
        internal static string GORGFX_VIEW_UNKNOWN_FORMAT {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_UNKNOWN_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array requires 4 elements to clear the unordered access view..
        /// </summary>
        internal static string GORGFX_VIEW_UNORDERED_CLEAR_NEED_4_VALUES {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_UNORDERED_CLEAR_NEED_4_VALUES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind an unordered access view to a resource that has a usage of [Staging] or [Dynamic]..
        /// </summary>
        internal static string GORGFX_VIEW_UNORDERED_NO_STAGING_DYNAMIC {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_UNORDERED_NO_STAGING_DYNAMIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raw unordered views require a format of [R32] (Typeless)..
        /// </summary>
        internal static string GORGFX_VIEW_UNORDERED_RAW_INVALID_FORMAT {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_UNORDERED_RAW_INVALID_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The view type must be either [Counter] or [AppendConsume]..
        /// </summary>
        internal static string GORGFX_VIEW_UNORDERED_TYPE_NOT_VALID_FOR_COPY {
            get {
                return ResourceManager.GetString("GORGFX_VIEW_UNORDERED_TYPE_NOT_VALID_FOR_COPY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Viewport: {0}x{1}-{2}x{3} (Width: {4}, Height: {5}) Minimum depth: {6} Maximum depth: {7}.
        /// </summary>
        internal static string GORGFX_VIEWPORT_TOSTR {
            get {
                return ResourceManager.GetString("GORGFX_VIEWPORT_TOSTR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static Bitmap Gorgon_2_x_Logo_Small {
            get {
                object obj = ResourceManager.GetObject("Gorgon_2_x_Logo_Small", resourceCulture);
                return ((Bitmap)(obj));
            }
        }
    }
}
