<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GORIMG_DESC_BMP_CODEC" xml:space="preserve">
    <value>Windows Bitmap</value>
  </data>
  <data name="GORIMG_DESC_DDS_CODEC" xml:space="preserve">
    <value>Direct Draw Surface</value>
  </data>
  <data name="GORIMG_DESC_GIF_CODEC" xml:space="preserve">
    <value>Graphics Interchange Format</value>
  </data>
  <data name="GORIMG_DESC_JPG_CODEC" xml:space="preserve">
    <value>Joint photographics experts group</value>
  </data>
  <data name="GORIMG_DESC_PNG_CODEC" xml:space="preserve">
    <value>Portable Network Graphics</value>
  </data>
  <data name="GORIMG_DESC_TGA_CODEC" xml:space="preserve">
    <value>Truevision Targa</value>
  </data>
  <data name="GORIMG_ERR_BUFFER_FORMAT_MISMATCH" xml:space="preserve">
    <value>The buffer formats must be same: [{0}].</value>
  </data>
  <data name="GORIMG_ERR_CANNOT_COPY_DATA_MISMATCH" xml:space="preserve">
    <value>The source and destination image do not share the same width, height, or pixel format.</value>
  </data>
  <data name="GORIMG_ERR_CODEC_NOT_IN_PLUGIN" xml:space="preserve">
    <value>The codec '{0}' was not found in the plug in.</value>
  </data>
  <data name="GORIMG_ERR_FILE_FORMAT_NOT_CORRECT" xml:space="preserve">
    <value>The file data stored in the stream is not a '{0}' file.</value>
  </data>
  <data name="GORIMG_ERR_FORMAT_IS_NOT_16BPP" xml:space="preserve">
    <value>The format supplied, [{0}], is not a 16 bits per pixel format.</value>
  </data>
  <data name="GORIMG_ERR_FORMAT_NOT_SUPPORTED" xml:space="preserve">
    <value>The image format [{0}] is not supported.</value>
  </data>
  <data name="GORIMG_ERR_IMAGE_BYTE_LENGTH_TOO_SHORT" xml:space="preserve">
    <value>The size of the image data in the stream must be at least 1 byte.</value>
  </data>
  <data name="GORIMG_ERR_IMAGE_DEPTH_TOO_SMALL" xml:space="preserve">
    <value>The image depth must be at least 1 pixel.</value>
  </data>
  <data name="GORIMG_ERR_IMAGE_HEIGHT_TOO_SMALL" xml:space="preserve">
    <value>The image height must be at least 1 pixel.</value>
  </data>
  <data name="GORIMG_ERR_IMAGE_SIZE_MISMATCH" xml:space="preserve">
    <value>The calculated size if the image ({0} bytes) is larger than the amount of data available ({1} bytes).
This could lead to a buffer overrun.</value>
  </data>
  <data name="GORIMG_ERR_IMAGE_WIDTH_TOO_SMALL" xml:space="preserve">
    <value>The image width must be at least 1 pixel.</value>
  </data>
  <data name="GORIMG_ERR_INDEX_OUT_OF_RANGE" xml:space="preserve">
    <value>The value must be between {0} and {1}.</value>
  </data>
  <data name="GORIMG_ERR_MISSING_BLOCK_COUNT" xml:space="preserve">
    <value>The block count must be larger than 0.</value>
  </data>
  <data name="GORIMG_ERR_PARAMETER_MUST_NOT_BE_EMPTY" xml:space="preserve">
    <value>The parameter must not be empty.</value>
  </data>
  <data name="GORIMG_ERR_STREAM_CANNOT_SEEK" xml:space="preserve">
    <value>The steam is not seekable.</value>
  </data>
  <data name="GORIMG_ERR_STREAM_IS_READONLY" xml:space="preserve">
    <value>The stream is read only.</value>
  </data>
  <data name="GORIMG_ERR_STREAM_IS_WRITEONLY" xml:space="preserve">
    <value>The stream is write only.</value>
  </data>
  <data name="GORIMG_ERR_TGA_TYPE_NOT_SUPPORTED" xml:space="preserve">
    <value>This codec does not support TGA files encoded using 2 or 4 way interleaving, or color mapped data.</value>
  </data>
  <data name="GORIMG_OPT_GIF_ALPHA_THRESHOLD" xml:space="preserve">
    <value>Alpha value threshold for transparency.

GIF encoded images can use a single color index from the palette to indicate transparency. When downsampling an image to an indexed color palette, and the alpha value of the pixel is less than the value specified here, the codec will treat the pixel as the transparent index in the GIF image palette.

This value has a range of 0 to 1.0.  Where 0 indicates no transparency, and 1.0 means all pixels are transparent.</value>
  </data>
  <data name="GORIMG_OPT_JPG_QUALITY" xml:space="preserve">
    <value>Image quality.

Specifies the lossy compression quality to use when encoding a JPEG image.  The higher the value, the worse the less compression that is used, and the better the image quality.

This value has a range of 0 to 1.0.  Where 0 is the best compression, but the worst quality, and 1.0 is no compression and the best quality.</value>
  </data>
  <data name="GORIMG_OPT_PNG_FILTERING" xml:space="preserve">
    <value>Scanline fitering type.

Specified how to filter scanlines when encoding PNG files.</value>
  </data>
  <data name="GORIMG_OPT_PNG_INTERLACED" xml:space="preserve">
    <value>Use interlacing

Specifies whether or not to use interlacing for scanlines in the PNG file.</value>
  </data>
  <data name="GORIMG_OPT_READ_ALL_FRAMES" xml:space="preserve">
    <value>Read all frames as image array.

Images with multiple frames will have these frames decoded as multiple indices in the image.</value>
  </data>
  <data name="GORIMG_OPT_SAVE_ALL_FRAMES" xml:space="preserve">
    <value>Save all frames as image array.

Images with multiple frames will have these frames encoded as array indices in the image.</value>
  </data>
  <data name="GORIMG_OPT_TGA_SETZEROALPHA_OPAQUE" xml:space="preserve">
    <value>Force opaque when image is transparent.

Some 32 bit per pixel TGA images are written out with their alpha values as 0, even though color data is present in the image. This option will force the TGA file to be decoded as though it has opaque alpha channels.

Note: If there are a mix of alpha values in the image, then this option will be ignored. </value>
  </data>
  <data name="GORIMG_OPT_WIC_DITHERING" xml:space="preserve">
    <value>Dithering type.

Defines how to handle downsampling the pixel data from a higher bit depth so that image quality is preserved.</value>
  </data>
  <data name="GORIMG_OPT_WIC_DPIX" xml:space="preserve">
    <value>Horizontal DPI</value>
  </data>
  <data name="GORIMG_OPT_WIC_DPIY" xml:space="preserve">
    <value>Vertical DPI</value>
  </data>
  <data name="GORIMG_TOSTR_FMTPITCH" xml:space="preserve">
    <value>Image pitch information.  Width={0} bytes, Size={1} bytes.</value>
  </data>
  <data name="GORIMG_TOSTR_FMTPITCH_COMPRESSED" xml:space="preserve">
    <value>Image pitch information.  Width={0} bytes, Size={1} bytes.  Format is compressed. Block count width: {2}, Block count height: {3}</value>
  </data>
  <data name="GORIMG_TOSTR_IMAGE_CODEC" xml:space="preserve">
    <value>Gorgon {0} Image Codec</value>
  </data>
  <data name="GORIMG_TOSTR_IMGE_CODEC_PLUGIN_DESC" xml:space="preserve">
    <value>Gorgon Image Codec {0} ({1})</value>
  </data>
</root>