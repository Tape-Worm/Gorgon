<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GORGFX_ERR_CANNOT_GET_ABC" xml:space="preserve">
    <value>Could not retrieve the ABC widths for the font.</value>
  </data>
  <data name="GORGFX_ERR_CANNOT_GET_FEATURELEVELS" xml:space="preserve">
    <value>Could not retrieve the feature levels for the device '{0}'.</value>
  </data>
  <data name="GORGFX_ERR_CANNOT_GET_KERNING" xml:space="preserve">
    <value>Could not retrieve the kerning information for the font.</value>
  </data>
  <data name="GORGFX_ERR_FEATURE_LEVEL_INVALID" xml:space="preserve">
    <value>The feature level [{0}] is not valid.</value>
  </data>
  <data name="GORGFX_ERR_FEATURE_LEVEL_NOT_SUPPORTED" xml:space="preserve">
    <value>The feature level [{0}] is not supported by the '{1}' video device.</value>
  </data>
  <data name="GORGFX_ERR_MISSING_BLOCK_COUNT" xml:space="preserve">
    <value>The block count must be larger than 0.</value>
  </data>
  <data name="GORGFX_ERR_MULTISAMPLE_INVALID" xml:space="preserve">
    <value>The video device '{0}' does not support multisampling with a count of {1} and a quality of {2} for format [{3}].</value>
  </data>
  <data name="GORGFX_ERR_NO_SUITABLE_VIDEO_DEVICE_FOUND" xml:space="preserve">
    <value>Could not use any of the installed video devices on this system. Gorgon requires at least a Direct 3D 10 capable video card.</value>
  </data>
  <data name="GORGFX_ERR_NO_VIDEO_DEVICE_WITH_NAME" xml:space="preserve">
    <value>There is no video deivce with the name '{0}'.</value>
  </data>
  <data name="GORGFX_ERR_PARAMETER_MUST_NOT_BE_EMPTY" xml:space="preserve">
    <value>The parameter must not be empty.</value>
  </data>
  <data name="GORGFX_ERR_PRESENTMODE_NO_MULTISAMPLE" xml:space="preserve">
    <value>Multisampling is not available for this present mode: [{0}].</value>
  </data>
  <data name="GORGFX_ERR_SWAPCHAIN_DISCARD_NEEDS_2_OR_MORE" xml:space="preserve">
    <value>A swap chain with a presentation mode of [Discard] requires more than 1 back buffer.</value>
  </data>
  <data name="GORGFX_ERR_SWAPCHAIN_FORMAT_INVALID" xml:space="preserve">
    <value>The format [{0}] is not valid for a swap chain.</value>
  </data>
  <data name="GORGFX_ERR_SWAPCHAIN_MUST_BE_TARGET_OR_SHADERINPUT" xml:space="preserve">
    <value>The swap chain must be a render target or shader input.</value>
  </data>
  <data name="GORGFX_ERR_SWAPCHAIN_NO_OUTPUT" xml:space="preserve">
    <value>Could not find a suitable output for full screen mode.</value>
  </data>
  <data name="GORGFX_ERR_SWAPCHAIN_SEQ_FORMATSUPPORT" xml:space="preserve">
    <value>Swap chains with a sequential flipping presentation mode can only use R8G8B8A8_UNorm, B8G8R8A8_UNorm or R16G16B16A16_Float as a format.</value>
  </data>
  <data name="GORGFX_ERR_SWAPCHAIN_SIZE_TOO_SMALL" xml:space="preserve">
    <value>The size of the swap chain is too small. The swap chain must be at least 1x1 pixels in size.</value>
  </data>
  <data name="GORGFX_ERR_SWAPCHAIN_WINDOW_REQUIRED" xml:space="preserve">
    <value>The swap chain requires a window.</value>
  </data>
  <data name="GORGFX_ERR_UAV_FEATURELEVEL_REQUIRED" xml:space="preserve">
    <value>Unordered access views require feature level 11 or better.</value>
  </data>
  <data name="GORGFX_ERR_VIDEO_DEVICE_NOT_SUPPORTED" xml:space="preserve">
    <value>The video device '{0}' is not supported by Gorgon.</value>
  </data>
  <data name="GORGFX_TOSTR_FMTPITCH" xml:space="preserve">
    <value>Image pitch information.  Width={0} bytes, Size={1} bytes.</value>
  </data>
  <data name="GORGFX_TOSTR_FMTPITCH_COMPRESSED" xml:space="preserve">
    <value>Image pitch information.  Width={0} bytes, Size={1} bytes.  Format is compressed. Block count width: {2}, Block count height: {3}</value>
  </data>
  <data name="GORGFX_TOSTR_MultiSampleINFO" xml:space="preserve">
    <value>MultiSample count: {0}, quality: {1}</value>
  </data>
  <data name="GORGFX_TOSTR_VIDEOMODE" xml:space="preserve">
    <value>Gorgon Video Mode: {0}x{1} Refresh Num/Denom: {2}/{3} Format: {4}</value>
  </data>
</root>