//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gorgon.Graphics.Core.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Gorgon.Graphics.Core.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding type [{0}] cannot use with this method..
        /// </summary>
        internal static string GORGFX_ERR_BINDING_TYPE_CANNOT_BE_USED {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BINDING_TYPE_CANNOT_BE_USED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer is already locked..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_ALREADY_LOCKED {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_ALREADY_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer view could not be created. Ensure that the buffer is not a staging buffer, and has a binding flag for shaders..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_CANNOT_BE_BOUND_TO_GPU {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_CANNOT_BE_BOUND_TO_GPU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only buffers with a usage of [Staging] can be read by the CPU. The buffer &apos;{0}&apos; has a usage of [{1}]..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_ERR_WRITE_ONLY {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_ERR_WRITE_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot update buffers with a usage of [Immutable] or [Dynamic]..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_IMMUTABLE_OR_DYNAMIC {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_IMMUTABLE_OR_DYNAMIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create an immutable buffer without initial data to populate it..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_IMMUTABLE_REQUIRES_DATA {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_IMMUTABLE_REQUIRES_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot update an immutable buffer..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_IS_IMMUTABLE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_IS_IMMUTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a buffer with a usage of [Dynamic] can be locked. The buffer &apos;{0}&apos; has a usage of [{1}]. .
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_LOCK_NOT_DYNAMIC {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_LOCK_NOT_DYNAMIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The lock pointer for the buffer is not owned by this buffer..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_LOCK_NOT_VALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_LOCK_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A [{0}] buffer cannot use a binding of [None]..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_NON_STAGING_NEEDS_BINDING {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_NON_STAGING_NEEDS_BINDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer requires at least {0} byte(s)..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_SIZE_TOO_SMALL {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_SIZE_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current aligned structure size of {0} is not valid.
        ///The structure size must be greater than 0 and no greater than 2048 bytes..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_STRUCTURE_SIZE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_STRUCTURE_SIZE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The starting element {0} plus the count {1} is larger than the buffer element size of {2}..
        /// </summary>
        internal static string GORGFX_ERR_BUFFER_VIEW_START_COUNT_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_BUFFER_VIEW_START_COUNT_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not compile the shader source code.
        ///Errors:
        ///{0}.
        /// </summary>
        internal static string GORGFX_ERR_CANNOT_COMPILE_SHADER {
            get {
                return ResourceManager.GetString("GORGFX_ERR_CANNOT_COMPILE_SHADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a multisampled texture as a texture cube..
        /// </summary>
        internal static string GORGFX_ERR_CANNOT_MULTISAMPLE_CUBE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_CANNOT_MULTISAMPLE_CUBE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a catastrophic error in Gorgon.
        ///
        ///Please report this error by pasting the details to the bug tracker in Gorgon&apos;s google code repository.  If possible, please attach any log  used by Gorgon to the bug report..
        /// </summary>
        internal static string GORGFX_ERR_CATASTROPHIC {
            get {
                return ResourceManager.GetString("GORGFX_ERR_CATASTROPHIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size requested ({0} bytes) for the constant buffer exceeds the maximum value of {1} bytes..
        /// </summary>
        internal static string GORGFX_ERR_CONSTANT_BUFFER_TOO_LARGE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_CONSTANT_BUFFER_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The offset: {0} and count: {1} are too large for the source data..
        /// </summary>
        internal static string GORGFX_ERR_DATA_OFFSET_COUNT_IS_TOO_LARGE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_DATA_OFFSET_COUNT_IS_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format [{0}] is not valid for a depth/stencil binding..
        /// </summary>
        internal static string GORGFX_ERR_DEPTHSTENCIL_FORMAT_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_DEPTHSTENCIL_FORMAT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use multisampling with a depth/stencil texture on feature level 10 devices or below..
        /// </summary>
        internal static string GORGFX_ERR_DEPTHSTENCIL_MS_FL101 {
            get {
                return ResourceManager.GetString("GORGFX_ERR_DEPTHSTENCIL_MS_FL101", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A depth/stencil texture must have a usage of [Default]..
        /// </summary>
        internal static string GORGFX_ERR_DEPTHSTENCIL_NOT_DEFAULT {
            get {
                return ResourceManager.GetString("GORGFX_ERR_DEPTHSTENCIL_NOT_DEFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A depth/stencil cannot be bound as a shader resource unless it has a typeless format..
        /// </summary>
        internal static string GORGFX_ERR_DEPTHSTENCIL_TYPED_SHADER_RESOURCE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_DEPTHSTENCIL_TYPED_SHADER_RESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A 3D texture cannot be used as a depth/stencil buffer..
        /// </summary>
        internal static string GORGFX_ERR_DEPTHSTENCIL_VOLUME {
            get {
                return ResourceManager.GetString("GORGFX_ERR_DEPTHSTENCIL_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find any supported video devices.  Gorgon requires a device that can support a minimum feature level of 10.0..
        /// </summary>
        internal static string GORGFX_ERR_DEVICE_CANNOT_FIND_DEVICES {
            get {
                return ResourceManager.GetString("GORGFX_ERR_DEVICE_CANNOT_FIND_DEVICES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feature level [{0}] is not valid..
        /// </summary>
        internal static string GORGFX_ERR_FEATURE_LEVEL_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_FEATURE_LEVEL_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &apos;{0}&apos; was not found..
        /// </summary>
        internal static string GORGFX_ERR_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("GORGFX_ERR_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format [{0}] is not supported..
        /// </summary>
        internal static string GORGFX_ERR_FORMAT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_ERR_FORMAT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image type &apos;{0}&apos; is not a valid image type..
        /// </summary>
        internal static string GORGFX_ERR_IMAGE_TYPE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_IMAGE_TYPE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image type [{0}] is unsupported..
        /// </summary>
        internal static string GORGFX_ERR_IMAGE_TYPE_UNSUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_ERR_IMAGE_TYPE_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Gorgon Graphics interface requires Windows 10 (Build 15063) or greater..
        /// </summary>
        internal static string GORGFX_ERR_INVALID_OS {
            get {
                return ResourceManager.GetString("GORGFX_ERR_INVALID_OS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The offset [{0}] or context &apos;{1}&apos; is in use by another item with the same index or slot..
        /// </summary>
        internal static string GORGFX_ERR_LAYOUT_ELEMENT_IN_USE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_LAYOUT_ELEMENT_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; is not a valid type for an input element..
        /// </summary>
        internal static string GORGFX_ERR_LAYOUT_INVALID_ELEMENT_TYPE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_LAYOUT_INVALID_ELEMENT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot lock a buffer for reading if the resource does not have a usage of [Staging]..
        /// </summary>
        internal static string GORGFX_ERR_LOCK_CANNOT_READ_NON_STAGING {
            get {
                return ResourceManager.GetString("GORGFX_ERR_LOCK_CANNOT_READ_NON_STAGING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The multisample count {0} with a format of [{1}] is not supported on the device &apos;{2}&apos;..
        /// </summary>
        internal static string GORGFX_ERR_MULTISAMPLE_COUNT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_ERR_MULTISAMPLE_COUNT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video device &apos;{0}&apos; does not support multisampling with a count of {1} and a quality of {2} for format [{3}]..
        /// </summary>
        internal static string GORGFX_ERR_MULTISAMPLE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_MULTISAMPLE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mip level count must be set to 1 when multisampling is enabled on a texture..
        /// </summary>
        internal static string GORGFX_ERR_MULTISAMPLE_INVALID_MIP {
            get {
                return ResourceManager.GetString("GORGFX_ERR_MULTISAMPLE_INVALID_MIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The swap chain &apos;{0}&apos; is bound to a child control, only a window may be put into full screen mode..
        /// </summary>
        internal static string GORGFX_ERR_NEED_FORM_FOR_FULLSCREEN {
            get {
                return ResourceManager.GetString("GORGFX_ERR_NEED_FORM_FOR_FULLSCREEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no video device with the name &apos;{0}&apos;..
        /// </summary>
        internal static string GORGFX_ERR_NO_VIDEO_DEVICE_WITH_NAME {
            get {
                return ResourceManager.GetString("GORGFX_ERR_NO_VIDEO_DEVICE_WITH_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data in the stream is not a Gorgon binary shader..
        /// </summary>
        internal static string GORGFX_ERR_NOT_GORGON_SHADER {
            get {
                return ResourceManager.GetString("GORGFX_ERR_NOT_GORGON_SHADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A render target texture must have a usage of [Default]..
        /// </summary>
        internal static string GORGFX_ERR_RENDERTARGET_NOT_DEFAULT {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RENDERTARGET_NOT_DEFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A device with feature level {0} (or better) is necessary to use this object or perform this operation..
        /// </summary>
        internal static string GORGFX_ERR_REQUIRES_FEATURE_LEVEL {
            get {
                return ResourceManager.GetString("GORGFX_ERR_REQUIRES_FEATURE_LEVEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource &apos;{0}&apos; is not a render target..
        /// </summary>
        internal static string GORGFX_ERR_RESOURCE_IS_NOT_RENDERTARGET {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RESOURCE_IS_NOT_RENDERTARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The render target view for resource &apos;{0}&apos; is already bound..
        /// </summary>
        internal static string GORGFX_ERR_RTV_ALREADY_BOUND {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RTV_ALREADY_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array count in the render target views does not match with the depth/stencil view &apos;{0}&apos;..
        /// </summary>
        internal static string GORGFX_ERR_RTV_DEPTHSTENCIL_ARRAYCOUNT_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RTV_DEPTHSTENCIL_ARRAYCOUNT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The depth stenvcil view resource must have the same multisample quality: {0} and count: {1} as the render targets..
        /// </summary>
        internal static string GORGFX_ERR_RTV_DEPTHSTENCIL_MULTISAMPLE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RTV_DEPTHSTENCIL_MULTISAMPLE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The depth/stencil view and render target views do not have the same width, height, or array count/depth count..
        /// </summary>
        internal static string GORGFX_ERR_RTV_DEPTHSTENCIL_RESOURCE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RTV_DEPTHSTENCIL_RESOURCE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of the depth stencil view resource [{0}] is not the same as the render targets..
        /// </summary>
        internal static string GORGFX_ERR_RTV_DEPTHSTENCIL_TYPE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RTV_DEPTHSTENCIL_TYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The render target view resources must all have the same multisample quality: {0} and count: {1}..
        /// </summary>
        internal static string GORGFX_ERR_RTV_MULTISAMPLE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RTV_MULTISAMPLE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The render target views are not the same type: [{0}]..
        /// </summary>
        internal static string GORGFX_ERR_RTV_NOT_SAME_TYPE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RTV_NOT_SAME_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The render target views do not have the same width, height, or array count/depth count..
        /// </summary>
        internal static string GORGFX_ERR_RTV_RESOURCE_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_ERR_RTV_RESOURCE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The include file in line &apos;{0}&apos; was not found in the include list..
        /// </summary>
        internal static string GORGFX_ERR_SHADER_INCLUDE_NOT_FOUND {
            get {
                return ResourceManager.GetString("GORGFX_ERR_SHADER_INCLUDE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The include line &apos;{0}&apos; is not valid..
        /// </summary>
        internal static string GORGFX_ERR_SHADER_INCLUDE_PATH_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_SHADER_INCLUDE_PATH_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The shader type &apos;{0}&apos; is not a valid type..
        /// </summary>
        internal static string GORGFX_ERR_SHADER_UNKNOWN_TYPE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_SHADER_UNKNOWN_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} has been assigned and is now in a read only state..
        /// </summary>
        internal static string GORGFX_ERR_STATE_IMMUTABLE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_STATE_IMMUTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream is write-only..
        /// </summary>
        internal static string GORGFX_ERR_STREAM_WRITE_ONLY {
            get {
                return ResourceManager.GetString("GORGFX_ERR_STREAM_WRITE_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested width and/or height ({0}x{1}) for the swap chain backer buffer is too large. 
        ///
        ///The width must be a value between 1-{2}, and the height must be a value between 1-{3}..
        /// </summary>
        internal static string GORGFX_ERR_SWAP_BACKBUFFER_TOO_LARGE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_SWAP_BACKBUFFER_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The swap chain back buffer is too small: {0}x{1}. The buffer must have a width and height of least 1 pixel..
        /// </summary>
        internal static string GORGFX_ERR_SWAP_BACKBUFFER_TOO_SMALL {
            get {
                return ResourceManager.GetString("GORGFX_ERR_SWAP_BACKBUFFER_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array count must be between 1 and {0}..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_ARRAYCOUNT_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_ARRAYCOUNT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A compressed texture must have a width and height that is a multiple of 4..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_BC_SIZE_NOT_MOD_4 {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_BC_SIZE_NOT_MOD_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot copy to and from the same sub resource on the same texture..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_CANNOT_COPY_SAME_SUBRESOURCE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_CANNOT_COPY_SAME_SUBRESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot copy because these formats: [{0}] and [{1}] cannot be converted. Or, the device does not support format conversion..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_COPY_CANNOT_CONVERT {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_COPY_CANNOT_CONVERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create the texture cube array.  Feature level 10.0 devices require an array count of 6..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_CUBE_REQUIRES_6_ARRAY {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_CUBE_REQUIRES_6_ARRAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create the [{0}].  The depth must be between 1 and {1}..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_DEPTH_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_DEPTH_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format [{0}] is not supported for a [{1}] texture..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_FORMAT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_FORMAT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create the [{0}] texture. The height must be between 1 and {1}..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_HEIGHT_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_HEIGHT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture is immutable and cannot be updated or read back to the CPU..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_IMMUTABLE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_IMMUTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture &apos;{0}&apos; has a usage of [Immutable], but has no data to initialize the texture with..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_IMMUTABLE_REQUIRES_DATA {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_IMMUTABLE_REQUIRES_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot update a textures that have a usage of [Dynamic] or [Immutable]..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_IS_DYNAMIC_OR_IMMUTABLE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_IS_DYNAMIC_OR_IMMUTABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The textures have different multisampling parameters.  This operation requires that all textures have the same multisampling parameters..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_MULTISAMPLE_PARAMS_MISMATCH {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_MULTISAMPLE_PARAMS_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation does not support multisampled textures..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_MULTISAMPLED {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_MULTISAMPLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The textures must be the same width and height..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_MUST_BE_SAME_SIZE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_MUST_BE_SAME_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture format [{0}] must be used with a mip map count of 1..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_NO_MIP_SUPPORT {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_NO_MIP_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture &apos;{0}&apos; is not multisampled..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_NOT_MULTISAMPLED {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_NOT_MULTISAMPLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texure &apos;{0}&apos; is a [{1}] and cannot be copied to or from the type [{2}]..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_NOT_SAME_TYPE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_NOT_SAME_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture &apos;{0}&apos; is not a shader resource, and cannot be bound to a shader..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_NOT_SHADER_RESOURCE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_NOT_SHADER_RESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The destination texture &apos;{0}&apos; must have a default usage..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_RESOLVE_DEST_NOT_DEFAULT {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_RESOLVE_DEST_NOT_DEFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resolve format must not be typeless..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_RESOLVE_FORMAT_CANNOT_BE_TYPELESS {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_RESOLVE_FORMAT_CANNOT_BE_TYPELESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source and destination have the same typeless format of [{0}].  The resolve format [{1}] is not a part of the same format grouping..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_RESOLVE_FORMAT_NOT_SAME_GROUP {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_RESOLVE_FORMAT_NOT_SAME_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The destination texture must have a format of [{0}]..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_RESOLVE_FORMATS_NOT_SAME {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_RESOLVE_FORMATS_NOT_SAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source format [{0}] is not in the same group as the destination format of [{1}]..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_RESOLVE_SRC_DEST_NOT_SAME_GROUP {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_RESOLVE_SRC_DEST_NOT_SAME_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The texture type [{0}] is unsupported..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_TYPE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_TYPE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A multisampled texture cannot be bound as an unordered resource..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_UNORDERED_NO_MULTISAMPLE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_UNORDERED_NO_MULTISAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A texture with a usage of [{0}] cannot be locked..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_USAGE_CANT_LOCK {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_USAGE_CANT_LOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array index ({0}), and the count ({1}) are larger than the total number of array indices ({2}) in the texture..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_VIEW_ARRAY_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_VIEW_ARRAY_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The depth slice ({0}), and the slice count ({1}) are larger than the total depth ({2}) in the texture..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_VIEW_DEPTH_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_VIEW_DEPTH_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first mip index ({0}), and the count ({1}) are larger than the total number of mip levels ({2}) in the texture..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_VIEW_MIP_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_VIEW_MIP_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create the [{0}] texture.  The width must be between 1 and {1}..
        /// </summary>
        internal static string GORGFX_ERR_TEXTURE_WIDTH_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TEXTURE_WIDTH_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; has no public fields..
        /// </summary>
        internal static string GORGFX_ERR_TYPE_NO_FIELDS {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TYPE_NO_FIELDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; has complex marshalling and cannot be used. .
        /// </summary>
        internal static string GORGFX_ERR_TYPE_NOT_VALID_FOR_NATIVE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_TYPE_NOT_VALID_FOR_NATIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format [{0}] is not valid for an unordered access binding..
        /// </summary>
        internal static string GORGFX_ERR_UAV_FORMAT_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_UAV_FORMAT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unordered access views for textures requires a SM5 or better video device..
        /// </summary>
        internal static string GORGFX_ERR_UAV_REQUIRES_SM5 {
            get {
                return ResourceManager.GetString("GORGFX_ERR_UAV_REQUIRES_SM5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unordered resource must have a usage of [Default].
        /// </summary>
        internal static string GORGFX_ERR_UNORDERED_RES_NOT_DEFAULT {
            get {
                return ResourceManager.GetString("GORGFX_ERR_UNORDERED_RES_NOT_DEFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value is out of range.  The value [{0}] must be be 0 or less than {1}..
        /// </summary>
        internal static string GORGFX_ERR_VALUE_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VALUE_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no public fields in the &apos;{0}&apos; vertex type ..
        /// </summary>
        internal static string GORGFX_ERR_VERTEX_NO_FIELDS {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VERTEX_NO_FIELDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A vertex must not have complex marshalling (i.e. MarshalAsAttribute), be a reference type or have non-primitive/value type fields..
        /// </summary>
        internal static string GORGFX_ERR_VERTEX_TYPE_NOT_VALID_FOR_NATIVE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VERTEX_TYPE_NOT_VALID_FOR_NATIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind the view to the resource, the resource type is not known..
        /// </summary>
        internal static string GORGFX_ERR_VIEW_CANNOT_BIND_UNKNOWN_RESOURCE {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VIEW_CANNOT_BIND_UNKNOWN_RESOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format [{0}] is not compatiable or cannot be cast to [{1}]..
        /// </summary>
        internal static string GORGFX_ERR_VIEW_CANNOT_CAST_FORMAT {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VIEW_CANNOT_CAST_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array count for a cube texture must be a multiple of 6..
        /// </summary>
        internal static string GORGFX_ERR_VIEW_CUBE_ARRAY_SIZE_INVALID {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VIEW_CUBE_ARRAY_SIZE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Depth/stencil views cannot be created for 3D texture types..
        /// </summary>
        internal static string GORGFX_ERR_VIEW_DEPTH_STENCIL_NO_3D {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VIEW_DEPTH_STENCIL_NO_3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The view cannot use a typeless format..
        /// </summary>
        internal static string GORGFX_ERR_VIEW_NO_TYPELESS {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VIEW_NO_TYPELESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource attached to this view is not a {0} depth/stencil buffer..
        /// </summary>
        internal static string GORGFX_ERR_VIEW_RESOURCE_NOT_DEPTHSTENCIL {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VIEW_RESOURCE_NOT_DEPTHSTENCIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format for the view must not be [Unknown]..
        /// </summary>
        internal static string GORGFX_ERR_VIEW_UNKNOWN_FORMAT {
            get {
                return ResourceManager.GetString("GORGFX_ERR_VIEW_UNKNOWN_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Graphics Video Device: {0}.
        /// </summary>
        internal static string GORGFX_TOSTR_DEVICE {
            get {
                return ResourceManager.GetString("GORGFX_TOSTR_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multisampling count: {0}, quality: {1}..
        /// </summary>
        internal static string GORGFX_TOSTR_MULTISAMPLEINFO {
            get {
                return ResourceManager.GetString("GORGFX_TOSTR_MULTISAMPLEINFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Shader Include &apos;{0}&apos;.
        /// </summary>
        internal static string GORGFX_TOSTR_SHADER_INCLUDE {
            get {
                return ResourceManager.GetString("GORGFX_TOSTR_SHADER_INCLUDE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gorgon Shader Macro Definition &apos;{0}&apos;..
        /// </summary>
        internal static string GORGFX_TOSTR_SHADER_MACRO {
            get {
                return ResourceManager.GetString("GORGFX_TOSTR_SHADER_MACRO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertex buffer binding.  Stride: {0}, Offset: {1}, VertexBuffer: {2}.
        /// </summary>
        internal static string GORGFX_TOSTR_VERTEXBUFFER_BINDING {
            get {
                return ResourceManager.GetString("GORGFX_TOSTR_VERTEXBUFFER_BINDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Gorgon_2_x_Logo_Small {
            get {
                object obj = ResourceManager.GetObject("Gorgon_2_x_Logo_Small", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Texture and sampler for blitting a texture.
        ///Texture2D _bltTexture : register(t0);
        ///SamplerState _bltSampler : register(s0);
        ///
        ///// Our default blitting vertex.
        ///struct GorgonBltVertex
        ///{
        ///   float4 position : SV_POSITION;
        ///   float2 uv : TEXCOORD;
        ///};
        ///
        ///// The transformation matrices (for vertex shader).
        ///cbuffer GorgonBltWorldViewProjection : register(b0)
        ///{
        ///	float4x4 WorldViewProjection;
        ///}
        ///
        ///// Our vertex shader for blitting textures.
        ///GorgonBltVertex GorgonBltVertexShader(GorgonBltVertex vertex)
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GraphicsShaders {
            get {
                return ResourceManager.GetString("GraphicsShaders", resourceCulture);
            }
        }
    }
}
