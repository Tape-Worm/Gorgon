<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GOR_ERR_PARAMETER_MUST_NOT_BE_EMPTY" xml:space="preserve">
    <value>The parameter must not be empty.

Parameter: '{0}'</value>
  </data>
  <data name="GOR_TOSTR_GORGONRESULT" xml:space="preserve">
    <value>{0}
Result: "{1}"
Code: 0x{2}</value>
  </data>
  <data name="GOR_TOSTR_NAMEDOBJECT" xml:space="preserve">
    <value>Named object: {0}</value>
  </data>
  <data name="GOR_TOSTR_GORGONRANGE" xml:space="preserve">
    <value>Min: {0}  Max: {1}  Range: {2}</value>
  </data>
  <data name="GOR_ERR_KEY_NOT_FOUND" xml:space="preserve">
    <value>The key '{0}' does not exist in this collection.</value>
  </data>
  <data name="GOR_UNIT_MEM_BYTES" xml:space="preserve">
    <value>bytes</value>
  </data>
  <data name="GOR_UNIT_MEM_GB" xml:space="preserve">
    <value>GB</value>
  </data>
  <data name="GOR_ERR_INDEX_OUT_OF_RANGE" xml:space="preserve">
    <value>The index is out of range.  The index value [{0}] must be be 0 or less than {1}.</value>
  </data>
  <data name="GOR_UNIT_MEM_KB" xml:space="preserve">
    <value>KB</value>
  </data>
  <data name="GOR_UNIT_MEM_MB" xml:space="preserve">
    <value>MB</value>
  </data>
  <data name="GOR_UNIT_MEM_PB" xml:space="preserve">
    <value>PB</value>
  </data>
  <data name="GOR_ERR_STREAM_EOS" xml:space="preserve">
    <value>Cannot read beyond the end of the stream.</value>
  </data>
  <data name="GOR_ERR_STREAM_IS_READONLY" xml:space="preserve">
    <value>The stream is read-only.</value>
  </data>
  <data name="GOR_UNIT_MEM_TB" xml:space="preserve">
    <value>TB</value>
  </data>
  <data name="GOR_ERR_VALUE_IS_GREATER_THAN" xml:space="preserve">
    <value>The value '{0}' is greater than or equal to the maximum value '{1}'</value>
  </data>
  <data name="GOR_ERR_VALUE_IS_LESS_THAN" xml:space="preserve">
    <value>The value '{0}' is less than or equal to the minimum value '{1}'</value>
  </data>
  <data name="GOR_ERR_STREAM_IS_WRITEONLY" xml:space="preserve">
    <value>The stream is write only.</value>
  </data>
  <data name="GOR_ERR_STREAM_NOT_SEEKABLE" xml:space="preserve">
    <value>Unable to seek within this stream.</value>
  </data>
  <data name="GOR_ERR_PLUGIN_TYPE_LOAD_FAILURE" xml:space="preserve">
    <value>Cannot read types from the plugin assemblies:
{0}</value>
  </data>
  <data name="GOR_EXCEPT_CUSTOM_INFO" xml:space="preserve">
    <value>Custom Information</value>
  </data>
  <data name="GOR_EXCEPT_EXCEPT_TYPE" xml:space="preserve">
    <value>Exception Type</value>
  </data>
  <data name="GOR_EXCEPT_GOREXCEPT_RESULT" xml:space="preserve">
    <value>Result Code</value>
  </data>
  <data name="GOR_EXCEPT_NEXT_EXCEPTION" xml:space="preserve">
    <value>Next Exception</value>
  </data>
  <data name="GOR_EXCEPT_SRC" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="GOR_EXCEPT_STACK_END" xml:space="preserve">
    <value>END</value>
  </data>
  <data name="GOR_EXCEPT_TARGET_SITE" xml:space="preserve">
    <value>Target Site</value>
  </data>
  <data name="GOR_LOG_EXCEPTION" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="GOR_ERR_FILE_EXTENSION_EXISTS" xml:space="preserve">
    <value>The file extension '{0}' already exists in this collection.</value>
  </data>
  <data name="GOR_TOSTR_FILE_EXTENSION" xml:space="preserve">
    <value>{0} (*.{1})</value>
  </data>
  <data name="GOR_ERR_ACTIVATOR_TYPE_MISMATCH" xml:space="preserve">
    <value>The type [{0}] is not the same as the generic type [{1}].</value>
  </data>
  <data name="GOR_ERR_ACTIVATOR_CANNOT_FIND_CONSTRUCTOR" xml:space="preserve">
    <value>Could not find an applicable constructor on type [{0}] with the specified parameter types.</value>
  </data>
  <data name="GOR_ERR_PROPERTY_DECLARING_TYPE_MISMATCH" xml:space="preserve">
    <value>The property '{0}' is declared on type [{1}] and is not the same as the generic type [{2}].</value>
  </data>
  <data name="GOR_ERR_PROPERTY_NO_DECLARING_TYPE" xml:space="preserve">
    <value>The property '{0}' has no declaring type.</value>
  </data>
  <data name="GOR_ERR_PROPERTY_TYPE_MISMATCH" xml:space="preserve">
    <value>The property '{0}' has a type of [{1}], which is not the same as the generic [{2}].</value>
  </data>
  <data name="GOR_ERR_ACTIVATOR_CANNOT_CREATE_ABSTRACT" xml:space="preserve">
    <value>The type [{0}] is abstract and cannot be created directly.</value>
  </data>
  <data name="GOR_ERR_ACTIVATOR_CANNOT_CREATE_INTERFACE_TYPE" xml:space="preserve">
    <value>The type [{0}] is an interface. There is no constructor for this type.</value>
  </data>
  <data name="GOR_ERR_OFFSET_AND_SIZE_ARE_LARGER_THAN_ARRAY" xml:space="preserve">
    <value>The offset {0} + size {1} requested are larger than the array: {2}</value>
  </data>
  <data name="GOR_ERR_STREAM_DOES_NOT_SUPPORT_ASYNC" xml:space="preserve">
    <value>This stream does not support asynchronous I/O on this method.</value>
  </data>
  <data name="GOR_ERR_STREAM_PARENT_NEEDS_SEEK" xml:space="preserve">
    <value>The child stream requires a parent stream that can seek.</value>
  </data>
  <data name="GOR_ERR_STREAM_POS_OUT_OF_RANGE" xml:space="preserve">
    <value>The stream position must be 0 or greater.</value>
  </data>
  <data name="GOR_ERR_FILE_EXTENSION_NOT_FOUND" xml:space="preserve">
    <value>The file extension '{0}' was not found in this collection.</value>
  </data>
  <data name="GOR_ERR_DATABUFF_SIZE_OFFSET_TOO_LARGE" xml:space="preserve">
    <value>The offset: {0} + the size: {1} is larger than the buffer.</value>
  </data>
  <data name="GOR_ERR_DATABUFF_SIZE_TOO_SMALL" xml:space="preserve">
    <value>The size must be greater than 0.</value>
  </data>
  <data name="GOR_ERR_DATABUFF_BUFFER_OVERRUN" xml:space="preserve">
    <value>The size of the data, plus the offset would result in a buffer overrun.</value>
  </data>
  <data name="GOR_ERR_DATABUFF_OFFSET_TOO_SMALL" xml:space="preserve">
    <value>The offset must be 0 or greater.</value>
  </data>
  <data name="GOR_TOSTR_GORGONCOLOR" xml:space="preserve">
    <value>Color Value: Red={0}, Green={1}, Blue={2}, Alpha={3}</value>
  </data>
  <data name="GOR_RESULT_DESC_ACCESS_DENIED" xml:space="preserve">
    <value>Access is denied.</value>
  </data>
  <data name="GOR_RESULT_DESC_CANNOT_BIND" xml:space="preserve">
    <value>There was an error during binding.</value>
  </data>
  <data name="GOR_RESULT_DESC_CANNOT_CREATE" xml:space="preserve">
    <value>There was an error during creation.</value>
  </data>
  <data name="GOR_RESULT_DESC_CANNOT_ENUMERATE" xml:space="preserve">
    <value>There was an error during the enumeration process.</value>
  </data>
  <data name="GOR_RESULT_DESC_CANNOT_READ" xml:space="preserve">
    <value>There was an error while reading.</value>
  </data>
  <data name="GOR_RESULT_DESC_CANNOT_WRITE" xml:space="preserve">
    <value>There was an error while writing.</value>
  </data>
  <data name="GOR_RESULT_DESC_DRIVER_ERROR" xml:space="preserve">
    <value>There was an error interfacing with the driver.</value>
  </data>
  <data name="GOR_RESULT_DESC_FORMAT_NOT_SUPPORTED" xml:space="preserve">
    <value>The requested format is not supported.</value>
  </data>
  <data name="GOR_RESULT_DESC_NOT_INITIALIZED" xml:space="preserve">
    <value>Initialization is required before continuing this operation.</value>
  </data>
  <data name="GOR_TOSTR_GORGONCHUNK" xml:space="preserve">
    <value>Chunk: 0x{0}. Offset: 0x{1}. Size: 0x{2}</value>
  </data>
  <data name="GOR_TOSTR_RATIONAL" xml:space="preserve">
    <value>Rational number: {0}/{1} ({2}).</value>
  </data>
  <data name="GOR_RESULT_DESC_CANNOT_CALL_CROSS_THREAD" xml:space="preserve">
    <value>Cannot call this method across threads.</value>
  </data>
  <data name="GOR_RESULT_DESC_FILE_FORMAT_NOT_SUPPORTED" xml:space="preserve">
    <value>The file format is not supported.</value>
  </data>
  <data name="GOR_ERR_ALLOCATOR_SIZE_TOO_SMALL" xml:space="preserve">
    <value>There must be a minimum of 1 item available to the allocator.</value>
  </data>
  <data name="GOR_RESULT_DESC_CANNOT_COMPILE" xml:space="preserve">
    <value>There were errors compiling the source code.</value>
  </data>
  <data name="GOR_TOSTR_BOX" xml:space="preserve">
    <value>Gorgon Box: {0}x{1}x{2}-{3}x{4}x{5} (Width: {6}, Height: {7}, Depth {8})</value>
  </data>
  <data name="GOR_ERR_OPTION_ALREADY_EXISTS" xml:space="preserve">
    <value>The option '{0}' is already included in this option bag.</value>
  </data>
  <data name="GOR_ERR_ALLOCATOR_FULL" xml:space="preserve">
    <value>The memory for the allocator is full.</value>
  </data>
  <data name="GOR_RESULT_DESC_OUT_OF_MEMORY" xml:space="preserve">
    <value>There is not enough memory to complete the operation.</value>
  </data>
  <data name="GOR_ERR_ENCRYPTION_KEY_NOT_VALID" xml:space="preserve">
    <value>The encryption key provided is not valid for the provider.</value>
  </data>
  <data name="GOR_ERR_DIRECTORY_NOT_FOUND" xml:space="preserve">
    <value>The directory '{0}' was not found.</value>
  </data>
  <data name="GOR_ERR_ARGUMENT_MISSING" xml:space="preserve">
    <value>The parameter {0} is not initialized or missing on the parameter {1}.</value>
  </data>
  <data name="GOR_ERR_ARRAY_TOO_SMALL" xml:space="preserve">
    <value>The array length {0} is too small to accept {1} elements from the list.</value>
  </data>
  <data name="GOR_ERR_PTR_NULL" xml:space="preserve">
    <value>The pointer must not be null.</value>
  </data>
  <data name="GOR_TOSTR_POINTER" xml:space="preserve">
    <value>Gorgon Pointer: {0}</value>
  </data>
  <data name="GOR_ERR_NOT_ENOUGH_CORNERS" xml:space="preserve">
    <value>A minimum of 8 elements must be available to retrieve the corners of the bounding box.</value>
  </data>
  <data name="GOR_ERR_HEIGHT_MUST_BE_MULTIPLE_OF_2" xml:space="preserve">
    <value>The height given ({0}) is not a multiple of 2. The format [{1}] requires the height be a multiple of 2.</value>
  </data>
  <data name="GOR_ERR_MISSING_BLOCK_COUNT" xml:space="preserve">
    <value>The block count must be larger than 0.</value>
  </data>
  <data name="GOR_TOSTR_FMTPITCH" xml:space="preserve">
    <value>Image pitch information.  Width={0} bytes, Size={1} bytes.</value>
  </data>
  <data name="GOR_TOSTR_FMTPITCH_COMPRESSED" xml:space="preserve">
    <value>Image pitch information.  Width={0} bytes, Size={1} bytes.  Format is compressed. Block count width: {2}, Block count height: {3}</value>
  </data>
  <data name="GOR_ERR_SPLINE_POINT_OUT_OF_RANGE" xml:space="preserve">
    <value>The spline point index must be 0 or greater, or less than the number of points - 1.</value>
  </data>
  <data name="GOR_TOSTR_POINT" xml:space="preserve">
    <value>Point: {0}x{1}</value>
  </data>
  <data name="GOR_TOSTR_RECTANGLE" xml:space="preserve">
    <value>Gorgon Rectangle: {0}x{1}-{2}x{3} (Width: {4}, Height: {5})</value>
  </data>
  <data name="GOR_ERR_CHUNK_FILE_CHUNK_MISMATCH" xml:space="preserve">
    <value>The chunk ID at offset 0x{0} does not match the chunk ID of 0x{1}.</value>
  </data>
  <data name="GOR_ERR_CHUNK_FILE_HEADER_MISMATCH" xml:space="preserve">
    <value>The header ID of the chunk file is {0}, this value is unrecognized. The chunk file could be out of date, or the file is not a chunk file.</value>
  </data>
  <data name="GOR_ERR_CHUNK_FILE_NOT_OPEN" xml:space="preserve">
    <value>The chunk file is not opened.</value>
  </data>
  <data name="GOR_ERR_CHUNK_FILE_TABLE_CHUNK_INVALID" xml:space="preserve">
    <value>The chunk file is corrupt. The chunk table ID is invalid.</value>
  </data>
  <data name="GOR_ERR_CHUNK_FILE_TABLE_INVALID_COUNT" xml:space="preserve">
    <value>The chunk file is corrupt. Table entry count is less than zero.</value>
  </data>
  <data name="GOR_ERR_CHUNK_FILE_TABLE_OFFSET_INVALID" xml:space="preserve">
    <value>The chunk file is corrupt. The chunk table offset is invalid.</value>
  </data>
  <data name="GOR_ERR_CHUNK_ILLEGAL_OPEN_MODE" xml:space="preserve">
    <value>The mode must be either [Read] or [Write].</value>
  </data>
  <data name="GOR_ERR_CHUNK_NOT_FOUND" xml:space="preserve">
    <value>Could not find a chunk with an ID of 0x{0}.</value>
  </data>
  <data name="GOR_ERR_CHUNK_READER_DESERIALIZING" xml:space="preserve">
    <value>The reader is currently deserializing an object. This call cannot be executed while the reader is deserializing.</value>
  </data>
  <data name="GOR_ERR_CHUNK_RESERVED" xml:space="preserve">
    <value>The chunk ID 0x{0} is already the ID of a reserved value.</value>
  </data>
  <data name="GOR_ERR_CHUNK_WRITER_SERIALIZING" xml:space="preserve">
    <value>The writer is currently serializing an object. This call cannot be executed while the writer is serializing.</value>
  </data>
  <data name="GOR_ERR_STREAM_SIZE_OUT_OF_RANGE" xml:space="preserve">
    <value>The stream size must be 0 or greater.</value>
  </data>
  <data name="GOR_ERR_CHUNK_ALREADY_OPEN" xml:space="preserve">
    <value>The chunk ID 0x{0} is already open. Only one chunk may be accessed at a time.</value>
  </data>
  <data name="GOR_ERR_CHUNKFILE_MUST_BE_READONLY" xml:space="preserve">
    <value>The stream for the chunk file must be read only.</value>
  </data>
  <data name="GOR_ERR_CHUNKFILE_MUST_BE_WRITEONLY" xml:space="preserve">
    <value>The stream for the chunk file must be write only.</value>
  </data>
</root>