<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.Direct3D9</name>
    </assembly>
    <members>
        <member name="T:SharpDX.Direct3D9.AdapterCollection">
            <summary>
            A collection of <see cref="T:SharpDX.Direct3D9.AdapterInformation"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.AdapterDetails">
            <summary>	
            Contains information identifying the adapter.	
            </summary>	
            <remarks>	
            The following pseudocode example illustrates the version format encoded in the DriverVersion, DriverVersionLowPart, and DriverVersionHighPart members.<code>	
             Product = HIWORD(DriverVersion.HighPart)	
            Version = LOWORD(DriverVersion.HighPart)	
            SubVersion = HIWORD(DriverVersion.LowPart)	
            Build = LOWORD(DriverVersion.LowPart)	
            	
            </code>See the Platform SDK for more information about the HIWORD macro, the LOWORD macro, and the <see cref="T:System.Int64"/> structure.MAX_DEVICE_IDENTIFIER_STRING is a constant with the following definition.<code>	
            #define MAX_DEVICE_IDENTIFIER_STRING        512	
            </code>The VendorId, DeviceId, SubSysId, and Revision members can be used in tandem to identify particular chip sets. However, use these members with caution.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9']/*"/>	
            <unmanaged>D3DADAPTER_IDENTIFIER9</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.Driver">
            <summary>	
            <para>Used for presentation to the user. This should not be used to identify particular drivers, because many different strings might be associated with the same device and driver from different vendors.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::Driver']/*"/>	
            <unmanaged>char Driver[512]</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.Description">
            <summary>	
            <para>Used for presentation to the user.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::Description']/*"/>	
            <unmanaged>char Description[512]</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.DeviceName">
            <summary>	
            <para>Device name for GDI.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::DeviceName']/*"/>	
            <unmanaged>char DeviceName[32]</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.RawDriverVersion">
            <summary>	
            <para>Identify the version of the Direct3D driver. It is legal to do less than and greater than comparisons on the 64-bit signed integer value. However, exercise caution if you use this element to identify problematic drivers. Instead, you should use DeviceIdentifier. See Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::DriverVersion']/*"/>	
            <unmanaged>LARGE_INTEGER DriverVersion</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.VendorId">
            <summary>	
            <para>Identify the version of the Direct3D driver. It is legal to do &lt; and &gt; comparisons on the 64-bit signed integer value. However, exercise caution if you use this element to identify problematic drivers. Instead, you should use DeviceIdentifier. See Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::VendorId']/*"/>	
            <unmanaged>unsigned int VendorId</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.DeviceId">
            <summary>	
            <para>Identify the version of the Direct3D driver. It is legal to do &lt; and &gt; comparisons on the 64-bit signed integer value. However, exercise caution if you use this element to identify problematic drivers. Instead, you should use DeviceIdentifier. See Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::DeviceId']/*"/>	
            <unmanaged>unsigned int DeviceId</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.SubsystemId">
            <summary>	
            <para>Can be used to help identify a particular chip set. Query this member to identify the manufacturer. The value can be zero if unknown.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::SubSysId']/*"/>	
            <unmanaged>unsigned int SubSysId</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.Revision">
            <summary>	
            <para>Can be used to help identify a particular chip set. Query this member to identify the type of chip set. The value can be zero if unknown.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::Revision']/*"/>	
            <unmanaged>unsigned int Revision</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.DeviceIdentifier">
            <summary>	
            <para>Can be used to help identify a particular chip set. Query this member to identify the subsystem, typically the particular board. The value can be zero if unknown.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::DeviceIdentifier']/*"/>	
            <unmanaged>GUID DeviceIdentifier</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AdapterDetails.WhqlLevel">
            <summary>	
            <para>Can be used to help identify a particular chip set. Query this member to identify the revision level of the chip set. The value can be zero if unknown.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DADAPTER_IDENTIFIER9::WHQLLevel']/*"/>	
            <unmanaged>unsigned int WHQLLevel</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterDetails.Certified">
            <summary>
            Gets a value indicating whether the adapeter is WHQL certified.
            </summary>
            <value>
              <c>true</c> if certified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterDetails.DriverVersion">
            <summary>
            Gets the driver version.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterDetails.CertificationDate">
            <summary>
            Gets the certification date.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.AdapterInformation">
            <summary>
            Adapter information.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.AdapterInformation.GetCaps(SharpDX.Direct3D9.DeviceType)">
            <summary>
            Gets the capabilities of this adapter.
            </summary>
            <param name="type">The type.</param>
            <returns>The capabilities</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.AdapterInformation.GetDisplayModes(SharpDX.Direct3D9.Format)">
            <summary>
            Gets the display modes supported by this adapter.
            </summary>
            <param name="format">The format.</param>
            <returns>The display modes supported by this adapter.</returns>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterInformation.Adapter">
            <summary>
            Gets the adapter ordinal.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterInformation.CurrentDisplayMode">
            <summary>
            Gets the current display mode.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterInformation.Details">
            <summary>
            Gets the details.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterInformation.Monitor">
            <summary>
            Gets the monitor.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.BaseEffect">
            <summary>	
            Sets a non-transposed matrix.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect']/*"/>	
            <unmanaged>ID3DXBaseEffect</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetString(SharpDX.Direct3D9.EffectHandle)">
            <summary>
            Gets the string.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
            <unmanaged>HRESULT ID3DXBaseEffect::GetString([In] D3DXHANDLE hParameter,[Out] const void** ppString)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetValue``1(SharpDX.Direct3D9.EffectHandle)">
            <summary>
            Gets the value of the specified parameter.
            </summary>
            <param name="parameter">Handle of the parameter.</param>
            <returns>The value of the parameter.</returns>
            <unmanaged>HRESULT ID3DXBaseEffect::GetValue([In] D3DXHANDLE hParameter,[In] void* pData,[In] unsigned int Bytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetValue``1(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>
            Gets the value of the specified parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter">Handle of the parameter.</param>
            <param name="count">The count.</param>
            <returns>
            The value of the parameter.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::GetValue([In] D3DXHANDLE hParameter,[In] void* pData,[In] unsigned int Bytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,System.Boolean)">
            <summary>
            Sets a bool value.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetBool([In] D3DXHANDLE hConstant,[In] BOOL b)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,System.Single)">
            <summary>
            Sets a float value.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetFloat([In] D3DXHANDLE hConstant,[In] float f)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>
            Sets an int value.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetInt([In] D3DXHANDLE hConstant,[In] int n)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix)">
            <summary>
            Sets a matrix.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetMatrix([In] D3DXHANDLE hConstant,[In] const D3DXMATRIX* pMatrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4)">
            <summary>
            Sets a 4D vector.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetVector([In] D3DXHANDLE hConstant,[In] const D3DXVECTOR4* pVector)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue``1(SharpDX.Direct3D9.EffectHandle,``0)">
            <summary>
            Sets a typed value.
            </summary>
            <typeparam name="T">Type of the value to est</typeparam>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetValue([In] D3DXHANDLE hConstant,[In] const void* pData,[In] unsigned int Bytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,System.Boolean[])">
            <summary>
            Sets an array of bools.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetBoolArray([In] D3DXHANDLE hConstant,[In, Buffer] const BOOL* pb,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,System.Single[])">
            <summary>
            Sets an array of floats.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetFloatArray([In] D3DXHANDLE hConstant,[In, Buffer] const float* pf,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,System.Int32[])">
            <summary>
            Sets an array of ints.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetIntArray([In] D3DXHANDLE hConstant,[In, Buffer] const int* pn,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix[])">
            <summary>
            Sets an array of matrices.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetMatrixArray([In] D3DXHANDLE hConstant,[In, Buffer] const D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4[])">
            <summary>
            Sets an array of 4D vectors.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetVectorArray([In] D3DXHANDLE hConstant,[In, Buffer] const D3DXVECTOR4* pVector,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue``1(SharpDX.Direct3D9.EffectHandle,``0[])">
            <summary>
            Sets an array of elements.
            </summary>
            <typeparam name="T">Type of the array element</typeparam>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXBaseEffect::SetValue([In] D3DXHANDLE hConstant,[In] const void* pData,[In] unsigned int Bytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.BaseEffect"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetDescription(SharpDX.Direct3D9.EffectDescription@)">
            <summary>	
            Gets the effect description.	
            </summary>	
            <param name="descRef"><para>Returns a description of the effect. See <see cref="T:SharpDX.Direct3D9.EffectDescription"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetDesc']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetDesc([Out] D3DXEFFECT_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetParameterDescription(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Gets a parameter or annotation description.	
            </summary>	
            <param name="hParameter"><para>Parameter or annotation handle. See Handles (Direct3D 9).</para></param>	
            <returns><para>Returns a description of the specified parameter or annotation. See <see cref="T:SharpDX.Direct3D9.ParameterDescription"/>.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetParameterDesc']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetParameterDesc([In] D3DXHANDLE hParameter,[Out] D3DXPARAMETER_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetTechniqueDescription(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Gets a technique description.	
            </summary>	
            <param name="hTechnique"><para>Technique handle. See Handles (Direct3D 9).</para></param>	
            <returns><para>Returns a description of the technique. See <see cref="T:SharpDX.Direct3D9.TechniqueDescription"/>.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetTechniqueDesc']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetTechniqueDesc([In] D3DXHANDLE hTechnique,[Out] D3DXTECHNIQUE_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetPassDescription(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Gets a pass description.	
            </summary>	
            <param name="hPass"><para>Pass handle. See Handles (Direct3D 9).</para></param>	
            <returns><para>Returns a description of the specified pass. See <see cref="T:SharpDX.Direct3D9.PassDescription"/>.</para></returns>	
            <remarks>	
            Note??If an effect is created with <see cref="F:SharpDX.Direct3D9.FX.NotCloneable"/>, this method will return <c>null</c> references (in <see cref="T:SharpDX.Direct3D9.PassDescription"/>) to the shader functions.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetPassDesc']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetPassDesc([In] D3DXHANDLE hPass,[Out] D3DXPASS_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetFunctionDescription(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Gets a function description.	
            </summary>	
            <param name="hShader"><para>Function handle. See Handles (Direct3D 9).</para></param>	
            <returns><para>Returns a description of the function. See <see cref="T:SharpDX.Direct3D9.FunctionDescription"/>.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetFunctionDesc']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetFunctionDesc([In] D3DXHANDLE hShader,[Out] D3DXFUNCTION_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetParameter(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Gets the handle of a top-level parameter or a structure member parameter.	
            </summary>	
            <param name="hParameter"><para>Handle of the parameter, or <c>null</c> for top-level parameters. See Handles (Direct3D 9).</para></param>	
            <param name="index"><para>Parameter index.</para></param>	
            <returns>Returns the handle of the specified parameter, or <c>null</c> if the index was invalid. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetParameter']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetParameter([In] D3DXHANDLE hParameter,[In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetParameter(SharpDX.Direct3D9.EffectHandle,System.String)">
            <summary>	
            Gets the handle of a top-level parameter or a structure member parameter by looking up its name.	
            </summary>	
            <param name="hParameter"><para>Handle of the parameter, or <c>null</c> for top-level parameters. See Handles (Direct3D 9).</para></param>	
            <param name="nameRef"><para>String containing the parameter name.</para></param>	
            <returns>Returns the handle of the specified parameter, or <c>null</c> if the index was invalid. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetParameterByName']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetParameterByName([In] D3DXHANDLE hParameter,[In] const char* pName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetParameterBySemantic(SharpDX.Direct3D9.EffectHandle,System.String)">
            <summary>	
            Gets the handle of a top-level parameter or a structure member parameter by looking up its semantic with a case-insensitive search.	
            </summary>	
            <param name="hParameter"><para>Handle of the parameter, or <c>null</c> for top-level parameters. See Handles (Direct3D 9).</para></param>	
            <param name="semanticRef"><para>String containing the semantic name.</para></param>	
            <returns>Returns the handle of the first parameter that matches the specified semantic, or <c>null</c> if the semantic was not found. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetParameterBySemantic']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetParameterBySemantic([In] D3DXHANDLE hParameter,[In] const char* pSemantic)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetParameterElement(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Get the handle of an array element parameter.	
            </summary>	
            <param name="hParameter"><para>Handle of the array. See Handles (Direct3D 9).</para></param>	
            <param name="index"><para>Array element index.</para></param>	
            <returns>Returns the handle of the specified parameter, or <c>null</c> if either hParameter or ElementIndex is invalid.  See Handles (Direct3D 9).</returns>	
            <remarks>	
            This method is used to get an element of a parameter that is an array.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetParameterElement']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetParameterElement([In] D3DXHANDLE hParameter,[In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetTechnique(System.Int32)">
            <summary>	
            Gets the handle of a technique.	
            </summary>	
            <param name="index"><para>Technique index.</para></param>	
            <returns>Returns the handle of the specified technique, or <c>null</c> if the index was invalid. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetTechnique']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetTechnique([In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetTechnique(System.String)">
            <summary>	
            Gets the handle of a technique by looking up its name.	
            </summary>	
            <param name="nameRef"><para>String containing the technique name.</para></param>	
            <returns>Returns the handle of the first technique that has the specified name, or <c>null</c> if the name was not found. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetTechniqueByName']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetTechniqueByName([In] const char* pName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetPass(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Gets the handle of a pass.	
            </summary>	
            <param name="hTechnique"><para>Handle of the parent technique. See Handles (Direct3D 9).</para></param>	
            <param name="index"><para>Index for the pass.</para></param>	
            <returns>Returns the handle of the specified pass inside the specified technique, or <c>null</c> if the index was invalid. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetPass']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetPass([In] D3DXHANDLE hTechnique,[In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetPass(SharpDX.Direct3D9.EffectHandle,System.String)">
            <summary>	
            Gets the handle of a pass by looking up its name.	
            </summary>	
            <param name="hTechnique"><para>Handle of the parent technique. See Handles (Direct3D 9).</para></param>	
            <param name="nameRef"><para>String containing the pass name.</para></param>	
            <returns>Returns the handle of the first pass inside the specified technique that has the specified name, or <c>null</c> if the name was not found. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetPassByName']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetPassByName([In] D3DXHANDLE hTechnique,[In] const char* pName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetFunction(System.Int32)">
            <summary>	
            Gets the handle of a function.	
            </summary>	
            <param name="index"><para>Function index.</para></param>	
            <returns>Returns the handle of the specified function, or <c>null</c> if the index was invalid. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetFunction']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetFunction([In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetFunction(System.String)">
            <summary>	
            Gets the handle of a function by looking up its name.	
            </summary>	
            <param name="nameRef"><para>String containing the function name. </para></param>	
            <returns>Returns the handle of the specified function, or <c>null</c> if the name was not found. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetFunctionByName']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetFunctionByName([In] const char* pName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetAnnotation(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Gets the handle of an annotation.	
            </summary>	
            <param name="hObject"><para>Handle of a technique, pass, or top-level parameter. See Handles (Direct3D 9).</para></param>	
            <param name="index"><para>Annotation index.</para></param>	
            <returns>Returns the handle of the specified annotation, or <c>null</c> if the index was invalid. See Handles (Direct3D 9).</returns>	
            <remarks>	
            Annotations are user-specific data that can be attached to any technique, pass, or parameter. See Handles (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetAnnotation']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetAnnotation([In] D3DXHANDLE hObject,[In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetAnnotation(SharpDX.Direct3D9.EffectHandle,System.String)">
            <summary>	
            Gets the handle of an annotation by looking up its name.	
            </summary>	
            <param name="hObject"><para>Handle of a technique, pass, or top-level parameter. See Handles (Direct3D 9).</para></param>	
            <param name="nameRef"><para>String containing the annotation name.</para></param>	
            <returns>Returns the handle of the specified annotation, or <c>null</c> if the name was not found. See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetAnnotationByName']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXBaseEffect::GetAnnotationByName([In] D3DXHANDLE hObject,[In] const char* pName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,System.IntPtr,System.Int32)">
            <summary>	
            Set the value of an arbitrary parameter or annotation, including simple types, structs, arrays, strings, shaders and textures.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="dataRef"><para>Pointer to a buffer containing data.</para></param>	
            <param name="bytes"><para>[in] Number of bytes in the buffer. Pass in D3DX_DEFAULT if you know your buffer is large enough to contain the entire parameter, and you want to skip size validation.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method can be used in place of nearly all the effect set API calls.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetValue']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetValue([In] D3DXHANDLE hParameter,[In] const void* pData,[In] unsigned int Bytes)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetValue(SharpDX.Direct3D9.EffectHandle,System.IntPtr,System.Int32)">
            <summary>	
            Get the value of an arbitrary parameter or annotation, including simple types, structs, arrays, strings, shaders and textures. This method can be used in place of nearly all the Getxxx calls in <see cref="T:SharpDX.Direct3D9.BaseEffect"/>.	
            </summary>	
            <param name="hParameter">No documentation.</param>	
            <param name="dataRef">No documentation.</param>	
            <param name="bytes">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetValue']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetValue([In] D3DXHANDLE hParameter,[In] void* pData,[In] unsigned int Bytes)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetBool(SharpDX.Direct3D9.EffectHandle,System.Boolean)">
            <summary>	
            Sets a <see cref="T:System.Boolean"/> value.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="b"><para>Boolean value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetBool']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetBool([In] D3DXHANDLE hParameter,[In] BOOL b)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetBool(SharpDX.Direct3D9.EffectHandle,System.Boolean@)">
            <summary>	
            Gets a <see cref="T:System.Boolean"/> value.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="bRef"><para>Returns a Boolean value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetBool']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetBool([In] D3DXHANDLE hParameter,[Out] BOOL* pb)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetBoolArray(SharpDX.Direct3D9.EffectHandle,System.Int32[],System.Int32)">
            <summary>	
            Sets an array of Boolean values.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="bRef"><para>Array of Boolean values.</para></param>	
            <param name="count"><para>Number of Boolean values in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetBoolArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetBoolArray([In] D3DXHANDLE hParameter,[In, Buffer] const BOOL* pb,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetBoolArray(SharpDX.Direct3D9.EffectHandle,System.Int32[],System.Int32)">
            <summary>	
            Gets an array of <see cref="T:System.Boolean"/> values.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="bRef"><para>Returns an array of Boolean values.</para></param>	
            <param name="count"><para>Number of Boolean values in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetBoolArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetBoolArray([In] D3DXHANDLE hParameter,[Out, Buffer] BOOL* pb,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetInt(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Sets an integer.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="n"><para>Integer value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetInt']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetInt([In] D3DXHANDLE hParameter,[In] int n)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetInt(SharpDX.Direct3D9.EffectHandle,System.Int32@)">
            <summary>	
            Gets an integer.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="nRef"><para>Returns an integer.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetInt']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetInt([In] D3DXHANDLE hParameter,[Out] int* pn)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetIntArray(SharpDX.Direct3D9.EffectHandle,System.Int32[],System.Int32)">
            <summary>	
            Sets an array of integers.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="nRef"><para>Array of integers.</para></param>	
            <param name="count"><para>Number of integers in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetIntArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetIntArray([In] D3DXHANDLE hParameter,[In, Buffer] const int* pn,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetIntArray(SharpDX.Direct3D9.EffectHandle,System.Int32[],System.Int32)">
            <summary>	
            Gets an array of integers.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="nRef"><para>Returns an array of integers.</para></param>	
            <param name="count"><para>Number of integers in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetIntArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetIntArray([In] D3DXHANDLE hParameter,[Out, Buffer] int* pn,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetFloat(SharpDX.Direct3D9.EffectHandle,System.Single)">
            <summary>	
            Sets a floating point value.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="f"><para>Floating point value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetFloat']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetFloat([In] D3DXHANDLE hParameter,[In] float f)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetFloat(SharpDX.Direct3D9.EffectHandle,System.Single@)">
            <summary>	
            Gets a floating point value.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="fRef"><para>Returns a floating point value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetFloat']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetFloat([In] D3DXHANDLE hParameter,[Out] float* pf)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetFloatArray(SharpDX.Direct3D9.EffectHandle,System.Single[],System.Int32)">
            <summary>	
            Sets an array of floating point values.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="fRef"><para>Array of floating point values.</para></param>	
            <param name="count"><para>Number of floating point values in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetFloatArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetFloatArray([In] D3DXHANDLE hParameter,[In, Buffer] const float* pf,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetFloatArray(SharpDX.Direct3D9.EffectHandle,System.Single[],System.Int32)">
            <summary>	
            Gets an array of floating point values.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="fRef"><para>Returns an array of floating point values.</para></param>	
            <param name="count"><para>Number of floating point values in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetFloatArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetFloatArray([In] D3DXHANDLE hParameter,[Out, Buffer] float* pf,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetVector(SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4)">
            <summary>	
            Sets a vector.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="vectorRef"><para>Pointer to a 4D vector.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If the destination vector is smaller than the source vector, the additional components of the source vector will be ignored.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetVector']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetVector([In] D3DXHANDLE hParameter,[In] const D3DXVECTOR4* pVector)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetVector(SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4@)">
            <summary>	
            Gets a vector.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="vectorRef"><para>Returns a 4D vector.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If the destination vector is larger than the source vector, only the initial components of the destination vector will be filled, and the remaining components will be set to zero.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetVector']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetVector([In] D3DXHANDLE hParameter,[Out] D3DXVECTOR4* pVector)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetVectorArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4[],System.Int32)">
            <summary>	
            Sets an array of vectors.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="vectorRef"><para>Array of 4D floating point vectors.</para></param>	
            <param name="count"><para>Number of vectors in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If the destination vectors are smaller than the source vectors, the additional components of the source vectors will be ignored.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetVectorArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetVectorArray([In] D3DXHANDLE hParameter,[In, Buffer] const D3DXVECTOR4* pVector,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetVectorArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4[],System.Int32)">
            <summary>	
            Gets an array of vectors.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="vectorRef"><para>Returns an array of 4D floating point vectors.</para></param>	
            <param name="count"><para>Number of vectors in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If the destination vectors are larger than the source vectors, only the initial components of each destination vector will be filled, and the remaining destination vector components will be set to zero.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetVectorArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetVectorArray([In] D3DXHANDLE hParameter,[Out, Buffer] D3DXVECTOR4* pVector,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetMatrix(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@)">
            <summary>	
            Sets a non-transposed matrix.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixRef"><para>Pointer to a nontransposed matrix. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A non-transposed matrix contains row-major data. In other words, each vector is contained in a row.If the destination matrix is smaller than the source matrix, the additional components of the source matrix will be ignored.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetMatrix']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetMatrix([In] D3DXHANDLE hParameter,[In] const D3DXMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetMatrix(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@)">
            <summary>	
            Gets a nontransposed matrix.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixRef"><para>Returns a nontransposed matrix. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A nontransposed matrix contains row-major data; that is, each vector is contained in a row.If the destination matrix is larger than the source matrix, only the upper-left components of the destination matrix will be filled, and the remaining components will be set to zero.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetMatrix']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetMatrix([In] D3DXHANDLE hParameter,[Out] D3DXMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetMatrixArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix[],System.Int32)">
            <summary>	
            Sets an array of nontransposed matrices.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixRef"><para>Array of nontransposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A nontransposed matrix contains row-major data; that is, each vector is contained in a row.If the destination matrices are smaller than the source matrices, the additional components of the source matrices will be ignored.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetMatrixArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetMatrixArray([In] D3DXHANDLE hParameter,[In, Buffer] const D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetMatrixArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix[],System.Int32)">
            <summary>	
            Gets an array of nontransposed matrices.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixRef"><para>Returns an array of nontransposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A nontransposed matrix contains row-major data; that is, each vector is contained in a row.If the destination matrices are larger than the source matrices, only the upper-left components of each destination matrix will be filled, and the remaining destination matrix components will be set to zero.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetMatrixArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetMatrixArray([In] D3DXHANDLE hParameter,[Out, Buffer] D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetMatrixPointerArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Sets an array of references to nontransposed matrices.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixOut"><para>Array of references to nontransposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A nontransposed matrix contains row-major data; that is, each vector is contained in a row.If the destination matrices are smaller than the source matrices, the additional components of the source matrices will be ignored.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetMatrixPointerArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetMatrixPointerArray([In] D3DXHANDLE hParameter,[In] const D3DXMATRIX** ppMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetMatrixPointerArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Gets an array of references to nontransposed matrices.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixOut"><para>Array of references to nontransposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A nontransposed matrix contains row-major data; that is, each vector is contained in a row.If the destination matrices are larger than the source matrices, only the upper-left components of each destination matrix will be filled, and the remaining destination matrix components will be set to zero.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetMatrixPointerArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetMatrixPointerArray([In] D3DXHANDLE hParameter,[Out] D3DXMATRIX** ppMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetMatrixTranspose(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@)">
            <summary>	
            Sets a transposed matrix.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixRef"><para>Pointer to a transposed matrix. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.If the destination matrix is smaller than the source matrix, the additional components of the source matrix will be ignored.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetMatrixTranspose']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetMatrixTranspose([In] D3DXHANDLE hParameter,[In] const D3DXMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetMatrixTranspose(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@)">
            <summary>	
            Gets a transposed matrix.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixRef"><para>Returns a transposed matrix. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.If the destination matrix is larger than the source matrix, only the upper-left elements of the destination matrix will be filled, and the remaining destination matrix components will be set to zero.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetMatrixTranspose']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetMatrixTranspose([In] D3DXHANDLE hParameter,[Out] D3DXMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetMatrixTransposeArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix[],System.Int32)">
            <summary>	
            Sets an array of transposed matrices.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixRef"><para>Array of transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.If the destination matrices are smaller than the source matrices, the additional components of the source matrices will be ignored.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetMatrixTransposeArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetMatrixTransposeArray([In] D3DXHANDLE hParameter,[In, Buffer] const D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetMatrixTransposeArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix[],System.Int32)">
            <summary>	
            Gets an array of transposed matrices.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixRef"><para>Returns an array of transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.If the destination matrices are larger than the source matrices, only the upper-left components of each destination matrix will be filled, and the remaining destination matrix components will be set to zero.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetMatrixTransposeArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetMatrixTransposeArray([In] D3DXHANDLE hParameter,[Out, Buffer] D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetMatrixTransposePointerArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Sets an array of references to transposed matrices.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixOut"><para>Array of references to transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.If the destination matrices are smaller than the source matrices, the additional components of the source matrices will be ignored.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetMatrixTransposePointerArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetMatrixTransposePointerArray([In] D3DXHANDLE hParameter,[In] const D3DXMATRIX** ppMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetMatrixTransposePointerArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Gets an array of references to transposed matrices.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="matrixOut"><para>Array of references to transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.If the destination matrices are larger than the source matrices, only the upper-left components of each destination matrix will be filled, and the remaining destination matrix components will be set to zero.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetMatrixTransposePointerArray']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetMatrixTransposePointerArray([In] D3DXHANDLE hParameter,[Out] D3DXMATRIX** ppMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetString(SharpDX.Direct3D9.EffectHandle,System.String)">
            <summary>	
            Sets a string.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="stringRef"><para>String to set.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetString']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetString([In] D3DXHANDLE hParameter,[In] const char* pString)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetString_(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Gets a string.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <returns><para>Returns a string identified by hParameter.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetString']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetString([In] D3DXHANDLE hParameter,[Out] const void** ppString)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetTexture(SharpDX.Direct3D9.EffectHandle,SharpDX.Direct3D9.BaseTexture)">
            <summary>	
            Sets a texture.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="textureRef"><para>Texture object. See <see cref="T:SharpDX.Direct3D9.BaseTexture"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetTexture']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetTexture([In] D3DXHANDLE hParameter,[In] IDirect3DBaseTexture9* pTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetTexture(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Gets a texture.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <returns><para>Returns a texture object. See <see cref="T:SharpDX.Direct3D9.BaseTexture"/>.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetTexture']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetTexture([In] D3DXHANDLE hParameter,[Out] IDirect3DBaseTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetPixelShader(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Gets a pixel shader.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <returns><para>Returns a pixel shader object. See <see cref="T:SharpDX.Direct3D9.PixelShader"/> object.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetPixelShader']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetPixelShader([In] D3DXHANDLE hParameter,[Out] IDirect3DPixelShader9** ppPShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.GetVertexShader(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Gets a vertex shader.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <returns><para>Returns a vertex shader object. See <see cref="T:SharpDX.Direct3D9.VertexShader"/>.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetVertexShader']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetVertexShader([In] D3DXHANDLE hParameter,[Out] IDirect3DVertexShader9** ppVShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseEffect.SetArrayRange(SharpDX.Direct3D9.EffectHandle,System.Int32,System.Int32)">
            <summary>	
            Set the range of an array to pass to the device.	
            </summary>	
            <param name="hParameter"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <param name="uStart"><para>Start index.</para></param>	
            <param name="uEnd"><para>Stop index.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::SetArrayRange']/*"/>	
            <unmanaged>HRESULT ID3DXBaseEffect::SetArrayRange([In] D3DXHANDLE hParameter,[In] unsigned int uStart,[In] unsigned int uEnd)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.BaseEffect.Description">
            <summary>	
            Gets the effect description.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseEffect::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT ID3DXBaseEffect::GetDesc([Out] D3DXEFFECT_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.BaseTexture">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.BaseTexture"/> interface to manipulate texture resources including cube and volume textures.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DBaseTexture9']/*"/>	
            <unmanaged>IDirect3DBaseTexture9</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Resource">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.Resource"/> interface to query and prepare resources.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9']/*"/>	
            <unmanaged>IDirect3DResource9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Resource.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the device associated with a resource.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface to fill with the device reference, if the query succeeds. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method allows navigation to the owning device object.Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Device"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::GetDevice']/*"/>	
            <unmanaged>HRESULT IDirect3DResource9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Resource.SetPrivateData(System.Guid,System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Associates data with the resource that is intended for use by the application, not by Direct3D. Data is passed by value, and multiple sets of data can be associated with a single resource.	
            </summary>	
            <param name="refguid"><para>Reference to the globally unique identifier that identifies the private data to set.</para></param>	
            <param name="dataRef"><para>Pointer to a buffer that contains the data to be associated with the resource. </para></param>	
            <param name="sizeOfData"><para>Size of the buffer at pData, in bytes. </para></param>	
            <param name="flags"><para>Value that describes the type of data being passed, or indicates to the application that the data should be invalidated when the resource changes. </para> <para></para>  ItemDescription  <para>(none)</para>  <para>If no flags are specified, Direct3D allocates memory to hold the data within the buffer and copies the data into the new buffer. The buffer allocated by Direct3D is automatically freed, as appropriate.</para>   <para>D3DSPD_IUNKNOWN</para>  <para>The data at pData is a reference to an <see cref="T:SharpDX.ComObject"/> interface. SizeOfData must be set to the size of a reference to <see cref="T:SharpDX.ComObject"/>, that is, sizeof(<see cref="T:SharpDX.ComObject"/>*). Direct3D automatically callsIUnknown through pData when the private data is destroyed. Private data will be destroyed by a subsequent call to <see cref="M:SharpDX.Direct3D9.Resource.SetPrivateData(System.Guid,System.IntPtr,System.Int32,System.Int32)"/> with the same <see cref="T:System.Guid"/>, a subsequent call to <see cref="M:SharpDX.Direct3D9.Resource.FreePrivateData(System.Guid)"/>, or when the <see cref="T:SharpDX.Direct3D9.Direct3D"/> object is released. For more information, see Remarks.</para>   <para>?</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Direct3D does not manage the memory at pData. If this buffer was dynamically allocated, it is the calling application's responsibility to free the memory.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::SetPrivateData']/*"/>	
            <unmanaged>HRESULT IDirect3DResource9::SetPrivateData([In] const GUID&amp; refguid,[In] const void* pData,[In] unsigned int SizeOfData,[In] unsigned int Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Resource.GetPrivateData(System.Guid,System.IntPtr,System.Int32@)">
            <summary>	
            Copies the private data associated with the resource to a provided buffer.	
            </summary>	
            <param name="refguid"><para>The globally unique identifier that identifies the private data to retrieve. </para></param>	
            <param name="dataRef"><para>Pointer to a previously allocated buffer to fill with the requested private data if the call succeeds. The application calling this method is responsible for allocating and releasing this buffer. If this parameter is <c>null</c>, this method will return the buffer size in pSizeOfData.</para></param>	
            <param name="sizeOfDataRef"><para>Pointer to the size of the buffer at  pData, in bytes. If this value is less than the actual size of the private data (such as 0), the method sets this parameter to the required buffer size and the method returns <see cref="F:SharpDX.Direct3D9.ResultCode.MoreData"/>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.MoreData"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotFound"/>.</returns>	
            <remarks>	
            This method is inherited by the following interfaces:  <see cref="T:SharpDX.Direct3D9.Resource"/>,  <see cref="T:SharpDX.Direct3D9.BaseTexture"/>, <see cref="T:SharpDX.Direct3D9.CubeTexture"/>,  <see cref="T:SharpDX.Direct3D9.Texture"/>,  <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>, <see cref="T:SharpDX.Direct3D9.IndexBuffer"/>,  <see cref="T:SharpDX.Direct3D9.VertexBuffer"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::GetPrivateData']/*"/>	
            <unmanaged>HRESULT IDirect3DResource9::GetPrivateData([In] const GUID&amp; refguid,[In] void* pData,[InOut] unsigned int* pSizeOfData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Resource.FreePrivateData(System.Guid)">
            <summary>	
            Frees the specified private data associated with this resource.	
            </summary>	
            <param name="refguid"><para>Reference to the globally unique identifier that identifies the private data to free.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotFound"/>.</returns>	
            <remarks>	
            Direct3D calls this method automatically when a resource is released.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::FreePrivateData']/*"/>	
            <unmanaged>HRESULT IDirect3DResource9::FreePrivateData([In] const GUID&amp; refguid)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Resource.SetPriority(System.Int32)">
            <summary>	
            Assigns the priority of a resource for scheduling purposes.	
            </summary>	
            <param name="priorityNew"><para>Priority to assign to a resource. </para>   <para>Differences between Direct3D 9 and Direct3D 9 for Windows Vista</para> <para>The priority can be any DWORD value; Direct3D 9 for Windows Vista also supports any of these pre-defined values D3D9_RESOURCE_PRIORITY.</para>   <para>?</para></param>	
            <returns>Returns the previous priority value for the resource.</returns>	
            <remarks>	
            This method is used to change the priority of managed resources (resources created with the <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> flag). This method returns 0 on non-managed resources.Priorities are used to determine when managed resources are to be removed from memory. A resource assigned a low priority is removed before a resource with a high priority. If two resources have the same priority, the resource that was used more recently is kept in memory; the other resource is removed. Managed resources have a default priority of 0.Windows Vista only - When this method is called using an <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> interface, only resources created with the <see cref="F:SharpDX.Direct3D9.Pool.Default"/> flag will be affected.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::SetPriority']/*"/>	
            <unmanaged>unsigned int IDirect3DResource9::SetPriority([In] unsigned int PriorityNew)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Resource.GetPriority">
            <summary>	
            Retrieves the priority for this resource.	
            </summary>	
            <returns>Returns a DWORD value, indicating the priority of the resource.</returns>	
            <remarks>	
            IDirect3DResource9::GetPriority is used for priority control of managed resources. This method returns 0 on nonmanaged resources.Priorities are used to determine when managed resources are to be removed from memory. A resource assigned a low priority is removed before a resource with a high priority. If two resources have the same priority, the resource that was used more recently is kept in memory; the other resource is removed. Managed resources have a default priority of 0.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::GetPriority']/*"/>	
            <unmanaged>unsigned int IDirect3DResource9::GetPriority()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Resource.PreLoad">
            <summary>	
            Preloads a managed resource.	
            </summary>	
            <remarks>	
            Calling this method indicates that the application will need this managed resource shortly. This method has no effect on nonmanaged resources.IDirect3DResource9::PreLoad detects "thrashing" conditions where more resources are being used in each frame than can fit in video memory simultaneously. Under such circumstances <see cref="M:SharpDX.Direct3D9.Resource.PreLoad"/> silently does nothing.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::PreLoad']/*"/>	
            <unmanaged>void IDirect3DResource9::PreLoad()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Resource.GetTypeInfo">
            <summary>	
            Returns the type of the resource.	
            </summary>	
            <returns>Returns a member of the <see cref="T:SharpDX.Direct3D9.ResourceType"/> enumerated type, identifying the type of the resource.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::GetType']/*"/>	
            <unmanaged>D3DRESOURCETYPE IDirect3DResource9::GetType()</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Resource.Device">
            <summary>	
            Retrieves the device associated with a resource.	
            </summary>	
            <remarks>	
            This method allows navigation to the owning device object.Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Device"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT IDirect3DResource9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Resource.Priority">
            <summary>	
            Retrieves the priority for this resource.	
            </summary>	
            <remarks>	
            IDirect3DResource9::GetPriority is used for priority control of managed resources. This method returns 0 on nonmanaged resources.Priorities are used to determine when managed resources are to be removed from memory. A resource assigned a low priority is removed before a resource with a high priority. If two resources have the same priority, the resource that was used more recently is kept in memory; the other resource is removed. Managed resources have a default priority of 0.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::GetPriority']/*"/>	
            <unmanaged>GetPriority</unmanaged>	
            <unmanaged>unsigned int IDirect3DResource9::GetPriority()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Resource.TypeInfo">
            <summary>	
            Returns the type of the resource.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DResource9::GetType']/*"/>	
            <unmanaged>GetType</unmanaged>	
            <unmanaged>D3DRESOURCETYPE IDirect3DResource9::GetType()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Resource.DebugName">
            <summary>
            Gets or sets the debug-name for this object.
            </summary>
            <value>
            The debug name.
            </value>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.FilterTexture(System.Int32,SharpDX.Direct3D9.Filter)">
            <summary>
            Filters mipmap levels of a texture.
            </summary>
            <param name="sourceLevel">The source level.</param>
            <param name="filter">The filter.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXFilterTexture([In] IDirect3DBaseTexture9* pBaseTexture,[In, Buffer] const PALETTEENTRY* pPalette,[In] unsigned int SrcLevel,[In] D3DX_FILTER Filter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.FilterTexture(System.Int32,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Filters mipmap levels of a texture.
            </summary>
            <param name="sourceLevel">The source level.</param>
            <param name="filter">The filter.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXFilterTexture([In] IDirect3DBaseTexture9* pBaseTexture,[In, Buffer] const PALETTEENTRY* pPalette,[In] unsigned int SrcLevel,[In] D3DX_FILTER Filter)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.ToFile(SharpDX.Direct3D9.BaseTexture,System.String,SharpDX.Direct3D9.ImageFileFormat)">
            <summary>
            Saves a texture to a file.
            </summary>
            <param name="texture">The texture.</param>
            <param name="fileName">Name of the file.</param>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveTextureToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DBaseTexture9* pSrcTexture,[In, Buffer] const PALETTEENTRY* pSrcPalette)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.ToFile(SharpDX.Direct3D9.BaseTexture,System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Saves a texture to a file.
            </summary>
            <param name="texture">The texture.</param>
            <param name="fileName">Name of the file.</param>
            <param name="format">The format.</param>
            <param name="palette">The palette.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXSaveTextureToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DBaseTexture9* pSrcTexture,[In, Buffer] const PALETTEENTRY* pSrcPalette)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.ToStream(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.ImageFileFormat)">
            <summary>
            Saves a texture to a stream.
            </summary>
            <param name="texture">The texture.</param>
            <param name="format">The format.</param>
            <returns>A <see cref="T:SharpDX.DataStream"/> containing the saved texture.</returns>
            <unmanaged>HRESULT D3DXSaveTextureToFileInMemory([Out] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DBaseTexture9* pSrcTexture,[In, Buffer] const PALETTEENTRY* pSrcPalette)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.ToStream(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Saves a texture to a stream.
            </summary>
            <param name="texture">The texture.</param>
            <param name="format">The format.</param>
            <param name="palette">The palette.</param>
            <returns>A <see cref="T:SharpDX.DataStream"/> containing the saved texture.</returns>
            <unmanaged>HRESULT D3DXSaveTextureToFileInMemory([Out] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DBaseTexture9* pSrcTexture,[In, Buffer] const PALETTEENTRY* pSrcPalette)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.BaseTexture"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.SetLOD(System.Int32)">
            <summary>	
            Sets the most detailed level-of-detail for a managed texture.	
            </summary>	
            <param name="lODNew"><para>Most detailed level-of-detail value to set for the mipmap chain. </para></param>	
            <returns>A DWORD value, clamped to the maximum level-of-detail value (one less than the total number of levels). Subsequent calls to this method will return the clamped value, not the level-of-detail value that was previously set.</returns>	
            <remarks>	
            This method applies to the following interfaces, which inherit from <see cref="T:SharpDX.Direct3D9.BaseTexture"/>.<see cref="T:SharpDX.Direct3D9.CubeTexture"/>   <see cref="T:SharpDX.Direct3D9.Texture"/>   <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>   <see cref="T:SharpDX.Direct3D9.Resource"/>SetLOD is used for level-of-detail control of managed textures. This method returns 0 on nonmanaged textures.SetLOD communicates to the Direct3D texture manager the most detailed mipmap in the chain that should be loaded into local video memory. For example, in a five-level mipmap chain, setting LODNew to 2 indicates that the texture manager should load only mipmap levels 2 through 4 into local video memory at any given time.More specifically, if the texture was created with the dimensions of 256x256, setting the most detailed level to 0 indicates that 256 x 256 is the largest mipmap available, setting the most detailed level to 1 indicates that 128 x 128 is the largest mipmap available, and so on, up to the most detailed mip level (the smallest texture size) for the chain.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DBaseTexture9::SetLOD']/*"/>	
            <unmanaged>unsigned int IDirect3DBaseTexture9::SetLOD([In] unsigned int LODNew)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.GetLOD">
            <summary>	
            Returns a value clamped to the maximum level-of-detail set for a managed texture (this method is not supported for an unmanaged texture).	
            </summary>	
            <returns>A DWORD value, clamped to the maximum level-of-detail value (one less than the total number of levels). Calling GetLOD on an unmanaged texture is not supported and will result in a D3DERR error code being returned.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DBaseTexture9::GetLOD']/*"/>	
            <unmanaged>unsigned int IDirect3DBaseTexture9::GetLOD()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.GetLevelCount">
            <summary>	
            Returns the number of texture levels in a multilevel texture.	
            </summary>	
            <returns>A DWORD value indicating the number of texture levels in a multilevel texture.</returns>	
            <remarks>	
            This method applies to the following interfaces, which inherit from <see cref="T:SharpDX.Direct3D9.BaseTexture"/>.<see cref="T:SharpDX.Direct3D9.CubeTexture"/>   <see cref="T:SharpDX.Direct3D9.Texture"/>   <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DBaseTexture9::GetLevelCount']/*"/>	
            <unmanaged>unsigned int IDirect3DBaseTexture9::GetLevelCount()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.SetAutoMipGenerationFilter(SharpDX.Direct3D9.TextureFilter)">
            <summary>	
            Set the filter type that is used for automatically generated mipmap sublevels.	
            </summary>	
            <param name="filterType"><para>Filter type. See <see cref="T:SharpDX.Direct3D9.TextureFilter"/>. This method will fail if the filter type is invalid or not supported.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Changing the filter type "dirties" the mipmap sublevels and causes them to be regenerated.The (default) filter type set at texture creation time is <see cref="F:SharpDX.Direct3D9.TextureFilter.Linear"/>. If the driver does not support a linear filter, the filter type will be set to <see cref="F:SharpDX.Direct3D9.TextureFilter.Point"/>. All filter types supported by the driver for regular texture filtering are supported for autogeneration except <see cref="F:SharpDX.Direct3D9.TextureFilter.None"/>. SetAutoGenFilterType will fail unless the driver sets the appropriate D3DPTFILTERCAPS_MINFxxx caps. These values are specified in the TextureFilterCaps and/or  CubeTextureFilterCaps members of <see cref="T:SharpDX.Direct3D9.Capabilities"/>.  For more information about texture filter types, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.This method has no effect if the texture is not created with <see cref="F:SharpDX.Direct3D9.Usage.AutoGenerateMipMap"/>. In this case, no failure is returned. For more information about usage constants, see <see cref="T:SharpDX.Direct3D9.Usage"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DBaseTexture9::SetAutoGenFilterType']/*"/>	
            <unmanaged>HRESULT IDirect3DBaseTexture9::SetAutoGenFilterType([In] D3DTEXTUREFILTERTYPE FilterType)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.GetAutoMipGenerationFilter">
            <summary>	
            Get the filter type that is used for automatically generated mipmap sublevels.	
            </summary>	
            <returns>Filter type. See <see cref="T:SharpDX.Direct3D9.TextureFilter"/>. A texture must be created with <see cref="F:SharpDX.Direct3D9.Usage.AutoGenerateMipMap"/> to use this method. Any other usage value will cause this method to return <see cref="F:SharpDX.Direct3D9.TextureFilter.None"/>.</returns>	
            <remarks>	
            Changing the filter type "dirties" the mipmap sublevels and causes them to be regenerated.The (default) filter type set at texture creation time is <see cref="F:SharpDX.Direct3D9.TextureFilter.Linear"/>. If the driver doesn't support a linear filter, the filter type will be set to <see cref="F:SharpDX.Direct3D9.TextureFilter.Point"/>. All filter types supported by the driver for regular texture filtering are supported for autogeneration except <see cref="F:SharpDX.Direct3D9.TextureFilter.None"/>. For each resource type, drivers should support all the filter types reported in the corresponding texture, CubeTexture, and volumetexture filter caps. For more information about texture types, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.This method has no effect if the texture is not created with <see cref="F:SharpDX.Direct3D9.Usage.AutoGenerateMipMap"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DBaseTexture9::GetAutoGenFilterType']/*"/>	
            <unmanaged>D3DTEXTUREFILTERTYPE IDirect3DBaseTexture9::GetAutoGenFilterType()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseTexture.GenerateMipSubLevels">
            <summary>	
            Generate mipmap sublevels.	
            </summary>	
            <remarks>	
            An application can generate mipmap sublevels at any time by calling GenerateMipSubLevels. To have mipmap sublevels generated automatically at texture creation time (see Automatic Generation of Mipmaps (Direct3D 9)), specify  <see cref="F:SharpDX.Direct3D9.Usage.AutoGenerateMipMap"/> during CreateTexture, CreateCubeTexture, and CreateVolumeTexture. For more information about usage constants, see <see cref="T:SharpDX.Direct3D9.Usage"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DBaseTexture9::GenerateMipSubLevels']/*"/>	
            <unmanaged>void IDirect3DBaseTexture9::GenerateMipSubLevels()</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.BaseTexture.LevelOfDetails">
            <summary>
            Gets or sets the level of details.
            </summary>
            <value>
            The level of details.
            </value>
            <unmanaged>unsigned int IDirect3DBaseTexture9::GetLOD()</unmanaged>
            <unmanaged>unsigned int IDirect3DBaseTexture9::SetLOD([In] unsigned int LODNew)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.BaseTexture.LevelCount">
            <summary>	
            Returns the number of texture levels in a multilevel texture.	
            </summary>	
            <remarks>	
            This method applies to the following interfaces, which inherit from <see cref="T:SharpDX.Direct3D9.BaseTexture"/>.<see cref="T:SharpDX.Direct3D9.CubeTexture"/>   <see cref="T:SharpDX.Direct3D9.Texture"/>   <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DBaseTexture9::GetLevelCount']/*"/>	
            <unmanaged>GetLevelCount</unmanaged>	
            <unmanaged>unsigned int IDirect3DBaseTexture9::GetLevelCount()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.BaseTexture.AutoMipGenerationFilter">
            <summary>	
            Get the filter type that is used for automatically generated mipmap sublevels.	
            </summary>	
            <remarks>	
            Changing the filter type "dirties" the mipmap sublevels and causes them to be regenerated.The (default) filter type set at texture creation time is <see cref="F:SharpDX.Direct3D9.TextureFilter.Linear"/>. If the driver doesn't support a linear filter, the filter type will be set to <see cref="F:SharpDX.Direct3D9.TextureFilter.Point"/>. All filter types supported by the driver for regular texture filtering are supported for autogeneration except <see cref="F:SharpDX.Direct3D9.TextureFilter.None"/>. For each resource type, drivers should support all the filter types reported in the corresponding texture, CubeTexture, and volumetexture filter caps. For more information about texture types, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.This method has no effect if the texture is not created with <see cref="F:SharpDX.Direct3D9.Usage.AutoGenerateMipMap"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DBaseTexture9::GetAutoGenFilterType']/*"/>	
            <unmanaged>GetAutoGenFilterType</unmanaged>	
            <unmanaged>D3DTEXTUREFILTERTYPE IDirect3DBaseTexture9::GetAutoGenFilterType()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.BoneCombination">
            <summary>	
            Describes a subset of the mesh that has the same attribute and bone combination.	
            </summary>	
            <remarks>	
            The subset of the mesh described by <see cref="T:SharpDX.Direct3D9.BoneCombination"/> can be rendered in a single drawing call.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXBONECOMBINATION']/*"/>	
            <unmanaged>D3DXBONECOMBINATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BoneCombination.BoneIds">
            <summary>
            Get the bone identifiers.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.BoneCombination.AttribId">
            <summary>	
            <para>Attribute table identifier.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXBONECOMBINATION::AttribId']/*"/>	
            <unmanaged>unsigned int AttribId</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BoneCombination.FaceStart">
            <summary>	
            <para>Starting face.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXBONECOMBINATION::FaceStart']/*"/>	
            <unmanaged>unsigned int FaceStart</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BoneCombination.FaceCount">
            <summary>	
            <para>Face count.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXBONECOMBINATION::FaceCount']/*"/>	
            <unmanaged>unsigned int FaceCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BoneCombination.VertexStart">
            <summary>	
            <para>Starting vertex.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXBONECOMBINATION::VertexStart']/*"/>	
            <unmanaged>unsigned int VertexStart</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BoneCombination.VertexCount">
            <summary>	
            <para>Vertex count.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXBONECOMBINATION::VertexCount']/*"/>	
            <unmanaged>unsigned int VertexCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BoneCombination.BonedIdsPointer">
            <summary>	
            <para>Pointer to an array of values that identify each of the bones that can be drawn in a single drawing call.  Note that the array can be of variable length to accommodate variable length bone combinations of ConvertToIndexedBlendedMesh.  </para>	
             <para>The size of the array varies based on the type of mesh generated. A non-indexed mesh array size is equal to the number of weights per  vertex (pMaxVertexInfl in ConvertToBlendedMesh). An indexed mesh array size is equal to the number of bone matrix  palette entries (paletteSize in ConvertToIndexedBlendedMesh).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXBONECOMBINATION::BoneId']/*"/>	
            <unmanaged>unsigned int* BoneId</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Capabilities">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9']/*"/>	
            <unmanaged>D3DCAPS9</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.DeviceType">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::DeviceType']/*"/>	
            <unmanaged>D3DDEVTYPE DeviceType</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.AdapterOrdinal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::AdapterOrdinal']/*"/>	
            <unmanaged>unsigned int AdapterOrdinal</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.Caps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::Caps']/*"/>	
            <unmanaged>D3DCAPS Caps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.Caps2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::Caps2']/*"/>	
            <unmanaged>D3DCAPS2 Caps2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.Caps3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::Caps3']/*"/>	
            <unmanaged>D3DCAPS3 Caps3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.PresentationIntervals">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::PresentationIntervals']/*"/>	
            <unmanaged>D3DPRESENT_INTERVAL PresentationIntervals</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.CursorCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::CursorCaps']/*"/>	
            <unmanaged>D3DCURSORCAPS CursorCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.DeviceCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::DevCaps']/*"/>	
            <unmanaged>D3DDEVCAPS DevCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.PrimitiveMiscCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::PrimitiveMiscCaps']/*"/>	
            <unmanaged>D3DPMISCCAPS PrimitiveMiscCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.RasterCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::RasterCaps']/*"/>	
            <unmanaged>D3DPRASTERCAPS RasterCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.DepthCompareCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::ZCmpCaps']/*"/>	
            <unmanaged>D3DPCMPCAPS ZCmpCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.SourceBlendCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::SrcBlendCaps']/*"/>	
            <unmanaged>D3DPBLENDCAPS SrcBlendCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.DestinationBlendCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::DestBlendCaps']/*"/>	
            <unmanaged>D3DPBLENDCAPS DestBlendCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.AlpaCompareCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::AlphaCmpCaps']/*"/>	
            <unmanaged>D3DPCMPCAPS AlphaCmpCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.ShadeCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::ShadeCaps']/*"/>	
            <unmanaged>D3DPSHADECAPS ShadeCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.TextureCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::TextureCaps']/*"/>	
            <unmanaged>D3DPTEXTURECAPS TextureCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.TextureFilterCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::TextureFilterCaps']/*"/>	
            <unmanaged>D3DPTFILTERCAPS TextureFilterCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.CubeTextureFilterCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::CubeTextureFilterCaps']/*"/>	
            <unmanaged>D3DPTFILTERCAPS CubeTextureFilterCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.VolumeTextureFilterCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::VolumeTextureFilterCaps']/*"/>	
            <unmanaged>D3DPTFILTERCAPS VolumeTextureFilterCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.TextureAddressCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::TextureAddressCaps']/*"/>	
            <unmanaged>D3DPTADDRESSCAPS TextureAddressCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.VolumeTextureAddressCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::VolumeTextureAddressCaps']/*"/>	
            <unmanaged>D3DPTADDRESSCAPS VolumeTextureAddressCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.LineCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::LineCaps']/*"/>	
            <unmanaged>D3DLINECAPS LineCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxTextureWidth">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxTextureWidth']/*"/>	
            <unmanaged>unsigned int MaxTextureWidth</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxTextureHeight">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxTextureHeight']/*"/>	
            <unmanaged>unsigned int MaxTextureHeight</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxVolumeExtent">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxVolumeExtent']/*"/>	
            <unmanaged>unsigned int MaxVolumeExtent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxTextureRepeat">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxTextureRepeat']/*"/>	
            <unmanaged>unsigned int MaxTextureRepeat</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxTextureAspectRatio">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxTextureAspectRatio']/*"/>	
            <unmanaged>unsigned int MaxTextureAspectRatio</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxAnisotropy">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxAnisotropy']/*"/>	
            <unmanaged>unsigned int MaxAnisotropy</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxVertexW">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxVertexW']/*"/>	
            <unmanaged>float MaxVertexW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.GuardBandLeft">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::GuardBandLeft']/*"/>	
            <unmanaged>float GuardBandLeft</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.GuardBandTop">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::GuardBandTop']/*"/>	
            <unmanaged>float GuardBandTop</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.GuardBandRight">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::GuardBandRight']/*"/>	
            <unmanaged>float GuardBandRight</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.GuardBandBottom">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::GuardBandBottom']/*"/>	
            <unmanaged>float GuardBandBottom</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.ExtentsAdjust">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::ExtentsAdjust']/*"/>	
            <unmanaged>float ExtentsAdjust</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.StencilCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::StencilCaps']/*"/>	
            <unmanaged>D3DSTENCILCAPS StencilCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.FVFCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::FVFCaps']/*"/>	
            <unmanaged>D3DFVFCAPS FVFCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.TextureOperationCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::TextureOpCaps']/*"/>	
            <unmanaged>D3DTEXOPCAPS TextureOpCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxTextureBlendStages">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxTextureBlendStages']/*"/>	
            <unmanaged>unsigned int MaxTextureBlendStages</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxSimultaneousTextures">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxSimultaneousTextures']/*"/>	
            <unmanaged>unsigned int MaxSimultaneousTextures</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.VertexProcessingCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::VertexProcessingCaps']/*"/>	
            <unmanaged>D3DVTXPCAPS VertexProcessingCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxActiveLights">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxActiveLights']/*"/>	
            <unmanaged>unsigned int MaxActiveLights</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxUserClipPlanes">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxUserClipPlanes']/*"/>	
            <unmanaged>unsigned int MaxUserClipPlanes</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxVertexBlendMatrices">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxVertexBlendMatrices']/*"/>	
            <unmanaged>unsigned int MaxVertexBlendMatrices</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxVertexBlendMatrixIndex">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxVertexBlendMatrixIndex']/*"/>	
            <unmanaged>unsigned int MaxVertexBlendMatrixIndex</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxPointSize">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxPointSize']/*"/>	
            <unmanaged>float MaxPointSize</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxPrimitiveCount">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxPrimitiveCount']/*"/>	
            <unmanaged>unsigned int MaxPrimitiveCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxVertexIndex">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxVertexIndex']/*"/>	
            <unmanaged>unsigned int MaxVertexIndex</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxStreams">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxStreams']/*"/>	
            <unmanaged>unsigned int MaxStreams</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxStreamStride">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxStreamStride']/*"/>	
            <unmanaged>unsigned int MaxStreamStride</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.VertexShaderVersion_">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::VertexShaderVersion']/*"/>	
            <unmanaged>unsigned int VertexShaderVersion</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxVertexShaderConst">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxVertexShaderConst']/*"/>	
            <unmanaged>unsigned int MaxVertexShaderConst</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.PixelShaderVersion_">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::PixelShaderVersion']/*"/>	
            <unmanaged>unsigned int PixelShaderVersion</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.PixelShader1xMaxValue">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::PixelShader1xMaxValue']/*"/>	
            <unmanaged>float PixelShader1xMaxValue</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.DeviceCaps2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::DevCaps2']/*"/>	
            <unmanaged>D3DDEVCAPS2 DevCaps2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxNpatchTessellationLevel">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxNpatchTessellationLevel']/*"/>	
            <unmanaged>float MaxNpatchTessellationLevel</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.Reserved5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::Reserved5']/*"/>	
            <unmanaged>unsigned int Reserved5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MasterAdapterOrdinal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MasterAdapterOrdinal']/*"/>	
            <unmanaged>unsigned int MasterAdapterOrdinal</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.AdapterOrdinalInGroup">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::AdapterOrdinalInGroup']/*"/>	
            <unmanaged>unsigned int AdapterOrdinalInGroup</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.NumberOfAdaptersInGroup">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::NumberOfAdaptersInGroup']/*"/>	
            <unmanaged>unsigned int NumberOfAdaptersInGroup</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.DeclarationTypes">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::DeclTypes']/*"/>	
            <unmanaged>D3DDTCAPS DeclTypes</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.SimultaneousRTCount">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::NumSimultaneousRTs']/*"/>	
            <unmanaged>unsigned int NumSimultaneousRTs</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.StretchRectFilterCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::StretchRectFilterCaps']/*"/>	
            <unmanaged>D3DPTFILTERCAPS StretchRectFilterCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.VS20Caps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::VS20Caps']/*"/>	
            <unmanaged>D3DVSHADERCAPS2_0 VS20Caps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.PS20Caps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::PS20Caps']/*"/>	
            <unmanaged>D3DPSHADERCAPS2_0 PS20Caps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.VertexTextureFilterCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::VertexTextureFilterCaps']/*"/>	
            <unmanaged>D3DPTFILTERCAPS VertexTextureFilterCaps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxVShaderInstructionsExecuted">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxVShaderInstructionsExecuted']/*"/>	
            <unmanaged>unsigned int MaxVShaderInstructionsExecuted</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxPShaderInstructionsExecuted">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxPShaderInstructionsExecuted']/*"/>	
            <unmanaged>unsigned int MaxPShaderInstructionsExecuted</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxVertexShader30InstructionSlots">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxVertexShader30InstructionSlots']/*"/>	
            <unmanaged>unsigned int MaxVertexShader30InstructionSlots</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Capabilities.MaxPixelShader30InstructionSlots">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS9::MaxPixelShader30InstructionSlots']/*"/>	
            <unmanaged>unsigned int MaxPixelShader30InstructionSlots</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Capabilities.PixelShaderVersion">
            <summary>
            Gets the pixel shader version.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.Capabilities.VertexShaderVersion">
            <summary>
            Gets the vertex shader version.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.ConstantTable">
            <summary>	
            The <see cref="T:SharpDX.Direct3D9.ConstantTable"/> interface is used to access the constant table. This table contains the variables that are used by high-level language shaders and effects.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable']/*"/>	
            <unmanaged>ID3DXConstantTable</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetConstantDescription(SharpDX.Direct3D9.EffectHandle)">
            <summary>
            Gets a single constant description in the constant table.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <returns>The constant description</returns>
            <unmanaged>HRESULT ID3DXConstantTable::GetConstantDesc([In] D3DXHANDLE hConstant,[Out, Buffer] D3DXCONSTANT_DESC* pConstantDesc,[InOut] unsigned int* pCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetConstantDescriptionArray(SharpDX.Direct3D9.EffectHandle)">
            <summary>
            Gets an array of constant descriptions in the constant table.
            </summary>
            <param name="effectHandle">The effect handle.</param>
            <returns>An array of constant descriptions</returns>
            <unmanaged>HRESULT ID3DXConstantTable::GetConstantDesc([In] D3DXHANDLE hConstant,[Out, Buffer] D3DXCONSTANT_DESC* pConstantDesc,[InOut] unsigned int* pCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Boolean)">
            <summary>
            Sets a bool value.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetBool([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] BOOL b)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Single)">
            <summary>
            Sets a float value.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetFloat([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] float f)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>
            Sets an int value.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetInt([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] int n)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix)">
            <summary>
            Sets a matrix.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetMatrix([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const D3DXMATRIX* pMatrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4)">
            <summary>
            Sets a 4D vector.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetVector([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const D3DXVECTOR4* pVector)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue``1(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,``0)">
            <summary>
            Sets a typed value.
            </summary>
            <typeparam name="T">Type of the value to est</typeparam>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetValue([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const void* pData,[In] unsigned int Bytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Boolean[])">
            <summary>
            Sets an array of bools.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetBoolArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const BOOL* pb,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Single[])">
            <summary>
            Sets an array of floats.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetFloatArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const float* pf,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Int32[])">
            <summary>
            Sets an array of ints.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetIntArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const int* pn,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix[])">
            <summary>
            Sets an array of matrices.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetMatrixArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4[])">
            <summary>
            Sets an array of 4D vectors.
            </summary>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetVectorArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const D3DXVECTOR4* pVector,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue``1(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,``0[])">
            <summary>
            Sets an array of elements.
            </summary>
            <typeparam name="T">Type of the array element</typeparam>
            <param name="device">The device.</param>
            <param name="effectHandle">The effect handle.</param>
            <param name="values">The values.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXConstantTable::SetValue([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const void* pData,[In] unsigned int Bytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.ConstantTable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetBufferPointer">
            <summary>	
            Gets a reference to the buffer that contains the constant table.	
            </summary>	
            <returns>Returns a reference the buffer.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetBufferPointer']/*"/>	
            <unmanaged>void* ID3DXConstantTable::GetBufferPointer()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetBufferSize">
            <summary>	
            Gets the buffer size of the constant table.	
            </summary>	
            <returns>Returns the size of the buffer, in bytes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetBufferSize']/*"/>	
            <unmanaged>unsigned int ID3DXConstantTable::GetBufferSize()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetDescription(SharpDX.Direct3D9.ConstantTableDescription@)">
            <summary>	
            Gets a description of the constant table.	
            </summary>	
            <param name="descRef"><para>Description of the constant table. See <see cref="T:SharpDX.Direct3D9.ConstantTableDescription"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetDesc']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::GetDesc([Out] D3DXCONSTANTTABLE_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetConstantDescription(SharpDX.Direct3D9.EffectHandle,SharpDX.Direct3D9.ConstantDescription[],System.Int32@)">
            <summary>	
            Gets a reference to an array of constant descriptions in the constant table.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to a constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="constantDescRef"><para>Returns a reference to an array of descriptions. See <see cref="T:SharpDX.Direct3D9.ConstantDescription"/>.</para></param>	
            <param name="countRef"><para>The input supplied must be the maximum size of the array. The output is the number of elements that are filled in the array when the function returns.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            ID3DXConstantTable::GetConstantDesc will sometimes return a <see cref="T:SharpDX.Direct3D9.ConstantDescription"/> with a Register_Count of 0.  This will happen with a constant appears in more than one Register_Set but does not have space in that register set allocated.Because a sampler can appear more than once in a constant table, this method can return an array of descriptions, each one with a different register index.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetConstantDesc']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::GetConstantDesc([In] D3DXHANDLE hConstant,[Out, Buffer] D3DXCONSTANT_DESC* pConstantDesc,[InOut] unsigned int* pCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetSamplerIndex(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Returns the sampler index.	
            </summary>	
            <param name="effectHandle"><para>The sampler handle.</para></param>	
            <returns>Returns the sampler index number from the constant table.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetSamplerIndex']/*"/>	
            <unmanaged>unsigned int ID3DXConstantTable::GetSamplerIndex([In] D3DXHANDLE hConstant)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetConstant(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Gets a constant by looking up its index.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the parent data structure. If the constant is a top-level parameter (there is no parent data structure), use <c>null</c>.</para></param>	
            <param name="index"><para>Zero-based index of the constant.</para></param>	
            <returns>Returns a unique identifier to the constant.</returns>	
            <remarks>	
            To get a constant from an array of constants, use <see cref="M:SharpDX.Direct3D9.ConstantTable.GetConstantElement(SharpDX.Direct3D9.EffectHandle,System.Int32)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetConstant']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXConstantTable::GetConstant([In] D3DXHANDLE hConstant,[In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetConstantByName(SharpDX.Direct3D9.EffectHandle,System.String)">
            <summary>	
            Gets a constant by looking up its name.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the parent data structure. If the constant is a top-level parameter (there is no parent data structure), use <c>null</c>.</para></param>	
            <param name="nameRef"><para>Name of the constant.</para></param>	
            <returns>Returns a unique identifier to the constant.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetConstantByName']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXConstantTable::GetConstantByName([In] D3DXHANDLE hConstant,[In] const char* pName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.GetConstantElement(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Gets a constant from an array of constants. An array is made up of elements.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the array of constants.  This value may not be <c>null</c>.</para></param>	
            <param name="index"><para>Zero-based index of the element in the array.</para></param>	
            <returns>Returns a unique identifier to the element constant.</returns>	
            <remarks>	
            To get a constant that is not part of an array, use <see cref="M:SharpDX.Direct3D9.ConstantTable.GetConstant(SharpDX.Direct3D9.EffectHandle,System.Int32)"/> or <see cref="M:SharpDX.Direct3D9.ConstantTable.GetConstantByName(SharpDX.Direct3D9.EffectHandle,System.String)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetConstantElement']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXConstantTable::GetConstantElement([In] D3DXHANDLE hConstant,[In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetDefaults(SharpDX.Direct3D9.Device)">
            <summary>	
            Sets the constants to their default values. The default values are declared in the variable declarations in the shader.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetDefaults']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetDefaults([In] IDirect3DDevice9* pDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.IntPtr,System.Int32)">
            <summary>	
            Sets the contents of the buffer to the constant table.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to a constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="dataRef"><para>Buffer containing data.</para></param>	
            <param name="bytes"><para>Size of the buffer, in bytes.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetValue']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetValue([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const void* pData,[In] unsigned int Bytes)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetBool(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Boolean)">
            <summary>	
            Sets a Boolean value.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="b"><para>Boolean value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetBool']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetBool([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] BOOL b)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetBoolArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Int32[],System.Int32)">
            <summary>	
            Sets an array of Boolean values.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the array of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="bRef"><para>Array of Boolean values.</para></param>	
            <param name="count"><para>Number of Boolean values in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetBoolArray']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetBoolArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const BOOL* pb,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetInt(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Sets an integer value.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="n"><para>Integer.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetInt']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetInt([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] int n)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetIntArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Int32[],System.Int32)">
            <summary>	
            Sets an array of integers.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the array of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="nRef"><para>Array of integers.</para></param>	
            <param name="count"><para>Number of integers in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetIntArray']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetIntArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const int* pn,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetFloat(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Single)">
            <summary>	
            Sets a floating-point number.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="f"><para>Floating-point number.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetFloat']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetFloat([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] float f)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetFloatArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Single[],System.Int32)">
            <summary>	
            Sets an array of floating-point numbers.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the array of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="fRef"><para>Array of floating-point numbers.</para></param>	
            <param name="count"><para>Number of floating-point values in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetFloatArray']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetFloatArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const float* pf,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetVector(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4)">
            <summary>	
            Sets a 4D vector.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the vector constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="vectorRef"><para>Pointer to a 4D vector.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetVector']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetVector([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const D3DXVECTOR4* pVector)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetVectorArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4[],System.Int32)">
            <summary>	
            Sets an array of 4D vectors.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the array of vector constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="vectorRef"><para>Array of 4D vectors.</para></param>	
            <param name="count"><para>Number of vectors in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetVectorArray']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetVectorArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const D3DXVECTOR4* pVector,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetMatrix(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@)">
            <summary>	
            Sets a nontransposed matrix.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the matrix of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixRef"><para>Pointer to a nontransposed matrix. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetMatrix']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetMatrix([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const D3DXMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetMatrixArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix[],System.Int32)">
            <summary>	
            Sets an array of nontransposed matrices.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the array of constant matrices. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixRef"><para>Array of nontransposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetMatrixArray']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetMatrixArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetMatrixPointerArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Sets an array of references to nontransposed matrices.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to an array of constant matrices. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixOut"><para>Array of references to nontransposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A nontransposed matrix contains row-major data; that is, each vector is contained in a row.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetMatrixPointerArray']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetMatrixPointerArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const D3DXMATRIX** ppMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetMatrixTranspose(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@)">
            <summary>	
            Sets a transposed matrix.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the matrix of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixRef"><para>Pointer to a transposed matrix. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetMatrixTranspose']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetMatrixTranspose([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const D3DXMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetMatrixTransposeArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix[],System.Int32)">
            <summary>	
            Sets an array of transposed matrices.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the array of matrix constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixRef"><para>Array of transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetMatrixTransposeArray']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetMatrixTransposeArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In, Buffer] const D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ConstantTable.SetMatrixTransposePointerArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Sets an array of references to transposed matrices.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the constant table.</para></param>	
            <param name="effectHandle"><para>Unique identifier to the array of matrix constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixOut"><para>Array of references to transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::SetMatrixTransposePointerArray']/*"/>	
            <unmanaged>HRESULT ID3DXConstantTable::SetMatrixTransposePointerArray([In] IDirect3DDevice9* pDevice,[In] D3DXHANDLE hConstant,[In] const D3DXMATRIX** ppMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.ConstantTable.Buffer">
            <summary>
            Gets the buffer.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.ConstantTable.BufferPointer">
            <summary>	
            Gets a reference to the buffer that contains the constant table.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetBufferPointer']/*"/>	
            <unmanaged>GetBufferPointer</unmanaged>	
            <unmanaged>void* ID3DXConstantTable::GetBufferPointer()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.ConstantTable.BufferSize">
            <summary>	
            Gets the buffer size of the constant table.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetBufferSize']/*"/>	
            <unmanaged>GetBufferSize</unmanaged>	
            <unmanaged>unsigned int ID3DXConstantTable::GetBufferSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.ConstantTable.Description">
            <summary>	
            Gets a description of the constant table.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXConstantTable::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT ID3DXConstantTable::GetDesc([Out] D3DXCONSTANTTABLE_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.AdapterExCollection">
            <summary>
            A collection of <see cref="T:SharpDX.Direct3D9.AdapterInformation"/>.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.AdapterInformationEx">
            <summary>
            Adapter information.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.AdapterInformationEx.GetCaps(SharpDX.Direct3D9.DeviceType)">
            <summary>
            Gets the capabilities of this adapter.
            </summary>
            <param name="type">The type.</param>
            <returns>The capabilities</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.AdapterInformationEx.GetDisplayModes(SharpDX.Direct3D9.DisplayModeFilter)">
            <summary>
            Gets the display modes supported by this adapter.
            </summary>
            <param name="filter">The filter.</param>
            <returns>
            The display modes supported by this adapter.
            </returns>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterInformationEx.Adapter">
            <summary>
            Gets the adapter ordinal.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterInformationEx.CurrentDisplayMode">
            <summary>
            Gets the current display mode.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterInformationEx.Details">
            <summary>
            Gets the details.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.AdapterInformationEx.Monitor">
            <summary>
            Gets the monitor.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.DisplayModeEx">
            <summary>	
            Information about the properties of a display mode.	
            </summary>	
            <remarks>	
            This structure is used in various methods to create and manage Direct3D 9Ex devices (<see cref="T:SharpDX.Direct3D9.DeviceEx"/>) and swapchains (<see cref="T:SharpDX.Direct3D9.SwapChain9Ex"/>).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEEX']/*"/>	
            <unmanaged>D3DDISPLAYMODEEX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayModeEx.Size">
            <summary>	
            <para>The size of this structure. This should always be set to sizeof(<see cref="T:SharpDX.Direct3D9.DisplayModeEx"/>).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEEX::Size']/*"/>	
            <unmanaged>unsigned int Size</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayModeEx.Width">
            <summary>	
            <para>Width of the display mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEEX::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayModeEx.Height">
            <summary>	
            <para>Height of the display mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEEX::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayModeEx.RefreshRate">
            <summary>	
            <para>Refresh rate of the display mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEEX::RefreshRate']/*"/>	
            <unmanaged>unsigned int RefreshRate</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayModeEx.Format">
            <summary>	
            <para>Format of the display mode. See <see cref="T:SharpDX.Direct3D9.Format"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEEX::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayModeEx.ScanLineOrdering">
            <summary>	
            <para>Indicates whether the scanline order is progressive or interlaced. See <see cref="T:SharpDX.Direct3D9.ScanlineOrdering"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEEX::ScanLineOrdering']/*"/>	
            <unmanaged>D3DSCANLINEORDERING ScanLineOrdering</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.DisplayModeEx.AspectRatio">
            <summary>
            Gets the aspect ratio.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.DisplayMode">
            <summary>	
            Describes the display mode.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODE']/*"/>	
            <unmanaged>D3DDISPLAYMODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayMode.Width">
            <summary>	
            <para>Screen width, in pixels. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODE::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayMode.Height">
            <summary>	
            <para>Screen height, in pixels. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODE::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayMode.RefreshRate">
            <summary>	
            <para>Refresh rate. The value of 0 indicates an adapter default. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODE::RefreshRate']/*"/>	
            <unmanaged>unsigned int RefreshRate</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayMode.Format">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the surface format of the display mode. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODE::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.DisplayMode.AspectRatio">
            <summary>
            Gets the aspect ratio.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.DisplayModeExCollection">
            <summary>
            A collection of <see cref="T:SharpDX.Direct3D9.DisplayModeEx"/>
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.CubeTexture">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface to manipulate a cube texture resource.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DCubeTexture9']/*"/>	
            <unmanaged>IDirect3DCubeTexture9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.#ctor(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.CubeTexture"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="edgeLength">Length of the edge.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.#ctor(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.IntPtr@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.CubeTexture"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="edgeLength">Length of the edge.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="sharedHandle">The shared handle.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.CheckRequirements(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool)">
            <summary>
            Checks texture-creation parameters.
            </summary>
            <param name="device">Device associated with the texture.</param>
            <param name="size">Requested size of the texture. Null if </param>
            <param name="mipLevelCount">Requested number of mipmap levels for the texture.</param>
            <param name="usage">The requested usage for the texture.</param>
            <param name="format">Requested format for the texture.</param>
            <param name="pool">Memory class where the resource will be placed.</param>
            <returns>A value type containing the proposed values to pass to the texture creation functions.</returns>
            <unmanaged>HRESULT D3DXCheckCubeTextureRequirements([In] IDirect3DDevice9* pDevice,[InOut] unsigned int* pSize,[InOut] unsigned int* pNumMipLevels,[In] unsigned int Usage,[InOut] D3DFORMAT* pFormat,[In] D3DPOOL Pool)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.Fill(SharpDX.Direct3D9.Fill3DCallback)">
            <summary>
            Uses a user-provided function to fill each texel of each mip level of a given cube texture.
            </summary>
            <param name="callback">A function that is used to fill the texture.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.Fill(SharpDX.Direct3D9.TextureShader)">
            <summary>
            Uses a compiled high-level shader language (HLSL) function to fill each texel of each mipmap level of a texture.
            </summary>
            <param name="shader">A texture shader object that is used to fill the texture.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.LockRectangle(SharpDX.Direct3D9.CubeMapFace,System.Int32,SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a rectangle on a cube texture resource.
            </summary>
            <param name="faceType">Type of the face.</param>
            <param name="level">The level.</param>
            <param name="flags">The flags.</param>
            <returns>
            A <see cref="T:SharpDX.DataRectangle"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DCubeTexture9::LockRect([In] D3DCUBEMAP_FACES FaceType,[In] unsigned int Level,[In] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.LockRectangle(SharpDX.Direct3D9.CubeMapFace,System.Int32,SharpDX.Direct3D9.LockFlags,SharpDX.DataStream@)">
            <summary>
            Locks a rectangle on a cube texture resource.
            </summary>
            <param name="faceType">Type of the face.</param>
            <param name="level">The level.</param>
            <param name="flags">The flags.</param>
            <param name="stream">The stream pointing to the locked region.</param>
            <returns>
            A <see cref="T:SharpDX.DataRectangle"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DCubeTexture9::LockRect([In] D3DCUBEMAP_FACES FaceType,[In] unsigned int Level,[In] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.LockRectangle(SharpDX.Direct3D9.CubeMapFace,System.Int32,SharpDX.Rectangle,SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a rectangle on a cube texture resource.
            </summary>
            <param name="faceType">Type of the face.</param>
            <param name="level">The level.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="flags">The flags.</param>
            <returns>
            A <see cref="T:SharpDX.DataRectangle"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DCubeTexture9::LockRect([In] D3DCUBEMAP_FACES FaceType,[In] unsigned int Level,[In] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.LockRectangle(SharpDX.Direct3D9.CubeMapFace,System.Int32,SharpDX.Rectangle,SharpDX.Direct3D9.LockFlags,SharpDX.DataStream@)">
            <summary>
            Locks a rectangle on a cube texture resource.
            </summary>
            <param name="faceType">Type of the face.</param>
            <param name="level">The level.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="flags">The flags.</param>
            <param name="stream">The stream pointing to the locked region.</param>
            <returns>
            A <see cref="T:SharpDX.DataRectangle"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DCubeTexture9::LockRect([In] D3DCUBEMAP_FACES FaceType,[In] unsigned int Level,[In] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.AddDirtyRectangle(SharpDX.Direct3D9.CubeMapFace)">
            <summary>
            Adds a dirty region to a cube texture resource.
            </summary>
            <param name="faceType">Type of the face.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DCubeTexture9::AddDirtyRect([In] D3DCUBEMAP_FACES FaceType,[In] const void* pDirtyRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.AddDirtyRectangle(SharpDX.Direct3D9.CubeMapFace,SharpDX.Rectangle)">
            <summary>
            Adds a dirty region to a cube texture resource.
            </summary>
            <param name="faceType">Type of the face.</param>
            <param name="dirtyRectRef">The dirty rect ref.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DCubeTexture9::AddDirtyRect([In] D3DCUBEMAP_FACES FaceType,[In] const void* pDirtyRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromFile(SharpDX.Direct3D9.Device,System.String)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromFile(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry[]@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemory([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry[]@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.CubeTexture"/></returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemory([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry[]@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.CreateFromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.CreateFromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.CubeTexture"/></returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.CreateFromPointer(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="pointer">The pointer.</param>
            <param name="sizeInBytes">The size in bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.CreateFromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.CubeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="fileName">Name of the file.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.CubeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.CubeTexture"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.GetLevelDescription(System.Int32)">
            <summary>	
            Retrieves a description of one face of the specified cube texture level.	
            </summary>	
            <param name="level"><para>Specifies a level of a mipmapped cube texture.</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.SurfaceDescription"/> structure, describing one face of the specified cube texture level.</para></returns>	
            <remarks>	
            The <see cref="T:SharpDX.Direct3D9.SurfaceDescription"/> structure contains Width and Height members, which describe the size of one face in the cube. To get the size of the entire cube, multiply six (the number of cube faces) by the product of Width and Height.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DCubeTexture9::GetLevelDesc']/*"/>	
            <unmanaged>HRESULT IDirect3DCubeTexture9::GetLevelDesc([In] unsigned int Level,[Out] D3DSURFACE_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.GetCubeMapSurface(SharpDX.Direct3D9.CubeMapFace,System.Int32)">
            <summary>	
            Retrieves a cube texture map surface.	
            </summary>	
            <param name="faceType"><para>Member of the <see cref="T:SharpDX.Direct3D9.CubeMapFace"/> enumerated type, identifying a cube map face. </para></param>	
            <param name="level"><para>Specifies a level of a mipmapped cube texture. </para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the returned cube texture map surface. </para></returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Surface"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DCubeTexture9::GetCubeMapSurface']/*"/>	
            <unmanaged>HRESULT IDirect3DCubeTexture9::GetCubeMapSurface([In] D3DCUBEMAP_FACES FaceType,[In] unsigned int Level,[Out] IDirect3DSurface9** ppCubeMapSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.LockRectangle(SharpDX.Direct3D9.CubeMapFace,System.Int32,SharpDX.Direct3D9.LockedRect@,System.IntPtr,SharpDX.Direct3D9.LockFlags)">
            <summary>	
            Locks a rectangle on a cube texture resource.	
            </summary>	
            <param name="faceType"><para>Member of the <see cref="T:SharpDX.Direct3D9.CubeMapFace"/> enumerated type, identifying a cube map face. </para></param>	
            <param name="level"><para>Specifies a level of a mipmapped cube texture. </para></param>	
            <param name="lockedRectRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.LockedRect"/> structure, describing the region to lock. </para></param>	
            <param name="rectRef"><para>Pointer to a rectangle to lock. Specified by a reference to a <see cref="T:SharpDX.Rectangle"/> structure. Specifying <c>null</c> for this parameter expands the dirty region to cover the entire cube texture.</para></param>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>  <para> You may not specify a subrect when using <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/>. For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if one or more of the arguments is invalid.</returns>	
            <remarks>	
            For performance reasons, dirty regions are only recorded for level zero of a texture. Dirty regions are automatically recorded when <see cref="M:SharpDX.Direct3D9.CubeTexture.LockRectangle(SharpDX.Direct3D9.CubeMapFace,System.Int32,SharpDX.Direct3D9.LockFlags)"/> is called without <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>. See <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/> for more information.Cube textures created with <see cref="F:SharpDX.Direct3D9.Pool.Default"/> are not lockable. Cube textures created in video memory are lockable when created with USAGE_DYNAMIC.The only lockable format for a depth-stencil texture is <see cref="F:SharpDX.Direct3D9.Format.D16Lockable"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DCubeTexture9::LockRect']/*"/>	
            <unmanaged>HRESULT IDirect3DCubeTexture9::LockRect([In] D3DCUBEMAP_FACES FaceType,[In] unsigned int Level,[Out] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.UnlockRectangle(SharpDX.Direct3D9.CubeMapFace,System.Int32)">
            <summary>	
            Unlocks a rectangle on a cube texture resource.	
            </summary>	
            <param name="faceType"><para>Member of the <see cref="T:SharpDX.Direct3D9.CubeMapFace"/> enumerated type, identifying a cube map face. </para></param>	
            <param name="level"><para>Specifies a level of a mipmapped cube texture. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DCubeTexture9::UnlockRect']/*"/>	
            <unmanaged>HRESULT IDirect3DCubeTexture9::UnlockRect([In] D3DCUBEMAP_FACES FaceType,[In] unsigned int Level)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CubeTexture.AddDirtyRectangle(SharpDX.Direct3D9.CubeMapFace,System.IntPtr)">
            <summary>	
            Adds a dirty region to a cube texture resource.	
            </summary>	
            <param name="faceType"><para>Member of the <see cref="T:SharpDX.Direct3D9.CubeMapFace"/> enumerated type, identifying the cube map face. </para></param>	
            <param name="dirtyRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure, specifying the dirty region. Specifying <c>null</c> expands the dirty region to cover the entire cube texture. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            For performance reasons, dirty regions are only recorded for level zero of a texture. For sublevels, it is assumed that the corresponding (scaled) rectangle or box is also dirty. Dirty regions are automatically recorded when <see cref="M:SharpDX.Direct3D9.CubeTexture.LockRectangle(SharpDX.Direct3D9.CubeMapFace,System.Int32,SharpDX.Direct3D9.LockFlags)"/> is called without <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>. The destination surface of <see cref="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/> is also marked dirty automatically.Using <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> and explicitly specifying dirty regions can be used to increase the efficiency of <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/>. Using this method, applications can optimize what subset of a resource is copied by specifying dirty regions on the resource. However, the dirty regions may be expanded to optimize alignment.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DCubeTexture9::AddDirtyRect']/*"/>	
            <unmanaged>HRESULT IDirect3DCubeTexture9::AddDirtyRect([In] D3DCUBEMAP_FACES FaceType,[In] const void* pDirtyRect)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CubeTextureRequirements">
            <summary>
            A Cube Texture requirement.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.CubeTextureRequirements.Size">
            <summary>
            The corrected size of the texture, in pixels.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.CubeTextureRequirements.Format">
            <summary>
            The corrected surface format.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.CubeTextureRequirements.MipLevelCount">
            <summary>
            The corrected mip level count.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.D3DX">
            <summary>
            D3DX constants and methods
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.D3DX.Default">
            <summary>
            The value used to signify that the default value for a parameter should be used.
            </summary>
            <unmanaged>D3DX_DEFAULT</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.D3DX.DefaultNonPowerOf2">
            <summary>
            The default value for non power-of-two textures.
            </summary>
            <unmanaged>D3DX_DEFAULT_NONPOW2</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.D3DX.FormatFromFile">
            <summary>
            Indicates that the method should format from file.
            </summary>
            <unmanaged>D3DFMT_FROM_FILE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.D3DX.FromFile">
            <summary>
            Indicates that the method should load from file.
            </summary>
            <unmanaged>D3DX_FROM_FILE</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.CheckVersion">
            <summary>
            Checks the D3DX runtime version against this compiled version.
            </summary>
            <returns>True if version are compatible</returns>
            <unmanaged>BOOL D3DXCheckVersion([In] unsigned int D3DSdkVersion,[In] unsigned int D3DXSdkVersion)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.DebugMute(System.Boolean)">
            <summary>
            Get and set debug mute mode.
            </summary>
            <param name="mute">if set to <c>true</c> [mute].</param>
            <returns>Return the debug mute mode</returns>
            <unmanaged>BOOL D3DXDebugMute([In] BOOL Mute)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.DeclaratorFromFVF(SharpDX.Direct3D9.VertexFormat)">
            <summary>
            Converts a declarator from a flexible vertex format (FVF) code.
            </summary>
            <param name="fvf">Combination of <see cref="T:SharpDX.Direct3D9.VertexFormat"/> that describes the FVF from which to generate the returned declarator array..</param>
            <returns>
            A declarator from a flexible vertex format (FVF) code.
            </returns>
            <unmanaged>HRESULT D3DXDeclaratorFromFVF([In] D3DFVF FVF,[In, Buffer] D3DVERTEXELEMENT9* pDeclarator)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.FVFFromDeclarator(SharpDX.Direct3D9.VertexElement[])">
            <summary>
            Converts a flexible vertex format (FVF) code from a declarator.
            </summary>
            <param name="declarator">The declarator array.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.VertexFormat"/> that describes the vertex format returned from the declarator.</returns>
            <unmanaged>HRESULT D3DXFVFFromDeclarator([In, Buffer] const D3DVERTEXELEMENT9* pDeclarator,[Out] D3DFVF* pFVF)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.GenerateOutputDeclaration(SharpDX.Direct3D9.VertexElement[])">
            <summary>
            Generates an output vertex declaration from the input declaration. The output declaration is intended for use by the mesh tessellation functions.
            </summary>
            <param name="declaration">The input declaration.</param>
            <returns>The output declaration</returns>
            <unmanaged>HRESULT D3DXGenerateOutputDecl([In, Buffer] D3DVERTEXELEMENT9* pOutput,[In, Buffer] const D3DVERTEXELEMENT9* pInput)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.GetDeclarationLength(SharpDX.Direct3D9.VertexElement[])">
            <summary>
            Gets the number of elements in the vertex declaration.
            </summary>
            <param name="declaration">The declaration.</param>
            <returns>The number of elements in the vertex declaration.</returns>
            <unmanaged>unsigned int D3DXGetDeclLength([In, Buffer] const D3DVERTEXELEMENT9* pDecl)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.GetDeclarationVertexSize(SharpDX.Direct3D9.VertexElement[],System.Int32)">
            <summary>
            Gets the size of a vertex from the vertex declaration.
            </summary>
            <param name="elements">The elements.</param>
            <param name="stream">The stream.</param>
            <returns>The vertex declaration size, in bytes.</returns>
            <unmanaged>unsigned int D3DXGetDeclVertexSize([In, Buffer] const D3DVERTEXELEMENT9* pDecl,[In] unsigned int Stream)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.GetFVFVertexSize(SharpDX.Direct3D9.VertexFormat)">
            <summary>
            Returns the size of a vertex for a flexible vertex format (FVF).
            </summary>
            <param name="fvf">The vertex format.</param>
            <returns>The FVF vertex size, in bytes.</returns>
            <unmanaged>unsigned int D3DXGetFVFVertexSize([In] D3DFVF FVF)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.GetRectanglePatchSize(System.Single,System.Int32@,System.Int32@)">
            <summary>
            Gets the size of the rectangle patch.
            </summary>
            <param name="segmentCount">The segment count.</param>
            <param name="triangleCount">The triangle count.</param>
            <param name="vertexCount">The vertex count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXRectPatchSize([In] const float* pfNumSegs,[In] unsigned int* pdwTriangles,[In] unsigned int* pdwVertices)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.GetTrianglePatchSize(System.Single,System.Int32@,System.Int32@)">
            <summary>
            Gets the size of the triangle patch.
            </summary>
            <param name="segmentCount">The segment count.</param>
            <param name="triangleCount">The triangle count.</param>
            <param name="vertexCount">The vertex count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXTriPatchSize([In] const float* pfNumSegs,[In] unsigned int* pdwTriangles,[In] unsigned int* pdwVertices)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.GetVectors(SharpDX.DataStream,System.Int32,SharpDX.Direct3D9.VertexFormat)">
            <summary>
            Gets an array of <see cref="T:SharpDX.Vector3"/> from a <see cref="T:SharpDX.DataStream"/>.
            </summary>
            <param name="stream">The stream.</param>
            <param name="vertexCount">The vertex count.</param>
            <param name="format">The format.</param>
            <returns>An array of <see cref="T:SharpDX.Vector3"/> </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.GetVectors(SharpDX.DataStream,System.Int32,System.Int32)">
            <summary>
            Gets an array of <see cref="T:SharpDX.Vector3"/> from a <see cref="T:SharpDX.DataStream"/>.
            </summary>
            <param name="stream">The stream.</param>
            <param name="vertexCount">The vertex count.</param>
            <param name="stride">The stride.</param>
            <returns>An array of <see cref="T:SharpDX.Vector3"/> </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.MakeFourCC(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a FOURCC Format code from bytes description.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
            <param name="c3">The c3.</param>
            <param name="c4">The c4.</param>
            <returns>A Format FourCC</returns>
            <unmanaged>MAKEFOURCC</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.OptimizeFaces(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Generates an optimized face remapping for a triangle list.
            </summary>
            <param name="indices">The indices.</param>
            <param name="faceCount">The face count.</param>
            <param name="vertexCount">The vertex count.</param>
            <returns>The original mesh face that was split to generate the current face.</returns>
            <unmanaged>HRESULT D3DXOptimizeFaces([In] const void* pbIndices,[In] unsigned int cFaces,[In] unsigned int cVertices,[In] BOOL b32BitIndices,[In, Buffer] int* pFaceRemap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.OptimizeFaces(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Generates an optimized vertex remapping for a triangle list. This function is commonly used after applying the face remapping generated by D3DXOptimizeFaces.
            </summary>
            <param name="indices">The indices.</param>
            <param name="faceCount">The face count.</param>
            <param name="vertexCount">The vertex count.</param>
            <returns>The original mesh face that was split to generate the current face.</returns>
            <unmanaged>HRESULT D3DXOptimizeFaces([In] const void* pbIndices,[In] unsigned int cFaces,[In] unsigned int cVertices,[In] BOOL b32BitIndices,[In, Buffer] int* pFaceRemap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.OptimizeVertices(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Generates an optimized vertex remapping for a triangle list. This function is commonly used after applying the face remapping generated by <see cref="M:SharpDX.Direct3D9.D3DX.OptimizeFaces(System.Int16[],System.Int32,System.Int32)"/>.
            </summary>
            <param name="indices">The indices.</param>
            <param name="faceCount">The face count.</param>
            <param name="vertexCount">The vertex count.</param>
            <returns>A buffer that will contain the new index for each vertex. The value stored in pVertexRemap for a given element is the source vertex location in the new vertex ordering.</returns>
            <unmanaged>HRESULT D3DXOptimizeVertices([In] const void* pbIndices,[In] unsigned int cFaces,[In] unsigned int cVertices,[In] BOOL b32BitIndices,[In, Buffer] int* pVertexRemap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX.OptimizeVertices(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Generates an optimized vertex remapping for a triangle list. This function is commonly used after applying the face remapping generated by <see cref="M:SharpDX.Direct3D9.D3DX.OptimizeFaces(System.Int32[],System.Int32,System.Int32)"/>.
            </summary>
            <param name="indices">The indices.</param>
            <param name="faceCount">The face count.</param>
            <param name="vertexCount">The vertex count.</param>
            <returns>A buffer that will contain the new index for each vertex. The value stored in pVertexRemap for a given element is the source vertex location in the new vertex ordering.</returns>
            <unmanaged>HRESULT D3DXOptimizeVertices([In] const void* pbIndices,[In] unsigned int cFaces,[In] unsigned int cVertices,[In] BOOL b32BitIndices,[In, Buffer] int* pVertexRemap)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Device">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.Device"/> interface to perform DrawPrimitive-based rendering, create resources, work with system-level variables, adjust gamma ramp levels, work with palettes, and create shaders.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9']/*"/>	
            <unmanaged>IDirect3DDevice9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.#ctor(SharpDX.Direct3D9.Direct3D,System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[])">
            <summary>	
            Creates a device to represent the display adapter.	
            </summary>	
            <remarks>	
             This method returns a fully working device interface, set to the required display mode (or windowed), and allocated with the appropriate back buffers. To begin rendering, the application needs only to create and set a depth buffer (assuming EnableAutoDepthStencil is FALSE in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). When you create a Direct3D device, you supply two different window parameters: a focus window (hFocusWindow) and a device window (the hDeviceWindow in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). The purpose of each window is:  The focus window alerts Direct3D when an application switches from foreground mode to background mode (via Alt-Tab, a mouse click, or some other method). A single focus window is shared by each device created by an application. The device window determines the location and size of the back buffer on screen. This is used by Direct3D when the back buffer contents are copied to the front buffer during {{Present}}.  This method should not be run during the handling of WM_CREATE. An application should never pass a window handle to Direct3D while handling WM_CREATE.  Any call to create, release, or reset the device must be done using the same thread as the window procedure of the focus window. Note that D3DCREATE_HARDWARE_VERTEXPROCESSING, D3DCREATE_MIXED_VERTEXPROCESSING, and D3DCREATE_SOFTWARE_VERTEXPROCESSING are mutually exclusive flags, and at least one of these vertex processing flags must be specified when calling this method. Back buffers created as part of the device are only lockable if D3DPRESENTFLAG_LOCKABLE_BACKBUFFER is specified in the presentation parameters. (Multisampled back buffers and depth surfaces are never lockable.) The methods {{Reset}}, <see cref="T:SharpDX.ComObject"/>, and {{TestCooperativeLevel}} must be called from the same thread that used this method to create a device. D3DFMT_UNKNOWN can be specified for the windowed mode back buffer format when calling CreateDevice, {{Reset}}, and {{CreateAdditionalSwapChain}}. This means the application does not have to query the current desktop format before calling CreateDevice for windowed mode. For full-screen mode, the back buffer format must be specified. If you attempt to create a device on a 0x0 sized window, CreateDevice will fail. 	
            </remarks>
            <param name="direct3D">an instance of <see cref="T:SharpDX.Direct3D9.Direct3D"/></param> 
            <param name="adapter"> Ordinal number that denotes the display adapter. {{D3DADAPTER_DEFAULT}} is always the primary display adapter.  </param>
            <param name="deviceType"> Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type that denotes the desired device type. If the desired device type is not available, the method will fail.  </param>
            <param name="hFocusWindow"> The focus window alerts Direct3D when an application switches from foreground mode to background mode. See Remarks. 	   For full-screen mode, the window specified must be a top-level window. For windowed mode, this parameter may be NULL only if the hDeviceWindow member of pPresentationParameters is set to a valid, non-NULL value.  </param>
            <param name="behaviorFlags"> Combination of one or more options that control device creation. For more information, see {{D3DCREATE}}. </param>
            <param name="resentationParametersRef"> Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, describing the presentation parameters for the device to be created. If BehaviorFlags specifies {{D3DCREATE_ADAPTERGROUP_DEVICE}}, pPresentationParameters is an array. Regardless of the number of heads that exist, only one depth/stencil surface is automatically created. For Windows 2000 and Windows XP, the full-screen device display refresh rate is set in the following order:   User-specified nonzero ForcedRefreshRate registry key, if supported by the device. Application-specified nonzero refresh rate value in the presentation parameter. Refresh rate of the latest desktop mode, if supported by the device. 75 hertz if supported by the device. 60 hertz if supported by the device. Device default.  An unsupported refresh rate will default to the closest supported refresh rate below it.  For example, if the application specifies 63 hertz, 60 hertz will be used. There are no supported refresh rates below 57 hertz. pPresentationParameters is both an input and an output parameter. Calling this method may change several members including:  If BackBufferCount, BackBufferWidth, and BackBufferHeight  are 0 before the method is called, they will be changed when the method returns. If BackBufferFormat equals <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> before the method is called, it will be changed when the method returns.  </param>
            <param name="returnedDeviceInterfaceRef"> Address of a pointer to the returned <see cref="T:SharpDX.Direct3D9.Device"/> interface, which represents the created device.  </param>
            <returns>  <see cref="T:System.Int32"/>  If the method succeeds, the return value is D3D_OK. If the method fails, the return value can be one of the following: D3DERR_DEVICELOST, D3DERR_INVALIDCALL, D3DERR_NOTAVAILABLE, D3DERR_OUTOFVIDEOMEMORY. </returns>
            <unmanaged>HRESULT CreateDevice([None] UINT Adapter,[None] D3DDEVTYPE DeviceType,[None] HWND hFocusWindow,[None] int BehaviorFlags,[None] D3DPRESENT_PARAMETERS* pPresentationParameters,[None] IDirect3DDevice9** ppReturnedDeviceInterface)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Clear(SharpDX.Direct3D9.ClearFlags,SharpDX.Color4,System.Single,System.Int32)">
            <summary>
            Clears one or more surfaces such as a render target, a stencil buffer, and a depth buffer.
            </summary>
            <param name="clearFlags">Flags that specify which surfaces will be cleared.</param>
            <param name="color">The color that will be used to fill the cleared render target.</param>
            <param name="zdepth">The value that will be used to fill the cleared depth buffer.</param>
            <param name="stencil">The value that will be used to fill the cleared stencil buffer.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::Clear([None] int Count,[In, Buffer, Optional] const D3DRECT* pRects,[None] int Flags,[None] D3DCOLOR Color,[None] float Z,[None] int Stencil)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Clear(SharpDX.Direct3D9.ClearFlags,System.Int32,System.Single,System.Int32)">
            <summary>
            Clears one or more surfaces such as a render target, a stencil buffer, and a depth buffer.
            </summary>
            <param name="clearFlags">Flags that specify which surfaces will be cleared.</param>
            <param name="color">The color that will be used to fill the cleared render target.</param>
            <param name="zdepth">The value that will be used to fill the cleared depth buffer.</param>
            <param name="stencil">The value that will be used to fill the cleared stencil buffer.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::Clear([None] int Count,[In, Buffer, Optional] const D3DRECT* pRects,[None] int Flags,[None] D3DCOLOR Color,[None] float Z,[None] int Stencil)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Clear(SharpDX.Direct3D9.ClearFlags,SharpDX.Color4,System.Single,System.Int32,SharpDX.Rectangle[])">
            <summary>
            Clears one or more surfaces such as a render target, a stencil buffer, and a depth buffer.
            </summary>
            <param name="clearFlags">Flags that specify which surfaces will be cleared.</param>
            <param name="color">The color that will be used to fill the cleared render target.</param>
            <param name="zdepth">The value that will be used to fill the cleared depth buffer.</param>
            <param name="stencil">The value that will be used to fill the cleared stencil buffer.</param>
            <param name="rectangles">The areas on the surfaces that will be cleared.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::Clear([None] int Count,[In, Buffer, Optional] const D3DRECT* pRects,[None] int Flags,[None] D3DCOLOR Color,[None] float Z,[None] int Stencil)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Clear(SharpDX.Direct3D9.ClearFlags,System.Int32,System.Single,System.Int32,SharpDX.Rectangle[])">
            <summary>
            Clears one or more surfaces such as a render target, a stencil buffer, and a depth buffer.
            </summary>
            <param name="clearFlags">Flags that specify which surfaces will be cleared.</param>
            <param name="color">The color that will be used to fill the cleared render target.</param>
            <param name="zdepth">The value that will be used to fill the cleared depth buffer.</param>
            <param name="stencil">The value that will be used to fill the cleared stencil buffer.</param>
            <param name="rectangles">The areas on the surfaces that will be cleared.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::Clear([None] int Count,[In, Buffer, Optional] const D3DRECT* pRects,[None] int Flags,[None] D3DCOLOR Color,[None] float Z,[None] int Stencil)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.ColorFill(SharpDX.Direct3D9.Surface,SharpDX.Color4)">
            <summary>	
            Allows an application to fill a rectangular area of a D3DPOOL_DEFAULT surface with a specified color.	
            </summary>	
            <remarks>	
             This method can only be applied to a render target, a render-target texture surface, or an off-screen plain surface with a pool type of D3DPOOL_DEFAULT. IDirect3DDevice9::ColorFill will work with all formats. However, when using a reference or software device, the only formats supported are D3DFMT_X1R5G5B5, D3DFMT_A1R5G5B5, D3DFMT_R5G6B5, D3DFMT_X8R8G8B8, D3DFMT_A8R8G8B8, D3DFMT_YUY2, D3DFMT_G8R8_G8B8, D3DFMT_UYVY, D3DFMT_R8G8_B8G8, D3DFMT_R16F, D3DFMT_G16R16F, D3DFMT_A16B16G16R16F, D3DFMT_R32F, D3DFMT_G32R32F, and D3DFMT_A32B32G32R32F. When using a DirectX 7 or DirectX 8.x driver, the only YUV formats supported are D3DFMT_UYVY and D3DFMT_YUY2. 	
            </remarks>	
            <param name="surfaceRef"> Pointer to the surface to be filled. </param>
            <param name="color"> Color used for filling. </param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::ColorFill([None] IDirect3DSurface9* pSurface,[In, Optional] const RECT* pRect,[None] D3DCOLOR color)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawIndexedUserPrimitives``2(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,``0[],SharpDX.Direct3D9.Format,``1[])">
            <summary>
            Draws the indexed user primitives.
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="minimumVertexIndex">Minimum index of the vertex.</param>
            <param name="vertexCount">The vertex count.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="indexData">The index data.</param>
            <param name="indexDataFormat">The index data format.</param>
            <param name="vertexData">The vertex data.</param>
            <param name="vertexStride">The vertex stride.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawIndexedUserPrimitives``2(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,``0[],SharpDX.Direct3D9.Format,``1[])">
            <summary>
            Draws the indexed user primitives.
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="startIndex">The start index.</param>
            <param name="minimumVertexIndex">Minimum index of the vertex.</param>
            <param name="vertexCount">The vertex count.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="indexData">The index data.</param>
            <param name="indexDataFormat">The index data format.</param>
            <param name="vertexData">The vertex data.</param>
            <param name="vertexStride">The vertex stride.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawIndexedUserPrimitives``2(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[],SharpDX.Direct3D9.Format,``1[])">
            <summary>
            Draws the indexed user primitives.
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="startIndex">The start index.</param>
            <param name="startVertex">The start vertex.</param>
            <param name="minimumVertexIndex">Minimum index of the vertex.</param>
            <param name="vertexCount">The vertex count.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="indexData">The index data.</param>
            <param name="indexDataFormat">The index data format.</param>
            <param name="vertexData">The vertex data.</param>
            <param name="vertexStride">The vertex stride.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawRectanglePatch(System.Int32,System.Single[])">
            <summary>
            Draws the rectangle patch.
            </summary>
            <param name="handle">The handle.</param>
            <param name="segmentCounts">The segment counts.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::DrawRectPatch([In] unsigned int Handle,[In, Buffer] const float* pNumSegs,[In] const void* pRectPatchInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawRectanglePatch(System.Int32,System.Single[],SharpDX.Direct3D9.RectanglePatchInfo)">
            <summary>
            Draws the rectangle patch.
            </summary>
            <param name="handle">The handle.</param>
            <param name="segmentCounts">The segment counts.</param>
            <param name="info">The info.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged href="bb174373">IDirect3DDevice9::DrawRectPatch</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawTrianglePatch(System.Int32,System.Single[])">
            <summary>
            Draws the triangle patch.
            </summary>
            <param name="handle">The handle.</param>
            <param name="segmentCounts">The segment counts.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::DrawTriPatch([In] unsigned int Handle,[In, Buffer] const float* pNumSegs,[In] const void* pTriPatchInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawTrianglePatch(System.Int32,System.Single[],SharpDX.Direct3D9.TrianglePatchInfo)">
            <summary>
            Draws the triangle patch.
            </summary>
            <param name="handle">The handle.</param>
            <param name="segmentCounts">The segment counts.</param>
            <param name="info">The info.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawUserPrimitives``1(SharpDX.Direct3D9.PrimitiveType,System.Int32,``0[])">
            <summary>
            Draws the user primitives.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawUserPrimitives``1(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,``0[])">
            <summary>
            Draws the user primitives.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="startIndex">The start index.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetBackBuffer(System.Int32,System.Int32)">
            <summary>
            Gets the back buffer.
            </summary>
            <param name="swapChain">The swap chain.</param>
            <param name="backBuffer">The back buffer.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetPaletteEntries(System.Int32)">
            <summary>
            Gets the palette entries.
            </summary>
            <param name="paletteNumber">The palette number.</param>
            <returns>An array of <see cref="T:SharpDX.Direct3D9.PaletteEntry"/></returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetPixelShaderBooleanConstant(System.Int32,System.Int32)">
            <summary>
            Gets the pixel shader boolean constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="count">The count.</param>
            <returns>An array of boolean constants</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetPixelShaderFloatConstant(System.Int32,System.Int32)">
            <summary>
            Gets the pixel shader float constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="count">The count.</param>
            <returns>An array of float constants</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetPixelShaderIntegerConstant(System.Int32,System.Int32)">
            <summary>
            Gets the pixel shader integer constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="count">The count.</param>
            <returns>An array of int constants</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetRenderState(SharpDX.Direct3D9.RenderState)">
            <summary>
            Gets the state of the render.
            </summary>
            <param name="state">The state.</param>
            <returns>The render state value</returns>
            <unmanaged>HRESULT IDirect3DDevice9::GetRenderState([In] D3DRENDERSTATETYPE State,[In] void* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetRenderState``1(SharpDX.Direct3D9.RenderState)">
            <summary>
            Gets the state of the render.
            </summary>
            <typeparam name="T">Type of the state value.</typeparam>
            <param name="state">The state.</param>
            <returns>
            The render state value
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::GetRenderState([In] D3DRENDERSTATETYPE State,[In] void* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState)">
            <summary>
            Gets the state of the sampler.
            </summary>
            <param name="sampler">The sampler.</param>
            <param name="state">The state.</param>
            <returns>
            The sampler state value
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::GetSamplerState([In] unsigned int Sampler,[In] D3DSAMPLERSTATETYPE Type,[In] void* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetSamplerState``1(System.Int32,SharpDX.Direct3D9.SamplerState)">
            <summary>
            Gets the state of the sampler.
            </summary>
            <typeparam name="T">Type of the sampler statet value</typeparam>
            <param name="sampler">The sampler.</param>
            <param name="state">The state.</param>
            <returns>
            The sampler state value
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::GetSamplerState([In] unsigned int Sampler,[In] D3DSAMPLERSTATETYPE Type,[In] void* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage)">
            <summary>
            Gets the state of the texture stage.
            </summary>
            <param name="stage">The stage.</param>
            <param name="type">The type.</param>
            <returns>
            The texture stage state.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::GetTextureStageState([In] unsigned int Stage,[In] D3DTEXTURESTAGESTATETYPE Type,[In] void* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetTextureStageState``1(System.Int32,SharpDX.Direct3D9.TextureStage)">
            <summary>
            Gets the state of the texture stage.
            </summary>
            <typeparam name="T">Type of the texture stage state</typeparam>
            <param name="stage">The stage.</param>
            <param name="type">The type.</param>
            <returns>
            The texture stage state.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::GetTextureStageState([In] unsigned int Stage,[In] D3DTEXTURESTAGESTATETYPE Type,[In] void* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetVertexShaderBooleanConstant(System.Int32,System.Int32)">
            <summary>
            Gets the vertex shader boolean constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="count">The count.</param>
            <returns>An array of boolean constants</returns>
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexShaderConstantB([In] unsigned int StartRegister,[In] void* pConstantData,[In] unsigned int BoolCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetVertexShaderFloatConstant(System.Int32,System.Int32)">
            <summary>
            Gets the vertex shader float constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="count">The count.</param>
            <returns>An array of float constants</returns>
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexShaderConstantF([In] unsigned int StartRegister,[In, Buffer] float* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetVertexShaderIntegerConstant(System.Int32,System.Int32)">
            <summary>
            Gets the vertex shader integer constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="count">The count.</param>
            <returns>An array of int constants</returns>
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexShaderConstantI([In] unsigned int StartRegister,[Out] int* pConstantData,[In] unsigned int Vector4iCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetCursorPosition(System.Drawing.Point,System.Boolean)">
            <summary>
            Sets the cursor position.
            </summary>
            <param name="point">The point.</param>
            <param name="flags">if set to <c>true</c> [flags].</param>
            <unmanaged>void IDirect3DDevice9::SetCursorPosition([In] int X,[In] int Y,[In] unsigned int Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetCursorPosition(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the cursor position.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="flags">if set to <c>true</c> [flags].</param>
            <unmanaged>void IDirect3DDevice9::SetCursorPosition([In] int X,[In] int Y,[In] unsigned int Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetCursorProperties(System.Drawing.Point,SharpDX.Direct3D9.Surface)">
            <summary>
            Sets the cursor properties.
            </summary>
            <param name="point">The point.</param>
            <param name="cursorBitmapRef">The cursor bitmap ref.</param>
            <returns></returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetCursorProperties([In] unsigned int XHotSpot,[In] unsigned int YHotSpot,[In] IDirect3DSurface9* pCursorBitmap)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetGammaRamp(System.Int32,SharpDX.Direct3D9.GammaRamp@,System.Boolean)">
            <summary>
            Sets the gamma ramp.
            </summary>
            <param name="swapChain">The swap chain.</param>
            <param name="rampRef">The ramp ref.</param>
            <param name="calibrate">if set to <c>true</c> [calibrate].</param>
            <unmanaged>void IDirect3DDevice9::SetGammaRamp([In] unsigned int iSwapChain,[In] unsigned int Flags,[In] const D3DGAMMARAMP* pRamp)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Present">
            <summary>
            Presents the contents of the next buffer in the sequence of back buffers to the screen.
            </summary>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>IDirect3DDevice9::Present</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Present(SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Presents the contents of the next buffer in the sequence of back buffers to the screen.
            </summary>
            <param name="sourceRectangle">The area of the back buffer that should be presented.</param>
            <param name="destinationRectangle">The area of the front buffer that should receive the result of the presentation.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>IDirect3DDevice9::Present</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Present(SharpDX.Rectangle,SharpDX.Rectangle,System.IntPtr)">
            <summary>
            Presents the contents of the next buffer in the sequence of back buffers to the screen.
            </summary>
            <param name="sourceRectangle">The area of the back buffer that should be presented.</param>
            <param name="destinationRectangle">The area of the front buffer that should receive the result of the presentation.</param>
            <param name="windowOverride">The destination window whose client area is taken as the target for this presentation.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>IDirect3DDevice9::Present</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Present(SharpDX.Rectangle,SharpDX.Rectangle,System.IntPtr,System.Drawing.Region)">
            <summary>
            Presents the contents of the next buffer in the sequence of back buffers to the screen.
            </summary>
            <param name="sourceRectangle">The area of the back buffer that should be presented.</param>
            <param name="destinationRectangle">The area of the front buffer that should receive the result of the presentation.</param>
            <param name="windowOverride">The destination window whose client area is taken as the target for this presentation.</param>
            <param name="region">Specifies a region on the back buffer that contains the minimal amount of pixels that need to be updated.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>IDirect3DDevice9::Present</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.ResetStreamSourceFrequency(System.Int32)">
            <summary>
            Resets the stream source frequency by setting the frequency to 1.
            </summary>
            <param name="stream">The stream index.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetStreamSourceFreq([In] unsigned int StreamNumber,[In] unsigned int Setting)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,SharpDX.Matrix[])">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,SharpDX.Vector4[])">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,System.Boolean[])">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantB([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int BoolCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,System.Int32[])">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantI([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4iCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,System.Single[])">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,SharpDX.Matrix*)">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,SharpDX.Matrix)">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,SharpDX.Matrix*,System.Int32)">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,SharpDX.Matrix[],System.Int32,System.Int32)">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,SharpDX.Vector4[],System.Int32,System.Int32)">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,System.Boolean[],System.Int32,System.Int32)">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantB([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int BoolCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantI([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4iCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstant(System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>
            Sets the pixel shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetRenderState(SharpDX.Direct3D9.RenderState,System.Boolean)">
            <summary>
            Sets the RenderState.
            </summary>
            <param name="renderState">State of the render.</param>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetRenderState([In] D3DRENDERSTATETYPE State,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetRenderState(SharpDX.Direct3D9.RenderState,System.Single)">
            <summary>
            Sets the RenderState.
            </summary>
            <param name="renderState">State of the render.</param>
            <param name="value">A float value.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetRenderState([In] D3DRENDERSTATETYPE State,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetRenderState``1(SharpDX.Direct3D9.RenderState,``0)">
            <summary>
            Sets the RenderState.
            </summary>
            <typeparam name="T">Type of the enum value</typeparam>
            <param name="renderState">State of the render.</param>
            <param name="value">An enum value.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetRenderState([In] D3DRENDERSTATETYPE State,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,SharpDX.Direct3D9.TextureFilter)">
            <summary>
            Sets the SamplerState.
            </summary>
            <param name="sampler">The sampler.</param>
            <param name="type">The type.</param>
            <param name="textureFilter">The texture filter.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetSamplerState([In] unsigned int Sampler,[In] D3DSAMPLERSTATETYPE Type,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,SharpDX.Direct3D9.TextureAddress)">
            <summary>
            Sets the SamplerState.
            </summary>
            <param name="sampler">The sampler.</param>
            <param name="type">The type.</param>
            <param name="textureAddress">The texture address.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetSamplerState([In] unsigned int Sampler,[In] D3DSAMPLERSTATETYPE Type,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,System.Single)">
            <summary>
            Sets the SamplerState.
            </summary>
            <param name="sampler">The sampler.</param>
            <param name="type">The type.</param>
            <param name="value">A float value.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetSamplerState([In] unsigned int Sampler,[In] D3DSAMPLERSTATETYPE Type,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetStreamSourceFrequency(System.Int32,System.Int32,SharpDX.Direct3D9.StreamSource)">
            <summary>
            Sets the stream source frequency.
            </summary>
            <param name="stream">The stream.</param>
            <param name="frequency">The frequency.</param>
            <param name="source">The source.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetStreamSourceFreq([In] unsigned int StreamNumber,[In] unsigned int Setting)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,SharpDX.Direct3D9.TextureArgument)">
            <summary>
            Sets the state of the texture stage.
            </summary>
            <param name="stage">The stage.</param>
            <param name="type">The type.</param>
            <param name="textureArgument">The texture argument.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetTextureStageState([In] unsigned int Stage,[In] D3DTEXTURESTAGESTATETYPE Type,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,SharpDX.Direct3D9.TextureOperation)">
            <summary>
            Sets the state of the texture stage.
            </summary>
            <param name="stage">The stage.</param>
            <param name="type">The type.</param>
            <param name="textureOperation">The texture operation.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetTextureStageState([In] unsigned int Stage,[In] D3DTEXTURESTAGESTATETYPE Type,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,SharpDX.Direct3D9.TextureTransform)">
            <summary>
            Sets the state of the texture stage.
            </summary>
            <param name="stage">The stage.</param>
            <param name="type">The type.</param>
            <param name="textureTransform">The texture transform.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetTextureStageState([In] unsigned int Stage,[In] D3DTEXTURESTAGESTATETYPE Type,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,System.Single)">
            <summary>
            Sets the state of the texture stage.
            </summary>
            <param name="stage">The stage.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetTextureStageState([In] unsigned int Stage,[In] D3DTEXTURESTAGESTATETYPE Type,[In] unsigned int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetTransform(SharpDX.Direct3D9.TransformState,SharpDX.Matrix@)">
            <summary>
            Sets the transform.
            </summary>
            <param name="state">The state.</param>
            <param name="matrixRef">The matrix ref.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetTransform([In] D3DTRANSFORMSTATETYPE State,[In] const D3DMATRIX* pMatrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetTransform(System.Int32,SharpDX.Matrix@)">
            <summary>
            Sets the transform.
            </summary>
            <param name="index">The index.</param>
            <param name="matrixRef">The matrix ref.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetTransform([In] D3DTRANSFORMSTATETYPE State,[In] const D3DMATRIX* pMatrix)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,SharpDX.Matrix[])">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,SharpDX.Vector4[])">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,System.Boolean[])">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantB([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int BoolCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,System.Int32[])">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantI([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4iCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,System.Single[])">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,SharpDX.Matrix*)">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,SharpDX.Matrix)">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,SharpDX.Matrix*,System.Int32)">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,SharpDX.Matrix[],System.Int32,System.Int32)">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,SharpDX.Vector4[],System.Int32,System.Int32)">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,System.Boolean[],System.Int32,System.Int32)">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantB([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int BoolCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantI([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4iCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstant(System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>
            Sets the vertex shader constant.
            </summary>
            <param name="startRegister">The start register.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.StretchRectangle(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.TextureFilter)">
            <summary>
            Stretches the rectangle.
            </summary>
            <param name="sourceSurfaceRef">The source surface ref.</param>
            <param name="destSurfaceRef">The dest surface ref.</param>
            <param name="filter">The filter.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::StretchRect([In] IDirect3DSurface9* pSourceSurface,[In, Optional] const RECT* pSourceRect,[In] IDirect3DSurface9* pDestSurface,[In, Optional] const RECT* pDestRect,[In] D3DTEXTUREFILTERTYPE Filter)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)">
            <summary>
            Updates the surface.
            </summary>
            <param name="sourceSurfaceRef">The source surface ref.</param>
            <param name="destinationSurfaceRef">The destination surface ref.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::UpdateSurface([In] IDirect3DSurface9* pSourceSurface,[In] const RECT* pSourceRect,[In] IDirect3DSurface9* pDestinationSurface,[In] const POINT* pDestPoint)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Device.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Device"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.TestCooperativeLevel">
            <summary>	
            Reports the current cooperative-level status of the Direct3D device for a windowed or full-screen application.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>, indicating that the device is operational and the calling application can continue. If the method fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceNotReset"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DriverInternalError"/>.</returns>	
            <remarks>	
            If the device is lost but cannot be restored at the current time, <see cref="M:SharpDX.Direct3D9.Device.TestCooperativeLevel"/> returns the <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/> return code. This would be the case, for example, when a full-screen device has lost focus. If an application detects a lost device, it should pause and periodically call <see cref="M:SharpDX.Direct3D9.Device.TestCooperativeLevel"/> until it receives a return value of <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceNotReset"/>. The application may then attempt to reset the device by calling <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> and, if this succeeds, restore the necessary resources and resume normal operation. Note that <see cref="M:SharpDX.Direct3D9.Device.Present"/> will return <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/> if the device is either "lost" or "not reset".A call to <see cref="M:SharpDX.Direct3D9.Device.TestCooperativeLevel"/> will fail if called on a different thread than that used to create the device being reset.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::TestCooperativeLevel']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::TestCooperativeLevel()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetAvailableTextureMem">
            <summary>	
            Returns an estimate of the amount of available texture memory.	
            </summary>	
            <returns>The function returns an estimate of the available texture memory.</returns>	
            <remarks>	
            The returned value is rounded to the nearest MB. This is done to reflect the fact that video memory estimates are never precise due to alignment and other issues that affect consumption by certain resources. Applications can use this value to make gross estimates of memory availability to make large-scale resource decisions such as how many levels of a mipmap to attempt to allocate, but applications cannot use this value to make small-scale decisions such as if there is enough memory left to allocate another resource.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetAvailableTextureMem']/*"/>	
            <unmanaged>unsigned int IDirect3DDevice9::GetAvailableTextureMem()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.EvictManagedResources">
            <summary>	
            Evicts all managed resources, including both Direct3D and driver-managed resources.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DERR_COMMAND_UNPARSED.</returns>	
            <remarks>	
            This function causes only the <see cref="F:SharpDX.Direct3D9.Pool.Default"/> copy of resources to be evicted. The resource copy in system memory is retained. See <see cref="T:SharpDX.Direct3D9.Pool"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::EvictManagedResources']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::EvictManagedResources()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetDirect3D(SharpDX.Direct3D9.Direct3D@)">
            <summary>	
            Returns an interface to the instance of the Direct3D object that created the device.	
            </summary>	
            <param name="d3D9Out"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface, representing the interface of the Direct3D object that created the device. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Calling <see cref="M:SharpDX.Direct3D9.Device.GetDirect3D(SharpDX.Direct3D9.Direct3D@)"/> will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetDirect3D']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetDirect3D([Out] IDirect3D9** ppD3D9)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetCapabilities(SharpDX.Direct3D9.Capabilities@)">
            <summary>	
            Retrieves the capabilities of the rendering device.	
            </summary>	
            <param name="capsRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure, describing the returned device. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            IDirect3DDevice9::GetDeviceCaps retrieves the software vertex pipeline capabilities when the device is being used in software vertex processing mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetDeviceCaps']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetDeviceCaps([Out] D3DCAPS9* pCaps)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetDisplayMode(System.Int32)">
            <summary>	
            Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.	
            </summary>	
            <param name="iSwapChain"><para>An unsigned integer specifying the swap chain.</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayMode"/> structure containing data about the display mode of the adapter. As opposed to the display mode of the device, which may not be active if the device does not own full-screen mode. </para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetDisplayMode']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetDisplayMode([In] unsigned int iSwapChain,[Out] D3DDISPLAYMODE* pMode)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetCreationParameters(SharpDX.Direct3D9.CreationParameters@)">
            <summary>	
            Retrieves the creation parameters of the device.	
            </summary>	
            <param name="parametersRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.CreationParameters"/> structure, describing the creation parameters of the device. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.D3DERR_INVALIDCALL is returned if the argument is invalid.</returns>	
            <remarks>	
            You can query the AdapterOrdinal member of the returned <see cref="T:SharpDX.Direct3D9.CreationParameters"/> structure to retrieve the ordinal of the adapter represented by this device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetCreationParameters']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetCreationParameters([Out] D3DDEVICE_CREATION_PARAMETERS* pParameters)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetCursorProperties(System.Int32,System.Int32,SharpDX.Direct3D9.Surface)">
            <summary>	
            Sets properties for the cursor.	
            </summary>	
            <param name="xHotSpot"><para>X-coordinate offset (in pixels) that marks the center of the cursor. The offset is relative to the upper-left corner of the cursor. When the cursor is given a new position, the image is drawn at an offset from this new position determined by subtracting the hot spot coordinates from the position. </para></param>	
            <param name="yHotSpot"><para>Y-coordinate offset (in pixels) that marks the center of the cursor. The offset is relative to the upper-left corner of the cursor. When the cursor is given a new position, the image is drawn at an offset from this new position determined by subtracting the hot spot coordinates from the position. </para></param>	
            <param name="cursorBitmapRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface. This parameter must point to an 8888 ARGB surface (format <see cref="F:SharpDX.Direct3D9.Format.A8R8G8B8"/>). The contents of this surface will be copied and potentially format-converted into an internal buffer from which the cursor is displayed. The dimensions of this surface must be less than the dimensions of the display mode, and must be a power of two in each direction, although not necessarily the same power of two. The alpha channel must be either 0.0 or 1.0. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            An operating system cursor is created and used under either of these conditions:The hardware has set <see cref="F:SharpDX.Direct3D9.CursorCaps.Color"/> (see <see cref="T:SharpDX.Direct3D9.CursorCaps"/>), and the cursor size is 32x32 (which is the cursor size in the operating system). The application is running in windowed mode.Otherwise, DirectX uses an emulated cursor. An application uses <see cref="M:SharpDX.Direct3D9.Device.SetCursorPosition(System.Drawing.Point,System.Boolean)"/> to move an emulated cursor to follow mouse movement.It is recommended for applications to always trap WM_MOUSEMOVE events and call DXSetCursorPosition.Direct3D cursor functions use either GDI cursor or software emulation, depending on the hardware. Users typically want to respond to a WM_SETCURSOR message. For example, they might want to write the message handler as follows:<code>	
             case WM_SETCURSOR:	
            // Turn off window cursor. 	
            SetCursor( <c>null</c> );	
            m_pd3dDevice-&gt;ShowCursor( TRUE );	
            return TRUE; // Prevent Windows from setting cursor to window class cursor.	
            break;	
            	
            </code>Or, users might want to call the <see cref="M:SharpDX.Direct3D9.Device.SetCursorProperties(System.Drawing.Point,SharpDX.Direct3D9.Surface)"/> method if they want to change the cursor.The application can determine what hardware support is available for cursors by examining appropriate members of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure. Typically, hardware supports only 32x32 cursors and, when windowed, the system might support only 32x32 cursors. In this case, <see cref="M:SharpDX.Direct3D9.Device.SetCursorProperties(System.Drawing.Point,SharpDX.Direct3D9.Surface)"/> still succeeds but the cursor might be reduced to that size. The hot spot is scaled appropriately.The cursor does not survive when the device is lost. This method must be called after the device is reset.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetCursorProperties']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetCursorProperties([In] unsigned int XHotSpot,[In] unsigned int YHotSpot,[In] IDirect3DSurface9* pCursorBitmap)</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Direct3D9.Device.SetCursorPosition(System.Int32,System.Int32,System.Int32)" -->
        <member name="M:SharpDX.Direct3D9.Device.GetSetShowCursor(System.Boolean)">
            <summary>	
            Displays or hides the cursor.	
            </summary>	
            <param name="bShow"><para>If bShow is TRUE, the cursor is shown. If bShow is <see cref="F:SharpDX.Result.False"/>, the cursor is hidden. </para></param>	
            <returns>Value indicating whether the cursor was previously visible. TRUE if the cursor was previously visible, or <see cref="F:SharpDX.Result.False"/> if the cursor was not previously visible.</returns>	
            <remarks>	
            Direct3D cursor functions use either GDI cursor or software emulation, depending on the hardware. Users usually want to respond to a WM_SETCURSOR message. For example, the users might want to write the message handler like this:<code>	
             case WM_SETCURSOR: // Turn off window cursor  SetCursor( <c>null</c> ); m_pd3dDevice-&gt;ShowCursor( TRUE ); return TRUE; // prevent Windows from setting cursor to window class cursor break;	
            	
            </code>Or users might want to call the <see cref="M:SharpDX.Direct3D9.Device.SetCursorProperties(System.Drawing.Point,SharpDX.Direct3D9.Surface)"/> method if they want to change the cursor. See the code in the DirectX Graphics C/C++ Samples for more detail.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::ShowCursor']/*"/>	
            <unmanaged>BOOL IDirect3DDevice9::ShowCursor([In] BOOL bShow)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateAdditionalSwapChain(SharpDX.Direct3D9.PresentParameters@,SharpDX.Direct3D9.SwapChain)">
            <summary>	
            Creates an additional swap chain for rendering multiple views.	
            </summary>	
            <param name="presentationParametersRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, containing the presentation parameters for the new swap chain. This value cannot be <c>null</c>.</para> <para>Calling this method changes the value of members of the <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure.</para>  If BackBufferCount == 0, calling CreateAdditionalSwapChain will increase it to 1. If the application is in windowed mode, and if either the BackBufferWidth or the BackBufferHeight == 0, they will be set to the client area width and height of the hwnd.</param>	
            <param name="swapChainRef"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.SwapChain"/> interface, representing the additional swap chain. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            There is always at least one swap chain (the implicit swap chain) for each device because Direct3D 9 has one swap chain as a property of the device.Note that any given device can support only one full-screen swap chain.D3DFMT_UNKNOWN can be specified for the windowed mode back buffer format when calling <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/>, <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> and CreateAdditionalSwapChain. This means the application does not have to query the current desktop format before calling CreateDevice for windowed mode. For full-screen mode, the back buffer format must be specified.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateAdditionalSwapChain']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateAdditionalSwapChain([In] D3DPRESENT_PARAMETERS* pPresentationParameters,[Out, Fast] IDirect3DSwapChain9** pSwapChain)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetSwapChain(System.Int32)">
            <summary>	
            Gets a reference to a swap chain.	
            </summary>	
            <param name="iSwapChain"><para>The swap chain ordinal value.  For more information, see NumberOfAdaptersInGroup in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <returns><para>Pointer to an <see cref="T:SharpDX.Direct3D9.SwapChain"/> interface that will receive a copy of swap chain. </para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetSwapChain']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetSwapChain([In] unsigned int iSwapChain,[Out] IDirect3DSwapChain9** pSwapChain)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetSwapChainCount">
            <summary>	
            Gets the number of implicit swap chains.	
            </summary>	
            <returns>Number of implicit swap chains. See Remarks.</returns>	
            <remarks>	
            Implicit swap chains are created by the device during <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/>. This method returns the number of swap chains created by CreateDevice.An application may create additional swap chains using <see cref="M:SharpDX.Direct3D9.Device.CreateAdditionalSwapChain(SharpDX.Direct3D9.PresentParameters@,SharpDX.Direct3D9.SwapChain)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetNumberOfSwapChains']/*"/>	
            <unmanaged>unsigned int IDirect3DDevice9::GetNumberOfSwapChains()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)">
            <summary>	
            Resets the type, size, and format of the swap chain.	
            </summary>	
            <param name="presentationParametersRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, describing the new presentation parameters. This value cannot be <c>null</c>.  </para> <para>When switching to full-screen mode, Direct3D will try to find a desktop format that matches the back buffer format, so that back buffer and front buffer formats will be identical (to eliminate the need for color conversion).</para> <para>When this method returns:</para>  BackBufferCount, BackBufferWidth, and BackBufferHeight are set to zero. BackBufferFormat is set to <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> for windowed mode only; a full-screen mode must specify a format.</param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceRemoved"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DriverInternalError"/>, or <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/> (see D3DERR).</returns>	
            <remarks>	
            If a call to <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> fails, the device will be placed in the "lost" state (as indicated by a return value of <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/> from a call to <see cref="M:SharpDX.Direct3D9.Device.TestCooperativeLevel"/>) unless it is already in the "not reset" state (as indicated by a return value of <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceNotReset"/> from a call to <see cref="M:SharpDX.Direct3D9.Device.TestCooperativeLevel"/>). Refer to <see cref="M:SharpDX.Direct3D9.Device.TestCooperativeLevel"/> and Lost Devices (Direct3D 9) for further information concerning the use of <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> in the context of lost devices.Calling <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> causes all texture memory surfaces to be lost, managed textures to be flushed from video memory, and all state information to be lost. Before calling the <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> method for a device, an application should release any explicit render targets, depth stencil surfaces, additional swap chains, state blocks, and <see cref="F:SharpDX.Direct3D9.Pool.Default"/> resources associated with the device.There are two different types of swap chains: full-screen or windowed. If the new swap chain is full-screen, the adapter will be placed in the display mode that matches the new size.Direct3D 9 applications can expect messages to be sent to them during this call (for example, before this call is returned); applications should take precautions not to call into Direct3D at this time. In addition, when <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> fails, the only valid methods that can be called are <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>, <see cref="M:SharpDX.Direct3D9.Device.TestCooperativeLevel"/>, and the various Release member functions. Calling any other method can result in an exception.A call to <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> will fail if called on a different thread than that used to create the device being reset.Pixel shaders and vertex shaders survive <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> calls for Direct3D 9. They do not need to be re-created explicitly by the application.<see cref="F:SharpDX.Direct3D9.Format.Unknown"/> can be specified for the windowed mode back buffer format when calling <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/>, <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>, and <see cref="M:SharpDX.Direct3D9.Device.CreateAdditionalSwapChain(SharpDX.Direct3D9.PresentParameters@,SharpDX.Direct3D9.SwapChain)"/>. This means the application does not have to query the current desktop format before calling <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/> for windowed mode. For full-screen mode, the back buffer format must be specified. Setting BackBufferCount equal to zero  (BackBufferCount = 0) results in one back buffer.When trying to reset more than one display adapter in a group, set pPresentationParameters to point to an array of <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structures, one for each display in the adapter group.If a multihead device was created with <see cref="F:SharpDX.Direct3D9.CreateFlags.AdapterGroupDevice"/>, <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> requires an array of <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structures wherein each structure must specify a full-screen display. To switch back to windowed mode, the application must destroy the device and re-create a non-multihead device in windowed mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::Reset']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::Reset([In] D3DPRESENT_PARAMETERS* pPresentationParameters)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Present(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>	
            Presents the contents of the next buffer in the sequence of back buffers owned by the device.	
            </summary>	
            <param name="sourceRectRef"><para>Pointer to a value that must be <c>null</c> unless the swap chain was created with <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/>. pSourceRect is a reference to a <see cref="T:SharpDX.Rectangle"/> structure containing the source rectangle. If <c>null</c>, the entire source surface is presented. If the rectangle exceeds the source surface, the rectangle is clipped to the source surface. </para></param>	
            <param name="destRectRef"><para>Pointer to a value that must be <c>null</c> unless the swap chain was created with <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/>. pDestRect is a reference to a <see cref="T:SharpDX.Rectangle"/> structure containing the destination rectangle, in window client coordinates. If <c>null</c>, the entire client area is filled. If the rectangle exceeds the destination client area, the rectangle is clipped to the destination client area. </para></param>	
            <param name="hDestWindowOverride"><para>Pointer to a destination window whose client area is taken as the target for this presentation. If this value is <c>null</c>, then the hWndDeviceWindow member of <see cref="T:SharpDX.Direct3D9.PresentParameters"/> is taken. </para></param>	
            <param name="dirtyRegionRef"><para>Value must be <c>null</c> unless the swap chain was created with <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/>. For more information about swap chains, see Flipping Surfaces (Direct3D 9) and <see cref="T:SharpDX.Direct3D9.SwapEffect"/>. If this value is non-<c>null</c>, the contained region is expressed in back buffer coordinates. The rectangles within the region are the minimal set of pixels that need to be updated. This method takes these rectangles into account when optimizing the presentation by copying only the pixels within the region, or some suitably expanded set of rectangles. This is an aid to optimization only, and the application should not rely on the region being copied exactly. The implementation can choose to copy the whole source rectangle.  </para></param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/> or <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceRemoved"/> (see D3DERR).</returns>	
            <remarks>	
            If necessary, a stretch operation is applied to transfer the pixels within the source rectangle to the destination rectangle in the client area of the target window.Present will fail, returning <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, if called between BeginScene and EndScene pairs unless the render target is not the current render target (such as the back buffer you get from creating an additional swap chain). This is a new behavior for Direct3D 9.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::Present']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::Present([In] const void* pSourceRect,[In] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const void* pDirtyRegion)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetBackBuffer(System.Int32,System.Int32,SharpDX.Direct3D9.BackBufferType)">
            <summary>	
            Retrieves a back buffer from the device's swap chain.	
            </summary>	
            <param name="iSwapChain"><para>An unsigned integer specifying the swap chain.</para></param>	
            <param name="iBackBuffer"><para>Index of the back buffer object to return. Back buffers are numbered from 0 to the total number of back buffers minus one. A value of 0 returns the first back buffer, not the front buffer. The front buffer is not accessible through this method. Use <see cref="M:SharpDX.Direct3D9.Device.GetFrontBufferData(System.Int32)"/> to retrieve a copy of the front buffer.</para></param>	
            <param name="type"><para>Stereo view is not supported in Direct3D 9, so the only valid value for this parameter is <see cref="F:SharpDX.Direct3D9.BackBufferType.Mono"/>. </para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the returned back buffer surface. </para></returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Surface"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetBackBuffer']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetBackBuffer([In] unsigned int iSwapChain,[In] unsigned int iBackBuffer,[In] D3DBACKBUFFER_TYPE Type,[Out] IDirect3DSurface9** ppBackBuffer)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetRasterStatus(System.Int32)">
            <summary>	
            Returns information describing the raster of the monitor on which the swap chain is presented.	
            </summary>	
            <param name="iSwapChain"><para>An unsigned integer specifying the swap chain.</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.RasterStatus"/> structure filled with information about the position or other status of the raster on the monitor driven by this adapter. </para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetRasterStatus']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetRasterStatus([In] unsigned int iSwapChain,[Out] D3DRASTER_STATUS* pRasterStatus)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetDialogBoxMode(System.Boolean)">
            <summary>	
            This method allows the use of GDI dialog boxes in full-screen mode applications.	
            </summary>	
            <param name="bEnableDialogs"><para>TRUE to enable GDI dialog boxes, and <see cref="F:SharpDX.Result.False"/> to disable them.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> unless all of the following are true.The application specified a back buffer format compatible with GDI, in other words, one of <see cref="F:SharpDX.Direct3D9.Format.X1R5G5B5"/>, <see cref="F:SharpDX.Direct3D9.Format.R5G6B5"/>, or <see cref="F:SharpDX.Direct3D9.Format.X8R8G8B8"/>. The application specified no multisampling. The application specified <see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/>. The application specified <see cref="F:SharpDX.Direct3D9.PresentFlags.LockableBackBuffer"/>. The application did not specify <see cref="F:SharpDX.Direct3D9.CreateFlags.AdapterGroupDevice"/>. The application is not between BeginScene and EndScene.</returns>	
            <remarks>	
            The GDI dialog boxes must be created as child to the device window. They should also be created within the same thread that created the device because this enables the parent window to manage redrawing the child window.The method has no effect for windowed mode applications, but this setting will be respected if the application resets the device into full-screen mode. If SetDialogBoxMode succeeds in a windowed mode application, any subsequent reset to full-screen mode will be checked against the restrictions listed above.  Also, SetDialogBoxMode causes all back buffers on the swap chain to be discarded, so an application is expected to refresh its content for all back buffers after this call.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetDialogBoxMode']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetDialogBoxMode([In] BOOL bEnableDialogs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetGammaRamp(System.Int32,System.Int32,SharpDX.Direct3D9.GammaRamp@)">
            <summary>	
            Sets the gamma correction ramp for the implicit swap chain. This method will affect the entire screen (not just the active window if you are running in windowed mode).	
            </summary>	
            <param name="iSwapChain"><para>Unsigned integer specifying the swap chain.</para></param>	
            <param name="flags"><para>Indicates whether correction should be applied. Gamma correction results in a more consistent display, but can incur processing overhead and should not be used frequently. Short-duration effects, such as flashing the whole screen red, should not be calibrated, but long-duration gamma changes should be calibrated. One of the following values can be set: </para> <para></para>  ItemDescription  <para>D3DSGR_CALIBRATE</para>  <para>If a gamma calibrator is installed, the ramp will be modified before being sent to the device to account for the system and monitor response curves. If a calibrator is not installed, the ramp will be passed directly to the device.</para>   <para>D3DSGR_NO_CALIBRATION</para>  <para>No gamma correction is applied. The supplied gamma table is transferred directly to the device.</para>   <para>?</para></param>	
            <param name="rampRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.GammaRamp"/> structure, representing the gamma correction ramp to be set for the implicit swap chain. </para></param>	
            <remarks>	
            There is always at least one swap chain (the implicit swap chain) for each device, because Direct3D 9 has one swap chain as a property of the device. The gamma ramp takes effect immediately; there is no wait for a vertical sync.If the device does not support gamma ramps in the swap chain's current presentation mode (full-screen or windowed), no error return is given. Applications can check the <see cref="F:SharpDX.Direct3D9.Caps2.FullScreenGamma"/> and <see cref="F:SharpDX.Direct3D9.Caps2.CanCalibrateGamma"/> capability bits in the Caps2 member of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure to determine the capabilities of the device and whether a calibrator is installed.For windowed gamma correction presentation, use <see cref="M:SharpDX.Direct3D9.SwapChain.Present(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)"/> if the hardware supports the feature. In DirectX 8, SetGammaRamp will set the gamma ramp only on a full-screen mode application. For more information about gamma correction, see Gamma (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetGammaRamp']/*"/>	
            <unmanaged>void IDirect3DDevice9::SetGammaRamp([In] unsigned int iSwapChain,[In] unsigned int Flags,[In] const D3DGAMMARAMP* pRamp)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetGammaRamp(System.Int32)">
            <summary>	
            Retrieves the gamma correction ramp for the swap chain.	
            </summary>	
            <param name="iSwapChain"><para>An unsigned integer specifying the swap chain.</para></param>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetGammaRamp']/*"/>	
            <unmanaged>void IDirect3DDevice9::GetGammaRamp([In] unsigned int iSwapChain,[Out] D3DGAMMARAMP* pRamp)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateTexture(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Texture,System.IntPtr)">
            <summary>	
            Creates a texture resource.	
            </summary>	
            <param name="width"><para>Width of the top-level of the texture, in pixels. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's  pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by 2 results in 0, 1 will be taken instead. </para></param>	
            <param name="height"><para>Height of the top-level of the texture, in pixels. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's  pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by 2 results in 0, 1 will be taken instead. </para></param>	
            <param name="levels"><para>Number of levels in the texture. If this is zero, Direct3D will generate all texture sublevels down to 1 by 1 pixels for hardware that supports  mipmapped textures. Call <see cref="M:SharpDX.Direct3D9.BaseTexture.GetLevelCount"/> to see the number of levels generated. </para></param>	
            <param name="usage"><para>Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:SharpDX.Direct3D9.Usage"/> constants. It is  good practice to match the usage parameter with the behavior flags in <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/>. </para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the format of all levels in the texture. </para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the texture should be placed. </para></param>	
            <param name="textureOut"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface, representing the created texture resource. </para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to  share resources.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>,  <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            An application can discover support for Automatic Generation of Mipmaps (Direct3D 9) in a particular format by calling  <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormat_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Direct3D9.ResourceType,SharpDX.Direct3D9.Format)"/> with <see cref="F:SharpDX.Direct3D9.Usage.AutoGenerateMipMap"/>. If <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormat_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Direct3D9.ResourceType,SharpDX.Direct3D9.Format)"/> returns <see cref="F:SharpDX.Direct3D9.ResultCode.NoAutomaticGeneration"/>,  <see cref="M:SharpDX.Direct3D9.Device.CreateTexture(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Texture,System.IntPtr)"/> will succeed but it will return a one-level texture.In Windows Vista CreateTexture can create a texture from a system memory reference allowing the application more flexibility over the use, allocation and deletion of  the system memory.  For example, an application could pass a GDI system memory bitmap reference and get a Direct3D texture interface around it.  Using a system memory  reference with CreateTexture has the following restrictions.The pitch of the texture must be equal to the width multiplied by the number of bytes per pixel. Only textures with a single mipmap level are supported.  The Levels argument must be 1. The Pool argument must be <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/>. The pSharedHandle argument must be a valid reference to a buffer that can hold the system memory point; *pSharedHandle must  be a valid reference to system memory with a size in bytes of texture width * texture height * bytes per pixel of the texture format.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateTexture']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateTexture([In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Levels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DTexture9** ppTexture,[In] void** pSharedHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateVolumeTexture(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.VolumeTexture,System.IntPtr)">
            <summary>	
            Creates a volume texture resource.	
            </summary>	
            <param name="width"><para>Width of the top-level of the volume texture, in pixels. This value must be a power of two if the <see cref="F:SharpDX.Direct3D9.TextureCaps.VolumeMapPow2"/> member of <see cref="T:SharpDX.Direct3D9.Capabilities"/> is set. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by two results in 0 (zero), 1 will be taken instead. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="height"><para>Height of the top-level of the volume texture, in pixels. This value must be a power of two if the <see cref="F:SharpDX.Direct3D9.TextureCaps.VolumeMapPow2"/> member of <see cref="T:SharpDX.Direct3D9.Capabilities"/> is set. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by 2 results in 0 (zero), 1 will be taken instead. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="depth"><para>Depth of the top-level of the volume texture, in pixels. This value must be a power of two if the <see cref="F:SharpDX.Direct3D9.TextureCaps.VolumeMapPow2"/> member of <see cref="T:SharpDX.Direct3D9.Capabilities"/> is set. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by 2 results in 0 (zero), 1 will be taken instead. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="levels"><para>Number of levels in the texture. If this is zero, Direct3D will generate all texture sublevels down to 1x1 pixels for hardware that supports mipmapped volume textures. Call <see cref="M:SharpDX.Direct3D9.BaseTexture.GetLevelCount"/> to see the number of levels generated. </para></param>	
            <param name="usage"><para>Usage can be 0, which indicates no usage value. If usage is desired, use <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> or <see cref="F:SharpDX.Direct3D9.Usage.SoftwareProcessing"/>. For more information, see <see cref="T:SharpDX.Direct3D9.Usage"/>. </para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the format of all levels in the volume texture. </para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the volume texture should be placed. </para></param>	
            <param name="volumeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface, representing the created volume texture resource. </para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to share resources.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateVolumeTexture']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateVolumeTexture([In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Depth,[In] unsigned int Levels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DVolumeTexture9** ppVolumeTexture,[In] void** pSharedHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateCubeTexture(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.CubeTexture,System.IntPtr)">
            <summary>	
            Creates a cube texture resource.	
            </summary>	
            <param name="edgeLength"><para>Size of the edges of all the top-level faces of the cube texture. The pixel dimensions of subsequent levels of each face will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by 2 results in 0 (zero), 1 will be taken instead. </para></param>	
            <param name="levels"><para>Number of levels in each face of the cube texture. If this is zero, Direct3D will generate all cube texture sublevels down to 1x1 pixels for each face for hardware that supports mipmapped cube textures.  Call <see cref="M:SharpDX.Direct3D9.BaseTexture.GetLevelCount"/> to see the number of levels generated. </para></param>	
            <param name="usage"><para>Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:SharpDX.Direct3D9.Usage"/> constants. It is good practice to match the usage parameter in CreateCubeTexture with the behavior flags in <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/>. For more information, see Remarks. </para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the format of all levels in all faces of the cube texture. </para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the cube texture should be placed. </para></param>	
            <param name="cubeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface, representing the created cube texture resource. </para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to share resources.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            A mipmap (texture) is a collection of successively downsampled (mipmapped) surfaces. On the other hand, a cube texture (created by <see cref="M:SharpDX.Direct3D9.Device.CreateCubeTexture(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.CubeTexture,System.IntPtr)"/>) is a collection of six textures (mipmaps), one for each face. All faces must be present in the cube texture. Also, a cube map surface must be the same pixel size in all three dimensions (x, y, and z).An application can discover support for Automatic Generation of Mipmaps (Direct3D 9) in a particular format by calling <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormat_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Direct3D9.ResourceType,SharpDX.Direct3D9.Format)"/> with <see cref="F:SharpDX.Direct3D9.Usage.AutoGenerateMipMap"/>. If <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormat_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Direct3D9.ResourceType,SharpDX.Direct3D9.Format)"/> returns <see cref="F:SharpDX.Direct3D9.ResultCode.NoAutomaticGeneration"/>, <see cref="M:SharpDX.Direct3D9.Device.CreateCubeTexture(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.CubeTexture,System.IntPtr)"/> will succeed but it will return a one-level texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateCubeTexture']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateCubeTexture([In] unsigned int EdgeLength,[In] unsigned int Levels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DCubeTexture9** ppCubeTexture,[In] void** pSharedHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateVertexBuffer(System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.VertexFormat,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.VertexBuffer,System.IntPtr)">
            <summary>	
            Creates a vertex buffer.	
            </summary>	
            <param name="length"><para>Size of the vertex buffer, in bytes. For FVF vertex buffers, Length must be large enough to contain at least one vertex, but it need not be a multiple of the vertex size. Length is not validated for non-FVF buffers. See Remarks. </para></param>	
            <param name="usage"><para>Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:SharpDX.Direct3D9.Usage"/> constants. It is good practice to match the usage parameter in CreateVertexBuffer with the behavior flags in <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/>. For more information, see Remarks. </para></param>	
            <param name="vertexFormat"><para>Combination of <see cref="T:SharpDX.Direct3D9.VertexFormat"/>, a usage specifier that describes the vertex format of the vertices in this buffer. If this parameter is set to a valid FVF code, the created vertex buffer is an FVF vertex buffer (see Remarks). Otherwise, if this parameter is set to zero, the vertex buffer is a non-FVF vertex buffer. </para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing a valid memory class into which to place the resource. Do not set to <see cref="F:SharpDX.Direct3D9.Pool.Scratch"/>.</para></param>	
            <param name="vertexBufferOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> interface, representing the created vertex buffer resource. </para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to share resources.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            A vertex buffer can be used with either hardware or software vertex processing. This is determined by how the device and the vertex buffer are created.When a device is created, CreateDevice uses the behavior flag to determine whether to process vertices in hardware or software. There are three possibilities:Process vertices in hardware by setting <see cref="F:SharpDX.Direct3D9.CreateFlags.HardwareVertexProcessing"/>. Process vertices in software by setting <see cref="F:SharpDX.Direct3D9.CreateFlags.SoftwareVertexProcessing"/>. Process vertices in either hardware or software by setting <see cref="F:SharpDX.Direct3D9.CreateFlags.MixedVertexProcessing"/>.Mixed-mode devices might need to switch between software and hardware processing (using <see cref="M:SharpDX.Direct3D9.Device.SetSoftwareVertexProcessing(System.Boolean)"/>) after the device is created.When a vertex buffer is created, CreateVertexBuffer uses the usage parameter to decide whether to process vertices in hardware or software.If CreateDevice uses <see cref="F:SharpDX.Direct3D9.CreateFlags.HardwareVertexProcessing"/>, CreateVertexBuffer must use 0. If CreateDevice uses <see cref="F:SharpDX.Direct3D9.CreateFlags.SoftwareVertexProcessing"/>, CreateVertexBuffer must use either 0 or <see cref="F:SharpDX.Direct3D9.Usage.SoftwareProcessing"/>. For either value, vertices will be processed in software. If CreateDevice uses <see cref="F:SharpDX.Direct3D9.CreateFlags.MixedVertexProcessing"/>, CreateVertexBuffer can use either 0 or <see cref="F:SharpDX.Direct3D9.Usage.SoftwareProcessing"/>.To use a vertex buffer with a mixed mode device, create a single vertex buffer which can be used for both hardware or software processing. Use <see cref="M:SharpDX.Direct3D9.Device.SetStreamSource(System.Int32,SharpDX.Direct3D9.VertexBuffer,System.Int32,System.Int32)"/> to set the current vertex buffer and use <see cref="M:SharpDX.Direct3D9.Device.SetRenderState(SharpDX.Direct3D9.RenderState,System.Boolean)"/>, if necessary, to change the device behavior to match. It is recommended that the vertex buffer usage matches the device behavior. Note that a vertex buffer created for software processing cannot be located in video memory.The <see cref="T:SharpDX.Direct3D9.Device"/> interface supports rendering of primitives using vertex data stored in vertex buffer objects. Vertex buffers are created from the <see cref="T:SharpDX.Direct3D9.Device"/>, and are usable only with the <see cref="T:SharpDX.Direct3D9.Device"/> object from which they are created.When set to a nonzero value, which must be a valid FVF code, the FVF parameter indicates that the buffer content is to be characterized by an FVF code. A vertex buffer that is created with an FVF code is referred to as an FVF vertex buffer. For more information, see FVF Vertex Buffers (Direct3D 9).Non-FVF buffers can be used to interleave data during multipass rendering or multitexture rendering in a single pass. To do this, one buffer contains geometry data and the others contain texture coordinates for each texture to be rendered. When rendering, the buffer containing the geometry data is interleaved with each of the buffers containing the texture coordinates. If FVF buffers were used instead, each of them would need to contain identical geometry data in addition to the texture coordinate data specific to each texture rendered. This would result in either a speed or memory penalty, depending on the strategy used. For more information about texture coordinates, see Texture Coordinates (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateVertexBuffer']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateVertexBuffer([In] unsigned int Length,[In] D3DUSAGE Usage,[In] D3DFVF FVF,[In] D3DPOOL Pool,[Out, Fast] IDirect3DVertexBuffer9** ppVertexBuffer,[In] void** pSharedHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateIndexBuffer(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.IndexBuffer,System.IntPtr)">
            <summary>	
            Creates an index buffer.	
            </summary>	
            <param name="length"><para>Size of the index buffer, in bytes. </para></param>	
            <param name="usage"><para>Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <see cref="T:SharpDX.Direct3D9.Usage"/> constants. It is good practice to match the usage parameter in CreateIndexBuffer with the behavior flags in <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/>. For more information, see Remarks. </para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the format of the index buffer. For more information, see Remarks. The valid settings are the following: </para> <para></para>  ItemDescription  <para><see cref="F:SharpDX.Direct3D9.Format.Index16"/></para>  <para>Indices are 16 bits each.</para>   <para><see cref="F:SharpDX.Direct3D9.Format.Index32"/></para>  <para>Indices are 32 bits each.</para>   <para>?</para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing a valid memory class into which to place the resource. </para></param>	
            <param name="indexBufferOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface, representing the created index buffer resource. </para></param>	
            <param name="sharedHandleRef"><para>This parameter can be used in Direct3D?9 for Windows?Vista to share resources; set it to <c>null</c> to not share a resource. This parameter is not used in Direct3D?9 for operating systems earlier than Windows?Vista; set it to <c>null</c>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Index buffers are memory resources used to hold indices, they are similar to both surfaces and vertex buffers. The use of index buffers enables Direct3D to avoid unnecessary data copying and to place the buffer in the optimal memory type for the expected usage.To use index buffers, create an index buffer, lock it, fill it with indices, unlock it, pass it to <see cref="M:SharpDX.Direct3D9.Device.SetIndices(SharpDX.Direct3D9.IndexBuffer)"/>, set up the vertices, set up the vertex shader, and call <see cref="M:SharpDX.Direct3D9.Device.DrawIndexedPrimitive(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> for rendering.The MaxVertexIndex member of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure indicates the types of index buffers that are valid for rendering.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateIndexBuffer']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateIndexBuffer([In] unsigned int Length,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DIndexBuffer9** ppIndexBuffer,[In] void** pSharedHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateRenderTarget(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr)">
            <summary>	
            Creates a render-target surface.	
            </summary>	
            <param name="width"><para>Width of the render-target surface, in pixels. </para></param>	
            <param name="height"><para>Height of the render-target surface, in pixels. </para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the format of the render target. </para></param>	
            <param name="multiSample"><para>Member of the <see cref="T:SharpDX.Direct3D9.MultisampleType"/> enumerated type, which describes the multisampling buffer type. This parameter specifies the antialiasing type for this render target. When this surface is passed to <see cref="M:SharpDX.Direct3D9.Device.SetRenderTarget(System.Int32,SharpDX.Direct3D9.Surface)"/>, its multisample type must be the same as that of the depth-stencil set by <see cref="M:SharpDX.Direct3D9.Device.SetDepthStencilSurface(SharpDX.Direct3D9.Surface)"/>. </para></param>	
            <param name="multisampleQuality"><para>Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by  <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultiSampleType_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType,System.Int32@)"/>. Passing a larger value returns the error, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. The MultisampleQuality values of paired render targets, depth stencil surfaces, and the multisample type must all match.</para></param>	
            <param name="lockable"><para>Render targets are not lockable unless the application specifies TRUE for Lockable.</para> <para>Note that lockable render targets reduce performance on some graphics hardware. The readback performance (moving data from video memory to system memory) depends on the type of hardware used (AGP vs. PCI Express) and is usually far lower than upload performance (moving data from system to video memory). If you need read access to render targets, use GetRenderTargetData instead of lockable render targets.</para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to share resources.</para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface. </para></returns>	
            <remarks>	
            Render-target surfaces are placed in the <see cref="F:SharpDX.Direct3D9.Pool.Default"/> memory class.The creation of lockable, multisampled render targets is not supported.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateRenderTarget']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateRenderTarget([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Lockable,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateDepthStencilSurface(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr)">
            <summary>	
            Creates a depth-stencil resource.	
            </summary>	
            <param name="width"><para>Width of the depth-stencil surface, in pixels. </para></param>	
            <param name="height"><para>Height of the depth-stencil surface, in pixels. </para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the format of the depth-stencil surface. This value must be one of the enumerated depth-stencil formats for this device.</para></param>	
            <param name="multiSample"><para>Member of the <see cref="T:SharpDX.Direct3D9.MultisampleType"/> enumerated type, describing the multisampling buffer type. This value must be one of the allowed multisample types. When this surface is passed to <see cref="M:SharpDX.Direct3D9.Device.SetDepthStencilSurface(SharpDX.Direct3D9.Surface)"/>, its multisample type must be the same as that of the render target set by <see cref="M:SharpDX.Direct3D9.Device.SetRenderTarget(System.Int32,SharpDX.Direct3D9.Surface)"/>.</para></param>	
            <param name="multisampleQuality"><para>Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by  <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultiSampleType_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType,System.Int32@)"/>. Passing a larger value returns the error <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. The MultisampleQuality values of paired render targets, depth stencil surfaces, and the MultiSample type must all match.</para></param>	
            <param name="discard"><para>Set this flag to TRUE to enable z-buffer discarding, and <see cref="F:SharpDX.Result.False"/> otherwise.				If this flag is set, the contents of the depth stencil buffer will be invalid after calling either <see cref="M:SharpDX.Direct3D9.Device.Present"/> or <see cref="M:SharpDX.Direct3D9.Device.SetDepthStencilSurface(SharpDX.Direct3D9.Surface)"/> with a different depth surface.</para> <para>This flag has the same behavior as the constant,  <see cref="F:SharpDX.Direct3D9.PresentFlags.DiscardDepthStencil"/>, in <see cref="T:SharpDX.Direct3D9.PresentFlags"/>.</para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to share resources.</para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the created depth-stencil surface resource. </para></returns>	
            <remarks>	
            The memory class of the depth-stencil buffer is always <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateDepthStencilSurface']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateDepthStencilSurface([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Discard,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,System.Nullable{SharpDX.Rectangle},SharpDX.Direct3D9.Surface,System.Nullable{System.Drawing.Point})">
            <summary>	
            Copies rectangular subsets of pixels from one surface to another.	
            </summary>	
            <param name="sourceSurfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the source surface. This parameter must point to a different surface than pDestinationSurface. </para></param>	
            <param name="sourceRectRef"><para>Pointer to a rectangle on the source surface. Specifying <c>null</c> for this parameter causes the entire surface to be copied. </para></param>	
            <param name="destinationSurfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the destination surface.</para></param>	
            <param name="destPointRef"><para>Pointer to the upper left corner of the destination rectangle. Specifying <c>null</c> for this parameter causes the entire surface to be copied. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method is similar to CopyRects in DirectX 8.This function has the following restrictions.The source surface must have been created with <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/>. The destination surface must have been created with <see cref="F:SharpDX.Direct3D9.Pool.Default"/>. Neither surface can be locked or holding an outstanding device context. Neither surface can be created with multisampling. The only valid flag for both surfaces is <see cref="F:SharpDX.Direct3D9.MultisampleType.None"/>. The surface format cannot be a depth stencil format. The source and dest rects must fit within the surface. No stretching or shrinking is allowed (the rects must be the same size). The source format must match the dest format.The following table shows the supported combinations.Dest formats TextureRT textureRTOff-screen plain Src formatsTextureYesYesYes*Yes RT textureNoNoNoNo RTNoNoNoNo Off-screen plainYesYesYesYes?* If the driver does not support the requested copy, it will be emulated using lock and copy.If the application needs to copy data from a <see cref="F:SharpDX.Direct3D9.Pool.Default"/> render target to a <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/> surface, it can use GetRenderTargetData.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::UpdateSurface']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::UpdateSurface([In] IDirect3DSurface9* pSourceSurface,[In, Optional] const RECT* pSourceRect,[In] IDirect3DSurface9* pDestinationSurface,[In, Optional] const POINT* pDestPoint)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)">
            <summary>	
            Updates the dirty portions of a texture.	
            </summary>	
            <param name="sourceTextureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.BaseTexture"/> interface, representing the source texture. The source texture must be in system memory (<see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/>). </para></param>	
            <param name="destinationTextureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.BaseTexture"/> interface, representing the destination texture. The destination texture must be in the <see cref="F:SharpDX.Direct3D9.Pool.Default"/> memory pool. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            You can dirty a portion of a texture by locking it, or by calling one of the following methods.<see cref="M:SharpDX.Direct3D9.CubeTexture.AddDirtyRectangle(SharpDX.Direct3D9.CubeMapFace)"/>   <see cref="M:SharpDX.Direct3D9.Texture.AddDirtyRectangle(System.IntPtr)"/>   <see cref="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(System.IntPtr)"/>   <see cref="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/>IDirect3DDevice9::UpdateTexture retrieves the dirty portions of the texture by calculating what has been accumulated since the last update operation.For performance reasons, dirty regions are only recorded for level zero of a texture. For sublevels, it is assumed that the corresponding (scaled) rectangle or box is also dirty. Dirty regions are automatically recorded when LockRect or <see cref="M:SharpDX.Direct3D9.VolumeTexture.LockBox(System.Int32,SharpDX.Direct3D9.LockedBox@,System.IntPtr,SharpDX.Direct3D9.LockFlags)"/> is called without <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>. Also, the destination surface of <see cref="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/> is marked dirty.This method fails if the textures are of different types, if their bottom-level buffers are of different sizes, or if their matching levels do not match. For example, consider a six-level source texture with the following dimensions.<code>	
             32x16, 16x8, 8x4, 4x2, 2x1, 1x1	
            	
            </code>This six-level source texture could be the source for the following one-level destination.<code>	
             1x1	
            	
            </code>For the following two-level destination.<code>	
             2x1, 1x1	
            	
            </code>Or, for the following three-level destination.<code>	
             4x2, 2x1, 1x1	
            	
            </code>In addition, this method will fail if the textures are of different formats. If the destination texture has fewer levels than the source, only the matching levels are copied. If the source texture has fewer levels than the destination, the method will fail.If the source texture has dirty regions, the copy can be optimized by restricting the copy to only those regions. It is not guaranteed that only those bytes marked dirty will be copied.Here are the possibilities for source and destination surface combinations:If pSourceTexture is a non-autogenerated mipmap and pDestinationTexture is an autogenerated mipmap, only the topmost matching level is updated, and the destination sublevels are regenerated. All other source sublevels are ignored. If both pSourceTexture and pDestinationTexture are autogenerated mipmaps, only the topmost matching level is updated. The sublevels from the source are ignored and the destination sublevels are regenerated. If pSourceTexture is an autogenerated mipmap and pDestinationTexture a non-autogenerated mipmap, UpdateTexture will fail.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::UpdateTexture']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::UpdateTexture([In] IDirect3DBaseTexture9* pSourceTexture,[In] IDirect3DBaseTexture9* pDestinationTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetRenderTargetData(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)">
            <summary>	
            Copies the render-target data from device memory to system memory.	
            </summary>	
            <param name="renderTargetRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> object, representing a render target. </para></param>	
            <param name="destSurfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> object, representing a destination surface. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.DriverInternalError"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The destination surface must be either an off-screen plain surface or a level of a texture (mipmap or cube texture) created with <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/>.The source surface must be a regular render target or a level of a render-target texture (mipmap or cube texture) created with POOL_DEFAULT.This method will fail if:The render target is multisampled. The source render target is a different size than the destination surface. The source render target and destination surface formats do not match.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetRenderTargetData']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetRenderTargetData([In] IDirect3DSurface9* pRenderTarget,[In] IDirect3DSurface9* pDestSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetFrontBufferData(System.Int32)">
            <summary>	
            Generates a copy of the device's front buffer and places that copy in a system memory buffer provided by the application.	
            </summary>	
            <param name="iSwapChain"><para>An unsigned integer specifying the swap chain.</para></param>	
            <returns><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface that will receive a copy of the contents of the front buffer. The data is returned in successive rows with no intervening space, starting from the vertically highest row on the device's output to the lowest.</para> <para></para> <para>For windowed mode, the size of the destination surface should be the size of the desktop. For full-screen mode, the size of the destination surface should be the screen size. </para></returns>	
            <remarks>	
            The buffer pointed to by pDestSurface will be filled with a representation of the front buffer, converted to the standard 32 bits per pixel format <see cref="F:SharpDX.Direct3D9.Format.A8R8G8B8"/>.This method is the only way to capture an antialiased screen shot.This function is very slow, by design, and should not be used in any performance-critical path.For more information, see Lost Devices and Retrieved Data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetFrontBufferData']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetFrontBufferData([In] unsigned int iSwapChain,[Out] IDirect3DSurface9* pDestSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.StretchRectangle(SharpDX.Direct3D9.Surface,System.Nullable{SharpDX.Rectangle},SharpDX.Direct3D9.Surface,System.Nullable{SharpDX.Rectangle},SharpDX.Direct3D9.TextureFilter)">
            <summary>	
            Copy the contents of the source rectangle to the destination rectangle. The source rectangle can be stretched and filtered by the copy. This function is often used to change the aspect ratio of a video stream.	
            </summary>	
            <param name="sourceSurfaceRef"><para>Pointer to the source surface. See <see cref="T:SharpDX.Direct3D9.Surface"/>.</para></param>	
            <param name="sourceRectRef"><para>Pointer to the source rectangle. A <c>null</c> for this parameter causes the entire source surface to be used.</para></param>	
            <param name="destSurfaceRef"><para>Pointer to the destination surface. See <see cref="T:SharpDX.Direct3D9.Surface"/>.</para></param>	
            <param name="destRectRef"><para>Pointer to the destination rectangle. A <c>null</c> for this parameter causes the entire destination surface to be used.</para></param>	
            <param name="filter"><para>Filter type. Allowable values are <see cref="F:SharpDX.Direct3D9.TextureFilter.None"/>, <see cref="F:SharpDX.Direct3D9.TextureFilter.Point"/>, or <see cref="F:SharpDX.Direct3D9.TextureFilter.Linear"/>. For more information, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            StretchRect RestrictionsDriver support varies. See the section on driver support (below) to see which drivers support which source and destination formats. The source and destination surfaces must be created in the default memory pool. If filtering is specified, you must set the appropriate filter caps (see StretchRectFilterCaps in <see cref="T:SharpDX.Direct3D9.Capabilities"/>). Stretching is not supported between source and destination rectangles on the same surface. Stretching is not supported if the destination surface is an off-screen plain surface but the source is not. You many not stretch between source and destination rectangles if either surface is in a compressed format (see Using Compressed Textures (Direct3D 9)). Stretching supports color-space conversion from YUV to high-precision RGBA only. Since color conversion support is not supported by software emulation, use <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormatConversion_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format)"/> to test the hardware for color conversion support. If the source or destination surface is a texture surface (or a cube texture surface), you must use a Direct3D 9 driver that supports <see cref="F:SharpDX.Direct3D9.DeviceCaps2.CanStretchRectFromTextures"/> (see <see cref="T:SharpDX.Direct3D9.DeviceCaps2"/>).Additional Restrictions for Depth and Stencil SurfacesThe source and destination surfaces must be plain depth stencil surfaces (not textures) (see <see cref="M:SharpDX.Direct3D9.Device.CreateDepthStencilSurface(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr)"/>). Neither of the surfaces can be discardable. The entire surface must be copied (that is: sub-rectangle copies are not allowed). Format conversion, stretching, and shrinking are not supported. StretchRect cannot be called inside of a BeginScene/EndScene pair.Using StretchRect to downsample a Multisample RendertargetYou can use StretchRect to copy from one rendertarget to another. If the source rendertarget is multisampled, this results in downsampling the source rendertarget. For instance you could:Create a multisampled rendertarget. Create a second rendertarget of the same size, that is not multisampled. Copy (using StretchRect the multisample rendertarget to the second rendertarget.Note that use of the extra surface involved in using StretchRect to downsample a Multisample Rendertarget will result in a performance hit.Driver SupportThere are many restrictions as to which surface combinations are valid for StretchRect. Factors include whether the driver is a Direct3D 9 driver or older, and whether the operation will result in stretching/shrinking.  Since applications are not expected to recognize if the driver is a Direct3D 9 driver or not, the runtime will automatically set a new cap, <see cref="F:SharpDX.Direct3D9.DeviceCaps2.CanStretchRectFromTextures"/> cap (see <see cref="T:SharpDX.Direct3D9.DeviceCaps2"/>), for Direct3D 9-level drivers and above.DirectX 8 Driver (no stretching) Dest formats TextureRT textureRTOff-screen plain Src formatsTextureNoNoNoNo RT textureNoYesYesNo RTNoYesYesNo Off-screen plainYesYesYesYes?DirectX 8 Driver (stretching) Dest formats TextureRT textureRTOff-screen plain Src formatsTextureNoNoNoNo RT textureNoNoNoNo RTNoYesYesNo Off-screen plainNoYesYesNo?Direct3D 9 Driver (no stretching) Dest formats TextureRT textureRTOff-screen plain Src formatsTextureNoYesYesNo RT textureNoYesYesNo RTNoYesYesNo Off-screen plainNoYesYesYes?Direct3D 9 Driver (stretching) Dest formats TextureRT textureRTOff-screen plain Src formatsTextureNoYesYesNo RT textureNoYesYesNo RTNoYesYesNo Off-screen plainNoYesYesNo?	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::StretchRect']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::StretchRect([In] IDirect3DSurface9* pSourceSurface,[In, Optional] const RECT* pSourceRect,[In] IDirect3DSurface9* pDestSurface,[In, Optional] const RECT* pDestRect,[In] D3DTEXTUREFILTERTYPE Filter)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.ColorFill(SharpDX.Direct3D9.Surface,System.Nullable{SharpDX.Rectangle},SharpDX.Color4)">
            <summary>	
            Allows an application to fill a rectangular area of a <see cref="F:SharpDX.Direct3D9.Pool.Default"/> surface with a specified color.	
            </summary>	
            <param name="surfaceRef"><para>Pointer to the surface to be filled.</para></param>	
            <param name="rectRef"><para>Pointer to the source rectangle. Using <c>null</c> means that the entire surface will be filled.</para></param>	
            <param name="color"><para>Color used for filling.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method can only be applied to a render target, a render-target texture surface, or an off-screen plain surface with a pool type of <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.IDirect3DDevice9::ColorFill will work with all formats. However, when using a reference or software device, the only formats supported are <see cref="F:SharpDX.Direct3D9.Format.X1R5G5B5"/>, <see cref="F:SharpDX.Direct3D9.Format.A1R5G5B5"/>, <see cref="F:SharpDX.Direct3D9.Format.R5G6B5"/>, <see cref="F:SharpDX.Direct3D9.Format.X8R8G8B8"/>, <see cref="F:SharpDX.Direct3D9.Format.A8R8G8B8"/>, <see cref="F:SharpDX.Direct3D9.Format.Yuy2"/>, <see cref="F:SharpDX.Direct3D9.Format.G8R8_G8B8"/>, <see cref="F:SharpDX.Direct3D9.Format.Uyvy"/>, <see cref="F:SharpDX.Direct3D9.Format.R8G8_B8G8"/>, <see cref="F:SharpDX.Direct3D9.Format.R16F"/>, <see cref="F:SharpDX.Direct3D9.Format.G16R16F"/>, <see cref="F:SharpDX.Direct3D9.Format.A16B16G16R16F"/>, <see cref="F:SharpDX.Direct3D9.Format.R32F"/>, <see cref="F:SharpDX.Direct3D9.Format.G32R32F"/>, and <see cref="F:SharpDX.Direct3D9.Format.A32B32G32R32F"/>.When using a DirectX 7 or DirectX 8.x driver, the only YUV formats supported are <see cref="F:SharpDX.Direct3D9.Format.Uyvy"/> and <see cref="F:SharpDX.Direct3D9.Format.Yuy2"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::ColorFill']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::ColorFill([In] IDirect3DSurface9* pSurface,[In, Optional] const RECT* pRect,[In] D3DCOLOR color)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateOffscreenPlainSurface(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.IntPtr)">
            <summary>	
            Create an off-screen surface.	
            </summary>	
            <param name="width"><para>Width of the surface.</para></param>	
            <param name="height"><para>Height of the surface.</para></param>	
            <param name="format"><para>Format of the surface. See <see cref="T:SharpDX.Direct3D9.Format"/>. </para></param>	
            <param name="pool"><para>Surface pool type. See <see cref="T:SharpDX.Direct3D9.Pool"/>.</para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to share resources.</para></param>	
            <returns><para>Pointer to the <see cref="T:SharpDX.Direct3D9.Surface"/> interface created.</para></returns>	
            <remarks>	
            D3DPOOL_SCRATCH will return a surface that has identical characteristics to a surface created by the DirectX 8.x method CreateImageSurface.D3DPOOL_DEFAULT is the appropriate pool for use with the <see cref="M:SharpDX.Direct3D9.Device.StretchRectangle(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.TextureFilter)"/> and <see cref="M:SharpDX.Direct3D9.Device.ColorFill(SharpDX.Direct3D9.Surface,SharpDX.Color4)"/>.D3DPOOL_MANAGED is not allowed when creating an offscreen plain surface. For more information about memory pools, see <see cref="T:SharpDX.Direct3D9.Pool"/>.Off-screen plain surfaces are always lockable, regardless of their pool types.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateOffscreenPlainSurface']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateOffscreenPlainSurface([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetRenderTarget(System.Int32,SharpDX.Direct3D9.Surface)">
            <summary>	
            Sets a new color buffer for the device.	
            </summary>	
            <param name="renderTargetIndex"><para>Index of the render target. See Remarks.</para></param>	
            <param name="renderTargetRef"><para>Pointer to a new color buffer. If <c>null</c>, the color buffer for the corresponding RenderTargetIndex is disabled. Devices always must be associated with a color buffer. The new render-target surface must have at least <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> specified.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. This method will return <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> if either:pRenderTarget = <c>null</c> and RenderTargetIndex = 0 pRenderTarget is != <c>null</c> and the render target is invalid.</returns>	
            <remarks>	
            The device can support multiple render targets. The number of render targets supported by a device is contained in the NumSimultaneousRTs member of <see cref="T:SharpDX.Direct3D9.Capabilities"/>. See Multiple Render Targets (Direct3D 9).Setting a new render target will cause the viewport (see Viewports and Clipping (Direct3D 9)) to be set to the full size of the new render target.Some hardware tests the compatibility of the depth stencil buffer with the color buffer. If this is done, it is only done in a debug build.Restrictions for using this method include the following:The multisample type must be the same for the render target and the depth stencil surface. The formats must be compatible for the render target and the depth stencil surface. See <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDepthStencilMatch_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format)"/>. The size of the depth stencil surface must be greater than or equal to the size of the render target.These restrictions are validated only when using the debug runtime when any of the <see cref="T:SharpDX.Direct3D9.Device"/> Draw methods are called.Cube textures differ from other surfaces in that they are collections of surfaces. To call <see cref="M:SharpDX.Direct3D9.Device.SetRenderTarget(System.Int32,SharpDX.Direct3D9.Surface)"/> with a cube texture, you must select an individual face using <see cref="M:SharpDX.Direct3D9.CubeTexture.GetCubeMapSurface(SharpDX.Direct3D9.CubeMapFace,System.Int32)"/> and pass the resulting surface to <see cref="M:SharpDX.Direct3D9.Device.SetRenderTarget(System.Int32,SharpDX.Direct3D9.Surface)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetRenderTarget']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetRenderTarget([In] unsigned int RenderTargetIndex,[In] IDirect3DSurface9* pRenderTarget)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetRenderTarget(System.Int32)">
            <summary>	
            Retrieves a render-target surface.	
            </summary>	
            <param name="renderTargetIndex"><para>Index of the render target. See Remarks.</para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the returned render-target surface for this device. </para></returns>	
            <remarks>	
            Typically, methods that return state will not work on a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. This method however, will work even on a pure device because it returns an interface.The device can now support multiple render targets. The number of render targets supported by a device is contained in the NumSimultaneousRTs member of <see cref="T:SharpDX.Direct3D9.Capabilities"/>. See Multiple Render Targets (Direct3D 9).Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Failure to call IUnknown::Release when finished using the <see cref="T:SharpDX.Direct3D9.Surface"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetRenderTarget']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetRenderTarget([In] unsigned int RenderTargetIndex,[Out] IDirect3DSurface9** ppRenderTarget)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetDepthStencilSurface(SharpDX.Direct3D9.Surface)">
            <summary>	
            Sets the depth stencil surface.	
            </summary>	
            <param name="newZStencilRef"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface representing the depth stencil surface. Setting this to <c>null</c> disables the depth stencil operation.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If pZStencilSurface is other than <c>null</c>, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> when the stencil surface is invalid.</returns>	
            <remarks>	
            Restrictions for using this method include the following:The multisample type must be the same for the render target and the depth stencil surface. The formats must be compatible for the render target and the depth stencil surface. See <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDepthStencilMatch_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format)"/>. The size of the depth stencil surface must be greater than or equal to the size of the render target.These restrictions are validated only when using the debug runtime when any of the <see cref="T:SharpDX.Direct3D9.Device"/> Draw methods are called.Cube textures differ from other surfaces in that they are collections of surfaces. To call <see cref="M:SharpDX.Direct3D9.Device.SetDepthStencilSurface(SharpDX.Direct3D9.Surface)"/> with a cube texture, you must select an individual face using <see cref="M:SharpDX.Direct3D9.CubeTexture.GetCubeMapSurface(SharpDX.Direct3D9.CubeMapFace,System.Int32)"/> and pass the resulting surface to <see cref="M:SharpDX.Direct3D9.Device.SetDepthStencilSurface(SharpDX.Direct3D9.Surface)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetDepthStencilSurface']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetDepthStencilSurface([In] IDirect3DSurface9* pNewZStencil)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetDepthStencilSurface(SharpDX.Direct3D9.Surface@)">
            <summary>	
            Gets the depth-stencil surface owned by the Direct3DDevice object.	
            </summary>	
            <param name="zStencilSurfaceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the returned depth-stencil surface. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.If the device doesn't have a depth stencil buffer associated with it, the return value will be <see cref="F:SharpDX.Direct3D9.ResultCode.NotFound"/>. Otherwise, if the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Surface"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetDepthStencilSurface']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetDepthStencilSurface([Out] IDirect3DSurface9** ppZStencilSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.BeginScene">
            <summary>	
            Begins a scene.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. The method will fail with <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> if <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> is called  while already in a <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/>/<see cref="M:SharpDX.Direct3D9.Device.EndScene"/> pair. This happens only  when <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> is called twice without first calling <see cref="M:SharpDX.Direct3D9.Device.EndScene"/>.</returns>	
            <remarks>	
            Applications must call <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> before performing any rendering and must call <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> when rendering is complete and before calling <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> again.If <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> fails, the device was unable to begin the scene, and there is no need to  call <see cref="M:SharpDX.Direct3D9.Device.EndScene"/>. In fact, calls to <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> will fail if the  previous <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> failed. This applies to any application that creates multiple swap chains.There should be one <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/>/<see cref="M:SharpDX.Direct3D9.Device.EndScene"/> pair between any successive calls to  present (either <see cref="M:SharpDX.Direct3D9.Device.Present"/> or <see cref="M:SharpDX.Direct3D9.SwapChain.Present(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)"/>). <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> should  be called once before any rendering is performed, and <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> should be called once after all rendering for a frame has been submitted to the runtime. Multiple non-nested <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/>/<see cref="M:SharpDX.Direct3D9.Device.EndScene"/> pairs between calls to present are legal, but having more than one pair may incur a performance hit. To enable maximal parallelism between the CPU and the graphics accelerator, it is advantageous to  call <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> as far ahead of calling present as possible.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::BeginScene']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::BeginScene()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.EndScene">
            <summary>	
            Ends a scene that was begun by calling <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/>.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. The method will fail with <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> if <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> is called while already in a <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/>/<see cref="M:SharpDX.Direct3D9.Device.EndScene"/> pair. This happens only when <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> is called twice without first calling <see cref="M:SharpDX.Direct3D9.Device.EndScene"/>.</returns>	
            <remarks>	
            When this method succeeds, the scene has been queued up for rendering by the driver. This is not a synchronous method, so the scene is not guaranteed to have completed rendering when this method returns.Applications must call <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> before performing any rendering and must call <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> when rendering is complete and before calling <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> again.If <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> fails, the device was unable to begin the scene, and there is no need to call <see cref="M:SharpDX.Direct3D9.Device.EndScene"/>. In fact, calls to  <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> will fail if the previous <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> failed. This applies to any application that creates multiple swap chains.There should be at most one <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/>/<see cref="M:SharpDX.Direct3D9.Device.EndScene"/> pair between any successive calls to present (either <see cref="M:SharpDX.Direct3D9.Device.Present"/> or <see cref="M:SharpDX.Direct3D9.SwapChain.Present(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)"/>). <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> should be called once before any rendering is performed, and <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> should be called once after all rendering for a frame has been submitted to the runtime. To enable maximal parallelism between the CPU and the graphics accelerator, it is advantageous to call <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> as far ahead of calling present as possible.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::EndScene']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::EndScene()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.Clear_(System.Int32,SharpDX.Rectangle[],SharpDX.Direct3D9.ClearFlags,System.Int32,System.Single,System.Int32)">
            <summary>	
            Clears one or more surfaces such as a render target, multiple render targets, a stencil buffer, and a depth buffer.	
            </summary>	
            <param name="count">No documentation.</param>	
            <param name="rectsRef">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="color">No documentation.</param>	
            <param name="z">No documentation.</param>	
            <param name="stencil">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Use this method to clear a surface including: a render target, all render targets in an MRT, a stencil buffer, or a depth buffer. Flags determines how many surfaces are cleared. Use pRects to clear a subset of a surface defined by an array of rectangles.IDirect3DDevice9::Clear will fail if you:Try to clear either the depth buffer or the stencil buffer of a render target that does not have an attached depth buffer. Try to clear the stencil buffer when the depth buffer does not contain stencil data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::Clear']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::Clear([In] unsigned int Count,[In, Buffer, Optional] const D3DRECT* pRects,[In] D3DCLEAR Flags,[In] int Color,[In] float Z,[In] unsigned int Stencil)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetTransform_(System.Int32,SharpDX.Matrix@)">
            <summary>	
            Sets a single device transformation-related state.	
            </summary>	
            <param name="state"><para>Device-state variable that is being modified. This parameter can be any member of the <see cref="T:SharpDX.Direct3D9.TransformState"/> enumerated type, or the D3DTS_WORLDMATRIX macro. </para></param>	
            <param name="matrixRef"><para>Pointer to a <see cref="T:SharpDX.Matrix"/> structure that modifies the current transformation. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if one of the arguments is invalid.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetTransform']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetTransform([In] int State,[In] const D3DMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetTransform(SharpDX.Direct3D9.TransformState)">
            <summary>	
            Retrieves a matrix describing a transformation state.	
            </summary>	
            <param name="state"><para>Device state variable that is being modified. This parameter can be any member of the <see cref="T:SharpDX.Direct3D9.TransformState"/> enumerated type, or the D3DTS_WORLDMATRIX macro. </para></param>	
            <returns><para>Pointer to a  <see cref="T:SharpDX.Matrix"/> structure, describing the returned transformation state. </para></returns>	
            <remarks>	
            This method will not return device state for a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. If you want to use this method, you must create your device with any of the other flag values in <see cref="T:SharpDX.Direct3D9.CreateFlags"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetTransform']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetTransform([In] D3DTRANSFORMSTATETYPE State,[Out] D3DMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.MultiplyTransform(SharpDX.Direct3D9.TransformState,SharpDX.Matrix@)">
            <summary>	
            Multiplies a device's world, view, or projection matrices by a specified matrix.	
            </summary>	
            <param name="arg0"><para>Member of the <see cref="T:SharpDX.Direct3D9.TransformState"/> enumerated type, or the D3DTS_WORLDMATRIX macro that identifies which device matrix is to be modified. The most common setting, D3DTS_WORLDMATRIX(0), modifies the world matrix, but you can specify that the method modify the view or projection matrices, if needed. </para></param>	
            <param name="arg1"><para>Pointer to a <see cref="T:SharpDX.Matrix"/> structure that modifies the current transformation. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> if one of the arguments is invalid.</returns>	
            <remarks>	
            The multiplication order is pMatrix times State.An application might use the <see cref="M:SharpDX.Direct3D9.Device.MultiplyTransform(SharpDX.Direct3D9.TransformState,SharpDX.Matrix@)"/> method to work with hierarchies of transformations. For example, the geometry and transformations describing an arm might be arranged in the following hierarchy.<code>	
             shoulder_transformation upper_arm geometry elbow transformation lower_arm geometry wrist transformation hand geometry	
            	
            </code>An application might use the following series of calls to render this hierarchy. Not all the parameters are shown in this pseudocode.<code>	
             <see cref="M:SharpDX.Direct3D9.Device.SetTransform_(System.Int32,SharpDX.Matrix@)"/>(D3DTS_WORLDMATRIX(0),  shoulder_transform)	
            <see cref="M:SharpDX.Direct3D9.Device.DrawPrimitives(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32)"/>(upper_arm)	
            <see cref="M:SharpDX.Direct3D9.Device.MultiplyTransform(SharpDX.Direct3D9.TransformState,SharpDX.Matrix@)"/>(D3DTS_WORLDMATRIX(0),  elbow_transform)	
            <see cref="M:SharpDX.Direct3D9.Device.DrawPrimitives(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32)"/>(lower_arm)	
            <see cref="M:SharpDX.Direct3D9.Device.MultiplyTransform(SharpDX.Direct3D9.TransformState,SharpDX.Matrix@)"/>(D3DTS_WORLDMATRIX(0),  wrist_transform)	
            <see cref="M:SharpDX.Direct3D9.Device.DrawPrimitives(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32)"/>(hand)	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::MultiplyTransform']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::MultiplyTransform([In] D3DTRANSFORMSTATETYPE arg0,[In] const D3DMATRIX* arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetViewport(SharpDX.Direct3D9.Viewport@)">
            <summary>	
            Sets the viewport parameters for the device.	
            </summary>	
            <param name="viewportRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Viewport"/> structure, specifying the viewport parameters to set. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, it will return <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. This will happen if pViewport is invalid, or if pViewport describes a region that cannot exist within the render target surface.</returns>	
            <remarks>	
            Direct3D sets the following default values for the viewport.<code>	
             <see cref="T:SharpDX.Direct3D9.Viewport"/> vp;	
            vp.X      = 0;	
            vp.Y      = 0;	
            vp.Width  = RenderTarget.Width;	
            vp.Height = RenderTarget.Height;	
            vp.MinZ   = 0.0f;	
            vp.MaxZ   = 1.0f;	
            	
            </code>IDirect3DDevice9::SetViewport can be used to draw on part of the screen. Make sure to call it before any geometry is drawn so the viewport settings will take effect.To draw multiple views within a scene, repeat the <see cref="M:SharpDX.Direct3D9.Device.SetViewport(SharpDX.Direct3D9.Viewport@)"/> and draw geometry sequence for each view.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetViewport']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetViewport([In] const D3DVIEWPORT9* pViewport)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetViewport(SharpDX.Direct3D9.Viewport@)">
            <summary>	
            Retrieves the viewport parameters currently set for the device.	
            </summary>	
            <param name="viewportRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Viewport"/> structure, representing the returned viewport parameters. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if the pViewport parameter is invalid.</returns>	
            <remarks>	
            Typically, methods that return state will not work on a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. This method however, will work even on a pure device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetViewport']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetViewport([Out] D3DVIEWPORT9* pViewport)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetMaterial(SharpDX.Direct3D9.Material@)">
            <summary>	
            Sets the material properties for the device.	
            </summary>	
            <param name="materialRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Material"/> structure, describing the material properties to set. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> if the pMaterial parameter is invalid.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetMaterial']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetMaterial([In] const D3DMATERIAL9* pMaterial)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetMaterial(SharpDX.Direct3D9.Material@)">
            <summary>	
            Retrieves the current material properties for the device.	
            </summary>	
            <param name="materialRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Material"/> structure to fill with the currently set material properties. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> if the pMaterial parameter is invalid.</returns>	
            <remarks>	
            This method will not return device state for a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. If you want to use this method, you must create your device with any of the other values in <see cref="T:SharpDX.Direct3D9.CreateFlags"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetMaterial']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetMaterial([Out] D3DMATERIAL9* pMaterial)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)">
            <summary>	
            Assigns a set of lighting properties for this device.	
            </summary>	
            <param name="index"><para>Zero-based index of the set of lighting properties to set. If a set of lighting properties exists at this index, it is overwritten by the new properties specified in pLight. </para></param>	
            <param name="arg1"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Light"/> structure, containing the lighting parameters to set. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Set light properties by preparing a <see cref="T:SharpDX.Direct3D9.Light"/> structure and then calling the <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/> method. The  <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/> method accepts the index at which the device should place the set of light properties to its internal list of light properties, and the address of a prepared <see cref="T:SharpDX.Direct3D9.Light"/> structure that defines those properties. You can call <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/> with new information as needed to update the light's illumination properties.The system allocates memory to accommodate a set of lighting properties each time you call the <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/> method with an index that has never been assigned properties. Applications can set a number of lights, with only a subset of the assigned lights enabled at a time. Check the MaxActiveLights member of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure when you retrieve device capabilities to determine the maximum number of active lights supported by that device. If you no longer need a light, you can disable it or overwrite it with a new set of light properties.The following example prepares and sets properties for a white point-light whose emitted light will not attenuate over distance.<code>	
             // Assume d3dDevice is a valid reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface.	
            <see cref="T:SharpDX.Direct3D9.Light"/> d3dLight;	
            <see cref="T:SharpDX.Result"/>   hr; // Initialize the structure.	
            ZeroMemory(&amp;d3dLight, sizeof(d3dLight)); // Set up a white point light.	
            d3dLight.Type = <see cref="F:SharpDX.Direct3D9.LightType.Point"/>;	
            d3dLight.Diffuse.r  = 1.0f;	
            d3dLight.Diffuse.g  = 1.0f;	
            d3dLight.Diffuse.b  = 1.0f;	
            d3dLight.Ambient.r  = 1.0f;	
            d3dLight.Ambient.g  = 1.0f;	
            d3dLight.Ambient.b  = 1.0f;	
            d3dLight.Specular.r = 1.0f;	
            d3dLight.Specular.g = 1.0f;	
            d3dLight.Specular.b = 1.0f; // Position it high in the scene and behind the user.	
            // Remember, these coordinates are in world space, so	
            // the user could be anywhere in world space, too. 	
            // For the purposes of this example, assume the user	
            // is at the origin of world space.	
            d3dLight.Position.x = 0.0f;	
            d3dLight.Position.y = 1000.0f;	
            d3dLight.Position.z = -100.0f; // Don't attenuate.	
            d3dLight.Attenuation0 = 1.0f; 	
            d3dLight.Range        = 1000.0f; // Set the property information for the first light.	
            hr = d3dDevice-&gt;SetLight(0, &amp;d3dLight);	
            if (SUCCEEDED(hr)) // Handle Success	
            else // Handle failure	
            	
            </code>Enable a light source by calling the <see cref="M:SharpDX.Direct3D9.Device.EnableLight(System.Int32,System.Boolean)"/> method for the device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetLight']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetLight([In] unsigned int Index,[In] const D3DLIGHT9* arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetLight(System.Int32)">
            <summary>	
            Retrieves a set of lighting properties that this device uses.	
            </summary>	
            <param name="index"><para>Zero-based index of the lighting property set to retrieve. This method will fail if a lighting property has not been set for this index by calling the <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/> method. </para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Light"/> structure that is filled with the retrieved lighting-parameter set. </para></returns>	
            <remarks>	
            This method will not return device state for a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. If you want to use this method, you must create your device with any of the other values in <see cref="T:SharpDX.Direct3D9.CreateFlags"/>.Retrieve all the properties for an existing light source by calling the <see cref="M:SharpDX.Direct3D9.Device.GetLight(System.Int32)"/> method for the device. When calling the <see cref="M:SharpDX.Direct3D9.Device.GetLight(System.Int32)"/> method, pass the zero-based index of the light source for which the properties will be retrieved as the first parameter, and supply the address of a <see cref="T:SharpDX.Direct3D9.Light"/> structure as the second parameter. The device fills the <see cref="T:SharpDX.Direct3D9.Light"/> structure to describe the lighting properties it uses for the light source at that index.<code>	
             // Assume d3dDevice is a valid reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface.	
            <see cref="T:SharpDX.Result"/> hr;	
            D3DLight9 light; // Get the property information for the first light.	
            hr = pd3dDevice-&gt;GetLight(0, &amp;light);	
            if (SUCCEEDED(hr)) // Handle Success	
            else // Handle failure	
            	
            </code>If you supply an index outside the range of the light sources assigned in the device, the <see cref="M:SharpDX.Direct3D9.Device.GetLight(System.Int32)"/> method fails, returning <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.When you assign a set of light properties for a light source in a scene, the light source can be activated by calling the <see cref="M:SharpDX.Direct3D9.Device.EnableLight(System.Int32,System.Boolean)"/> method for the device. New light sources are disabled by default. The <see cref="M:SharpDX.Direct3D9.Device.EnableLight(System.Int32,System.Boolean)"/> method accepts two parameters. Set the first parameter to the zero-based index of the light source to be affected by the method, and set the second parameter to TRUE to enable the light or <see cref="F:SharpDX.Result.False"/> to disable it. The following code example illustrates the use of this method by enabling the first light source in the device's list of light source properties.<code>	
             // Assume d3dDevice is a valid reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface.	
            <see cref="T:SharpDX.Result"/> hr; hr = pd3dDevice-&gt;LightEnable(0, TRUE);	
            if (SUCCEEDED(hr)) // Handle Success	
            else // Handle failure	
            	
            </code>Check the MaxActiveLights member of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure when you retrieve device capabilities to determine the maximum number of active lights supported by that device.If you enable or disable a light that has no properties that are set with <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/>, the <see cref="M:SharpDX.Direct3D9.Device.EnableLight(System.Int32,System.Boolean)"/> method creates a light source with the properties listed in following table and enables or disables it.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetLight']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetLight([In] unsigned int Index,[Out] D3DLIGHT9* arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.EnableLight(System.Int32,System.Boolean)">
            <summary>	
            Enables or disables a set of lighting parameters within a device.	
            </summary>	
            <param name="index"><para>Zero-based index of the set of lighting parameters that are the target of this method. </para></param>	
            <param name="enable"><para>Value that indicates if the set of lighting parameters are being enabled or disabled. Set this parameter to TRUE to enable lighting with the parameters at the specified index, or <see cref="F:SharpDX.Result.False"/> to disable it. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If a value for LightIndex is outside the range of the light property sets assigned within the device, the <see cref="M:SharpDX.Direct3D9.Device.EnableLight(System.Int32,System.Boolean)"/> method creates a light source represented by a <see cref="T:SharpDX.Direct3D9.Light"/> structure with the following properties and sets its enabled state to the value specified in bEnable.MemberDefault  Type <see cref="F:SharpDX.Direct3D9.LightType.Directional"/>  Diffuse (R:1, G:1, B:1, A:0)  Specular (R:0, G:0, B:0, A:0)  Ambient (R:0, G:0, B:0, A:0)  Position (0, 0, 0)  Direction (0, 0, 1)  Range 0  Falloff 0  Attenuation0 0  Attenuation1 0  Attenuation2 0  Theta 0  Phi 0?	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::LightEnable']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::LightEnable([In] unsigned int Index,[In] BOOL Enable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.IsLightEnabled(System.Int32)">
            <summary>	
            Retrieves the activity status - enabled or disabled - for a set of lighting parameters within a device.	
            </summary>	
            <param name="index"><para>Zero-based index of the set of lighting parameters that are the target of this method. </para></param>	
            <returns><para>Pointer to a variable to fill with the status of the specified lighting parameters. After the call, a nonzero value at this address indicates that the specified lighting parameters are enabled; a value of 0 indicates that they are disabled. </para></returns>	
            <remarks>	
            This method will not return device state for a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. If you want to use this method, you must create your device with any of the other values in <see cref="T:SharpDX.Direct3D9.CreateFlags"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetLightEnable']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetLightEnable([In] unsigned int Index,[Out] BOOL* pEnable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetClipPlane(System.Int32,System.Single)">
            <summary>	
            Sets the coefficients of a user-defined clipping plane for the device.	
            </summary>	
            <param name="index"><para>Index of the clipping plane for which the plane equation coefficients are to be set. </para></param>	
            <param name="planeRef"><para>Pointer to an address of a four-element array of values that represent the clipping plane coefficients to be set, in the form of the general plane equation. See Remarks. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. This error indicates that the value in Index exceeds the maximum clipping plane index supported by the device or that the array at pPlane is not large enough to contain four floating-point values.</returns>	
            <remarks>	
            The coefficients that this method sets take the form of the general plane equation. If the values in the array at pPlane were labeled A, B, C, and D in the order that they appear in the array, they would fit into the general plane equation so that Ax + By + Cz + Dw = 0. A point with homogeneous coordinates (x, y, z, w) is visible in the half space of the plane if Ax + By + Cz + Dw &gt;= 0. Points that exist behind the clipping plane are clipped from the scene.When the fixed function pipeline is used the plane equations are assumed to be in world space. When the programmable pipeline is used the plane equations are assumed to be in the clipping space (the same space as output vertices).This method does not enable the clipping plane equation being set. To enable a clipping plane, set the corresponding bit in the DWORD value applied to the <see cref="F:SharpDX.Direct3D9.RenderState.ClipPlaneEnable"/> render state.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetClipPlane']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetClipPlane([In] unsigned int Index,[In] const float* pPlane)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetClipPlane(System.Int32)">
            <summary>	
            Retrieves the coefficients of a user-defined clipping plane for the device.	
            </summary>	
            <param name="index"><para>Index of the clipping plane for which the plane equation coefficients are retrieved. </para></param>	
            <returns><para>Pointer to a four-element array of values that represent the coefficients of the clipping plane in the form of the general plane equation. See Remarks. </para></returns>	
            <remarks>	
            This method will not return device state for a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. If you want to use this method, you must create your device with any of the other values in <see cref="T:SharpDX.Direct3D9.CreateFlags"/>."The coefficients that this method reports take the form of the general plane equation. If the values in the array at pPlane were labeled A, B, C, and D in the order that they appear in the array, they would fit into the general plane equation so that Ax + By + Cz + Dw = 0. A point with homogeneous coordinates (x, y, z, w) is visible in the half space of the plane if Ax + By + Cz + Dw &gt;= 0. Points that exist on or behind the clipping plane are clipped from the scene.The plane equation used by this method exists in world space and is set by a previous call to the <see cref="M:SharpDX.Direct3D9.Device.SetClipPlane(System.Int32,System.Single)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetClipPlane']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetClipPlane([In] unsigned int Index,[Out] float* pPlane)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetRenderState(SharpDX.Direct3D9.RenderState,System.Int32)">
            <summary>	
            Sets a single device render-state parameter.	
            </summary>	
            <param name="state"><para>Device state variable that is being modified. This parameter can be any member of the <see cref="T:SharpDX.Direct3D9.RenderState"/> enumerated type. </para></param>	
            <param name="value"><para>New value for the device render state to be set. The meaning of this parameter is dependent on the value specified for State. For example, if State were <see cref="F:SharpDX.Direct3D9.RenderState.ShadeMode"/>, the second parameter would be one member of the <see cref="T:SharpDX.Direct3D9.ShadeMode"/> enumerated type. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if one of the arguments is invalid.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetRenderState']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetRenderState([In] D3DRENDERSTATETYPE State,[In] unsigned int Value)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetRenderState(SharpDX.Direct3D9.RenderState,System.IntPtr)">
            <summary>	
            Retrieves a render-state value for a device.	
            </summary>	
            <param name="state"><para>Device state variable that is being queried. This parameter can be any member of the <see cref="T:SharpDX.Direct3D9.RenderState"/> enumerated type. </para></param>	
            <param name="valueRef"><para>Pointer to a variable that receives the value of the queried render state variable when the method returns. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> if one of the arguments is invalid.</returns>	
            <remarks>	
            This method will not return device state for a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. If you want to use this method, you must create your device with any of the other values in <see cref="T:SharpDX.Direct3D9.CreateFlags"/>."	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetRenderState']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetRenderState([In] D3DRENDERSTATETYPE State,[In] void* pValue)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateStateBlock(SharpDX.Direct3D9.StateBlockType,SharpDX.Direct3D9.StateBlock)">
            <summary>	
            Creates a new state block that contains the values for all device states, vertex-related states, or pixel-related states.	
            </summary>	
            <param name="type"><para>Type of state data that the method should capture. This parameter can be set to a value defined in the <see cref="T:SharpDX.Direct3D9.StateBlockType"/> enumerated type. </para></param>	
            <param name="sBOut"><para>Pointer to a state block interface. See <see cref="T:SharpDX.Direct3D9.StateBlock"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Vertex-related device states typically refer to those states that affect how the system processes vertices. Pixel-related states generally refer to device states that affect how the system processes pixel or depth-buffer data during rasterization. Some states are contained in both groups.<para>Differences between Direct3D 9 and Direct3D 10:</para>	
             <para>In Direct3D 9, a state block contains state data, for the states it was requested to capture, when the object is created. To change the value of the state block, call <see cref="M:SharpDX.Direct3D9.StateBlock.Capture"/> or <see cref="M:SharpDX.Direct3D9.Device.BeginStateBlock"/>/<see cref="M:SharpDX.Direct3D9.Device.EndStateBlock"/>. There is no state saved when a state block object is created in Direct3D 10.</para>?	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateStateBlock']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateStateBlock([In] D3DSTATEBLOCKTYPE Type,[Out, Fast] IDirect3DStateBlock9** ppSB)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.BeginStateBlock">
            <summary>	
            Signals Direct3D to begin recording a device-state block.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Applications can ensure that all recorded states are valid by calling the <see cref="M:SharpDX.Direct3D9.Device.ValidateDevice(System.Int32)"/> method prior to calling this method.The following methods can be recorded in a state block, after calling <see cref="M:SharpDX.Direct3D9.Device.BeginStateBlock"/> and before <see cref="M:SharpDX.Direct3D9.Device.EndStateBlock"/>.<see cref="M:SharpDX.Direct3D9.Device.EnableLight(System.Int32,System.Boolean)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetClipPlane(System.Int32,System.Single)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetCurrentTexturePalette(System.Int32)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetVertexFormat(SharpDX.Direct3D9.VertexFormat)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetIndices(SharpDX.Direct3D9.IndexBuffer)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetMaterial(SharpDX.Direct3D9.Material@)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetNPatchMode(System.Single)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetPixelShader(SharpDX.Direct3D9.PixelShader)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetPixelShaderConstantB(System.Int32,System.IntPtr,System.Int32)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetPixelShaderConstantF(System.Int32,System.IntPtr,System.Int32)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetPixelShaderConstantI(System.Int32,System.IntPtr,System.Int32)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetRenderState(SharpDX.Direct3D9.RenderState,System.Boolean)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,SharpDX.Direct3D9.TextureFilter)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetScissorRect(SharpDX.Rectangle)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetStreamSource(System.Int32,SharpDX.Direct3D9.VertexBuffer,System.Int32,System.Int32)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetStreamSourceFrequency(System.Int32,System.Int32,SharpDX.Direct3D9.StreamSource)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetTexture(System.Int32,SharpDX.Direct3D9.BaseTexture)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,SharpDX.Direct3D9.TextureArgument)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetTransform_(System.Int32,SharpDX.Matrix@)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetViewport(SharpDX.Direct3D9.Viewport@)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetVertexDeclaration(SharpDX.Direct3D9.VertexDeclaration)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetVertexShader(SharpDX.Direct3D9.VertexShader)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetVertexShaderConstantB(System.Int32,System.IntPtr,System.Int32)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetVertexShaderConstantF(System.Int32,System.IntPtr,System.Int32)"/>   <see cref="M:SharpDX.Direct3D9.Device.SetVertexShaderConstantI(System.Int32,System.IntPtr,System.Int32)"/>The ordering of state changes in a state block is not guaranteed. If the same state is specified multiple times in a state block, only the last value is used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::BeginStateBlock']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::BeginStateBlock()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.EndStateBlock">
            <summary>	
            Signals Direct3D to stop recording a device-state block and retrieve a reference to the state block interface.	
            </summary>	
            <returns><para>Pointer to a state block interface. See <see cref="T:SharpDX.Direct3D9.StateBlock"/>.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::EndStateBlock']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::EndStateBlock([In] IDirect3DStateBlock9** ppSB)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetClipStatus(SharpDX.Direct3D9.ClipStatus)">
            <summary>	
            Sets the clip status.	
            </summary>	
            <param name="clipStatusRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ClipStatus"/> structure, describing the clip status settings to be set. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If one of the arguments is invalid, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Clip status is used during software vertex processing. Therefore, this method is not supported on pure or nonpure hardware processing devices. For more information about pure devices, see <see cref="T:SharpDX.Direct3D9.CreateFlags"/>.When clipping is enabled during vertex processing (by <see cref="M:SharpDX.Direct3D9.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.VertexBuffer,SharpDX.Direct3D9.VertexDeclaration,SharpDX.Direct3D9.LockFlags)"/>, <see cref="M:SharpDX.Direct3D9.Device.DrawPrimitives(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32)"/>, or other drawing functions), Direct3D computes a clip code for every vertex. The clip code is a combination of D3DCS_* bits. When a vertex is outside a particular clipping plane, the corresponding bit is set in the clipping code. Direct3D maintains the clip status using <see cref="T:SharpDX.Direct3D9.ClipStatus"/>, which has ClipUnion and ClipIntersection members. ClipUnion is a bitwise "OR" of all vertex clip codes and ClipIntersection is a bitwise "AND" of all vertex clip codes. Initial values are zero for ClipUnion and 0xFFFFFFFF for ClipIntersection. When <see cref="F:SharpDX.Direct3D9.RenderState.Clipping"/> is set to <see cref="F:SharpDX.Result.False"/>, ClipUnion and ClipIntersection are set to zero. Direct3D updates the clip status during drawing calls. To compute clip status for a particular object, set ClipUnion and ClipIntersection to their initial value and continue drawing.Clip status is not updated by <see cref="M:SharpDX.Direct3D9.Device.DrawRectanglePatch(System.Int32,System.Single[])"/> and <see cref="M:SharpDX.Direct3D9.Device.DrawTrianglePatch(System.Int32,System.Single[])"/> because there is no software emulation for them.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetClipStatus']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetClipStatus([In] const D3DCLIPSTATUS9* pClipStatus)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetClipStatus(SharpDX.Direct3D9.ClipStatus@)">
            <summary>	
            Retrieves the clip status.	
            </summary>	
            <param name="clipStatusRef"><para> Pointer to a <see cref="T:SharpDX.Direct3D9.ClipStatus"/> structure that describes the clip status. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.D3DERR_INVALIDCALL is returned if the argument is invalid.</returns>	
            <remarks>	
            When clipping is enabled during vertex processing (by <see cref="M:SharpDX.Direct3D9.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.VertexBuffer,SharpDX.Direct3D9.VertexDeclaration,SharpDX.Direct3D9.LockFlags)"/>, <see cref="M:SharpDX.Direct3D9.Device.DrawPrimitives(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32)"/>, or other drawing functions), Direct3D computes a clip code for every vertex. The clip code is a combination of D3DCS_* bits. When a vertex is outside a particular clipping plane, the corresponding bit is set in the clipping code. Direct3D maintains the clip status using <see cref="T:SharpDX.Direct3D9.ClipStatus"/>, which has ClipUnion and ClipIntersection members. ClipUnion is a bitwise "OR" of all vertex clip codes and ClipIntersection is a bitwise "AND" of all vertex clip codes. Initial values are zero for ClipUnion and 0xFFFFFFFF for ClipIntersection. When <see cref="F:SharpDX.Direct3D9.RenderState.Clipping"/> is set to <see cref="F:SharpDX.Result.False"/>, ClipUnion and ClipIntersection are set to zero. Direct3D updates the clip status during drawing calls. To compute clip status for a particular object, set ClipUnion and ClipIntersection to their initial value and continue drawing.Clip status is not updated by <see cref="M:SharpDX.Direct3D9.Device.DrawRectanglePatch(System.Int32,System.Single[])"/> and <see cref="M:SharpDX.Direct3D9.Device.DrawTrianglePatch(System.Int32,System.Single[])"/> because there is no software emulation for them.Clip status is used during software vertex processing. Therefore, this method is not supported on pure or nonpure hardware processing devices. For more information about pure devices, see <see cref="T:SharpDX.Direct3D9.CreateFlags"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetClipStatus']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetClipStatus([Out] D3DCLIPSTATUS9* pClipStatus)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetTexture(System.Int32)">
            <summary>	
            Retrieves a texture assigned to a stage for a device.	
            </summary>	
            <param name="stage"><para>Stage identifier of the texture to retrieve. Stage identifiers are zero-based.</para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.BaseTexture"/> interface, representing the returned texture. </para></returns>	
            <remarks>	
            Typically, methods that return state will not work on a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. This method however, will work even on a pure device because it returns an interface.Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Texture"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Texture"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetTexture']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetTexture([In] unsigned int Stage,[Out] IDirect3DBaseTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetTexture(System.Int32,SharpDX.Direct3D9.BaseTexture)">
            <summary>	
            Assigns a texture to a stage for a device.	
            </summary>	
            <param name="stage"><para>Zero based sampler number.  Textures are bound to samplers; samplers define sampling state such as the filtering mode and the address wrapping mode. Textures are referenced differently by the programmable and the fixed function pipeline: </para>  Programmable shaders reference textures using the sampler number. The number of samplers available to a programmable shader is dependent on the shader version. For vertex shaders, see Sampler (Direct3D 9 asm-vs). For pixel shaders see Sampler (Direct3D 9 asm-ps). The fixed function pipeline on the other hand, references textures by texture stage number. The maximum number of samplers is determined from two caps: MaxSimultaneousTextures and MaxTextureBlendStages of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure.  <para>There are two other special cases for stage/sampler numbers.</para>  A special number called D3DDMAPSAMPLER is used for Displacement Mapping (Direct3D 9). A programmable vertex shader uses a special number defined by a <see cref="T:SharpDX.Direct3D9.VertexTextureSampler"/> when accessing Vertex Textures in vs_3_0 (DirectX HLSL).</param>	
            <param name="textureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.BaseTexture"/> interface, representing the texture being set.  </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            SetTexture is not allowed if the texture is created with a pool type of <see cref="F:SharpDX.Direct3D9.Pool.Scratch"/>. SetTexture is not allowed with a pool type of <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/> texture unless DevCaps is set with <see cref="F:SharpDX.Direct3D9.DeviceCaps.TextureSystemMemory"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetTexture']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetTexture([In] unsigned int Stage,[In] IDirect3DBaseTexture9* pTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,System.IntPtr)">
            <summary>	
            Retrieves a state value for an assigned texture.	
            </summary>	
            <param name="stage"><para>Stage identifier of the texture for which the state is retrieved. Stage identifiers are zero-based. Devices can have up to eight set textures, so the maximum value allowed for Stage is 7. </para></param>	
            <param name="type"><para>Texture state to retrieve. This parameter can be any member of the <see cref="T:SharpDX.Direct3D9.TextureStage"/> enumerated type. </para></param>	
            <param name="valueRef"><para>Pointer a variable to fill with the retrieved state value. The meaning of the retrieved value is determined by the Type parameter. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method will not return device state for a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. If you want to use this method, you must create your device with any of the other flag values in <see cref="T:SharpDX.Direct3D9.CreateFlags"/>."	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetTextureStageState']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetTextureStageState([In] unsigned int Stage,[In] D3DTEXTURESTAGESTATETYPE Type,[In] void* pValue)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,System.Int32)">
            <summary>	
            Sets the state value for the currently assigned texture.	
            </summary>	
            <param name="stage"><para>Stage identifier of the texture for which the state value is set. Stage identifiers are zero-based. Devices can have up to eight set textures, so the maximum value allowed for Stage is 7. </para></param>	
            <param name="type"><para>Texture state to set. This parameter can be any member of the <see cref="T:SharpDX.Direct3D9.TextureStage"/> enumerated type. </para></param>	
            <param name="value"><para>State value to set. The meaning of this value is determined by the Type parameter. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetTextureStageState']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetTextureStageState([In] unsigned int Stage,[In] D3DTEXTURESTAGESTATETYPE Type,[In] unsigned int Value)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,System.IntPtr)">
            <summary>	
            Gets the sampler state value.	
            </summary>	
            <param name="sampler"><para>The sampler stage index.</para></param>	
            <param name="type"><para>This parameter can be any member of the <see cref="T:SharpDX.Direct3D9.SamplerState"/> enumerated type. </para></param>	
            <param name="valueRef"><para>State value to get. The meaning of this value is determined by the Type parameter. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method will not return device state for a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. If you want to use this method, you must create your device with any of the other values in <see cref="T:SharpDX.Direct3D9.CreateFlags"/>."	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetSamplerState']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetSamplerState([In] unsigned int Sampler,[In] D3DSAMPLERSTATETYPE Type,[In] void* pValue)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,System.Int32)">
            <summary>	
            Sets the sampler state value.	
            </summary>	
            <param name="sampler"><para>The sampler stage index.</para></param>	
            <param name="type"><para>This parameter can be any member of the <see cref="T:SharpDX.Direct3D9.SamplerState"/> enumerated type. </para></param>	
            <param name="value"><para>State value to set. The meaning of this value is determined by the Type parameter. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetSamplerState']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetSamplerState([In] unsigned int Sampler,[In] D3DSAMPLERSTATETYPE Type,[In] unsigned int Value)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.ValidateDevice(System.Int32)">
            <summary>	
            Reports the device's ability to render the current texture-blending operations and arguments in a single pass.	
            </summary>	
            <param name="numPassesRef"><para>Pointer to a DWORD value to fill with the number of rendering passes needed to complete the desired effect through multipass rendering. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.ConflictingRenderState"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.ConflictingTextureFilter"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DriverInternalError"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.TooManyOperations"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedAlphaArgument"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedAlphaOperation"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedColorArgument"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedColorOperation"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedFactorValue"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedTextureFilter"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.WrongTextureFormat"/>,.</returns>	
            <remarks>	
            The <see cref="M:SharpDX.Direct3D9.Device.ValidateDevice(System.Int32)"/> method should be used to validate scenarios only when other capabilities are deficient. For example, in a multistage texturing scenario, you could query the MaxTextureBlendStages and MaxSimultaneousTextures members of a <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure to determine if multistage texturing is possible on the device.Current hardware does not necessarily implement all possible combinations of operations and arguments. You can determine whether a particular blending operation can be performed with given arguments by setting the desired blending operation, and then calling the <see cref="M:SharpDX.Direct3D9.Device.ValidateDevice(System.Int32)"/> method.The <see cref="M:SharpDX.Direct3D9.Device.ValidateDevice(System.Int32)"/> method uses the current render states, textures, and texture-stage states to perform validation at the time of the call. Changes to these factors after the call invalidate the previous result, and the method must be called again before rendering a scene.For best performance, call <see cref="M:SharpDX.Direct3D9.Device.ValidateDevice(System.Int32)"/> at initialization time; do not use it within a render loop.Using diffuse iterated values, either as an argument or as an operation (D3DTA_DIFFUSED3DTOP_BLENDDIFFUSEALPHA) is rarely supported on current hardware. Most hardware can introduce iterated color data only at the last texture operation stage.Try to specify the texture (<see cref="F:SharpDX.Direct3D9.TextureArgument.Texture"/>) for each stage as the first argument, rather than the second argument.Many cards do not support use of diffuse or scalar values at arbitrary texture stages. Often, these are available only at the first or last texture-blending stage.Many cards do not have a blending unit associated with the first texture that is capable of more than replicating alpha to color channels or inverting the input. Therefore, your application might need to use only the second texture stage, if possible. On such hardware, the first unit is presumed to be in its default state, which has the first color argument set to <see cref="F:SharpDX.Direct3D9.TextureArgument.Texture"/> with the <see cref="F:SharpDX.Direct3D9.TextureOperation.SelectArg1"/> operation.Operations on the output alpha that are more intricate than or substantially different from the color operations are less likely to be supported.Some hardware does not support simultaneous use of <see cref="F:SharpDX.Direct3D9.TextureArgument.TFactor"/> and <see cref="F:SharpDX.Direct3D9.TextureArgument.Diffuse"/>.Many cards do not support simultaneous use of multiple textures and mipmapped trilinear filtering. If trilinear filtering has been requested for a texture involved in multitexture blending operations and validation fails, turn off trilinear filtering and revalidate. In this case, you might want to perform multipass rendering instead.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::ValidateDevice']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::ValidateDevice([In] unsigned int* pNumPasses)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPaletteEntries(System.Int32,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>	
            Sets palette entries.	
            </summary>	
            <param name="paletteNumber"><para>An ordinal value identifying the particular palette upon which the operation is to be performed. </para></param>	
            <param name="entriesRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, representing the palette entries to set. The number of <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structures pointed to by pEntries is assumed to be 256. See Remarks. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            For Direct3D 9 applications, any palette sent to this method must conform to the <see cref="F:SharpDX.Direct3D9.TextureCaps.AlphaPalette"/> capability bit of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure. If <see cref="F:SharpDX.Direct3D9.TextureCaps.AlphaPalette"/> is not set, every entry in the palette must have alpha set to 1.0 or this method will fail with <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. If <see cref="F:SharpDX.Direct3D9.TextureCaps.AlphaPalette"/> is set, then any set of alpha values are allowed. Note that the debug runtime will print a warning message if all palette entries have alpha set to 0.A single logical palette is associated with the device, and is shared by all texture stages.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetPaletteEntries']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetPaletteEntries([In] unsigned int PaletteNumber,[In, Buffer] const PALETTEENTRY* pEntries)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetPaletteEntries(System.Int32,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>	
            Retrieves palette entries.	
            </summary>	
            <param name="paletteNumber"><para>An ordinal value identifying the particular palette to retrieve. </para></param>	
            <param name="entriesRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, representing the returned palette entries. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            For more information about <see cref="T:SharpDX.Direct3D9.PaletteEntry"/>, see the Platform SDK.Note??As of Direct3D 9, the peFlags member of the <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure does not work the way it is documented in the Platform SDK. The peFlags member is now the alpha channel for 8-bit palettized formats.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetPaletteEntries']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetPaletteEntries([In] unsigned int PaletteNumber,[In, Buffer] PALETTEENTRY* pEntries)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetCurrentTexturePalette(System.Int32)">
            <summary>	
            Sets the current texture palette.	
            </summary>	
            <param name="paletteNumber"><para>Value that specifies the texture palette to set as the current texture palette. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A single logical palette is associated with the device, and is shared by all texture stages.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetCurrentTexturePalette']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetCurrentTexturePalette([In] unsigned int PaletteNumber)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetCurrentTexturePalette(System.Int32@)">
            <summary>	
            Retrieves the current texture palette.	
            </summary>	
            <param name="paletteNumber"><para>Pointer to a returned value that identifies the current texture palette. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetCurrentTexturePalette']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetCurrentTexturePalette([Out] unsigned int* PaletteNumber)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetScissorRect(SharpDX.Rectangle)">
            <summary>	
            Sets the scissor rectangle.	
            </summary>	
            <param name="rectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure that defines the rendering area within the render target if scissor test is enabled. This parameter may not be <c>null</c>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The scissor rectangle is used as a rectangular clipping region.See Rectangles (Direct3D 9) for further information on the use of rectangles in DirectX.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetScissorRect']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetScissorRect([In] const RECT* pRect)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetScissorRect(SharpDX.Rectangle@)">
            <summary>	
            Gets the scissor rectangle.	
            </summary>	
            <param name="rectRef"><para>Returns a reference to a <see cref="T:SharpDX.Rectangle"/> structure that defines the rendering area within the render target if scissor test is enabled.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The scissor rectangle is used as a rectangular clipping region.See Rectangles (Direct3D 9) for further information on the use of rectangles in DirectX.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetScissorRect']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetScissorRect([Out] RECT* pRect)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetSoftwareVertexProcessing(System.Boolean)">
            <summary>	
            Use this method to switch between software and hardware vertex processing.	
            </summary>	
            <param name="bSoftware"><para>TRUE to specify software vertex processing; <see cref="F:SharpDX.Result.False"/> to specify hardware vertex processing.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The restrictions for changing modes are as follows:If a device is created with <see cref="F:SharpDX.Direct3D9.CreateFlags.SoftwareVertexProcessing"/>, the vertex processing will be done in software and cannot be changed. If a device is created with <see cref="F:SharpDX.Direct3D9.CreateFlags.HardwareVertexProcessing"/>, the vertex processing will be done in hardware and cannot be changed. If a device is created with <see cref="F:SharpDX.Direct3D9.CreateFlags.MixedVertexProcessing"/>, the vertex processing will be done in hardware by default. The processing can be switched to software (or back to hardware) using <see cref="M:SharpDX.Direct3D9.Device.SetSoftwareVertexProcessing(System.Boolean)"/>.An application can create a mixed-mode device to use both the software vertex processing and the hardware vertex processing. To switch between the two vertex processing modes in DirectX 8.x, use IDirect3DDevice8::SetRenderState with the render state D3DRS_SOFTWAREVERTEXPROCESSING and the appropriate DWORD argument. The drawback of the render state approach was the difficulty in defining the semantics for state blocks. Applications and the runtime had to do extra work and be careful while recording and playing back state blocks.In Direct3D 9, use SetSoftwareVertexProcessing instead. This new API is not recorded by StateBlocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetSoftwareVertexProcessing']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetSoftwareVertexProcessing([In] BOOL bSoftware)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetSoftwareVertexProcessing">
            <summary>	
            Gets the vertex processing (hardware or software) mode.	
            </summary>	
            <returns>Returns TRUE if software vertex processing is set. Otherwise, it returns <see cref="F:SharpDX.Result.False"/>.</returns>	
            <remarks>	
            An application can create a mixed-mode device to use both the software vertex processing and the hardware vertex processing. To switch between the two vertex processing modes in DirectX 8.x, use <see cref="M:SharpDX.Direct3D9.Device.SetRenderState(SharpDX.Direct3D9.RenderState,System.Boolean)"/> with the render state D3DRS_SOFTWAREVERTEXPROCESSING and the appropriate <see cref="T:System.Boolean"/> argument. The drawback of the render state approach was the difficulty in defining the semantics for state blocks. Applications and the runtime had to do extra work and be careful while recording and playing back state blocks.In Direct3D 9, use <see cref="M:SharpDX.Direct3D9.Device.SetSoftwareVertexProcessing(System.Boolean)"/> instead. This new API is not recorded by StateBlocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetSoftwareVertexProcessing']/*"/>	
            <unmanaged>BOOL IDirect3DDevice9::GetSoftwareVertexProcessing()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetNPatchMode(System.Single)">
            <summary>	
            Enable or disable N-patches.	
            </summary>	
            <param name="nSegments"><para>Specifies the number of subdivision segments. If the number of segments is less than 1.0, N-patches are disabled. The default value is 0.0. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetNPatchMode']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetNPatchMode([In] float nSegments)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetNPatchMode">
            <summary>	
            Gets the N-patch mode segments.	
            </summary>	
            <returns>Specifies the number of subdivision segments. If the number of segments is less than 1.0, N-patches are disabled. The default value is 0.0.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetNPatchMode']/*"/>	
            <unmanaged>float IDirect3DDevice9::GetNPatchMode()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawPrimitives(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32)">
            <summary>	
            Renders a sequence of nonindexed, geometric primitives of the specified type from the current set of data input streams.	
            </summary>	
            <param name="primitiveType"><para>Member of the <see cref="T:SharpDX.Direct3D9.PrimitiveType"/> enumerated type, describing the type of primitive to render. </para></param>	
            <param name="startVertex"><para>Index of the first vertex to load. Beginning at StartVertex the correct number of vertices will be read out of the vertex buffer. </para></param>	
            <param name="primitiveCount"><para>Number of primitives to render. The maximum number of primitives allowed is determined by checking the MaxPrimitiveCount member of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure. PrimitiveCount is the number of primitives as determined by the primitive type. If it is a line list, each primitive has two vertices. If it is a triangle list, each primitive has three vertices. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be  <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            When converting a legacy application to Direct3D 9, you must add a call to either <see cref="M:SharpDX.Direct3D9.Device.SetVertexFormat(SharpDX.Direct3D9.VertexFormat)"/> to use the fixed function pipeline, or <see cref="M:SharpDX.Direct3D9.Device.SetVertexDeclaration(SharpDX.Direct3D9.VertexDeclaration)"/> to use a vertex shader before you make any Draw calls.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::DrawPrimitive']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::DrawPrimitive([In] D3DPRIMITIVETYPE PrimitiveType,[In] unsigned int StartVertex,[In] unsigned int PrimitiveCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawIndexedPrimitive(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Based on indexing, renders the specified geometric primitive into an array of vertices.	
            </summary>	
            <param name="arg0"><para>Member of the <see cref="T:SharpDX.Direct3D9.PrimitiveType"/> enumerated type, describing the type of primitive to render. <see cref="F:SharpDX.Direct3D9.PrimitiveType.PointList"/> is not supported with this method. See Remarks. </para></param>	
            <param name="baseVertexIndex"><para>Offset from the start of the vertex buffer to the first vertex. See Scenario 4.</para></param>	
            <param name="minVertexIndex"><para>Minimum vertex index for vertices used during this call. This is a zero based index relative to BaseVertexIndex.</para></param>	
            <param name="numVertices"><para>Number of vertices used during this call. The first vertex is located at index: BaseVertexIndex + MinIndex.</para></param>	
            <param name="startIndex"><para>Index of the first index to use when accesssing the vertex buffer. Beginning at StartIndex to index vertices from the vertex buffer.</para></param>	
            <param name="primCount"><para>Number of primitives to render. The number of vertices used is a function of the primitive count and the primitive type. The maximum number of primitives allowed is determined by checking the MaxPrimitiveCount member of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method draws indexed primitives from the current set of data input streams. MinIndex  and all the indices in the index stream are relative to the BaseVertexIndex.The MinIndex  and NumVertices  parameters specify the range of vertex indices used for each <see cref="M:SharpDX.Direct3D9.Device.DrawIndexedPrimitive(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> call. These are used to optimize vertex processing of indexed primitives by processing a sequential range of vertices prior to indexing into these vertices. It is invalid for any indices used during this call to reference any vertices outside of this range.IDirect3DDevice9::DrawIndexedPrimitive fails if no index array is set.The <see cref="F:SharpDX.Direct3D9.PrimitiveType.PointList"/> member of the <see cref="T:SharpDX.Direct3D9.PrimitiveType"/> enumerated type is not supported and is not a valid type for this method.When converting a legacy application to Direct3D 9, you must add a call to either <see cref="M:SharpDX.Direct3D9.Device.SetVertexFormat(SharpDX.Direct3D9.VertexFormat)"/> to use the fixed function pipeline, or <see cref="M:SharpDX.Direct3D9.Device.SetVertexDeclaration(SharpDX.Direct3D9.VertexDeclaration)"/> to use a vertex shader before you make any Draw calls.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::DrawIndexedPrimitive']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::DrawIndexedPrimitive([In] D3DPRIMITIVETYPE arg0,[In] int BaseVertexIndex,[In] unsigned int MinVertexIndex,[In] unsigned int NumVertices,[In] unsigned int startIndex,[In] unsigned int primCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawPrimitiveUP(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Renders data specified by a user memory reference as a sequence of geometric primitives of the specified type.	
            </summary>	
            <param name="primitiveType"><para>Member of the <see cref="T:SharpDX.Direct3D9.PrimitiveType"/> enumerated type, describing the type of primitive to render. </para></param>	
            <param name="primitiveCount"><para>Number of primitives to render. The maximum number of primitives allowed is determined by checking the MaxPrimitiveCount member of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure. </para></param>	
            <param name="vertexStreamZeroDataRef"><para>User memory reference to the vertex data.</para></param>	
            <param name="vertexStreamZeroStride"><para>The number of bytes of data for each vertex. This value may not be 0.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method is intended for use in applications that are unable to store their vertex data in vertex buffers. This method supports only a single vertex stream. The effect of this call is to use the provided vertex data reference and stride for vertex stream 0. It is invalid to have the declaration of the current vertex shader refer to vertex streams other than stream 0.Following any <see cref="M:SharpDX.Direct3D9.Device.DrawPrimitiveUP(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.IntPtr,System.Int32)"/> call, the stream 0 settings, referenced by <see cref="M:SharpDX.Direct3D9.Device.GetStreamSource(System.Int32,SharpDX.Direct3D9.VertexBuffer@,System.Int32@,System.Int32@)"/>, are set to <c>null</c>.The vertex data passed to <see cref="M:SharpDX.Direct3D9.Device.DrawPrimitiveUP(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.IntPtr,System.Int32)"/> does not need to persist after the call. Direct3D completes its access to that data prior to returning from the call.When converting a legacy application to Direct3D 9, you must add a call to either <see cref="M:SharpDX.Direct3D9.Device.SetVertexFormat(SharpDX.Direct3D9.VertexFormat)"/> to use the fixed function pipeline, or <see cref="M:SharpDX.Direct3D9.Device.SetVertexDeclaration(SharpDX.Direct3D9.VertexDeclaration)"/> to use a vertex shader before you make any Draw calls.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::DrawPrimitiveUP']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::DrawPrimitiveUP([In] D3DPRIMITIVETYPE PrimitiveType,[In] unsigned int PrimitiveCount,[In] const void* pVertexStreamZeroData,[In] unsigned int VertexStreamZeroStride)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawIndexedPrimitiveUP(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.IntPtr,SharpDX.Direct3D9.Format,System.IntPtr,System.Int32)">
            <summary>	
            Renders the specified geometric primitive with data specified by a user memory reference.	
            </summary>	
            <param name="primitiveType"><para>Member of the <see cref="T:SharpDX.Direct3D9.PrimitiveType"/> enumerated type, describing the type of primitive to render. </para></param>	
            <param name="minVertexIndex"><para>Minimum vertex index. This is a zero-based index.</para></param>	
            <param name="numVertices"><para> Number of vertices used during this call. The first vertex is located at index: MinVertexIndex.</para></param>	
            <param name="primitiveCount"><para>Number of primitives to render. The maximum number of primitives allowed is determined by checking the MaxPrimitiveCount member of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure (the number of indices is a function of the primitive count and the primitive type).</para></param>	
            <param name="indexDataRef"><para>User memory reference to the index data. </para></param>	
            <param name="indexDataFormat"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the format of the index data. The valid settings are either: </para>   <see cref="F:SharpDX.Direct3D9.Format.Index16"/>   <see cref="F:SharpDX.Direct3D9.Format.Index32"/></param>	
            <param name="vertexStreamZeroDataRef"><para>User memory reference to the vertex data. The vertex data must be in stream 0.</para></param>	
            <param name="vertexStreamZeroStride"><para>The number of bytes of data for each vertex. This value may not be 0.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method is intended for use in applications that are unable to store their vertex data in vertex buffers. This method supports only a single vertex stream, which must be declared as stream 0.Following any <see cref="M:SharpDX.Direct3D9.Device.DrawIndexedPrimitiveUP(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.IntPtr,SharpDX.Direct3D9.Format,System.IntPtr,System.Int32)"/> call, the stream 0 settings, referenced by <see cref="M:SharpDX.Direct3D9.Device.GetStreamSource(System.Int32,SharpDX.Direct3D9.VertexBuffer@,System.Int32@,System.Int32@)"/>, are set to <c>null</c>. Also, the index buffer setting for <see cref="M:SharpDX.Direct3D9.Device.SetIndices(SharpDX.Direct3D9.IndexBuffer)"/> is set to <c>null</c>.The vertex data passed to <see cref="M:SharpDX.Direct3D9.Device.DrawIndexedPrimitiveUP(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.IntPtr,SharpDX.Direct3D9.Format,System.IntPtr,System.Int32)"/> does not need to persist after the call. Direct3D completes its access to that data prior to returning from the call.When converting a legacy application to Direct3D 9, you must add a call to either <see cref="M:SharpDX.Direct3D9.Device.SetVertexFormat(SharpDX.Direct3D9.VertexFormat)"/> to use the fixed function pipeline, or <see cref="M:SharpDX.Direct3D9.Device.SetVertexDeclaration(SharpDX.Direct3D9.VertexDeclaration)"/> to use a vertex shader before you make any Draw calls.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::DrawIndexedPrimitiveUP']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::DrawIndexedPrimitiveUP([In] D3DPRIMITIVETYPE PrimitiveType,[In] unsigned int MinVertexIndex,[In] unsigned int NumVertices,[In] unsigned int PrimitiveCount,[In] const void* pIndexData,[In] D3DFORMAT IndexDataFormat,[In] const void* pVertexStreamZeroData,[In] unsigned int VertexStreamZeroStride)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.VertexBuffer,SharpDX.Direct3D9.VertexDeclaration,SharpDX.Direct3D9.LockFlags)">
            <summary>	
            Applies the vertex processing defined by the vertex shader to the set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer.	
            </summary>	
            <param name="srcStartIndex"><para>Index of first vertex to load. </para></param>	
            <param name="destIndex"><para>Index of first vertex in the destination vertex buffer into which the results are placed. </para></param>	
            <param name="vertexCount"><para>Number of vertices to process. </para></param>	
            <param name="destBufferRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> interface, the destination vertex buffer representing the stream of interleaved vertex data. </para></param>	
            <param name="vertexDeclRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.VertexDeclaration"/> interface that represents the output vertex data declaration. When vertex shader 3.0 or above is set as the current vertex shader, the output vertex declaration must be present.</para></param>	
            <param name="flags"><para>Processing options. Set this parameter to 0 for default processing. Set to D3DPV_DONOTCOPYDATA to prevent the system from copying vertex data not affected by the vertex operation into the destination buffer. The D3DPV_DONOTCOPYDATA value may be combined with one or more <see cref="T:SharpDX.Direct3D9.LockFlags"/> values appropriate for the destination buffer.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The order of operations for this method is as follows:Transform vertices to projection space using the world + view + projection matrix. Compute screen coordinates using viewport settings. If clipping is enabled, compute clipping codes and store them in an internal buffer, associated with the destination vertex buffer. If a vertex is inside the viewing frustum, its screen coordinates are computed. If the vertex is outside the viewing frustum, the vertex is stored in the destination vertex buffer in projection space coordinates. Other notes: The user does not have access to the internal clip code buffer. No clipping is done on triangles or any other primitives.The destination vertex buffer, pDestBuffer, must be created with a nonzero FVF parameter in <see cref="M:SharpDX.Direct3D9.Device.CreateVertexBuffer(System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.VertexFormat,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.VertexBuffer,System.IntPtr)"/>. The FVF code specified during the call to the <see cref="M:SharpDX.Direct3D9.Device.CreateVertexBuffer(System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.VertexFormat,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.VertexBuffer,System.IntPtr)"/> method specifies the vertex elements present in the destination vertex buffer.When Direct3D generates texture coordinates, or copies or transforms input texture coordinates, and the output texture coordinate format defines more texture coordinate components than Direct3D generates, Direct3D does not change these extra components.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::ProcessVertices']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::ProcessVertices([In] unsigned int SrcStartIndex,[In] unsigned int DestIndex,[In] unsigned int VertexCount,[In] IDirect3DVertexBuffer9* pDestBuffer,[In] IDirect3DVertexDeclaration9* pVertexDecl,[In] D3DLOCK Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateVertexDeclaration(SharpDX.Direct3D9.VertexElement[],SharpDX.Direct3D9.VertexDeclaration)">
            <summary>	
            Create a vertex shader declaration from the device and the vertex elements.	
            </summary>	
            <param name="vertexElementsRef"><para>An array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> vertex elements.</para></param>	
            <param name="declOut"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.VertexDeclaration"/> reference that returns the created vertex shader declaration.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            See the Vertex Declaration (Direct3D 9) page for a detailed description of how to map vertex declarations between different versions of DirectX.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateVertexDeclaration']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateVertexDeclaration([In, Buffer] const D3DVERTEXELEMENT9* pVertexElements,[Out, Fast] IDirect3DVertexDeclaration9** ppDecl)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexDeclaration(SharpDX.Direct3D9.VertexDeclaration)">
            <summary>	
            Sets a Vertex Declaration (Direct3D 9).	
            </summary>	
            <param name="declRef">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. The return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A vertex declaration is an <see cref="T:SharpDX.Direct3D9.VertexDeclaration"/> object that defines the data members of a vertex (i.e. texture coordinates, colors, normals, etc.). This data can be useful for implementing vertex shaders and pixel shaders.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetVertexDeclaration']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexDeclaration([In] IDirect3DVertexDeclaration9* pDecl)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetVertexDeclaration(SharpDX.Direct3D9.VertexDeclaration@)">
            <summary>	
            Gets a vertex shader declaration.	
            </summary>	
            <param name="declOut"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.VertexDeclaration"/> object that is returned.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. The return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetVertexDeclaration']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexDeclaration([Out] IDirect3DVertexDeclaration9** ppDecl)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexFormat(SharpDX.Direct3D9.VertexFormat)">
            <summary>	
            Sets the current vertex stream declaration.	
            </summary>	
            <param name="vertexFormat"><para>DWORD containing the fixed function vertex type. For more information, see <see cref="T:SharpDX.Direct3D9.VertexFormat"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Here are the steps necessary to initialize and use vertices that have a position, diffuse and specular color, and texture coordinates:Define the custom vertex type and FVF code.	  	
            <code>	
             struct LVertex	
            { FLOAT    x, y, z; <see cref="T:SharpDX.Color4"/> specular, diffuse; FLOAT    tu, tv;	
            }; const DWORD VertexFVF = (<see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Diffuse"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Specular"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Texture1"/> );	
            	
            </code>	
               Create a vertex buffer with enough room for four vertices using <see cref="M:SharpDX.Direct3D9.Device.CreateVertexBuffer(System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.VertexFormat,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.VertexBuffer,System.IntPtr)"/>.  	
            <code>	
             g_d3dDevice-&gt;CreateVertexBuffer( 4*sizeof(LVertex),   <see cref="F:SharpDX.Direct3D9.Usage.WriteOnly"/>, VertexFVF, <see cref="F:SharpDX.Direct3D9.Pool.Default"/>, &amp;pBigSquareVB, <c>null</c> );	
            	
            </code>	
               Set the values for each vertex.  	
            <code>	
             LVertex * v;	
            pBigSquareVB-&gt;Lock( 0, 0, (BYTE**)&amp;v, 0 ); v[0].x  = 0.0f;  v[0].y  = 10.0;  v[0].z  = 10.0f;	
            v[0].diffuse  = 0xffff0000;	
            v[0].specular = 0xff00ff00;	
            v[0].tu = 0.0f;  v[0].tv = 0.0f; v[1].x  = 0.0f;  v[1].y  = 0.0f;  v[1].z  = 10.0f;	
            v[1].diffuse  = 0xff00ff00;	
            v[1].specular = 0xff00ffff;	
            v[1].tu = 0.0f;  v[1].tv = 0.0f; v[2].x  = 10.0f; v[2].y  = 10.0f; v[2].z  = 10.0f;	
            v[2].diffuse  = 0xffff00ff;	
            v[2].specular = 0xff000000;	
            v[2].tu = 0.0f;  v[2].tv = 0.0f; v[3].x  = 0.0f; v[3].y  = 10.0f;  v[3].z = 10.0f;	
            v[3].diffuse  = 0xffffff00;	
            v[3].specular = 0xffff0000;	
            v[3].tu = 0.0f; v[3].tv = 0.0f; pBigSquareVB-&gt;Unlock();	
            	
            </code>	
               The vertex buffer has been initialized and is ready to render. The following code example shows how to use the legacy FVF to draw a square.  	
            <code>	
             g_d3dDevice-&gt;SetFVF(VertexFVF);	
            g_d3dDevice-&gt;SetStreamSource(0, pBigSquareVB, 0, sizeof(LVertex));	
            g_d3dDevice-&gt;DrawPrimitive(<see cref="F:SharpDX.Direct3D9.PrimitiveType.TriangleStrip"/>, 0 ,2);	
            	
            </code>Here are the steps necessary to initialize and use vertices that have a position, a normal, and texture coordinates:Define the custom vertex type and FVF code. 	
            <code>	
             struct Vertex	
            { FLOAT x, y, z; FLOAT nx, ny, nz; FLOAT tu, tv;	
            }; const DWORD VertexFVF = ( <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Texture1"/> );	
            	
            </code>	
               Create a vertex buffer with enough room for four vertices using <see cref="M:SharpDX.Direct3D9.Device.CreateVertexBuffer(System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.VertexFormat,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.VertexBuffer,System.IntPtr)"/> (similar to the example above). Set the values for each vertex.  	
            <code>	
             Vertex * v;	
            pBigSquareVB-&gt;Lock(0, 0, (BYTE**)&amp;v, 0); v[0].x  = 0.0f;  v[0].y  = 10.0;  v[0].z  = 10.0f;	
            v[0].nx = 0.0f;  v[0].ny = 1.0f;  v[0].nz = 0.0f;	
            v[0].tu = 0.0f;  v[0].tv = 0.0f; v[1].x  = 0.0f;  v[1].y  = 0.0f;  v[1].z  = 10.0f;	
            v[1].nx = 0.0f;  v[1].ny = 1.0f;  v[1].nz = 0.0f;	
            v[1].tu = 0.0f;  v[1].tv = 0.0f; v[2].x  = 10.0f; v[2].y  = 10.0f; v[2].z  = 10.0f;	
            v[2].nx = 0.0f;  v[2].ny = 1.0f;  v[2].nz = 0.0f;	
            v[2].tu = 0.0f;  v[2].tv = 0.0f; v[3].x  = 0.0f; v[3].y  = 10.0f;  v[3].z = 10.0f;	
            v[3].nx = 0.0f; v[3].ny = 1.0f;   v[3].nz = 0.0f;	
            v[3].tu = 0.0f; v[3].tv = 0.0f; pBigSquareVB-&gt;Unlock();	
            	
            </code>	
               Draw the object (similar to the example above).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetFVF']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetFVF([In] D3DFVF FVF)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetVertexFormat(SharpDX.Direct3D9.VertexFormat@)">
            <summary>	
            Gets the fixed vertex function declaration.	
            </summary>	
            <param name="ertexFormatRef"><para>A DWORD reference to the fixed function vertex type. For more information, see <see cref="T:SharpDX.Direct3D9.VertexFormat"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The fixed vertex function declaration is a set of FVF flags that determine how vertices processed by the fixed function pipeline will be used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetFVF']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetFVF([Out] D3DFVF* pFVF)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateVertexShader(System.IntPtr,SharpDX.Direct3D9.VertexShader)">
            <summary>	
            Creates a vertex shader.	
            </summary>	
            <param name="functionRef"><para>Pointer to an array of tokens that represents the vertex shader, including any embedded debug and symbol table information.  </para>  Use a function such as <see cref="M:SharpDX.Direct3D9.D3DX9.CompileShader(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)"/> to create the array from a HLSL shader. Use a function like <see cref="M:SharpDX.Direct3D9.D3DX9.AssembleShader(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/> to create the token array from an assembly language shader. Use a function like <see cref="M:SharpDX.Direct3D9.EffectCompiler.CompileShader(SharpDX.Direct3D9.EffectHandle,System.String,SharpDX.Direct3D9.ShaderFlags)"/> to create the array from an effect.</param>	
            <param name="shaderOut"><para>Pointer to the returned vertex shader interface (see <see cref="T:SharpDX.Direct3D9.VertexShader"/>).</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            When a device is created, <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/> uses the behavior flag to determine whether to process vertices in hardware or software. There are three possibilities:Process vertices in hardware by setting <see cref="F:SharpDX.Direct3D9.CreateFlags.HardwareVertexProcessing"/>. Process vertices in software by setting <see cref="F:SharpDX.Direct3D9.CreateFlags.SoftwareVertexProcessing"/>. Process vertices in either hardware or software by setting <see cref="F:SharpDX.Direct3D9.CreateFlags.MixedVertexProcessing"/>. To switch a mixed-mode device between software and hardware processing, use <see cref="M:SharpDX.Direct3D9.Device.SetSoftwareVertexProcessing(System.Boolean)"/>.For an example using <see cref="M:SharpDX.Direct3D9.D3DX9.CompileShader(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)"/>, see HLSLwithoutEffects Sample.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateVertexShader']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateVertexShader([In] const void* pFunction,[Out, Fast] IDirect3DVertexShader9** ppShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShader(SharpDX.Direct3D9.VertexShader)">
            <summary>	
            Sets the vertex shader.	
            </summary>	
            <param name="shaderRef"><para>Vertex shader interface. For more information, see <see cref="T:SharpDX.Direct3D9.VertexShader"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            To set a fixed-function vertex shader (after having set a programmable vertex shader), call <see cref="M:SharpDX.Direct3D9.Device.SetVertexShader(SharpDX.Direct3D9.VertexShader)"/>(<c>null</c>) to release the programmable shader, and then call <see cref="M:SharpDX.Direct3D9.Device.SetVertexFormat(SharpDX.Direct3D9.VertexFormat)"/> with the fixed-function vertex format.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetVertexShader']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShader([In] IDirect3DVertexShader9* pShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetVertexShader(SharpDX.Direct3D9.VertexShader@)">
            <summary>	
            Retrieves the currently set vertex shader.	
            </summary>	
            <param name="shaderOut"><para>Pointer to a vertex shader interface.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If ppShader is invalid, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned.</returns>	
            <remarks>	
            Typically, methods that return state will not work on a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. This method however, will work even on a pure device because it returns an interface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetVertexShader']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexShader([Out] IDirect3DVertexShader9** ppShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstantF(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Sets a floating-point vertex shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="vector4fCount"><para>Number of four float vectors in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetVertexShaderConstantF']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetVertexShaderConstantF(System.Int32,System.Single[],System.Int32)">
            <summary>	
            Gets a floating-point vertex shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="vector4fCount"><para>Number of four float vectors in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetVertexShaderConstantF']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexShaderConstantF([In] unsigned int StartRegister,[In, Buffer] float* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstantI(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Sets an integer vertex shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="vector4iCount"><para>Number of four integer vectors in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetVertexShaderConstantI']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantI([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4iCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetVertexShaderConstantI(System.Int32,System.Int32[],System.Int32)">
            <summary>	
            Gets an integer vertex shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="vector4iCount"><para>Number of four integer vectors in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetVertexShaderConstantI']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexShaderConstantI([In] unsigned int StartRegister,[In, Buffer] int* pConstantData,[In] unsigned int Vector4iCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetVertexShaderConstantB(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Sets a Boolean vertex shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="boolCount"><para>Number of boolean values in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetVertexShaderConstantB']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetVertexShaderConstantB([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int BoolCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetVertexShaderConstantB(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Gets a Boolean vertex shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="boolCount"><para>Number of Boolean values in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetVertexShaderConstantB']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexShaderConstantB([In] unsigned int StartRegister,[In] void* pConstantData,[In] unsigned int BoolCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetStreamSource(System.Int32,SharpDX.Direct3D9.VertexBuffer,System.Int32,System.Int32)">
            <summary>	
            Binds a vertex buffer to a device data stream. For more information, see Setting the Stream Source (Direct3D 9).	
            </summary>	
            <param name="streamNumber">No documentation.</param>	
            <param name="streamDataRef">No documentation.</param>	
            <param name="offsetInBytes">No documentation.</param>	
            <param name="stride">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            When a FVF vertex shader is used, the stride of the vertex stream must match the vertex size, computed from the FVF. When a declaration is used, the stride should be greater than or equal to the stream size computed from the declaration.When calling SetStreamSource, the stride is normally required to be equal to the vertex size. However, there are times when you may want to draw multiple instances of the same or similar geometry (such as when using instancing to draw). For this case, use a zero stride to tell the runtime not to increment the vertex buffer offset (ie: use the same vertex data for all instances). For more information about instancing, see Efficiently Drawing Multiple Instances of Geometry (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetStreamSource']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetStreamSource([In] unsigned int StreamNumber,[In] IDirect3DVertexBuffer9* pStreamData,[In] unsigned int OffsetInBytes,[In] unsigned int Stride)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetStreamSource(System.Int32,SharpDX.Direct3D9.VertexBuffer@,System.Int32@,System.Int32@)">
            <summary>	
            Retrieves a vertex buffer bound to the specified data stream.	
            </summary>	
            <param name="streamNumber"><para>Specifies the data stream, in the range from 0 to the maximum number of streams minus one. </para></param>	
            <param name="streamDataOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> interface, representing the returned vertex buffer bound to the specified data stream. </para></param>	
            <param name="offsetInBytesRef"><para>Pointer containing the offset from the beginning of the stream to the beginning of the vertex data. The offset is measured in bytes. See Remarks.</para></param>	
            <param name="strideRef"><para>Pointer to a returned stride of the component, in bytes. See Remarks. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A stream is defined as a uniform array of component data, where each component consists of one or more elements representing a single entity such as position, normal, color, and so on.When a FVF vertex shader is used, the stride of the vertex stream must match the vertex size, computed from the FVF. When a declaration is used, the stride should be greater than or equal to the stream size computed from the declaration.Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetStreamSource']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetStreamSource([In] unsigned int StreamNumber,[Out] IDirect3DVertexBuffer9** ppStreamData,[Out] unsigned int* pOffsetInBytes,[Out] unsigned int* pStride)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetStreamSourceFrequency(System.Int32,System.Int32)">
            <summary>	
            Sets the stream source frequency divider value. This may be used to draw several instances of geometry.	
            </summary>	
            <param name="streamNumber"><para>Stream source number.</para></param>	
            <param name="setting"><para>This parameter may have two different values. See remarks.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            There are two constants defined in d3d9types.h that are designed to use with SetStreamSourceFreq: <see cref="F:SharpDX.Direct3D9.StreamSource.IndexedData"/> and <see cref="F:SharpDX.Direct3D9.StreamSource.InstanceData"/>. To see how to use the constants, see Efficiently Drawing Multiple Instances of Geometry (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetStreamSourceFreq']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetStreamSourceFreq([In] unsigned int StreamNumber,[In] unsigned int Setting)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetStreamSourceFrequency(System.Int32,System.Int32@)">
            <summary>	
            Gets the stream source frequency divider value.	
            </summary>	
            <param name="streamNumber"><para>Stream source number.</para></param>	
            <param name="settingRef"><para>Returns the frequency divider value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Vertex shaders can now be invoked more than once per vertex. See Drawing Non-Indexed Geometry.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetStreamSourceFreq']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetStreamSourceFreq([In] unsigned int StreamNumber,[Out] unsigned int* pSetting)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetIndices(SharpDX.Direct3D9.IndexBuffer)">
            <summary>	
            Sets index data.	
            </summary>	
            <param name="indexDataRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface, representing the index data to be set. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            When an application no longer holds a references to this interface, the interface will automatically be freed.The <see cref="M:SharpDX.Direct3D9.Device.SetIndices(SharpDX.Direct3D9.IndexBuffer)"/> method sets the current index array to an index buffer. The single set of indices is used to index all streams.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetIndices']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetIndices([In] IDirect3DIndexBuffer9* pIndexData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetIndices(SharpDX.Direct3D9.IndexBuffer@)">
            <summary>	
            Retrieves index data.	
            </summary>	
            <param name="indexDataOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface, representing the returned index data. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetIndices']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetIndices([Out] IDirect3DIndexBuffer9** ppIndexData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreatePixelShader(System.IntPtr,SharpDX.Direct3D9.PixelShader)">
            <summary>	
            Creates a pixel shader.	
            </summary>	
            <param name="functionRef"><para>Pointer to the pixel shader function token array, specifying the blending operations. This value cannot be <c>null</c>. </para></param>	
            <param name="shaderOut"><para>Pointer to the returned pixel shader interface. See <see cref="T:SharpDX.Direct3D9.PixelShader"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreatePixelShader']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreatePixelShader([In] const void* pFunction,[Out, Fast] IDirect3DPixelShader9** ppShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShader(SharpDX.Direct3D9.PixelShader)">
            <summary>	
            Sets the current pixel shader to a previously created pixel shader.	
            </summary>	
            <param name="shaderRef"><para>Pixel shader interface.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetPixelShader']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShader([In] IDirect3DPixelShader9* pShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetPixelShader(SharpDX.Direct3D9.PixelShader@)">
            <summary>	
            Retrieves the currently set pixel shader.	
            </summary>	
            <param name="shaderOut"><para>Pointer to a pixel shader interface.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method will not work on a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetPixelShader']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetPixelShader([Out] IDirect3DPixelShader9** ppShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstantF(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Sets a floating-point shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="vector4fCount"><para>Number of four float vectors in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetPixelShaderConstantF']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantF([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetPixelShaderConstantF(System.Int32,System.Single[],System.Int32)">
            <summary>	
            Gets a floating-point shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="vector4fCount"><para>Number of four float vectors in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetPixelShaderConstantF']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetPixelShaderConstantF([In] unsigned int StartRegister,[In, Buffer] float* pConstantData,[In] unsigned int Vector4fCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstantI(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Sets an integer shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="vector4iCount"><para>Number of four integer vectors in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetPixelShaderConstantI']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantI([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int Vector4iCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetPixelShaderConstantI(System.Int32,System.Int32[],System.Int32)">
            <summary>	
            Gets an integer shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="vector4iCount"><para>Number of four integer vectors in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetPixelShaderConstantI']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetPixelShaderConstantI([In] unsigned int StartRegister,[In, Buffer] int* pConstantData,[In] unsigned int Vector4iCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.SetPixelShaderConstantB(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Sets a Boolean shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="boolCount"><para>Number of boolean values in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetPixelShaderConstantB']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::SetPixelShaderConstantB([In] unsigned int StartRegister,[In] const void* pConstantData,[In] unsigned int BoolCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.GetPixelShaderConstantB(System.Int32,System.IntPtr,System.Int32)">
            <summary>	
            Gets a Boolean shader constant.	
            </summary>	
            <param name="startRegister"><para>Register number that will contain the first constant value.</para></param>	
            <param name="constantDataRef"><para>Pointer to an array of constants.</para></param>	
            <param name="boolCount"><para>Number of Boolean values in the array of constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetPixelShaderConstantB']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::GetPixelShaderConstantB([In] unsigned int StartRegister,[In] void* pConstantData,[In] unsigned int BoolCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawRectanglePatch(System.Int32,System.Single[],System.IntPtr)">
            <summary>	
            Draws a rectangular patch using the currently set streams.	
            </summary>	
            <param name="handle"><para>Handle to the rectangular patch to draw. </para></param>	
            <param name="numSegsRef"><para>Pointer to an array of four floating-point values that identify the number of segments each edge of the rectangle patch should be divided into when tessellated. See <see cref="T:SharpDX.Direct3D9.RectanglePatchInfo"/>. </para></param>	
            <param name="rectPatchInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.RectanglePatchInfo"/> structure, describing the rectangular patch to draw. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be  <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            For static patches: Set the vertex shader, set the appropriate streams, supply patch information in the pRectPatchInfo parameter, and specify a handle so that Direct3D can capture and cache information. Call <see cref="M:SharpDX.Direct3D9.Device.DrawRectanglePatch(System.Int32,System.Single[])"/> subsequently with pRectPatchInfo set to <c>null</c> to efficiently draw the patch. When drawing a cached patch, the currently set streams are ignored. Override the cached pNumSegs by specifying a new value for pNumSegs. When rendering a cached patch, you must set the same vertex shader that was set when it was captured.Calling <see cref="M:SharpDX.Direct3D9.Device.DrawRectanglePatch(System.Int32,System.Single[])"/> with a handle invalidates the same handle cached by a previous <see cref="M:SharpDX.Direct3D9.Device.DrawTrianglePatch(System.Int32,System.Single[])"/> call.For dynamic patches, the patch data changes for every rendering of the patch, so it is not efficient to cache information. The application can convey this to Direct3D by setting Handle to 0. In this case, Direct3D draws the patch using the currently set streams and the pNumSegs values, and does not cache any information. It is not valid to simultaneously set Handle to 0 and pRectPatchInfo to <c>null</c>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::DrawRectPatch']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::DrawRectPatch([In] unsigned int Handle,[In, Buffer] const float* pNumSegs,[In] const void* pRectPatchInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DrawTrianglePatch(System.Int32,System.Single[],System.IntPtr)">
            <summary>	
            Draws a triangular patch using the currently set streams.	
            </summary>	
            <param name="handle"><para>Handle to the triangular patch to draw. </para></param>	
            <param name="numSegsRef"><para>Pointer to an array of three floating-point values that identify the number of segments each edge of the triangle patch should be divided into when tessellated. See <see cref="T:SharpDX.Direct3D9.TrianglePatchInfo"/>. </para></param>	
            <param name="triPatchInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.TrianglePatchInfo"/> structure, describing the triangular high-order patch to draw. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be  <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            For static patches: Set the vertex shader, set the appropriate streams, supply patch information in the pTriPatchInfo parameter, and specify a handle so that Direct3D can capture and cache information. To efficiently draw the patch, call <see cref="M:SharpDX.Direct3D9.Device.DrawTrianglePatch(System.Int32,System.Single[])"/> with pTriPatchInfo set to <c>null</c>. When drawing a cached patch, the currently set streams are ignored. Override the cached pNumSegs by specifying a new value for pNumSegs. When rendering a cached patch, you must set the same vertex shader that was set when it was captured.Calling <see cref="M:SharpDX.Direct3D9.Device.DrawTrianglePatch(System.Int32,System.Single[])"/> with a handle invalidates the same handle cached by a previous <see cref="M:SharpDX.Direct3D9.Device.DrawRectanglePatch(System.Int32,System.Single[])"/> call.For dynamic patches, the patch data changes for every rendering of the patch so it is not efficient to cache information. The application can convey this to Direct3D by setting Handle to 0. In this case, Direct3D draws the patch using the currently set streams and the pNumSegs values, and does not cache any information. It is not valid to simultaneously set Handle to 0 and pTriPatchInfo to <c>null</c>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::DrawTriPatch']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::DrawTriPatch([In] unsigned int Handle,[In, Buffer] const float* pNumSegs,[In] const void* pTriPatchInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.DeletePatch(System.Int32)">
            <summary>	
            Frees a cached high-order patch.	
            </summary>	
            <param name="handle"><para>Handle of the cached high-order patch to delete. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be  <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::DeletePatch']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::DeletePatch([In] unsigned int Handle)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Device.CreateQuery(SharpDX.Direct3D9.QueryType,SharpDX.Direct3D9.Query)">
            <summary>	
            Creates a status query.	
            </summary>	
            <param name="type"><para>Identifies the query type. For more information, see <see cref="T:SharpDX.Direct3D9.QueryType"/>.</para></param>	
            <param name="queryOut"><para>Returns a reference to the query interface that manages the query object. See <see cref="T:SharpDX.Direct3D9.Query"/>. </para> <para>This parameter can be set to <c>null</c> to see if a query is supported. If the query is not supported, the method returns <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/> or  E_OUTOFMEMORY.</returns>	
            <remarks>	
            This method is provided for both synchronous and asynchronous queries. It takes the place of GetInfo, which is no longer supported in Direct3D 9.Synchronous and asynchronous queries are created with <see cref="M:SharpDX.Direct3D9.Device.CreateQuery(SharpDX.Direct3D9.QueryType,SharpDX.Direct3D9.Query)"/> with <see cref="T:SharpDX.Direct3D9.QueryType"/>. When a query has been created and the API calls have been made that are being queried, use <see cref="M:SharpDX.Direct3D9.Query.Issue(SharpDX.Direct3D9.Issue)"/> to issue a query and  <see cref="M:SharpDX.Direct3D9.Query.GetData(System.IntPtr,System.Int32,System.Int32)"/> to get the results of the query.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::CreateQuery']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9::CreateQuery([In] D3DQUERYTYPE Type,[Out, Fast] IDirect3DQuery9** ppQuery)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Device.AvailableTextureMemory">
            <summary>
            Gets the available texture memory.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.DriverLevel">
            <summary>
            Gets the driver level.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.PixelShaderProfile">
            <summary>
            Gets the pixel shader profile.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.VertexShaderProfile">
            <summary>
            Gets the vertex shader profile.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.ShowCursor">
            <summary>
            Gets or sets a value indicating whether the cursor can be displayed.
            </summary>
            <value>
            <c>true</c> if the cursor can be displayed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.Direct3D">
            <summary>	
            Returns an interface to the instance of the Direct3D object that created the device.	
            </summary>	
            <remarks>	
            Calling <see cref="M:SharpDX.Direct3D9.Device.GetDirect3D(SharpDX.Direct3D9.Direct3D@)"/> will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetDirect3D']/*"/>	
            <unmanaged>GetDirect3D</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetDirect3D([Out] IDirect3D9** ppD3D9)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.Capabilities">
            <summary>	
            Retrieves the capabilities of the rendering device.	
            </summary>	
            <remarks>	
            IDirect3DDevice9::GetDeviceCaps retrieves the software vertex pipeline capabilities when the device is being used in software vertex processing mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetDeviceCaps']/*"/>	
            <unmanaged>GetDeviceCaps</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetDeviceCaps([Out] D3DCAPS9* pCaps)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.CreationParameters">
            <summary>	
            Retrieves the creation parameters of the device.	
            </summary>	
            <remarks>	
            You can query the AdapterOrdinal member of the returned <see cref="T:SharpDX.Direct3D9.CreationParameters"/> structure to retrieve the ordinal of the adapter represented by this device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetCreationParameters']/*"/>	
            <unmanaged>GetCreationParameters</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetCreationParameters([Out] D3DDEVICE_CREATION_PARAMETERS* pParameters)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.SwapChainCount">
            <summary>	
            Gets the number of implicit swap chains.	
            </summary>	
            <remarks>	
            Implicit swap chains are created by the device during <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/>. This method returns the number of swap chains created by CreateDevice.An application may create additional swap chains using <see cref="M:SharpDX.Direct3D9.Device.CreateAdditionalSwapChain(SharpDX.Direct3D9.PresentParameters@,SharpDX.Direct3D9.SwapChain)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetNumberOfSwapChains']/*"/>	
            <unmanaged>GetNumberOfSwapChains</unmanaged>	
            <unmanaged>unsigned int IDirect3DDevice9::GetNumberOfSwapChains()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.DialogBoxMode">
            <summary>	
            This method allows the use of GDI dialog boxes in full-screen mode applications.	
            </summary>	
            <remarks>	
            The GDI dialog boxes must be created as child to the device window. They should also be created within the same thread that created the device because this enables the parent window to manage redrawing the child window.The method has no effect for windowed mode applications, but this setting will be respected if the application resets the device into full-screen mode. If SetDialogBoxMode succeeds in a windowed mode application, any subsequent reset to full-screen mode will be checked against the restrictions listed above.  Also, SetDialogBoxMode causes all back buffers on the swap chain to be discarded, so an application is expected to refresh its content for all back buffers after this call.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::SetDialogBoxMode']/*"/>	
            <unmanaged>SetDialogBoxMode</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::SetDialogBoxMode([In] BOOL bEnableDialogs)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.DepthStencilSurface">
            <summary>	
            Gets the depth-stencil surface owned by the Direct3DDevice object.	
            </summary>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Surface"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetDepthStencilSurface']/*"/>	
            <unmanaged>GetDepthStencilSurface</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetDepthStencilSurface([Out] IDirect3DSurface9** ppZStencilSurface)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.Viewport">
            <summary>	
            Retrieves the viewport parameters currently set for the device.	
            </summary>	
            <remarks>	
            Typically, methods that return state will not work on a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. This method however, will work even on a pure device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetViewport']/*"/>	
            <unmanaged>GetViewport</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetViewport([Out] D3DVIEWPORT9* pViewport)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.Material">
            <summary>	
            Retrieves the current material properties for the device.	
            </summary>	
            <remarks>	
            This method will not return device state for a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. If you want to use this method, you must create your device with any of the other values in <see cref="T:SharpDX.Direct3D9.CreateFlags"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetMaterial']/*"/>	
            <unmanaged>GetMaterial</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetMaterial([Out] D3DMATERIAL9* pMaterial)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.ClipStatus">
            <summary>	
            Retrieves the clip status.	
            </summary>	
            <remarks>	
            When clipping is enabled during vertex processing (by <see cref="M:SharpDX.Direct3D9.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.VertexBuffer,SharpDX.Direct3D9.VertexDeclaration,SharpDX.Direct3D9.LockFlags)"/>, <see cref="M:SharpDX.Direct3D9.Device.DrawPrimitives(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32)"/>, or other drawing functions), Direct3D computes a clip code for every vertex. The clip code is a combination of D3DCS_* bits. When a vertex is outside a particular clipping plane, the corresponding bit is set in the clipping code. Direct3D maintains the clip status using <see cref="T:SharpDX.Direct3D9.ClipStatus"/>, which has ClipUnion and ClipIntersection members. ClipUnion is a bitwise "OR" of all vertex clip codes and ClipIntersection is a bitwise "AND" of all vertex clip codes. Initial values are zero for ClipUnion and 0xFFFFFFFF for ClipIntersection. When <see cref="F:SharpDX.Direct3D9.RenderState.Clipping"/> is set to <see cref="F:SharpDX.Result.False"/>, ClipUnion and ClipIntersection are set to zero. Direct3D updates the clip status during drawing calls. To compute clip status for a particular object, set ClipUnion and ClipIntersection to their initial value and continue drawing.Clip status is not updated by <see cref="M:SharpDX.Direct3D9.Device.DrawRectanglePatch(System.Int32,System.Single[])"/> and <see cref="M:SharpDX.Direct3D9.Device.DrawTrianglePatch(System.Int32,System.Single[])"/> because there is no software emulation for them.Clip status is used during software vertex processing. Therefore, this method is not supported on pure or nonpure hardware processing devices. For more information about pure devices, see <see cref="T:SharpDX.Direct3D9.CreateFlags"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetClipStatus']/*"/>	
            <unmanaged>GetClipStatus</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetClipStatus([Out] D3DCLIPSTATUS9* pClipStatus)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.CurrentTexturePalette">
            <summary>	
            Retrieves the current texture palette.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetCurrentTexturePalette']/*"/>	
            <unmanaged>GetCurrentTexturePalette</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetCurrentTexturePalette([Out] unsigned int* PaletteNumber)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.ScissorRect">
            <summary>	
            Gets the scissor rectangle.	
            </summary>	
            <remarks>	
            The scissor rectangle is used as a rectangular clipping region.See Rectangles (Direct3D 9) for further information on the use of rectangles in DirectX.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetScissorRect']/*"/>	
            <unmanaged>GetScissorRect</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetScissorRect([Out] RECT* pRect)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.SoftwareVertexProcessing">
            <summary>	
            Gets the vertex processing (hardware or software) mode.	
            </summary>	
            <remarks>	
            An application can create a mixed-mode device to use both the software vertex processing and the hardware vertex processing. To switch between the two vertex processing modes in DirectX 8.x, use <see cref="M:SharpDX.Direct3D9.Device.SetRenderState(SharpDX.Direct3D9.RenderState,System.Boolean)"/> with the render state D3DRS_SOFTWAREVERTEXPROCESSING and the appropriate <see cref="T:System.Boolean"/> argument. The drawback of the render state approach was the difficulty in defining the semantics for state blocks. Applications and the runtime had to do extra work and be careful while recording and playing back state blocks.In Direct3D 9, use <see cref="M:SharpDX.Direct3D9.Device.SetSoftwareVertexProcessing(System.Boolean)"/> instead. This new API is not recorded by StateBlocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetSoftwareVertexProcessing']/*"/>	
            <unmanaged>GetSoftwareVertexProcessing</unmanaged>	
            <unmanaged>BOOL IDirect3DDevice9::GetSoftwareVertexProcessing()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.NPatchMode">
            <summary>	
            Gets the N-patch mode segments.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetNPatchMode']/*"/>	
            <unmanaged>GetNPatchMode</unmanaged>	
            <unmanaged>float IDirect3DDevice9::GetNPatchMode()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.VertexDeclaration">
            <summary>	
            Gets a vertex shader declaration.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetVertexDeclaration']/*"/>	
            <unmanaged>GetVertexDeclaration</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexDeclaration([Out] IDirect3DVertexDeclaration9** ppDecl)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.VertexFormat">
            <summary>	
            Gets the fixed vertex function declaration.	
            </summary>	
            <remarks>	
            The fixed vertex function declaration is a set of FVF flags that determine how vertices processed by the fixed function pipeline will be used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetFVF']/*"/>	
            <unmanaged>GetFVF</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetFVF([Out] D3DFVF* pFVF)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.VertexShader">
            <summary>	
            Retrieves the currently set vertex shader.	
            </summary>	
            <remarks>	
            Typically, methods that return state will not work on a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>. This method however, will work even on a pure device because it returns an interface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetVertexShader']/*"/>	
            <unmanaged>GetVertexShader</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetVertexShader([Out] IDirect3DVertexShader9** ppShader)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.Indices">
            <summary>	
            Retrieves index data.	
            </summary>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetIndices']/*"/>	
            <unmanaged>GetIndices</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetIndices([Out] IDirect3DIndexBuffer9** ppIndexData)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Device.PixelShader">
            <summary>	
            Retrieves the currently set pixel shader.	
            </summary>	
            <remarks>	
            This method will not work on a device that is created using <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9::GetPixelShader']/*"/>	
            <unmanaged>GetPixelShader</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9::GetPixelShader([Out] IDirect3DPixelShader9** ppShader)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.DeviceEx">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.DeviceEx"/> interface to render primitives, create resources, work with system-level variables, adjust gamma ramp levels, work with palettes, and create shaders. The <see cref="T:SharpDX.Direct3D9.DeviceEx"/> interface derives from the <see cref="T:SharpDX.Direct3D9.Device"/> interface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex']/*"/>	
            <unmanaged>IDirect3DDevice9Ex</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.#ctor(SharpDX.Direct3D9.Direct3DEx,System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[])">
            <summary>
            Creates a device to represent the display adapter.
            </summary>
            <param name="direct3D">an instance of <see cref="T:SharpDX.Direct3D9.Direct3D"/></param>
            <param name="adapter">Ordinal number that denotes the display adapter. {{D3DADAPTER_DEFAULT}} is always the primary display adapter.</param>
            <param name="deviceType">Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type that denotes the desired device type. If the desired device type is not available, the method will fail.</param>
            <param name="controlHandle">The focus window alerts Direct3D when an application switches from foreground mode to background mode. See Remarks. 	   For full-screen mode, the window specified must be a top-level window. For windowed mode, this parameter may be NULL only if the hDeviceWindow member of pPresentationParameters is set to a valid, non-NULL value.</param>
            <param name="createFlags">Combination of one or more options that control device creation. For more information, see {{D3DCREATE}}.</param>
            <param name="presentParameters">Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, describing the presentation parameters for the device to be created. If BehaviorFlags specifies {{D3DCREATE_ADAPTERGROUP_DEVICE}}, pPresentationParameters is an array. Regardless of the number of heads that exist, only one depth/stencil surface is automatically created. For Windows 2000 and Windows XP, the full-screen device display refresh rate is set in the following order:   User-specified nonzero ForcedRefreshRate registry key, if supported by the device. Application-specified nonzero refresh rate value in the presentation parameter. Refresh rate of the latest desktop mode, if supported by the device. 75 hertz if supported by the device. 60 hertz if supported by the device. Device default.  An unsupported refresh rate will default to the closest supported refresh rate below it.  For example, if the application specifies 63 hertz, 60 hertz will be used. There are no supported refresh rates below 57 hertz. pPresentationParameters is both an input and an output parameter. Calling this method may change several members including:  If BackBufferCount, BackBufferWidth, and BackBufferHeight  are 0 before the method is called, they will be changed when the method returns. If BackBufferFormat equals <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> before the method is called, it will be changed when the method returns.</param>
            <remarks>
            This method returns a fully working device interface, set to the required display mode (or windowed), and allocated with the appropriate back buffers. To begin rendering, the application needs only to create and set a depth buffer (assuming EnableAutoDepthStencil is FALSE in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). When you create a Direct3D device, you supply two different window parameters: a focus window (hFocusWindow) and a device window (the hDeviceWindow in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). The purpose of each window is:  The focus window alerts Direct3D when an application switches from foreground mode to background mode (via Alt-Tab, a mouse click, or some other method). A single focus window is shared by each device created by an application. The device window determines the location and size of the back buffer on screen. This is used by Direct3D when the back buffer contents are copied to the front buffer during {{Present}}.  This method should not be run during the handling of WM_CREATE. An application should never pass a window handle to Direct3D while handling WM_CREATE.  Any call to create, release, or reset the device must be done using the same thread as the window procedure of the focus window. Note that D3DCREATE_HARDWARE_VERTEXPROCESSING, D3DCREATE_MIXED_VERTEXPROCESSING, and D3DCREATE_SOFTWARE_VERTEXPROCESSING are mutually exclusive flags, and at least one of these vertex processing flags must be specified when calling this method. Back buffers created as part of the device are only lockable if D3DPRESENTFLAG_LOCKABLE_BACKBUFFER is specified in the presentation parameters. (Multisampled back buffers and depth surfaces are never lockable.) The methods {{Reset}}, <see cref="T:SharpDX.ComObject"/>, and {{TestCooperativeLevel}} must be called from the same thread that used this method to create a device. D3DFMT_UNKNOWN can be specified for the windowed mode back buffer format when calling CreateDevice, {{Reset}}, and {{CreateAdditionalSwapChain}}. This means the application does not have to query the current desktop format before calling CreateDevice for windowed mode. For full-screen mode, the back buffer format must be specified. If you attempt to create a device on a 0x0 sized window, CreateDevice will fail.
            </remarks>
            <unmanaged>HRESULT CreateDevice([None] UINT Adapter,[None] D3DDEVTYPE DeviceType,[None] HWND hFocusWindow,[None] int BehaviorFlags,[None] D3DPRESENT_PARAMETERS* pPresentationParameters,[None] IDirect3DDevice9** ppReturnedDeviceInterface)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.#ctor(SharpDX.Direct3D9.Direct3DEx,System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters)">
            <summary>
            Creates a device to represent the display adapter.
            </summary>
            <param name="direct3D">an instance of <see cref="T:SharpDX.Direct3D9.Direct3D"/></param>
            <param name="adapter">Ordinal number that denotes the display adapter. {{D3DADAPTER_DEFAULT}} is always the primary display adapter.</param>
            <param name="deviceType">Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type that denotes the desired device type. If the desired device type is not available, the method will fail.</param>
            <param name="controlHandle">The focus window alerts Direct3D when an application switches from foreground mode to background mode. See Remarks. 	   For full-screen mode, the window specified must be a top-level window. For windowed mode, this parameter may be NULL only if the hDeviceWindow member of pPresentationParameters is set to a valid, non-NULL value.</param>
            <param name="createFlags">Combination of one or more options that control device creation. For more information, see {{D3DCREATE}}.</param>
            <param name="presentParameters">Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, describing the presentation parameters for the device to be created. If BehaviorFlags specifies {{D3DCREATE_ADAPTERGROUP_DEVICE}}, pPresentationParameters is an array. Regardless of the number of heads that exist, only one depth/stencil surface is automatically created. For Windows 2000 and Windows XP, the full-screen device display refresh rate is set in the following order:   User-specified nonzero ForcedRefreshRate registry key, if supported by the device. Application-specified nonzero refresh rate value in the presentation parameter. Refresh rate of the latest desktop mode, if supported by the device. 75 hertz if supported by the device. 60 hertz if supported by the device. Device default.  An unsupported refresh rate will default to the closest supported refresh rate below it.  For example, if the application specifies 63 hertz, 60 hertz will be used. There are no supported refresh rates below 57 hertz. pPresentationParameters is both an input and an output parameter. Calling this method may change several members including:  If BackBufferCount, BackBufferWidth, and BackBufferHeight  are 0 before the method is called, they will be changed when the method returns. If BackBufferFormat equals <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> before the method is called, it will be changed when the method returns.</param>
            <remarks>
            This method returns a fully working device interface, set to the required display mode (or windowed), and allocated with the appropriate back buffers. To begin rendering, the application needs only to create and set a depth buffer (assuming EnableAutoDepthStencil is FALSE in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). When you create a Direct3D device, you supply two different window parameters: a focus window (hFocusWindow) and a device window (the hDeviceWindow in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). The purpose of each window is:  The focus window alerts Direct3D when an application switches from foreground mode to background mode (via Alt-Tab, a mouse click, or some other method). A single focus window is shared by each device created by an application. The device window determines the location and size of the back buffer on screen. This is used by Direct3D when the back buffer contents are copied to the front buffer during {{Present}}.  This method should not be run during the handling of WM_CREATE. An application should never pass a window handle to Direct3D while handling WM_CREATE.  Any call to create, release, or reset the device must be done using the same thread as the window procedure of the focus window. Note that D3DCREATE_HARDWARE_VERTEXPROCESSING, D3DCREATE_MIXED_VERTEXPROCESSING, and D3DCREATE_SOFTWARE_VERTEXPROCESSING are mutually exclusive flags, and at least one of these vertex processing flags must be specified when calling this method. Back buffers created as part of the device are only lockable if D3DPRESENTFLAG_LOCKABLE_BACKBUFFER is specified in the presentation parameters. (Multisampled back buffers and depth surfaces are never lockable.) The methods {{Reset}}, <see cref="T:SharpDX.ComObject"/>, and {{TestCooperativeLevel}} must be called from the same thread that used this method to create a device. D3DFMT_UNKNOWN can be specified for the windowed mode back buffer format when calling CreateDevice, {{Reset}}, and {{CreateAdditionalSwapChain}}. This means the application does not have to query the current desktop format before calling CreateDevice for windowed mode. For full-screen mode, the back buffer format must be specified. If you attempt to create a device on a 0x0 sized window, CreateDevice will fail.
            </remarks>
            <unmanaged>HRESULT CreateDevice([None] UINT Adapter,[None] D3DDEVTYPE DeviceType,[None] HWND hFocusWindow,[None] int BehaviorFlags,[None] D3DPRESENT_PARAMETERS* pPresentationParameters,[None] IDirect3DDevice9** ppReturnedDeviceInterface)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.#ctor(SharpDX.Direct3D9.Direct3DEx,System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters,SharpDX.Direct3D9.DisplayModeEx)">
            <summary>
            Creates a device to represent the display adapter.
            </summary>
            <param name="direct3D">an instance of <see cref="T:SharpDX.Direct3D9.Direct3D"/></param>
            <param name="adapter">Ordinal number that denotes the display adapter. {{D3DADAPTER_DEFAULT}} is always the primary display adapter.</param>
            <param name="deviceType">Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type that denotes the desired device type. If the desired device type is not available, the method will fail.</param>
            <param name="controlHandle">The focus window alerts Direct3D when an application switches from foreground mode to background mode. See Remarks. 	   For full-screen mode, the window specified must be a top-level window. For windowed mode, this parameter may be NULL only if the hDeviceWindow member of pPresentationParameters is set to a valid, non-NULL value.</param>
            <param name="createFlags">Combination of one or more options that control device creation. For more information, see {{D3DCREATE}}.</param>
            <param name="presentParameters">Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, describing the presentation parameters for the device to be created. If BehaviorFlags specifies {{D3DCREATE_ADAPTERGROUP_DEVICE}}, pPresentationParameters is an array. Regardless of the number of heads that exist, only one depth/stencil surface is automatically created. For Windows 2000 and Windows XP, the full-screen device display refresh rate is set in the following order:   User-specified nonzero ForcedRefreshRate registry key, if supported by the device. Application-specified nonzero refresh rate value in the presentation parameter. Refresh rate of the latest desktop mode, if supported by the device. 75 hertz if supported by the device. 60 hertz if supported by the device. Device default.  An unsupported refresh rate will default to the closest supported refresh rate below it.  For example, if the application specifies 63 hertz, 60 hertz will be used. There are no supported refresh rates below 57 hertz. pPresentationParameters is both an input and an output parameter. Calling this method may change several members including:  If BackBufferCount, BackBufferWidth, and BackBufferHeight  are 0 before the method is called, they will be changed when the method returns. If BackBufferFormat equals <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> before the method is called, it will be changed when the method returns.</param>
            <param name="fullScreenDisplayMode">The full screen display mode.</param>
            <remarks>
            This method returns a fully working device interface, set to the required display mode (or windowed), and allocated with the appropriate back buffers. To begin rendering, the application needs only to create and set a depth buffer (assuming EnableAutoDepthStencil is FALSE in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). When you create a Direct3D device, you supply two different window parameters: a focus window (hFocusWindow) and a device window (the hDeviceWindow in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). The purpose of each window is:  The focus window alerts Direct3D when an application switches from foreground mode to background mode (via Alt-Tab, a mouse click, or some other method). A single focus window is shared by each device created by an application. The device window determines the location and size of the back buffer on screen. This is used by Direct3D when the back buffer contents are copied to the front buffer during {{Present}}.  This method should not be run during the handling of WM_CREATE. An application should never pass a window handle to Direct3D while handling WM_CREATE.  Any call to create, release, or reset the device must be done using the same thread as the window procedure of the focus window. Note that D3DCREATE_HARDWARE_VERTEXPROCESSING, D3DCREATE_MIXED_VERTEXPROCESSING, and D3DCREATE_SOFTWARE_VERTEXPROCESSING are mutually exclusive flags, and at least one of these vertex processing flags must be specified when calling this method. Back buffers created as part of the device are only lockable if D3DPRESENTFLAG_LOCKABLE_BACKBUFFER is specified in the presentation parameters. (Multisampled back buffers and depth surfaces are never lockable.) The methods {{Reset}}, <see cref="T:SharpDX.ComObject"/>, and {{TestCooperativeLevel}} must be called from the same thread that used this method to create a device. D3DFMT_UNKNOWN can be specified for the windowed mode back buffer format when calling CreateDevice, {{Reset}}, and {{CreateAdditionalSwapChain}}. This means the application does not have to query the current desktop format before calling CreateDevice for windowed mode. For full-screen mode, the back buffer format must be specified. If you attempt to create a device on a 0x0 sized window, CreateDevice will fail.
            </remarks>
            <unmanaged>HRESULT CreateDevice([None] UINT Adapter,[None] D3DDEVTYPE DeviceType,[None] HWND hFocusWindow,[None] int BehaviorFlags,[None] D3DPRESENT_PARAMETERS* pPresentationParameters,[None] IDirect3DDevice9** ppReturnedDeviceInterface)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.#ctor(SharpDX.Direct3D9.Direct3DEx,System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.DisplayModeEx[])">
            <summary>
            Creates a device to represent the display adapter.
            </summary>
            <param name="direct3D">an instance of <see cref="T:SharpDX.Direct3D9.Direct3D"/></param>
            <param name="adapter">Ordinal number that denotes the display adapter. {{D3DADAPTER_DEFAULT}} is always the primary display adapter.</param>
            <param name="deviceType">Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type that denotes the desired device type. If the desired device type is not available, the method will fail.</param>
            <param name="controlHandle">The focus window alerts Direct3D when an application switches from foreground mode to background mode. See Remarks. 	   For full-screen mode, the window specified must be a top-level window. For windowed mode, this parameter may be NULL only if the hDeviceWindow member of pPresentationParameters is set to a valid, non-NULL value.</param>
            <param name="createFlags">Combination of one or more options that control device creation. For more information, see {{D3DCREATE}}.</param>
            <param name="presentParameters">Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, describing the presentation parameters for the device to be created. If BehaviorFlags specifies {{D3DCREATE_ADAPTERGROUP_DEVICE}}, pPresentationParameters is an array. Regardless of the number of heads that exist, only one depth/stencil surface is automatically created. For Windows 2000 and Windows XP, the full-screen device display refresh rate is set in the following order:   User-specified nonzero ForcedRefreshRate registry key, if supported by the device. Application-specified nonzero refresh rate value in the presentation parameter. Refresh rate of the latest desktop mode, if supported by the device. 75 hertz if supported by the device. 60 hertz if supported by the device. Device default.  An unsupported refresh rate will default to the closest supported refresh rate below it.  For example, if the application specifies 63 hertz, 60 hertz will be used. There are no supported refresh rates below 57 hertz. pPresentationParameters is both an input and an output parameter. Calling this method may change several members including:  If BackBufferCount, BackBufferWidth, and BackBufferHeight  are 0 before the method is called, they will be changed when the method returns. If BackBufferFormat equals <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> before the method is called, it will be changed when the method returns.</param>
            <param name="fullScreenDisplayMode">The full screen display mode.</param>
            <remarks>
            This method returns a fully working device interface, set to the required display mode (or windowed), and allocated with the appropriate back buffers. To begin rendering, the application needs only to create and set a depth buffer (assuming EnableAutoDepthStencil is FALSE in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). When you create a Direct3D device, you supply two different window parameters: a focus window (hFocusWindow) and a device window (the hDeviceWindow in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). The purpose of each window is:  The focus window alerts Direct3D when an application switches from foreground mode to background mode (via Alt-Tab, a mouse click, or some other method). A single focus window is shared by each device created by an application. The device window determines the location and size of the back buffer on screen. This is used by Direct3D when the back buffer contents are copied to the front buffer during {{Present}}.  This method should not be run during the handling of WM_CREATE. An application should never pass a window handle to Direct3D while handling WM_CREATE.  Any call to create, release, or reset the device must be done using the same thread as the window procedure of the focus window. Note that D3DCREATE_HARDWARE_VERTEXPROCESSING, D3DCREATE_MIXED_VERTEXPROCESSING, and D3DCREATE_SOFTWARE_VERTEXPROCESSING are mutually exclusive flags, and at least one of these vertex processing flags must be specified when calling this method. Back buffers created as part of the device are only lockable if D3DPRESENTFLAG_LOCKABLE_BACKBUFFER is specified in the presentation parameters. (Multisampled back buffers and depth surfaces are never lockable.) The methods {{Reset}}, <see cref="T:SharpDX.ComObject"/>, and {{TestCooperativeLevel}} must be called from the same thread that used this method to create a device. D3DFMT_UNKNOWN can be specified for the windowed mode back buffer format when calling CreateDevice, {{Reset}}, and {{CreateAdditionalSwapChain}}. This means the application does not have to query the current desktop format before calling CreateDevice for windowed mode. For full-screen mode, the back buffer format must be specified. If you attempt to create a device on a 0x0 sized window, CreateDevice will fail.
            </remarks>
            <unmanaged>HRESULT CreateDevice([None] UINT Adapter,[None] D3DDEVTYPE DeviceType,[None] HWND hFocusWindow,[None] int BehaviorFlags,[None] D3DPRESENT_PARAMETERS* pPresentationParameters,[None] IDirect3DDevice9** ppReturnedDeviceInterface)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.CheckDeviceState(System.IntPtr)">
            <summary>
            Reports the current cooperative-level status of the Direct3D device for a windowed or full-screen application.
            </summary>
            <param name="windowHandle">The window handle.</param>
            <returns>State of the device</returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::CheckDeviceState([In] HWND hDestinationWindow)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.CheckResourceResidency(SharpDX.Direct3D9.Resource[])">
            <summary>
            Checks an array of resources to determine if it is likely that they will cause a large stall at Draw time because the system must make the resources GPU-accessible.
            </summary>
            <param name="resources">An array of <see cref="T:SharpDX.Direct3D9.Resource"/> that indicate the resources to check.</param>
            <returns>The <see cref="T:SharpDX.Direct3D9.ResourceResidency"/> status.</returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::CheckDeviceState([In] HWND hDestinationWindow)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.GetDisplayModeEx(System.Int32)">
            <summary>
            Retrieves the display mode's spatial resolution, color resolution, refresh frequency, and rotation settings.
            </summary>
            <param name="swapChain">The swap chain.</param>
            <returns><see cref="T:SharpDX.Direct3D9.DisplayModeEx"/> structure containing data about the display mode of the adapter</returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::GetDisplayModeEx([In] unsigned int iSwapChain,[Out] D3DDISPLAYMODEEX* pMode,[In] void* pRotation)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.GetDisplayModeEx(System.Int32,SharpDX.Direct3D9.DisplayRotation@)">
            <summary>
            Retrieves the display mode's spatial resolution, color resolution, refresh frequency, and rotation settings.
            </summary>
            <param name="swapChain">The swap chain.</param>
            <param name="rotation">The <see cref="T:SharpDX.Direct3D9.DisplayRotation"/> structure indicating the type of screen rotation the application will do.</param>
            <returns><see cref="T:SharpDX.Direct3D9.DisplayModeEx"/> structure containing data about the display mode of the adapter</returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::GetDisplayModeEx([In] unsigned int iSwapChain,[Out] D3DDISPLAYMODEEX* pMode,[In] void* pRotation)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.PresentEx(SharpDX.Direct3D9.Present)">
            <summary>
            Swap the swapchain's next buffer with the front buffer.
            </summary>
            <param name="flags">The flags.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::PresentEx([In] const void* pSourceRect,[In] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.PresentEx(SharpDX.Direct3D9.Present,SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Swap the swapchain's next buffer with the front buffer.
            </summary>
            <param name="flags">The flags.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::PresentEx([In] const void* pSourceRect,[In] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.PresentEx(SharpDX.Direct3D9.Present,SharpDX.Rectangle,SharpDX.Rectangle,System.IntPtr)">
            <summary>
            Swap the swapchain's next buffer with the front buffer.
            </summary>
            <param name="flags">The flags.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="windowOverride">The window override.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::PresentEx([In] const void* pSourceRect,[In] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.PresentEx(SharpDX.Direct3D9.Present,SharpDX.Rectangle,SharpDX.Rectangle,System.IntPtr,System.Drawing.Region)">
            <summary>
            Swap the swapchain's next buffer with the front buffer.
            </summary>
            <param name="flags">The flags.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="windowOverride">The window override.</param>
            <param name="region">The region.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::PresentEx([In] const void* pSourceRect,[In] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@)">
            <summary>
            Resets the type, size, and format of the swap chain with all other surfaces persistent.
            </summary>
            <param name="presentationParametersRef">A reference describing the new presentation parameters.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::ResetEx([In] D3DPRESENT_PARAMETERS* pPresentationParameters,[In] void* pFullscreenDisplayMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@,SharpDX.Direct3D9.DisplayModeEx)">
            <summary>
            Resets the type, size, and format of the swap chain with all other surfaces persistent.
            </summary>
            <param name="presentationParametersRef">A reference describing the new presentation parameters.</param>
            <param name="fullScreenDisplayMode">The full screen display mode.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::ResetEx([In] D3DPRESENT_PARAMETERS* pPresentationParameters,[In] void* pFullscreenDisplayMode)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.DeviceEx"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.SetConvolutionMonoKernel(System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>	
            Prepare the texture sampler for monochrome convolution filtering on a single-color texture.	
            </summary>	
            <param name="width"><para>The width of the filter kernel; ranging from 1 - D3DCONVOLUTIONMONO_MAXWIDTH. The default value is 1.</para></param>	
            <param name="height"><para>The height of the filter kernel; ranging from 1 - D3DCONVOLUTIONMONO_MAXHEIGHT. The default value is 1.</para></param>	
            <param name="rows"><para>An array of weights, one weight for each kernel sub-element in the width. This parameter must be <c>null</c>, which will set the weights equal to the default value.</para></param>	
            <param name="columns"><para>An array of weights, one weight for each kernel sub-element in the height. This parameter must be <c>null</c>, which will set the weights equal to the default value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.</returns>	
            <remarks>	
            This method is designed to filter a single color texture. A monochrome convolution filter is a 2D box filter with all of the weights set to 1.0;  the filter kernel resolution ranges from 1 x 1 to 7 x 7. When monochrome texture filtering is set to a texture sampler and texture sampling is performed at location, then Direct3D performs convolution.Restrictions include:The filter specified by this method is recorded in state blocks as a part of <see cref="F:SharpDX.Direct3D9.StateBlockType.PixelState"/>. The only texture address mode supported is: <see cref="F:SharpDX.Direct3D9.TextureAddressCaps.Border"/>; the border color is always 0. This method is not supported for mipmaps. Using a non-monochrome texture with convolution filtering will generate a driver error.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::SetConvolutionMonoKernel']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::SetConvolutionMonoKernel([In] unsigned int width,[In] unsigned int height,[In, Buffer] float* rows,[In, Buffer] float* columns)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.ComposeRects(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.VertexBuffer,System.Int32,SharpDX.Direct3D9.VertexBuffer,SharpDX.Direct3D9.ComposeRectOperation,System.Int32,System.Int32)">
            <summary>	
            Copy a text string to one surface using an alphabet of glyphs on another surface. Composition is done by the GPU using bitwise operations.	
            </summary>	
            <param name="srcRef"><para>A reference to a source surface (prepared by <see cref="T:SharpDX.Direct3D9.Surface"/>) that supplies the alphabet glyphs. This surface must be created with the <see cref="F:SharpDX.Direct3D9.Usage.TextApi"/> flag.</para></param>	
            <param name="dstRef"><para>A reference to the destination surface (prepared by <see cref="T:SharpDX.Direct3D9.Surface"/>) that receives the glyph data. The surface must be part of a texture.</para></param>	
            <param name="srcRectDescsRef"><para>A reference to a vertex buffer (see <see cref="T:SharpDX.Direct3D9.VertexBuffer"/>) containing rectangles (see D3DCOMPOSERECTDESC) that enclose the desired glyphs in the source surface.</para></param>	
            <param name="numRects"><para>The number of rectangles or glyphs that are used in the operation. The number applies to both the source and destination surfaces. The range is 0 to D3DCOMPOSERECTS_MAXNUMRECTS.</para></param>	
            <param name="dstRectDescsRef"><para>A reference to a vertex buffer (see <see cref="T:SharpDX.Direct3D9.VertexBuffer"/>) containing rectangles (see D3DCOMPOSERECTDESTINATION) that describe the destination to which the indicated glyph from the source surface will be copied.</para></param>	
            <param name="operation"><para>Specifies how to combine the source and destination surfaces. See <see cref="T:SharpDX.Direct3D9.ComposeRectOperation"/>.</para></param>	
            <param name="xoffset"><para>A value added to the x coordinates of all destination rectangles. This value can be negative, which may cause the glyph to be rejected or clipped if the result is beyond the bounds of the surface.</para></param>	
            <param name="yoffset"><para>A value added to the y coordinates of all destination rectangles. This value can be negative, which may cause the glyph to be rejected or clipped if the result is beyond the bounds of the surface.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.</returns>	
            <remarks>	
            Glyphs from a one-bit source surface are put together into another one-bit texture surface with this method. The destination surface can then be used as the source for a normal texturing operation that will filter and scale the strings of text onto some other non-monochrome surface.This method has several constraints (which are similar to StretchRect):Surfaces cannot be locked. The source and destination surfaces cannot be the same surface. The source and destination surfaces must be created with the <see cref="F:SharpDX.Direct3D9.Format.A1"/> format. The source surface and both vertex buffers must be created with the <see cref="F:SharpDX.Direct3D9.Pool.Default"/> flag. The destination surface must be created with either the <see cref="F:SharpDX.Direct3D9.Pool.Default"/> or <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/> flags. The source rectangles must be within the source surface.The method is not recorded in state blocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::ComposeRects']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::ComposeRects([In] IDirect3DSurface9* pSrc,[In] IDirect3DSurface9* pDst,[In] IDirect3DVertexBuffer9* pSrcRectDescs,[In] unsigned int NumRects,[In] IDirect3DVertexBuffer9* pDstRectDescs,[In] D3DCOMPOSERECTSOP Operation,[In] int Xoffset,[In] int Yoffset)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.PresentEx(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>	
            Swap the swapchain's next buffer with the front buffer.	
            </summary>	
            <param name="sourceRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure indicating region on the source surface to copy in window client coordinates. Only applies when the swapchain was created with the <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/> flag. If <c>null</c>, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to the source surface.</para></param>	
            <param name="destRectRef"><para>Pointer to <see cref="T:SharpDX.Rectangle"/> structure indicating the target region on the destination surface in window client coordinates. Only applies when the swapchain was created with the <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/> flag. If <c>null</c>, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to the destination client area.</para></param>	
            <param name="hDestWindowOverride"><para>Pointer to a destination window handle whose client area is taken as the target for this presentation. If this value is <c>null</c>, then the hWndDeviceWindow member of <see cref="T:SharpDX.Direct3D9.PresentParameters"/> is taken.</para></param>	
            <param name="dirtyRegionRef"><para>Pointer to a <see cref="T:System.IntPtr"/> structure indicating the smallest set of pixels that need to be transferred. This value must be <c>null</c> unless the swapchain was created with the <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/> flag. For more information about swapchains, see Flipping Surfaces (Direct3D 9).</para> <para>If this value is non-<c>null</c>, the contained region is expressed in back buffer coordinates. The method takes these rectangles into account when optimizing the presentation by copying only the pixels within the region, or some suitably expanded set of rectangles. This is an aid to optimization only, and the application should not rely on the region being copied exactly. The implementation can choose to copy the whole source rectangle.</para></param>	
            <param name="dwFlags"><para>Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, or any combination of <see cref="T:SharpDX.Direct3D9.Present"/> flags. </para>  If dwFlags = 0, this method behaves as it did prior to Direct3D 9. Present will spin until the hardware is free, without returning an error. If dwFlags = <see cref="F:SharpDX.Direct3D9.Present.DoNotFlip"/> the display driver is called with the front buffer as both the source and target surface. The driver responds by scheduling a frame synch, but not changing the displayed surface. This flag is only available in full-screen mode or when using <see cref="F:SharpDX.Direct3D9.SwapEffect.FlipEx"/> in windowed mode. If dwFlags = <see cref="F:SharpDX.Direct3D9.Present.DoNotWait"/>, and the hardware is busy processing or waiting for a vertical sync interval, the method will return <see cref="F:SharpDX.Direct3D9.ResultCode.WasStillDrawing"/>. If dwFlags = <see cref="F:SharpDX.Direct3D9.Present.ForceImmediate"/>, <see cref="F:SharpDX.Direct3D9.PresentInterval.Immediate"/> is enforced on this Present call. This flag can only be specified when using <see cref="F:SharpDX.Direct3D9.SwapEffect.FlipEx"/>. This behavior is the same for windowed and full-screen modes. If dwFlags = <see cref="F:SharpDX.Direct3D9.Present.LinearContent"/>, gamma correction is performed from linear space to sRGB for windowed swap chains. This flag will take effect only when the driver exposes <see cref="F:SharpDX.Direct3D9.Caps3.LinearToSrgbPresentation"/> (see Gamma (Direct3D 9)).</param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Result.Ok"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceHung"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceRemoved"/>, or <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/> (see D3DERR). See Lost Device Behavior Changes for more information about lost, hung, and removed devices.<para>Differences between Direct3D 9 and Direct3D 9Ex:</para> <para><see cref="F:SharpDX.Direct3D9.SwapEffect.FlipEx"/> is only available in Direct3D9Ex running on Windows 7 (or more current operating system).</para>?</returns>	
            <remarks>	
            Similar to the <see cref="M:SharpDX.Direct3D9.Device.Present"/> Method, PresentEx adds a dwflags parameter.When the swapchain is created with <see cref="F:SharpDX.Direct3D9.SwapEffect.FlipEx"/> flag, pSourceRect, pDestRect and pDirtyRegion values must be set to <c>null</c>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::PresentEx']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::PresentEx([In] const void* pSourceRect,[In] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.GetGPUThreadPriority(System.Int32@)">
            <summary>	
            Get the priority of the GPU thread.	
            </summary>	
            <param name="priorityRef"><para>Current GPU priority. Valid values range from -7 to 7.</para></param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/> or <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceRemoved"/> (see D3DERR).</returns>	
            <remarks>	
            Use <see cref="M:SharpDX.Direct3D9.DeviceEx.SetGPUThreadPriority(System.Int32)"/> to set the priority of a thread.This method will retrieve the priority of the thread stored with the Direct3D device even if it was created with the <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/> flag.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::GetGPUThreadPriority']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.SetGPUThreadPriority(System.Int32)">
            <summary>	
            Set the priority on the GPU thread.	
            </summary>	
            <param name="priority"><para>The thread priority, ranging from -7 to 7.</para></param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, or <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceRemoved"/> (see D3DERR).</returns>	
            <remarks>	
            GPU thread priority is not reset when a device is lost. The effects of calls to this method are not recorded in state blocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::SetGPUThreadPriority']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::SetGPUThreadPriority([In] int Priority)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.WaitForVBlank(System.Int32)">
            <summary>	
            Suspend execution of the calling thread until the next vertical blank signal.	
            </summary>	
            <param name="iSwapChain"><para>Swap chain index. This is an optional, zero-based index used to specify a swap chain on a multihead card.</para></param>	
            <returns>This method will always return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.</returns>	
            <remarks>	
            This method allows applications to efficiently throttle their frame rate to that of the monitor associated with the device. Following a vertical blank, the amount of time it takes for the thread to wake up is typically very short.In some scenarios the hardware may stop generating vertical blank signals when nothing is being displayed on the monitor. In this case, the method will wait approximately 100ms and return with <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::WaitForVBlank']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::WaitForVBlank([In] unsigned int iSwapChain)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.CheckResourceResidency(SharpDX.Direct3D9.Resource[],System.Int32)">
            <summary>	
            Checks an array of resources to determine if it is likely that they will cause a large stall at Draw time because the system must make the resources GPU-accessible.	
            </summary>	
            <param name="resourceArrayRef"><para>An array of <see cref="T:SharpDX.Direct3D9.Resource"/> references that indicate the resources to check (for a description of <see cref="T:SharpDX.Direct3D9.Resource"/>, see the DirectX SDK documentation).</para></param>	
            <param name="numResources"><para>A value indicating the number of resources passed into the pResourceArray parameter up to a maximum of 65535.</para></param>	
            <returns>If all the resources are in GPU-accessible memory, the method will return <see cref="F:SharpDX.Result.Ok"/>. The system may need to perform a remapping operation to promote the resources, but will not have to copy data.If no allocation that comprises the resources is on disk, but at least one allocation is not in GPU-accessible memory, the method will return <see cref="F:SharpDX.Direct3D9.ResultCode.ResidentInSharedMemory"/>. The system may need to perform a copy to promote the resource.If at least one allocation that comprises the resources is on disk, this method will return S_NOT_RESIDENT.  The system may need to perform a copy to promote the resource.</returns>	
            <remarks>	
            This API is no more than a reasonable guess at residency, since resources may have been demoted by the time the application uses them.The expected usage pattern is as follows. If the application determines that a set of resources are not resident, then the application will substitute a lower-LOD version of the resource and continue with rendering. The video memory manager API, offers a feature to allow the application to express that it would like these lower-LOD resources to be made more likely to stay resident in GPU-accessible memory. It is the app's responsibility to create, fill and destroy these lower-LOD versions, if it so chooses.The application also needs to begin promotion of the higher-LOD versions when the residency check indicates that the resource is not resident in GPU-accessible memory. Since a per-process lock exists in kernel mode, a performant implementation will spawn a separate process whose sole job is to promote resources. The application communicates resource identity between the two process by means of the Sharing Resources shared surfaces API and promotes them by means of the SetPriority.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::CheckResourceResidency']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::CheckResourceResidency([In, Buffer] IDirect3DResource9** pResourceArray,[In] unsigned int NumResources)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.CheckResourceResidency(SharpDX.ComArray{SharpDX.Direct3D9.Resource},System.Int32)">
            <summary>	
            Checks an array of resources to determine if it is likely that they will cause a large stall at Draw time because the system must make the resources GPU-accessible.	
            </summary>	
            <param name="resourceArrayRef"><para>An array of <see cref="T:SharpDX.Direct3D9.Resource"/> references that indicate the resources to check (for a description of <see cref="T:SharpDX.Direct3D9.Resource"/>, see the DirectX SDK documentation).</para></param>	
            <param name="numResources"><para>A value indicating the number of resources passed into the pResourceArray parameter up to a maximum of 65535.</para></param>	
            <returns>If all the resources are in GPU-accessible memory, the method will return <see cref="F:SharpDX.Result.Ok"/>. The system may need to perform a remapping operation to promote the resources, but will not have to copy data.If no allocation that comprises the resources is on disk, but at least one allocation is not in GPU-accessible memory, the method will return <see cref="F:SharpDX.Direct3D9.ResultCode.ResidentInSharedMemory"/>. The system may need to perform a copy to promote the resource.If at least one allocation that comprises the resources is on disk, this method will return S_NOT_RESIDENT.  The system may need to perform a copy to promote the resource.</returns>	
            <remarks>	
            This API is no more than a reasonable guess at residency, since resources may have been demoted by the time the application uses them.The expected usage pattern is as follows. If the application determines that a set of resources are not resident, then the application will substitute a lower-LOD version of the resource and continue with rendering. The video memory manager API, offers a feature to allow the application to express that it would like these lower-LOD resources to be made more likely to stay resident in GPU-accessible memory. It is the app's responsibility to create, fill and destroy these lower-LOD versions, if it so chooses.The application also needs to begin promotion of the higher-LOD versions when the residency check indicates that the resource is not resident in GPU-accessible memory. Since a per-process lock exists in kernel mode, a performant implementation will spawn a separate process whose sole job is to promote resources. The application communicates resource identity between the two process by means of the Sharing Resources shared surfaces API and promotes them by means of the SetPriority.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::CheckResourceResidency']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::CheckResourceResidency([In, Buffer] IDirect3DResource9** pResourceArray,[In] unsigned int NumResources)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.SetMaximumFrameLatency(System.Int32)">
            <summary>	
            Set the number of frames that the system is allowed to queue for rendering.	
            </summary>	
            <param name="maxLatency"><para>The maximum number of back buffer frames that a driver can queue. The value is typically 3, but can range from 1 to 20. A value of 0 will reset latency to the default. For multi-head devices, MaxLatency is specified per-head.</para></param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/> or <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceRemoved"/> (see D3DERR).</returns>	
            <remarks>	
            Frame latency is the number of frames that are allowed to be stored in a queue, before submission for rendering. Latency is often used to control how the CPU chooses between responding to user input and frames that are in the render queue.It is often beneficial for applications that have no user input (for example, video playback) to queue more than 3 frames of data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::SetMaximumFrameLatency']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::SetMaximumFrameLatency([In] unsigned int MaxLatency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.GetMaximumFrameLatency(System.Int32@)">
            <summary>	
            Retrieves the number of frames of data that the system is allowed to queue.	
            </summary>	
            <param name="maxLatencyRef"><para>Returns the number of frames that can be queued for render. The value is typically 3, but can range from 1 to 20.</para></param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceRemoved"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DriverInternalError"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, or <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/> (see D3DERR).</returns>	
            <remarks>	
            Frame latency is the number of frames that are allowed to be stored in a queue, before submission for rendering. Latency is often used to control how the CPU chooses between responding to user input and frames that are in the render queue.It is often beneficial for applications that have no user input (for example, video playback) to queue more than 3 frames of data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::GetMaximumFrameLatency']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.CheckDeviceState_(System.IntPtr)">
            <summary>	
            Reports the current cooperative-level status of the Direct3D device for a windowed or full-screen application.	
            </summary>	
            <param name="hDestinationWindow"><para>The destination window handle to check for occlusion. When this parameter is <c>null</c>, <see cref="F:SharpDX.Direct3D9.ResultCode.PresentOccluded"/> is returned when another device has fullscreen ownership. When the window handle is not <c>null</c>, window's client area is checked for occlusion. A window is occluded if any part of it is obscured by another application.</para></param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceHung"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceRemoved"/>, or <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/> (see D3DERR), or <see cref="F:SharpDX.Direct3D9.ResultCode.PresentModeChanged"/>, or <see cref="F:SharpDX.Direct3D9.ResultCode.PresentOccluded"/> (see S_PRESENT).</returns>	
            <remarks>	
            This method replaces <see cref="M:SharpDX.Direct3D9.Device.TestCooperativeLevel"/>, which always returns <see cref="F:SharpDX.Result.Ok"/> in Direct3D 9Ex applications.We recommend not to call CheckDeviceState every frame. Instead, call CheckDeviceState only if the <see cref="M:SharpDX.Direct3D9.DeviceEx.PresentEx(SharpDX.Direct3D9.Present)"/> method returns a failure code.See Lost Device Behavior Changes for more information about lost, hung, and removed devices.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::CheckDeviceState']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::CheckDeviceState([In] HWND hDestinationWindow)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.CreateRenderTargetEx(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr,System.Int32)">
            <summary>	
            Creates a render-target surface.	
            </summary>	
            <param name="width"><para>Width of the render-target surface, in pixels. </para></param>	
            <param name="height"><para>Height of the render-target surface, in pixels. </para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the format of the render target. </para></param>	
            <param name="multiSample"><para>Member of the <see cref="T:SharpDX.Direct3D9.MultisampleType"/> enumerated type, which describes the multisampling buffer type. This parameter specifies the antialiasing type for this render target. When this surface is passed to <see cref="M:SharpDX.Direct3D9.Device.SetRenderTarget(System.Int32,SharpDX.Direct3D9.Surface)"/>, its multisample type must be the same as that of the depth-stencil set by <see cref="M:SharpDX.Direct3D9.Device.SetDepthStencilSurface(SharpDX.Direct3D9.Surface)"/>. </para></param>	
            <param name="multisampleQuality"><para>Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by  <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultiSampleType_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType,System.Int32@)"/>. Passing a larger value returns the error, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. The MultisampleQuality values of paired render targets, depth stencil surfaces, and the multisample type must all match.</para></param>	
            <param name="lockable"><para>Render targets are not lockable unless the application specifies TRUE for Lockable.</para> <para>Note that lockable render targets reduce performance on some graphics hardware. The readback performance (moving data from video memory to system memory) depends on the type of hardware used (AGP vs. PCI Express) and is usually far lower than upload performance (moving data from system to video memory). If you need read access to render targets, use GetRenderTargetData instead of lockable render targets.</para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to share resources.</para></param>	
            <param name="usage"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Usage"/> constants which can be OR'd together. Value of 0 indicates no usage.</para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface. </para></returns>	
            <remarks>	
            Render-target surfaces are placed in the <see cref="F:SharpDX.Direct3D9.Pool.Default"/> memory class.The creation of lockable, multisampled render targets is not supported.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::CreateRenderTargetEx']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::CreateRenderTargetEx([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Lockable,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle,[In] unsigned int Usage)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.CreateOffscreenPlainSurfaceEx(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.IntPtr,System.Int32)">
            <summary>	
            Create an off-screen surface.	
            </summary>	
            <param name="width"><para>Width of the surface.</para></param>	
            <param name="height"><para>Height of the surface.</para></param>	
            <param name="format"><para>Format of the surface. See <see cref="T:SharpDX.Direct3D9.Format"/>. </para></param>	
            <param name="pool"><para>Surface pool type. See <see cref="T:SharpDX.Direct3D9.Pool"/>.</para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to share resources.</para></param>	
            <param name="usage"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Usage"/> constants which can be OR'd together. Value of 0 indicates no usage.</para></param>	
            <returns><para>Pointer to the <see cref="T:SharpDX.Direct3D9.Surface"/> interface created.</para></returns>	
            <remarks>	
            D3DPOOL_SCRATCH will return a surface that has identical characteristics to a surface created by the DirectX 8.x method CreateImageSurface.D3DPOOL_DEFAULT is the appropriate pool for use with the <see cref="M:SharpDX.Direct3D9.Device.StretchRectangle(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.TextureFilter)"/> and <see cref="M:SharpDX.Direct3D9.Device.ColorFill(SharpDX.Direct3D9.Surface,SharpDX.Color4)"/>.D3DPOOL_MANAGED is not allowed when creating an offscreen plain surface. For more information about memory pools, see <see cref="T:SharpDX.Direct3D9.Pool"/>.Off-screen plain surfaces are always lockable, regardless of their pool types.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::CreateOffscreenPlainSurfaceEx']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::CreateOffscreenPlainSurfaceEx([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle,[In] unsigned int Usage)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.CreateDepthStencilSurfaceEx(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr,System.Int32)">
            <summary>	
            Creates a depth-stencil surface.	
            </summary>	
            <param name="width"><para>Width of the depth-stencil surface, in pixels. </para></param>	
            <param name="height"><para>Height of the depth-stencil surface, in pixels. </para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the format of the depth-stencil surface. This value must be one of the enumerated depth-stencil formats for this device.</para></param>	
            <param name="multiSample"><para>Member of the <see cref="T:SharpDX.Direct3D9.MultisampleType"/> enumerated type, describing the multisampling buffer type. This value must be one of the allowed multisample types. When this surface is passed to <see cref="M:SharpDX.Direct3D9.Device.SetDepthStencilSurface(SharpDX.Direct3D9.Surface)"/>, its multisample type must be the same as that of the render target set by <see cref="M:SharpDX.Direct3D9.Device.SetRenderTarget(System.Int32,SharpDX.Direct3D9.Surface)"/>.</para></param>	
            <param name="multisampleQuality"><para>Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by  <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultiSampleType_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType,System.Int32@)"/>. Passing a larger value returns the error <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. The MultisampleQuality values of paired render targets, depth stencil surfaces, and the MultiSample type must all match.</para></param>	
            <param name="discard"><para>Set this flag to TRUE to enable z-buffer discarding, and <see cref="F:SharpDX.Result.False"/> otherwise.				If this flag is set, the contents of the depth stencil buffer will be invalid after calling either <see cref="M:SharpDX.Direct3D9.Device.Present"/> or <see cref="M:SharpDX.Direct3D9.Device.SetDepthStencilSurface(SharpDX.Direct3D9.Surface)"/> with a different depth surface.</para> <para>This flag has the same behavior as the constant,  <see cref="F:SharpDX.Direct3D9.PresentFlags.DiscardDepthStencil"/>, in <see cref="T:SharpDX.Direct3D9.PresentFlags"/>.</para></param>	
            <param name="sharedHandleRef"><para>Reserved. Set this parameter to <c>null</c>. This parameter can be used in Direct3D 9 for Windows Vista to share resources.</para></param>	
            <param name="usage"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Usage"/> constants which can be OR'd together. Value of 0 indicates no usage.</para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the created depth-stencil surface resource. </para></returns>	
            <remarks>	
            The memory class of the depth-stencil buffer is always <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::CreateDepthStencilSurfaceEx']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::CreateDepthStencilSurfaceEx([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Discard,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle,[In] unsigned int Usage)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@,System.IntPtr)">
            <summary>	
            Resets the type, size, and format of the swap chain with all other surfaces persistent.	
            </summary>	
            <param name="presentationParametersRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, describing the new presentation parameters. This value cannot be <c>null</c>.  </para> <para>When switching to full-screen mode, Direct3D will try to find a desktop format that matches the back buffer format, so that back buffer and front buffer formats will be identical (to eliminate the need for color conversion).</para> <para>When this method returns:</para>  BackBufferCount, BackBufferWidth, and BackBufferHeight are set to zero. BackBufferFormat is set to <see cref="T:SharpDX.Direct3D9.Format"/> for windowed mode only; a full-screen mode must specify a format.</param>	
            <param name="fullscreenDisplayModeRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayModeEx"/> structure that describes the properties of the desired display mode. This value must be provided for fullscreen applications, but can be <c>null</c> for windowed applications. </para></param>	
            <returns>The method can return: <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/> or <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceHung"/> (see D3DERR).If this method returns <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/> or <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceHung"/> then the application can only call <see cref="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@)"/>, <see cref="M:SharpDX.Direct3D9.DeviceEx.CheckDeviceState_(System.IntPtr)"/> or release the interface reference; any other API call will cause an exception.</returns>	
            <remarks>	
            If a call to <see cref="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@)"/> fails, the device will be placed in the lost state (as indicated by a return value of <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/> from a call to <see cref="M:SharpDX.Direct3D9.DeviceEx.CheckDeviceState_(System.IntPtr)"/>). Refer to <see cref="M:SharpDX.Direct3D9.DeviceEx.CheckDeviceState_(System.IntPtr)"/> and Lost Device Behavior Changes for further information concerning the use of <see cref="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@)"/> in the context of lost devices.Unlike previous versions of DirectX, calling <see cref="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@)"/> does not cause surfaces, textures or state information to be lost.Pixel shaders and vertex shaders survive <see cref="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@)"/> calls for Direct3D 9. They do not need to be re-created explicitly by the application.There are two different types of swap chains: full-screen or windowed. If the new swap chain is full-screen, the adapter will be placed in the display mode that matches the new size.Applications can expect messages to be sent to them during this call (for example, before this call is returned); applications should take precautions not to call into Direct3D at this time.A call to <see cref="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@)"/> will fail if called on a different thread than that used to create the device being reset.D3DFMT_UNKNOWN can be specified for the windowed mode back buffer format when calling <see cref="M:SharpDX.Direct3D9.Direct3DEx.CreateDeviceEx(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,System.Int32,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.DisplayModeEx[],SharpDX.Direct3D9.DeviceEx)"/>, <see cref="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@)"/>, and <see cref="M:SharpDX.Direct3D9.Device.CreateAdditionalSwapChain(SharpDX.Direct3D9.PresentParameters@,SharpDX.Direct3D9.SwapChain)"/>. This means the application does not have to query the current desktop format before calling <see cref="M:SharpDX.Direct3D9.Direct3DEx.CreateDeviceEx(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,System.Int32,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.DisplayModeEx[],SharpDX.Direct3D9.DeviceEx)"/> for windowed mode. For full-screen mode, the back buffer format must be specified. Setting BackBufferCount equal to zero (BackBufferCount = 0) results in one back buffer.When trying to reset more than one display adapter in a group, set pPresentationParameters to point to an array of <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structures, one for each display in the adapter group.If a multihead device was created with <see cref="F:SharpDX.Direct3D9.CreateFlags.AdapterGroupDevice"/>, <see cref="M:SharpDX.Direct3D9.DeviceEx.ResetEx(SharpDX.Direct3D9.PresentParameters@)"/> requires an array of <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structures wherein each structure must specify a full-screen display. To switch back to windowed mode, the application must destroy the device and re-create a non-multihead device in windowed mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::ResetEx']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::ResetEx([In] D3DPRESENT_PARAMETERS* pPresentationParameters,[In] void* pFullscreenDisplayMode)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.DeviceEx.GetDisplayModeEx(System.Int32,System.IntPtr)">
            <summary>	
            Retrieves the display mode's spatial resolution, color resolution, refresh frequency, and rotation settings.	
            </summary>	
            <param name="iSwapChain"><para>An unsigned integer specifying the swap chain.</para></param>	
            <param name="rotationRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayRotation"/> indicating the type of screen rotation the application will do. The value returned through this reference is important when the <see cref="F:SharpDX.Direct3D9.PresentFlags.NoAutoRotate"/> flag is used; otherwise, it can be set to <c>null</c>.</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayModeEx"/> structure containing data about the display mode of the adapter. As opposed to the display mode of the device, which may not be active if the device does not own full-screen mode. Can be set to <c>null</c>.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::GetDisplayModeEx']/*"/>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::GetDisplayModeEx([In] unsigned int iSwapChain,[Out] D3DDISPLAYMODEEX* pMode,[In] void* pRotation)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.DeviceEx.GPUThreadPriority">
            <summary>	
            Get the priority of the GPU thread.	
            </summary>	
            <remarks>	
            Use <see cref="M:SharpDX.Direct3D9.DeviceEx.SetGPUThreadPriority(System.Int32)"/> to set the priority of a thread.This method will retrieve the priority of the thread stored with the Direct3D device even if it was created with the <see cref="F:SharpDX.Direct3D9.CreateFlags.PureDevice"/> flag.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::GetGPUThreadPriority']/*"/>	
            <unmanaged>GetGPUThreadPriority</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.DeviceEx.MaximumFrameLatency">
            <summary>	
            Retrieves the number of frames of data that the system is allowed to queue.	
            </summary>	
            <remarks>	
            Frame latency is the number of frames that are allowed to be stored in a queue, before submission for rendering. Latency is often used to control how the CPU chooses between responding to user input and frames that are in the render queue.It is often beneficial for applications that have no user input (for example, video playback) to queue more than 3 frames of data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DDevice9Ex::GetMaximumFrameLatency']/*"/>	
            <unmanaged>GetMaximumFrameLatency</unmanaged>	
            <unmanaged>HRESULT IDirect3DDevice9Ex::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Direct3D">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface to create Microsoft Direct3D objects and set up the environment. This interface includes methods for enumerating and retrieving capabilities of the device.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9']/*"/>	
            <unmanaged>IDirect3D9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.#ctor">
            <summary>	
            Create an IDirect3D9 object and return an interface to it.	
            </summary>	
            <remarks>	
             The Direct3D object is the first Direct3D COM object that your graphical application needs to create and the last object that your application needs to release. Functions for enumerating and retrieving capabilities of a device are accessible through the Direct3D object. This enables applications to select devices without creating them. Create an IDirect3D9 object as shown here: 	
            <code> LPDIRECT3D9 g_pD3D = NULL; if( NULL == (g_pD3D = Direct3DCreate9(D3D_SDK_VERSION))) return E_FAIL; </code>	
            	
             The IDirect3D9 interface supports enumeration of active display adapters and allows the creation of <see cref="T:SharpDX.Direct3D9.Device"/> objects. If the user dynamically adds adapters (either by adding devices to the desktop, or by hot-docking a laptop), those devices will not be included in the enumeration. Creating a new IDirect3D9 interface will expose the new devices. D3D_SDK_VERSION is passed to this function to ensure that the header files against which an application is compiled match the version of the runtime DLL's that are installed on the machine. D3D_SDK_VERSION is only changed in the runtime when a header change (or other code change) would require an application to be rebuilt. If this function fails, it indicates that the header file version does not match the runtime DLL version. For an example, see {{Creating a Device (Direct3D 9)}}. 	
            </remarks>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDepthStencilMatch(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format)">
            <summary>
            Determines whether a depth-stencil format is compatible with a render-target format in a particular display mode.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="adapterFormat">The adapter format.</param>
            <param name="renderTargetFormat">The render target format.</param>
            <param name="depthStencilFormat">The depth stencil format.</param>
            <returns>If the depth-stencil format is compatible with the render-target format in the display mode, this method returns <c>true</c></returns>
            <unmanaged>HRESULT IDirect3D9::CheckDepthStencilMatch([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT AdapterFormat,[In] D3DFORMAT RenderTargetFormat,[In] D3DFORMAT DepthStencilFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDepthStencilMatch(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,SharpDX.Result@)">
            <summary>
            Determines whether a depth-stencil format is compatible with a render-target format in a particular display mode.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="adapterFormat">The adapter format.</param>
            <param name="renderTargetFormat">The render target format.</param>
            <param name="depthStencilFormat">The depth stencil format.</param>
            <param name="result">The result.</param>
            <returns>
            If the depth-stencil format is compatible with the render-target format in the display mode, this method returns <c>true</c>
            </returns>
            <unmanaged>HRESULT IDirect3D9::CheckDepthStencilMatch([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT AdapterFormat,[In] D3DFORMAT RenderTargetFormat,[In] D3DFORMAT DepthStencilFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormat(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.ResourceType,SharpDX.Direct3D9.Format)">
            <summary>
            Determines whether a surface format is available as a specified resource type and can be used as a texture, depth-stencil buffer, or render target, or any combination of the three, on a device representing this adapter.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="adapterFormat">The adapter format.</param>
            <param name="usage">The usage.</param>
            <param name="resourceType">Type of the resource.</param>
            <param name="checkFormat">The check format.</param>
            <returns>
            If the format is compatible with the specified device for the requested usage, this method returns <c>true</c>
            </returns>
            <unmanaged>HRESULT IDirect3D9::CheckDeviceFormat([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT AdapterFormat,[In] unsigned int Usage,[In] D3DRESOURCETYPE RType,[In] D3DFORMAT CheckFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormat(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.ResourceType,SharpDX.Direct3D9.Format,SharpDX.Result@)">
            <summary>
            Determines whether a surface format is available as a specified resource type and can be used as a texture, depth-stencil buffer, or render target, or any combination of the three, on a device representing this adapter.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="adapterFormat">The adapter format.</param>
            <param name="usage">The usage.</param>
            <param name="resourceType">Type of the resource.</param>
            <param name="checkFormat">The check format.</param>
            <param name="result">The result.</param>
            <returns>If the format is compatible with the specified device for the requested usage, this method returns <c>true</c></returns>
            <unmanaged>HRESULT IDirect3D9::CheckDeviceFormat([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT AdapterFormat,[In] unsigned int Usage,[In] D3DRESOURCETYPE RType,[In] D3DFORMAT CheckFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormatConversion(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format)">
            <summary>
            Tests the device to see if it supports conversion from one display format to another.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="targetFormat">The target format.</param>
            <returns>
            True if the method succeeds.
            </returns>
            <unmanaged>HRESULT IDirect3D9::CheckDeviceFormatConversion([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT SourceFormat,[In] D3DFORMAT TargetFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormatConversion(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,SharpDX.Result@)">
            <summary>
            Tests the device to see if it supports conversion from one display format to another.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="targetFormat">The target format.</param>
            <param name="result">The result.</param>
            <returns>True if the method succeeds.</returns>
            <unmanaged>HRESULT IDirect3D9::CheckDeviceFormatConversion([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT SourceFormat,[In] D3DFORMAT TargetFormat)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultisampleType(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType)">
            <summary>
            Determines if a multisampling technique is available on this device.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="surfaceFormat">The surface format.</param>
            <param name="windowed">if set to <c>true</c> [windowed].</param>
            <param name="multisampleType">Type of the multisample.</param>
            <returns>
            f the device can perform the specified multisampling method, this method returns <c>true</c>
            </returns>
            <unmanaged>HRESULT IDirect3D9::CheckDeviceMultiSampleType([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT SurfaceFormat,[In] BOOL Windowed,[In] D3DMULTISAMPLE_TYPE MultiSampleType,[Out] unsigned int* pQualityLevels)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultisampleType(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType,System.Int32@)">
            <summary>
            Determines if a multisampling technique is available on this device.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="surfaceFormat">The surface format.</param>
            <param name="windowed">if set to <c>true</c> [windowed].</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="qualityLevels">The quality levels.</param>
            <returns>
            f the device can perform the specified multisampling method, this method returns <c>true</c>
            </returns>
            <unmanaged>HRESULT IDirect3D9::CheckDeviceMultiSampleType([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT SurfaceFormat,[In] BOOL Windowed,[In] D3DMULTISAMPLE_TYPE MultiSampleType,[Out] unsigned int* pQualityLevels)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultisampleType(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType,System.Int32@,SharpDX.Result@)">
            <summary>
            Determines if a multisampling technique is available on this device.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="surfaceFormat">The surface format.</param>
            <param name="windowed">if set to <c>true</c> [windowed].</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="qualityLevels">The quality levels.</param>
            <param name="result">The result.</param>
            <returns>f the device can perform the specified multisampling method, this method returns <c>true</c></returns>
            <unmanaged>HRESULT IDirect3D9::CheckDeviceMultiSampleType([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT SurfaceFormat,[In] BOOL Windowed,[In] D3DMULTISAMPLE_TYPE MultiSampleType,[Out] unsigned int* pQualityLevels)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceType(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,System.Boolean)">
            <summary>
            Verifies whether a hardware accelerated device type can be used on this adapter.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="adapterFormat">The adapter format.</param>
            <param name="backBufferFormat">The back buffer format.</param>
            <param name="windowed">if set to <c>true</c> [windowed].</param>
            <returns>
              <c>true</c> if the device can be used on this adapter
            </returns>
            <unmanaged>HRESULT IDirect3D9::CheckDeviceType([In] unsigned int Adapter,[In] D3DDEVTYPE DevType,[In] D3DFORMAT AdapterFormat,[In] D3DFORMAT BackBufferFormat,[In] BOOL bWindowed)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceType(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Result@)">
            <summary>
            Verifies whether a hardware accelerated device type can be used on this adapter.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="deviceType">Type of the device.</param>
            <param name="adapterFormat">The adapter format.</param>
            <param name="backBufferFormat">The back buffer format.</param>
            <param name="windowed">if set to <c>true</c> [windowed].</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the device can be used on this adapter</returns>
            <unmanaged>HRESULT IDirect3D9::CheckDeviceType([In] unsigned int Adapter,[In] D3DDEVTYPE DevType,[In] D3DFORMAT AdapterFormat,[In] D3DFORMAT BackBufferFormat,[In] BOOL bWindowed)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.GetAdapterIdentifier(System.Int32)">
            <summary>
            Get the physical display adapters present in the system when this <see cref="T:SharpDX.Direct3D9.Direct3D"/> was instantiated.
            </summary>
            <param name="adapter">The adapter.</param>
            <returns>The physical display adapters</returns>
            <unmanaged>HRESULT IDirect3D9::GetAdapterIdentifier([In] unsigned int Adapter,[In] unsigned int Flags,[Out] D3DADAPTER_IDENTIFIER9* pIdentifier)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Direct3D"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.RegisterSoftwareDevice(System.IntPtr)">
            <summary>	
            Registers a pluggable software device. Software devices provide software rasterization enabling applications to access a variety of software rasterizers.	
            </summary>	
            <param name="initializeFunctionRef"><para>Pointer to the initialization function for the software device to be registered. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. The method call is invalid. For example, a method's parameter may have an invalid value: <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>.</returns>	
            <remarks>	
            If the user's computer provides no special hardware acceleration for 3D operations, your application might emulate 3D hardware in software. Software rasterization devices emulate the functions of color 3D hardware in software. A software device runs more slowly than a hal. However, software devices take advantage of any special instructions supported by the CPU to increase performance. Instruction sets include the AMD 3DNow! instruction set on some AMD processors and the MMX instruction set supported by many Intel processors. Direct3D uses the 3D-Now! instruction set to accelerate transformation and lighting operations and the MMX instruction set to accelerate rasterization.Software devices communicate with Direct3D through an interface similar to the hardware device driver interface (DDI).Software devices are loaded by the application and registered with the <see cref="T:SharpDX.Direct3D9.Direct3D"/> object. Direct3D uses the software device for rendering.The Direct3D Driver Development Kit (DDK) provides the documentation and headers for developing pluggable software devices.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::RegisterSoftwareDevice']/*"/>	
            <unmanaged>HRESULT IDirect3D9::RegisterSoftwareDevice([In] void* pInitializeFunction)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.GetAdapterCount">
            <summary>	
            Returns the number of adapters on the system.	
            </summary>	
            <returns>A UINT value that denotes the number of adapters on the system at the time this <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface was instantiated.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::GetAdapterCount']/*"/>	
            <unmanaged>unsigned int IDirect3D9::GetAdapterCount()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.GetAdapterIdentifier(System.Int32,System.Int32)">
            <summary>	
            Describes the physical display adapters present in the system when the <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface was instantiated.	
            </summary>	
            <param name="adapter">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::GetAdapterIdentifier']/*"/>	
            <unmanaged>HRESULT IDirect3D9::GetAdapterIdentifier([In] unsigned int Adapter,[In] unsigned int Flags,[Out] D3DADAPTER_IDENTIFIER9* pIdentifier)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.GetAdapterModeCount(System.Int32,SharpDX.Direct3D9.Format)">
            <summary>	
            Returns the number of display modes available on this adapter.	
            </summary>	
            <param name="adapter"><para>Ordinal number that denotes the display adapter. D3DADAPTER_DEFAULT is always the primary display adapter. </para></param>	
            <param name="format"><para>Identifies the format of the surface type using <see cref="T:SharpDX.Direct3D9.Format"/>. Use EnumAdapterModes to see the valid formats.</para></param>	
            <returns>This method returns the number of display modes on this adapter or zero if Adapter is greater than or equal to the number of adapters on the system.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::GetAdapterModeCount']/*"/>	
            <unmanaged>unsigned int IDirect3D9::GetAdapterModeCount([In] unsigned int Adapter,[In] D3DFORMAT Format)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.EnumAdapterModes(System.Int32,SharpDX.Direct3D9.Format,System.Int32)">
            <summary>	
            Queries the device to determine whether the specified adapter supports the requested format and display mode. This method could be used in a loop to enumerate all the available adapter modes.	
            </summary>	
            <param name="adapter"><para>Ordinal number denoting the display adapter to enumerate. D3DADAPTER_DEFAULT is always the primary display adapter. This method returns <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> when this value equals or exceeds the number of display adapters in the system. </para></param>	
            <param name="format"><para>Allowable pixel formats. See Remarks.</para></param>	
            <param name="mode"><para>Represents the display-mode index which is an unsigned integer between zero and the value returned by GetAdapterModeCount minus one.</para></param>	
            <returns><para>A reference to the available display mode of type <see cref="T:SharpDX.Direct3D9.DisplayMode"/>. See Remarks.</para></returns>	
            <remarks>	
            An application supplies a display mode and a format to EnumAdapterModes which returns a display mode. This method could be used in a loop to enumerate all available display modes.The application specifies a format and the enumeration is restricted to those display modes that exactly match the format (alpha is ignored). Allowed formats (which are members of <see cref="T:SharpDX.Direct3D9.Format"/>) are as follows:<see cref="F:SharpDX.Direct3D9.Format.A1R5G5B5"/> <see cref="F:SharpDX.Direct3D9.Format.A2R10G10B10"/> <see cref="F:SharpDX.Direct3D9.Format.A8R8G8B8"/> <see cref="F:SharpDX.Direct3D9.Format.R5G6B5"/> <see cref="F:SharpDX.Direct3D9.Format.X1R5G5B5"/> <see cref="F:SharpDX.Direct3D9.Format.X8R8G8B8"/>In addition, EnumAdapterModes treats pixel formats 565 and 555 as equivalent, and returns the correct version. The difference comes into play only when the application locks the back buffer and there is an explicit flag that the application must set in order to accomplish this.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::EnumAdapterModes']/*"/>	
            <unmanaged>HRESULT IDirect3D9::EnumAdapterModes([In] unsigned int Adapter,[In] D3DFORMAT Format,[In] unsigned int Mode,[Out] D3DDISPLAYMODE* pMode)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.GetAdapterDisplayMode(System.Int32)">
            <summary>	
            Retrieves the current display mode of the adapter.	
            </summary>	
            <param name="adapter"><para>Ordinal number that denotes the display adapter to query. D3DADAPTER_DEFAULT is always the primary display adapter. </para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayMode"/> structure, to be filled with information describing the current adapter's mode. </para></returns>	
            <remarks>	
            GetAdapterDisplayMode will not return the correct format when the display is in an extended format, such as 2:10:10:10. Instead, it returns the format X8R8G8B8.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::GetAdapterDisplayMode']/*"/>	
            <unmanaged>HRESULT IDirect3D9::GetAdapterDisplayMode([In] unsigned int Adapter,[Out] D3DDISPLAYMODE* pMode)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceType_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,System.Boolean)">
            <summary>	
            Verifies whether a hardware accelerated device type can be used on this adapter.	
            </summary>	
            <param name="adapter"><para>Ordinal number denoting the display adapter to enumerate. D3DADAPTER_DEFAULT is always the primary display adapter. This method returns <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> when this value equals or exceeds the number of display adapters in the system. </para></param>	
            <param name="devType"><para>Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type, indicating the device type to check. </para></param>	
            <param name="adapterFormat"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, indicating the format of the adapter display mode for which the device type is to be checked. For example, some devices will operate only in 16-bits-per-pixel modes. </para></param>	
            <param name="backBufferFormat"><para>Back buffer format. For more information about formats, see <see cref="T:SharpDX.Direct3D9.Format"/>. This value must be one of the render-target formats. You can use GetAdapterDisplayMode to obtain the current format. For windowed applications, the back buffer format does not need to match the display mode format if the hardware supports color conversion. The set of possible back buffer formats is constrained, but the runtime will allow any valid back buffer format to be presented to any desktop format. There is the additional requirement that the device be operable in the desktop mode because devices typically do not operate in 8 bits per pixel modes. Full-screen applications cannot do color conversion. <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> is allowed for windowed mode. </para></param>	
            <param name="bWindowed"><para>Value indicating whether the device type will be used in full-screen or windowed mode. If set to TRUE, the query is performed for windowed applications; otherwise, this value should be set <see cref="F:SharpDX.Result.False"/>. </para></param>	
            <returns>If the device can be used on this adapter, <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/> is returned. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if Adapter equals or exceeds the number of display adapters in the system. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is also returned if CheckDeviceType specified a device that does not exist. <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/> is returned if the requested back buffer format is not supported, or if hardware acceleration is not available for the specified formats.</returns>	
            <remarks>	
            A hal device type requires hardware acceleration. Applications can use CheckDeviceType to determine if the needed hardware and drivers are present to support a hal device.Full-screen applications should not specify a DisplayFormat that contains an alpha channel. This will result in a failed call. Note that an alpha channel can be present in the back buffer but the two display formats must be identical in all other respects. For example, if DisplayFormat = <see cref="F:SharpDX.Direct3D9.Format.X1R5G5B5"/>, valid values for BackBufferFormat include <see cref="F:SharpDX.Direct3D9.Format.X1R5G5B5"/> and <see cref="F:SharpDX.Direct3D9.Format.A1R5G5B5"/> but exclude <see cref="F:SharpDX.Direct3D9.Format.R5G6B5"/>.The following code fragment shows how you could use CheckDeviceType to test whether a certain device type can be used on this adapter.<code>	
             if(SUCCEEDED(pD3Device-&gt;CheckDeviceType(D3DADAPTER_DEFAULT,  <see cref="F:SharpDX.Direct3D9.DeviceType.Hardware"/>,  DisplayFormat,  BackBufferFormat,  bIsWindowed))) return <see cref="F:SharpDX.Result.Ok"/>;	
            // There is no HAL on this adapter using this render-target format. 	
            // Try again, using another format.	
            	
            </code>This code returns <see cref="F:SharpDX.Result.Ok"/> if the device can be used on the default adapter with the specified surface format.Using CheckDeviceType to test for compatibility between a back buffer that differs from the display format will return appropriate values. This means that the call will reflect device capabilities. If the device cannot render to the requested back-buffer format, the call will still return <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>. If the device can render to the format, but cannot perform the color-converting presentation, the return value will also be <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>. Applications can discover hardware support for the presentation itself by calling CheckDeviceFormatConversion. No software emulation for the color-converting presentation itself will be offered.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::CheckDeviceType']/*"/>	
            <unmanaged>HRESULT IDirect3D9::CheckDeviceType([In] unsigned int Adapter,[In] D3DDEVTYPE DevType,[In] D3DFORMAT AdapterFormat,[In] D3DFORMAT BackBufferFormat,[In] BOOL bWindowed)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormat_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Direct3D9.ResourceType,SharpDX.Direct3D9.Format)">
            <summary>	
            Determines whether a surface format is available as a specified resource type and can be used as a texture, depth-stencil buffer, or render target, or any combination of the three, on a device representing this adapter.	
            </summary>	
            <param name="adapter"><para>Ordinal number denoting the display adapter to query. D3DADAPTER_DEFAULT is always the primary display adapter. This method returns <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> when this value equals or exceeds the number of display adapters in the system. </para></param>	
            <param name="deviceType"><para>Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type, identifying the device type.</para></param>	
            <param name="adapterFormat"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, identifying the format of the display mode into which the adapter will be placed.</para></param>	
            <param name="usage"><para>Requested usage options for the surface. Usage options are any combination of <see cref="T:SharpDX.Direct3D9.Usage"/> and D3DUSAGE_QUERY constants (only a subset of the <see cref="T:SharpDX.Direct3D9.Usage"/> constants are valid for CheckDeviceFormat; see the table on the <see cref="T:SharpDX.Direct3D9.Usage"/> page).</para></param>	
            <param name="rType"><para>Resource type requested for use with the queried format. Member of <see cref="T:SharpDX.Direct3D9.ResourceType"/>. </para></param>	
            <param name="checkFormat"><para>Format of the surfaces which may be used, as defined by Usage. Member of <see cref="T:SharpDX.Direct3D9.Format"/>.</para></param>	
            <returns>If the format is compatible with the specified device for the requested usage, this method returns <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.D3DERR_INVALIDCALL is returned if Adapter equals or exceeds the number of display adapters in the system, or if DeviceType is unsupported.D3DERR_NOTAVAILABLE is returned if the format is not acceptable to the device for this usage.</returns>	
            <remarks>	
            Here are some examples using CheckDeviceFormat to check for hardware support of:An off-screen plain surface format - Specify Usage = 0 and RType = <see cref="F:SharpDX.Direct3D9.ResourceType.Surface"/>. A depth-stencil format - The following snippet tests for the passed in depth-stencil format:  	
            <code>	
             <see cref="T:System.Boolean"/> IsDepthFormatExisting( <see cref="T:SharpDX.Direct3D9.Format"/> DepthFormat, <see cref="T:SharpDX.Direct3D9.Format"/> AdapterFormat ) 	
            { <see cref="T:SharpDX.Result"/> hr = pD3D-&gt;CheckDeviceFormat( D3DADAPTER_DEFAULT, <see cref="F:SharpDX.Direct3D9.DeviceType.Hardware"/>, AdapterFormat, <see cref="F:SharpDX.Direct3D9.Usage.DepthStencil"/>, <see cref="F:SharpDX.Direct3D9.ResourceType.Surface"/>, DepthFormat); return SUCCEEDED( hr );	
            }	
            </code>	
              <para>See Selecting a Device (Direct3D 9) for more detail on the enumeration process.</para>	
              Can this texture be rendered in a particular format - Given the current display mode, this example shows how to verify that the texture format is compatible with the specific back-buffer format:  	
            <code>	
             <see cref="T:System.Boolean"/> IsTextureFormatOk( <see cref="T:SharpDX.Direct3D9.Format"/> TextureFormat, <see cref="T:SharpDX.Direct3D9.Format"/> AdapterFormat ) 	
            { <see cref="T:SharpDX.Result"/> hr = pD3D-&gt;CheckDeviceFormat( D3DADAPTER_DEFAULT, <see cref="F:SharpDX.Direct3D9.DeviceType.Hardware"/>, AdapterFormat, 0, <see cref="F:SharpDX.Direct3D9.ResourceType.Texture"/>, TextureFormat); return SUCCEEDED( hr );	
            }	
            </code>	
               Alpha blending in a pixel shader - Set Usage to <see cref="F:SharpDX.Direct3D9.Usage.QueryPostPixelShaderBlending"/>. Expect this to fail for all floating-point render targets. Autogeneration of mipmaps - Set Usage to <see cref="F:SharpDX.Direct3D9.Usage.AutoGenerateMipMap"/>. If the mipmap automatic generation fails, the application will get a non-mipmapped texture. Calling this method is considered a hint, so this method can return <see cref="F:SharpDX.Direct3D9.ResultCode.NoAutomaticGeneration"/> (a valid success code) if the only thing that fails is the mipmap generation. For more information about mipmap generation, see Automatic Generation of Mipmaps (Direct3D 9).When migrating code from Direct3D 9 to Direct3D 10, the Direct3D 10 equivalent to CheckDeviceFormat is CheckFormatSupport.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::CheckDeviceFormat']/*"/>	
            <unmanaged>HRESULT IDirect3D9::CheckDeviceFormat([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT AdapterFormat,[In] unsigned int Usage,[In] D3DRESOURCETYPE RType,[In] D3DFORMAT CheckFormat)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultiSampleType_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType,System.Int32@)">
            <summary>	
            Determines if a multisampling technique is available on this device.	
            </summary>	
            <param name="adapter"><para>Ordinal number denoting the display adapter to query. D3DADAPTER_DEFAULT is always the primary display adapter. This method returns <see cref="F:SharpDX.Result.False"/> when this value equals or exceeds the number of display adapters in the system. See Remarks.</para></param>	
            <param name="deviceType"><para>Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type, identifying the device type.</para></param>	
            <param name="surfaceFormat"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type that specifies the format of the surface to be multisampled. For more information, see Remarks.</para></param>	
            <param name="windowed"><para>bool value. Specify TRUE to inquire about windowed multisampling, and specify <see cref="F:SharpDX.Result.False"/> to inquire about full-screen multisampling.</para></param>	
            <param name="multiSampleType"><para>Member of the <see cref="T:SharpDX.Direct3D9.MultisampleType"/> enumerated type, identifying the multisampling technique to test.</para></param>	
            <param name="qualityLevelsRef"><para>pQualityLevels returns the number of device-specific sampling variations available with the given sample type. For example, if the returned value is 3, then quality levels 0, 1 and 2 can be used when creating resources with the given sample count. The meanings of these quality levels are defined by the device manufacturer and cannot be queried through D3D. For example, for a particular device different quality levels at a fixed sample count might refer to different spatial layouts of the sample locations or different methods of resolving.  This can be <c>null</c> if it is not necessary to return the quality levels.</para></param>	
            <returns>If the device can perform the specified multisampling method, this method returns <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if the Adapter or MultiSampleType parameters are invalid. This method returns <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/> if the queried multisampling technique is not supported by this device. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidDevice"/> is returned if DeviceType does not apply to this adapter.</returns>	
            <remarks>	
            This method is intended for use with both render-target and depth-stencil surfaces because you must create both surfaces multisampled if you want to use them together.The following code fragment shows how you could use CheckDeviceMultiSampleType to test for devices that support a specific multisampling method.<code>	
             if( SUCCEEDED(pD3D-&gt;CheckDeviceMultiSampleType( pCaps-&gt;AdapterOrdinal,  pCaps-&gt;DeviceType, BackBufferFormat,  <see cref="F:SharpDX.Result.False"/>, <see cref="F:SharpDX.Direct3D9.MultisampleType.ThreeSamples"/>, <c>null</c> ) ) &amp;&amp; SUCCEEDED(pD3D-&gt;CheckDeviceMultiSampleType( pCaps-&gt;AdapterOrdinal,  pCaps-&gt;DeviceType, DepthBufferFormat,  <see cref="F:SharpDX.Result.False"/>, <see cref="F:SharpDX.Direct3D9.MultisampleType.ThreeSamples"/>, <c>null</c> ) ) ) return <see cref="F:SharpDX.Result.Ok"/>;	
            	
            </code>The preceding code will return <see cref="F:SharpDX.Result.Ok"/> if the device supports the full-screen <see cref="F:SharpDX.Direct3D9.MultisampleType.ThreeSamples"/> multisampling method with the surface format.See the remarks in <see cref="T:SharpDX.Direct3D9.MultisampleType"/> for additional information on working with and setting multisample types and quality levels.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::CheckDeviceMultiSampleType']/*"/>	
            <unmanaged>HRESULT IDirect3D9::CheckDeviceMultiSampleType([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT SurfaceFormat,[In] BOOL Windowed,[In] D3DMULTISAMPLE_TYPE MultiSampleType,[Out] unsigned int* pQualityLevels)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDepthStencilMatch_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format)">
            <summary>	
            Determines whether a depth-stencil format is compatible with a render-target format in a particular display mode.	
            </summary>	
            <param name="adapter"><para>Ordinal number denoting the display adapter to query. D3DADAPTER_DEFAULT is always the primary display adapter.</para></param>	
            <param name="deviceType"><para>Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type, identifying the device type.</para></param>	
            <param name="adapterFormat"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, identifying the format of the display mode into which the adapter will be placed. </para></param>	
            <param name="renderTargetFormat"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, identifying the format of the render-target surface to be tested. </para></param>	
            <param name="depthStencilFormat"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, identifying the format of the depth-stencil surface to be tested. </para></param>	
            <returns>If the depth-stencil format is compatible with the render-target format in the display mode, this method returns <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> can be returned if one or more of the parameters is invalid. If a depth-stencil format is not compatible with the render target in the display mode, then this method returns <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>.</returns>	
            <remarks>	
            This method is provided to enable applications to work with hardware requiring that certain depth formats can only work with certain render-target formats.The behavior of this method has been changed for DirectX 8.1.  This method now pays attention to the D24x8 and D32 depth-stencil formats. The previous version assumed that these formats would always be usable with 32- or 16-bit render targets. This method will now return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/> for these formats only if the device is capable of mixed-depth operations.The following code fragment shows how you could use CheckDeviceFormat to validate a depth stencil format.<code>	
             <see cref="T:System.Boolean"/> IsDepthFormatOk(<see cref="T:SharpDX.Direct3D9.Format"/> DepthFormat,  <see cref="T:SharpDX.Direct3D9.Format"/> AdapterFormat,  <see cref="T:SharpDX.Direct3D9.Format"/> BackBufferFormat)	
            { // Verify that the depth format exists <see cref="T:SharpDX.Result"/> hr = pD3D-&gt;CheckDeviceFormat(D3DADAPTER_DEFAULT, <see cref="F:SharpDX.Direct3D9.DeviceType.Hardware"/>, AdapterFormat, <see cref="F:SharpDX.Direct3D9.Usage.DepthStencil"/>, <see cref="F:SharpDX.Direct3D9.ResourceType.Surface"/>, DepthFormat); if(FAILED(hr)) return <see cref="F:SharpDX.Result.False"/>; // Verify that the depth format is compatible hr = pD3D-&gt;CheckDepthStencilMatch(D3DADAPTER_DEFAULT, <see cref="F:SharpDX.Direct3D9.DeviceType.Hardware"/>, AdapterFormat, BackBufferFormat, DepthFormat); return SUCCEEDED(hr); }	
            	
            </code>The preceding call will return <see cref="F:SharpDX.Result.False"/> if DepthFormat cannot be used in conjunction with AdapterFormat and BackBufferFormat.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::CheckDepthStencilMatch']/*"/>	
            <unmanaged>HRESULT IDirect3D9::CheckDepthStencilMatch([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT AdapterFormat,[In] D3DFORMAT RenderTargetFormat,[In] D3DFORMAT DepthStencilFormat)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormatConversion_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Format)">
            <summary>	
            Tests the device to see if it supports conversion from one display format to another.	
            </summary>	
            <param name="adapter"><para>Display adapter ordinal number. D3DADAPTER_DEFAULT is always the primary display adapter. This method returns <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> when this value equals or exceeds the number of display adapters in the system.  </para></param>	
            <param name="deviceType"><para>Device type. Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type. </para></param>	
            <param name="sourceFormat"><para>Source adapter format. Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type.</para></param>	
            <param name="targetFormat"><para>Target adapter format. Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. The method will return <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/> when the hardware does not support conversion between the two formats.</returns>	
            <remarks>	
            Using CheckDeviceType to test for compatibility between a back buffer that differs from the display format will return appropriate values. This means that the call will reflect device capabilities. If the device cannot render to the requested back buffer format, the call will still return <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>. If the device can render to the format, but cannot perform the color-converting presentation, the return value will also be <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>. Applications can discover hardware support for the presentation itself by calling CheckDeviceFormatConversion. No software emulation for the color-converting presentation itself will be offered.CheckDeviceFormatConversion can also be used to determine which combinations of source surface formats and destination surface formats are permissible in calls to StretchRect.Color conversion is restricted to the following source and target formats.The source format must be a FOURCC format or a valid back buffer format. For a list of these, see FourCC Formats and BackBuffer or Display Formats. The target format must be one of these unsigned formats:  D3DFMT_X1R5G5B5D3DFMT_A1R5G5B5D3DFMT_R5G6B5 D3DFMT_R8G8B8D3DFMT_X8R8G8B8D3DFMT_A8R8G8B8 D3DFMT_A2R10G10B10D3DFMT_A16B16G16R16D3DFMT_A2B10G10R10 D3DFMT_A8B8G8R8D3DFMT_X8B8G8R8D3DFMT_A16B16G16R16F <see cref="F:SharpDX.Direct3D9.Format.A32B32G32R32F"/>  <para>?</para>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::CheckDeviceFormatConversion']/*"/>	
            <unmanaged>HRESULT IDirect3D9::CheckDeviceFormatConversion([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] D3DFORMAT SourceFormat,[In] D3DFORMAT TargetFormat)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.GetDeviceCaps(System.Int32,SharpDX.Direct3D9.DeviceType)">
            <summary>	
            Retrieves device-specific information about a device.	
            </summary>	
            <param name="adapter"><para>Ordinal number that denotes the display adapter. D3DADAPTER_DEFAULT is always the primary display adapter. </para></param>	
            <param name="deviceType"><para>Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type. Denotes the device type. </para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure to be filled with information describing the capabilities of the device. </para></returns>	
            <remarks>	
            The application should not assume the persistence of vertex processing capabilities across Direct3D device objects. The particular capabilities that a physical device exposes may depend on parameters supplied to CreateDevice. For example, the capabilities may yield different vertex processing capabilities before and after creating a Direct3D Device Object with hardware vertex processing enabled. For more information see the description of <see cref="T:SharpDX.Direct3D9.Capabilities"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::GetDeviceCaps']/*"/>	
            <unmanaged>HRESULT IDirect3D9::GetDeviceCaps([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[Out] D3DCAPS9* pCaps)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.GetAdapterMonitor(System.Int32)">
            <summary>	
            Returns the handle of the monitor associated with the Direct3D object.	
            </summary>	
            <param name="adapter"><para>Ordinal number that denotes the display adapter. D3DADAPTER_DEFAULT is always the primary display adapter. </para></param>	
            <returns>Handle of the monitor associated with the Direct3D object.</returns>	
            <remarks>	
            As shown in the following code fragment, which illustrates how to obtain a handle to the monitor associated with a given device, use GetDirect3D to return the Direct3D enumerator from the device and use GetCreationParameters to retrieve the value for Adapter.<code>	
             if( FAILED( pDevice-&gt;GetCreationParameters(  &amp;Parameters ) ) ) return <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>; if( FAILED( pDevice-&gt;GetDirect3D(&amp;pD3D) ) ) return <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>; hMonitor = pD3D-&gt;GetAdapterMonitor(Parameters.AdapterOrdinal); pD3D-&gt;Release();	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::GetAdapterMonitor']/*"/>	
            <unmanaged>HMONITOR IDirect3D9::GetAdapterMonitor([In] unsigned int Adapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)">
            <summary>	
            Creates a device to represent the display adapter.	
            </summary>	
            <param name="adapter"><para>Ordinal number that denotes the display adapter. D3DADAPTER_DEFAULT is always the primary display adapter. </para></param>	
            <param name="deviceType"><para>Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type that denotes the desired device type. If the desired device type is not available, the method will fail. </para></param>	
            <param name="hFocusWindow"><para>The focus window alerts Direct3D when an application switches from foreground mode to background mode. See Remarks. 	 </para>  For full-screen mode, the window specified must be a top-level window. For windowed mode, this parameter may be <c>null</c> only if the hDeviceWindow member of pPresentationParameters is set to a valid, non-<c>null</c> value.</param>	
            <param name="behaviorFlags"><para>Combination of one or more options that control device creation. For more information, see <see cref="T:SharpDX.Direct3D9.CreateFlags"/>.</para></param>	
            <param name="presentationParametersRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, describing the presentation parameters for the device to be created. If BehaviorFlags specifies <see cref="F:SharpDX.Direct3D9.CreateFlags.AdapterGroupDevice"/>, pPresentationParameters is an array. Regardless of the number of heads that exist, only one depth/stencil surface is automatically created.</para> <para>For Windows 2000 and Windows XP, the full-screen device display refresh rate is set in the following order: </para>  User-specified nonzero ForcedRefreshRate registry key, if supported by the device. Application-specified nonzero refresh rate value in the presentation parameter. Refresh rate of the latest desktop mode, if supported by the device. 75 hertz if supported by the device. 60 hertz if supported by the device. Device default.  <para>An unsupported refresh rate will default to the closest supported refresh rate below it.  For example, if the application specifies 63 hertz, 60 hertz will be used. There are no supported refresh rates below 57 hertz.</para> <para>pPresentationParameters is both an input and an output parameter. Calling this method may change several members including:</para>  If BackBufferCount, BackBufferWidth, and BackBufferHeight  are 0 before the method is called, they will be changed when the method returns. If BackBufferFormat equals <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> before the method is called, it will be changed when the method returns.</param>	
            <param name="returnedDeviceInterfaceOut"><para>Address of a reference to the returned <see cref="T:SharpDX.Direct3D9.Device"/> interface, which represents the created device. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>.</returns>	
            <remarks>	
            This method returns a fully working device interface, set to the required display mode (or windowed), and allocated with the appropriate back buffers. To begin rendering, the application needs only to create and set a depth buffer (assuming EnableAutoDepthStencil is <see cref="F:SharpDX.Result.False"/> in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>).When you create a Direct3D device, you supply two different window parameters: a focus window (hFocusWindow) and a device window (the hDeviceWindow in <see cref="T:SharpDX.Direct3D9.PresentParameters"/>). The purpose of each window is:The focus window alerts Direct3D when an application switches from foreground mode to background mode (via Alt-Tab, a mouse click, or some other method). A single focus window is shared by each device created by an application. The device window determines the location and size of the back buffer on screen. This is used by Direct3D when the back buffer contents are copied to the front buffer during Present.This method should not be run during the handling of WM_CREATE. An application should never pass a window handle to Direct3D while handling WM_CREATE.  Any call to create, release, or reset the device must be done using the same thread as the window procedure of the focus window.Note that <see cref="F:SharpDX.Direct3D9.CreateFlags.HardwareVertexProcessing"/>, <see cref="F:SharpDX.Direct3D9.CreateFlags.MixedVertexProcessing"/>, and <see cref="F:SharpDX.Direct3D9.CreateFlags.SoftwareVertexProcessing"/> are mutually exclusive flags, and at least one of these vertex processing flags must be specified when calling this method.Back buffers created as part of the device are only lockable if <see cref="F:SharpDX.Direct3D9.PresentFlags.LockableBackBuffer"/> is specified in the presentation parameters. (Multisampled back buffers and depth surfaces are never lockable.)The methods Reset, <see cref="T:SharpDX.ComObject"/>, and TestCooperativeLevel must be called from the same thread that used this method to create a device.D3DFMT_UNKNOWN can be specified for the windowed mode back buffer format when calling CreateDevice, Reset, and CreateAdditionalSwapChain. This means the application does not have to query the current desktop format before calling CreateDevice for windowed mode. For full-screen mode, the back buffer format must be specified.If you attempt to create a device on a 0x0 sized window, CreateDevice will fail.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::CreateDevice']/*"/>	
            <unmanaged>HRESULT IDirect3D9::CreateDevice([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] HWND hFocusWindow,[In] D3DCREATE BehaviorFlags,[In, Buffer] D3DPRESENT_PARAMETERS* pPresentationParameters,[Out, Fast] IDirect3DDevice9** ppReturnedDeviceInterface)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Direct3D.Adapters">
            <summary>
            Gets the adapters.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.Direct3D.AdapterCount">
            <summary>	
            Returns the number of adapters on the system.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9::GetAdapterCount']/*"/>	
            <unmanaged>GetAdapterCount</unmanaged>	
            <unmanaged>unsigned int IDirect3D9::GetAdapterCount()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Direct3DEx">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> interface (which inherits from <see cref="T:SharpDX.Direct3D9.Direct3D"/>) to create Microsoft Direct3D 9Ex objects and set up the environment. This interface includes methods for enumerating and retrieving capabilities of the device and is available when the underlying device implementation is compliant with Windows Vista.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9Ex']/*"/>	
            <unmanaged>IDirect3D9Ex</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3DEx.#ctor">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> object and returns an interface to it.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> object is the first object that the application creates and the last object thta the application releases. Functions for enumerating and retrieving capabilities of a device are accessible through the IDirect3D9Ex object. This enables applications to select devices without creating them.   The <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> interface supports enumeration of active display adapters and allows the creation of IDirect3D9Ex objects. If the user dynamically adds adapters (either by adding devices to the desktop, or by hot-docking a laptop), these devices are not included in the enumeration. Creating a new IDirect3D9Ex interface will expose the new devices.   Pass the D3D_SDK_VERSION flag to this function to ensure that header files used in the compiled application match the version of the installed runtime DLLs. D3D_SDK_VERSION is changed in the runtime only when a header or another code change would require rebuilding the application. If this function fails, it indicates that the versions of the header file and the runtime DLL do not match.  Note??Direct3DCreate9Ex is supported only in Windows Vista, Windows Server 2008, and Windows 7.   Earlier versions of the D3D9.dll library do not include Direct3D9Ex and Direct3DCreate9Ex.  	
            </remarks>	
            <returns>D3DERR_NOTAVAILABLE if Direct3DEx features are not supported (no WDDM driver is installed) or if the SDKVersion does not match the version of the DLL.   D3DERR_OUTOFMEMORY if out-of-memory conditions are detected when creating the enumerator object.  S_OK if the creation of the enumerator object is successful.  </returns>
            <unmanaged>HRESULT Direct3DCreate9Ex([None] int SDKVersion,[None] IDirect3D9Ex** arg1)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3DEx.GetAdapterDisplayModeEx(System.Int32)">
            <summary>
            Retrieves the current display mode and rotation settings of the adapter.
            </summary>
            <param name="adapter">The adapter.</param>
            <returns><see cref="T:SharpDX.Direct3D9.DisplayModeEx"/> structure containing data about the display mode of the adapter</returns>
            <unmanaged>HRESULT IDirect3D9Ex::GetAdapterDisplayModeEx([In] unsigned int Adapter,[Out] D3DDISPLAYMODEEX* pMode,[Out] D3DDISPLAYROTATION* pRotation)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3DEx.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3DEx.GetAdapterModeCountEx(System.Int32,SharpDX.Direct3D9.DisplayModeFilter)">
            <summary>	
            Returns the number of display modes available.	
            </summary>	
            <param name="adapter"><para>Ordinal number denoting the display adapter from which to retrieve the display mode count.</para></param>	
            <param name="filterRef"><para>Specifies the characteristics of the desired display mode. See <see cref="T:SharpDX.Direct3D9.DisplayModeFilter"/>.</para></param>	
            <returns>The number of display modes available. A return of value zero from this method is an indication that no such display mode is supported or simply this monitor is no longer available.</returns>	
            <remarks>	
            Events such as display mode changes on other heads of the same hardware, monitor change or its connection status change, and desktop extension/unextension could all affect the number of display mode available.To fullscreen applications, <see cref="F:SharpDX.Direct3D9.ResultCode.PresentModeChanged"/> returned from PresentEx or CheckDeviceState is the indication of display mode setting failure due to those events.To increase the chance of setting a currently available display mode successfully, fullscreen applications should try to requery the available display mode list upon receiving <see cref="F:SharpDX.Direct3D9.ResultCode.PresentModeChanged"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9Ex::GetAdapterModeCountEx']/*"/>	
            <unmanaged>unsigned int IDirect3D9Ex::GetAdapterModeCountEx([In] unsigned int Adapter,[In] const D3DDISPLAYMODEFILTER* pFilter)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3DEx.EnumerateAdapterModesEx(System.Int32,SharpDX.Direct3D9.DisplayModeFilter,System.Int32)">
            <summary>	
            This method returns the actual display mode info based on the given mode index.	
            </summary>	
            <param name="adapter"><para>Ordinal number denoting the display adapter to enumerate. D3DADAPTER_DEFAULT is always the primary display adapter. This method returns <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> when this value equals or exceeds the number of display adapters in the system.</para></param>	
            <param name="filterRef"><para>See <see cref="T:SharpDX.Direct3D9.DisplayModeFilter"/>.</para></param>	
            <param name="mode"><para>Represents the display-mode index which is an unsigned integer between zero and the value returned by GetAdapterModeCount minus one.</para></param>	
            <returns><para>A reference to the available display mode of type <see cref="T:SharpDX.Direct3D9.DisplayModeEx"/>.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9Ex::EnumAdapterModesEx']/*"/>	
            <unmanaged>HRESULT IDirect3D9Ex::EnumAdapterModesEx([In] unsigned int Adapter,[In] const D3DDISPLAYMODEFILTER* pFilter,[In] unsigned int Mode,[Out] D3DDISPLAYMODEEX* pMode)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3DEx.GetAdapterDisplayModeEx(System.Int32,SharpDX.Direct3D9.DisplayRotation@)">
            <summary>	
            Retrieves the current display mode and rotation settings of the adapter.	
            </summary>	
            <param name="adapter"><para>Ordinal number that denotes the display adapter to query. D3DADAPTER_DEFAULT is always the primary display adapter. </para></param>	
            <param name="rotationRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayRotation"/> structure indicating the type of screen rotation the application will do. The value returned through this reference is important when the <see cref="F:SharpDX.Direct3D9.PresentFlags.NoAutoRotate"/> flag is used; otherwise, it can be set to <c>null</c>.</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayModeEx"/> structure containing data about the display mode of the adapter. As opposed to the display mode of the device, which may not be active if the device does not own full-screen mode. Can be set to <c>null</c>.</para></returns>	
            <remarks>	
            GetAdapterDisplayModeEx does not return the correct format when the display is in an extended format, such as 2:10:10:10. Instead, it returns the format X8R8G8B8.To windowed applications, a value of <see cref="F:SharpDX.Direct3D9.ResultCode.PresentModeChanged"/> returned from PresentEx or CheckDeviceState indicates that the display mode changed and that the current display mode might have a different format. To avoid a color-converting Present blt, windowed applications can optionally get new display mode information by using this method and adjusting its swap chain format accordingly. This method returns <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/> if this head is no longer part of the desktop or if the monitor is disconnected.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9Ex::GetAdapterDisplayModeEx']/*"/>	
            <unmanaged>HRESULT IDirect3D9Ex::GetAdapterDisplayModeEx([In] unsigned int Adapter,[Out] D3DDISPLAYMODEEX* pMode,[Out] D3DDISPLAYROTATION* pRotation)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3DEx.CreateDeviceEx(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,System.Int32,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.DisplayModeEx[],SharpDX.Direct3D9.DeviceEx)">
            <summary>	
            Creates a device to represent the display adapter.	
            </summary>	
            <param name="adapter"><para>Ordinal number that denotes the display adapter. D3DADAPTER_DEFAULT is always the primary display adapter.</para></param>	
            <param name="deviceType"><para>Specifies the type of device. See <see cref="T:SharpDX.Direct3D9.DeviceType"/>. If the desired device type is not available, the method will fail.</para></param>	
            <param name="hFocusWindow"><para>The focus window alerts Direct3D when an application switches from foreground mode to background mode. For full-screen mode, the window specified must be a top-level window. For windowed mode, this parameter may be <c>null</c> only if the hDeviceWindow member of pPresentationParameters is set to a valid, non-<c>null</c> value.</para></param>	
            <param name="behaviorFlags"><para>Combination of one or more options (see <see cref="T:SharpDX.Direct3D9.CreateFlags"/>) that control device creation.</para></param>	
            <param name="presentationParametersRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure, describing the presentation parameters for the device to be created. If BehaviorFlags specifies <see cref="F:SharpDX.Direct3D9.CreateFlags.AdapterGroupDevice"/>, this parameter is an array. Regardless of the number of heads that exist, only one depth/stencil surface is automatically created.</para> <para>This parameter is both an input and an output parameter. Calling this method may change several members including:</para>  If BackBufferCount, BackBufferWidth, and BackBufferHeight are 0 before the method is called, they will be changed when the method returns. If BackBufferFormat equals <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> before the method is called, it will be changed when the method returns.</param>	
            <param name="fullscreenDisplayModeRef"><para>The display mode for when the device is set to fullscreen. See <see cref="T:SharpDX.Direct3D9.DisplayModeEx"/>. If BehaviorFlags specifies <see cref="F:SharpDX.Direct3D9.CreateFlags.AdapterGroupDevice"/>, this parameter is an array. This parameter must be <c>null</c> for windowed mode.</para></param>	
            <param name="returnedDeviceInterfaceOut"><para>Address of a reference to the returned <see cref="T:SharpDX.Direct3D9.DeviceEx"/>, which represents the created device.</para></param>	
            <returns>This method returns <see cref="F:SharpDX.Result.Ok"/> when rendering device along with swapchain buffers are created successfully. <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/> is returned when any error other than invalid caller input is encountered.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9Ex::CreateDeviceEx']/*"/>	
            <unmanaged>HRESULT IDirect3D9Ex::CreateDeviceEx([In] unsigned int Adapter,[In] D3DDEVTYPE DeviceType,[In] HWND hFocusWindow,[In] unsigned int BehaviorFlags,[In, Buffer] D3DPRESENT_PARAMETERS* pPresentationParameters,[In, Buffer] D3DDISPLAYMODEEX* pFullscreenDisplayMode,[Out, Fast] IDirect3DDevice9Ex** ppReturnedDeviceInterface)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Direct3DEx.GetAdapterLuid(System.Int32)">
            <summary>	
            This method returns a unique identifier for the adapter that is specific to the adapter hardware. Applications can use this identifier to define robust mappings across various APIs (Direct3D 9, DXGI).	
            </summary>	
            <param name="adapter"><para>Ordinal number denoting the display adapter from which to retrieve the <see cref="T:System.Int64"/>.</para></param>	
            <returns><para>A unique identifier for the given adapter.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3D9Ex::GetAdapterLUID']/*"/>	
            <unmanaged>HRESULT IDirect3D9Ex::GetAdapterLUID([In] unsigned int Adapter,[Out] LUID* pLUID)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Direct3DEx.AdaptersEx">
            <summary>
            Gets a collection of installed extended adapters.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.DisplayModeCollection">
            <summary>
            A collection of <see cref="T:SharpDX.Direct3D9.DisplayMode"/>
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.DriverLevel">
            <summary>
            Driver levels support.
            </summary>
            <unmanaged>None</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.DriverLevel.Direct3D7">
            <summary>
            Supports for Direct3D7.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.DriverLevel.Direct3D8">
            <summary>
            Supports for Direct3D8.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.DriverLevel.Direct3D9">
            <summary>
            Supports for Direct3D9.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.Effect">
            <summary>	
            Used to set and query effects, and to choose techniques. An effect object can contain multiple techniques to render the same effect.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect']/*"/>	
            <unmanaged>ID3DXEffect</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.Begin">
            <summary>
            Starts an active technique.
            </summary>
            <returns>The number of passes needed to render the current technique. </returns>
            <unmanaged>HRESULT ID3DXEffect::Begin([Out] unsigned int* pPasses,[In] D3DXFX Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromFile(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles an effect from a file.
            </summary>
            <param name="device">The device.</param>
            <param name="fileName">Name of the file.</param>
            <param name="flags">The flags.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromFile(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles an effect from a file.
            </summary>
            <param name="device">The device.</param>
            <param name="fileName">Name of the file.</param>
            <param name="preprocessorDefines">The preprocessor defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="skipConstants">The skip constants.</param>
            <param name="flags">The flags.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromFile(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.EffectPool)">
            <summary>
            Compiles an effect from a file.
            </summary>
            <param name="device">The device.</param>
            <param name="fileName">Name of the file.</param>
            <param name="preprocessorDefines">The preprocessor defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="skipConstants">The skip constants.</param>
            <param name="flags">The flags.</param>
            <param name="pool">The pool.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles an effect from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="memory">The buffer.</param>
            <param name="flags">The flags.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles an effect from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="memory">The buffer.</param>
            <param name="preprocessorDefines">The preprocessor defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="skipConstants">The skip constants.</param>
            <param name="flags">The flags.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.EffectPool)">
            <summary>
            Compiles an effect from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="memory">The buffer.</param>
            <param name="preprocessorDefines">The preprocessor defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="skipConstants">The skip constants.</param>
            <param name="flags">The flags.</param>
            <param name="pool">The pool.</param>
            <returns>An <see cref="T:SharpDX.Direct3D9.Effect"/></returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles an effect from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="flags">The flags.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles an effect from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="preprocessorDefines">The preprocessor defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="skipConstants">The skip constants.</param>
            <param name="flags">The flags.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.EffectPool)">
            <summary>
            Compiles an effect from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="preprocessorDefines">The preprocessor defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="skipConstants">The skip constants.</param>
            <param name="flags">The flags.</param>
            <param name="pool">The pool.</param>
            <returns>An <see cref="T:SharpDX.Direct3D9.Effect"/></returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromString(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles an effect from a string.
            </summary>
            <param name="device">The device.</param>
            <param name="sourceData">The source data.</param>
            <param name="flags">The flags.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromString(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles an effect from a string.
            </summary>
            <param name="device">The device.</param>
            <param name="sourceData">The source data.</param>
            <param name="preprocessorDefines">The preprocessor defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="skipConstants">The skip constants.</param>
            <param name="flags">The flags.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FromString(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.EffectPool)">
            <summary>
            Compiles an effect from a string.
            </summary>
            <param name="device">The device.</param>
            <param name="sourceData">The source data.</param>
            <param name="preprocessorDefines">The preprocessor defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="skipConstants">The skip constants.</param>
            <param name="flags">The flags.</param>
            <param name="pool">The pool.</param>
            <returns>
            An <see cref="T:SharpDX.Direct3D9.Effect"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.SetRawValue(SharpDX.Direct3D9.EffectHandle,System.Single[])">
            <summary>
            Set a contiguous range of shader constants with a memory copy.
            </summary>
            <param name="handle">The handle.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXEffect::SetRawValue([In] D3DXHANDLE hParameter,[In] const void* pData,[In] unsigned int ByteOffset,[In] unsigned int Bytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.SetRawValue(SharpDX.Direct3D9.EffectHandle,SharpDX.DataStream)">
            <summary>
            Set a contiguous range of shader constants with a memory copy.
            </summary>
            <param name="handle">The handle.</param>
            <param name="data">The data.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXEffect::SetRawValue([In] D3DXHANDLE hParameter,[In] const void* pData,[In] unsigned int ByteOffset,[In] unsigned int Bytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.SetRawValue(SharpDX.Direct3D9.EffectHandle,SharpDX.DataStream,System.Int32,System.Int32)">
            <summary>
            Set a contiguous range of shader constants with a memory copy.
            </summary>
            <param name="handle">The handle.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="countInBytes">The count in bytes.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT ID3DXEffect::SetRawValue([In] D3DXHANDLE hParameter,[In] const void* pData,[In] unsigned int ByteOffset,[In] unsigned int Bytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.SetRawValue(SharpDX.Direct3D9.EffectHandle,System.Single[],System.Int32,System.Int32)">
            <summary>
            Set a contiguous range of shader constants with a memory copy.
            </summary>
            <param name="handle">The handle.</param>
            <param name="data">The data.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DXEffect::SetRawValue([In] D3DXHANDLE hParameter,[In] const void* pData,[In] unsigned int ByteOffset,[In] unsigned int Bytes)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Effect"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.GetPool(SharpDX.Direct3D9.EffectPool@)">
            <summary>	
            Gets a reference to the pool of shared parameters.	
            </summary>	
            <param name="poolOut"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.EffectPool"/> object. </para></param>	
            <returns>This method always returns the value <see cref="F:SharpDX.Result.Ok"/>.</returns>	
            <remarks>	
            Pools contain shared parameters between effects. See Cloning and Sharing (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::GetPool']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::GetPool([Out] ID3DXEffectPool** ppPool)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.SetTechnique(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Sets the active technique.	
            </summary>	
            <param name="hTechnique"><para>Unique handle to the technique.  See Handles (Direct3D 9).</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::SetTechnique']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::SetTechnique([In] D3DXHANDLE hTechnique)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.GetCurrentTechnique">
            <summary>	
            Gets the current technique.	
            </summary>	
            <returns>A unique identifier to the current technique.  See Handles (Direct3D 9).</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::GetCurrentTechnique']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXEffect::GetCurrentTechnique()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.ValidateTechnique(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Validate a technique.	
            </summary>	
            <param name="hTechnique"><para>Unique identifier. See Handles (Direct3D 9).</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.ConflictingRenderState"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.ConflictingTextureFilter"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DriverInternalError"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.TooManyOperations"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedAlphaArgument"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedAlphaOperation"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedColorArgument"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedColorOperation"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedFactorValue"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.UnsupportedTextureFilter"/>, and <see cref="F:SharpDX.Direct3D9.ResultCode.WrongTextureFormat"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::ValidateTechnique']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::ValidateTechnique([In] D3DXHANDLE hTechnique)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.FindNextValidTechnique(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Searches for the next valid technique, starting at the technique after the specified technique.	
            </summary>	
            <param name="hTechnique"><para>Unique identifier to a technique. See Handles (Direct3D 9). Specify <c>null</c> for this parameter to find the first valid technique.</para></param>	
            <returns><para>Pointer to an identifier for the next technique. <c>null</c> is returned if this is the last technique.  See Handles (Direct3D 9).</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::FindNextValidTechnique']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::FindNextValidTechnique([In] D3DXHANDLE hTechnique,[Out] D3DXHANDLE* pTechnique)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.IsParameterUsed(SharpDX.Direct3D9.EffectHandle,SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Determines if a parameter is used by the technique.	
            </summary>	
            <param name="hParameter"><para>Unique identifier for the parameter.  See Handles (Direct3D 9).</para></param>	
            <param name="hTechnique"><para>Unique identifier for the technique.  See Handles (Direct3D 9).</para></param>	
            <returns>Returns TRUE if the parameter is being used and returns <see cref="F:SharpDX.Result.False"/> if the parameter is not being used.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::IsParameterUsed']/*"/>	
            <unmanaged>BOOL ID3DXEffect::IsParameterUsed([In] D3DXHANDLE hParameter,[In] D3DXHANDLE hTechnique)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.Begin(SharpDX.Direct3D9.FX)">
            <summary>	
            Starts an active technique.	
            </summary>	
            <param name="flags"><para>DWORD that determines if state modified by an effect is saved and restored. The default value 0 specifies that <see cref="M:SharpDX.Direct3D9.Effect.Begin"/> and <see cref="M:SharpDX.Direct3D9.Effect.End"/> will save and restore all state modified by the effect (including pixel and vertex shader constants). Valid flags can be seen at Effect State Save and Restore Flags.</para></param>	
            <returns><para>Pointer to a value returned that indicates the number of passes needed to render the current technique. </para></returns>	
            <remarks>	
            An application sets one active technique in the effect system by calling <see cref="M:SharpDX.Direct3D9.Effect.Begin"/>. The effect system responds by capturing all the pipeline state that can be changed by the technique in a state block. An application signals the end of a technique by calling <see cref="M:SharpDX.Direct3D9.Effect.End"/>, which uses the state block to restore the original state. The effect system, therefore, takes care of saving state when a technique becomes active and restoring state when a technique ends. If you choose to disable this save and restore functionality, see <see cref="F:SharpDX.Direct3D9.FX.DoNotSaveSamplerState"/>.Within the <see cref="M:SharpDX.Direct3D9.Effect.Begin"/> and <see cref="M:SharpDX.Direct3D9.Effect.End"/> pair, an application uses <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/> to set the active pass, <see cref="M:SharpDX.Direct3D9.Effect.CommitChanges"/> if any state changes occurred after the pass was activated, and <see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> to end the active pass.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::Begin']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::Begin([Out] unsigned int* pPasses,[In] D3DXFX Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)">
            <summary>	
            Begins a pass, within the active technique.	
            </summary>	
            <param name="pass"><para>A zero-based integer index into the technique.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            An application sets one active pass (within one active technique) in the effect system by calling <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. An application signals the end of the active pass by calling <see cref="M:SharpDX.Direct3D9.Effect.EndPass"/>. <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/> and <see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> must occur in a matching pair, within a matching pair of <see cref="M:SharpDX.Direct3D9.Effect.Begin"/> and <see cref="M:SharpDX.Direct3D9.Effect.End"/> calls.If the application changes any effect state using any of the Effect::Setx methods inside of a <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>/<see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> matching pair, the application must call <see cref="M:SharpDX.Direct3D9.Effect.CommitChanges"/> to set the update the device with the state changes. If no state changes occur within a <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/> and <see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> matching pair, it is not necessary to call <see cref="M:SharpDX.Direct3D9.Effect.CommitChanges"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::BeginPass']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::BeginPass([In] unsigned int Pass)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.CommitChanges">
            <summary>	
            Propagate state changes that occur inside of an active pass to the device before rendering.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            If the application changes any effect state using any of the ID3DXEffect::Setx methods inside of an <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>/<see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> matching pair, the application must call <see cref="M:SharpDX.Direct3D9.Effect.CommitChanges"/> before any DrawxPrimitive call to propagate state changes to the device before rendering. If no state changes occur within a <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/> and <see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> matching pair, it is not necessary to call <see cref="M:SharpDX.Direct3D9.Effect.CommitChanges"/>.This is slightly different for any shared parameters in a cloned effect. When a technique is active on a cloned effect (that is, when <see cref="M:SharpDX.Direct3D9.Effect.Begin"/> has been called but and <see cref="M:SharpDX.Direct3D9.Effect.End"/> has not been called), <see cref="M:SharpDX.Direct3D9.Effect.CommitChanges"/> updates parameters that are not shared as expected. To update a shared parameter (only for a cloned effect whose technique is active), call <see cref="M:SharpDX.Direct3D9.Effect.End"/> to deactivate the technique and <see cref="M:SharpDX.Direct3D9.Effect.Begin"/> to reactivate the technique before calling <see cref="M:SharpDX.Direct3D9.Effect.CommitChanges"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::CommitChanges']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::CommitChanges()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.EndPass">
            <summary>	
            End an active pass.	
            </summary>	
            <returns>This method always returns the value <see cref="F:SharpDX.Result.Ok"/>.</returns>	
            <remarks>	
            An application signals the end of rendering an active pass by calling <see cref="M:SharpDX.Direct3D9.Effect.EndPass"/>. Each <see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> must be part of a matching pair of <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/> and <see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> calls.Each matching pair of <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/> and <see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> calls must be located within a matching pair of <see cref="M:SharpDX.Direct3D9.Effect.Begin"/> and <see cref="M:SharpDX.Direct3D9.Effect.End"/> calls.If the application changes any effect state using any of the Effect::Setx methods inside of a <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>/<see cref="M:SharpDX.Direct3D9.Effect.EndPass"/> matching pair, the application must call <see cref="M:SharpDX.Direct3D9.Effect.CommitChanges"/> before any DrawxPrimitive call to propagate state changes to the device before rendering.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::EndPass']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::EndPass()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.End">
            <summary>	
            Ends an active technique.	
            </summary>	
            <returns>This method always returns the value <see cref="F:SharpDX.Result.Ok"/>.</returns>	
            <remarks>	
            All rendering in an effect is done within a matching pair of <see cref="M:SharpDX.Direct3D9.Effect.Begin"/> and <see cref="M:SharpDX.Direct3D9.Effect.End"/> calls. After all passes are rendered, <see cref="M:SharpDX.Direct3D9.Effect.End"/> must be called to end the active technique. The effect system responds by using the state block created when <see cref="M:SharpDX.Direct3D9.Effect.Begin"/> was called, to automatically restore the pipeline state before <see cref="M:SharpDX.Direct3D9.Effect.Begin"/>.By default, the effect system takes care of saving state prior to a technique, and restoring state after a technique. If you choose to disable this save and restore functionality, see <see cref="F:SharpDX.Direct3D9.FX.DoNotSaveSamplerState"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::End']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::End()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the device associated with the effect.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the effect. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Calling this method will increase the internal reference count for the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Be sure to call IUnknown::Release when you are done using the <see cref="T:SharpDX.Direct3D9.Device"/> interface or you will have a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::GetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.OnLostDevice">
            <summary>	
            Use this method to release all references to video memory resources and delete all stateblocks. This method should be called whenever a device is lost, or before resetting a device.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method should be called whenever the device is lost or before the user calls <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>. Even if the device was not actually lost, <see cref="M:SharpDX.Direct3D9.Effect.OnLostDevice"/> is responsible for freeing stateblocks and other resources that may need to be released before resetting the device. As a result, the font object cannot be used again before calling <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> and then <see cref="M:SharpDX.Direct3D9.Effect.OnResetDevice"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::OnLostDevice']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::OnLostDevice()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.OnResetDevice">
            <summary>	
            Use this method to re-acquire resources and save initial state.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            ID3DXEffect::OnResetDevice should be called each time the device is reset (using <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>), before any other methods are called. This is a good place to re-acquire video-memory resources and capture state blocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::OnResetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::OnResetDevice()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.SetStateManager(SharpDX.Direct3D9.EffectStateManager)">
            <summary>	
            Set the effect state manager.	
            </summary>	
            <param name="managerRef"><para>A reference to the state manager. See <see cref="T:SharpDX.Direct3D9.EffectStateManager"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The <see cref="T:SharpDX.Direct3D9.EffectStateManager"/> is a user-implemented interface that furnishes callbacks into an application for setting device state from an effect.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::SetStateManager']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::SetStateManager([In] ID3DXEffectStateManager* pManager)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.GetStateManager(SharpDX.Direct3D9.EffectStateManager@)">
            <summary>	
            Get the effect state manager.	
            </summary>	
            <param name="managerOut"><para>Returns a reference to the state manager. See <see cref="T:SharpDX.Direct3D9.EffectStateManager"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The <see cref="T:SharpDX.Direct3D9.EffectStateManager"/> is a user-implemented interface that furnishes callbacks into an application for setting device state from an effect.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::GetStateManager']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::GetStateManager([Out] ID3DXEffectStateManager** ppManager)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.BeginParameterBlock">
            <summary>	
            Start capturing state changes in a parameter block.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            Capture effect parameter state changes until EndParameterBlock is called. Effect parameters include any state changes outside of a pass. Delete parameter blocks if they are no longer needed by calling DeleteParameterBlock.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::BeginParameterBlock']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::BeginParameterBlock()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.EndParameterBlock">
            <summary>	
            Stop capturing effect parameter state changes.	
            </summary>	
            <returns>Returns a handle to the parameter state block.</returns>	
            <remarks>	
            All effect parameters that change state (after calling BeginParameterBlock and before calling EndParameterBlock) will be saved in an effect parameter state block. Use ApplyParameterBlock to apply this block of state changes to the effect system. Once you are finished with a state block use DeleteParameterBlock to free the memory.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::EndParameterBlock']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXEffect::EndParameterBlock()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.ApplyParameterBlock(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Apply the values in a state block to the current effect system state.	
            </summary>	
            <param name="hParameterBlock"><para>A handle to the parameter block. This is the handle returned by <see cref="M:SharpDX.Direct3D9.Effect.EndParameterBlock"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            Capture effect parameter state changes in a parameter block by calling BeginParameterBlock; stop capturing state changes by calling EndParameterBlock. These state changes include any effect parameter changes that occur inside of a technique (including those outside of a pass). Once you are done with the parameter block, call DeleteParameterBlock to recover memory.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::ApplyParameterBlock']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::ApplyParameterBlock([In] D3DXHANDLE hParameterBlock)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.DeleteParameterBlock(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Delete a parameter block.	
            </summary>	
            <param name="hParameterBlock"><para>A handle to the parameter block. This is the handle returned by <see cref="M:SharpDX.Direct3D9.Effect.EndParameterBlock"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            Parameter blocks are blocks of effect states. Use a parameter block to record state changes so that they can be applied later on with a single API call. When no longer needed, delete the parameter block to reduce memory usage.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::DeleteParameterBlock']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::DeleteParameterBlock([In] D3DXHANDLE hParameterBlock)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.Clone(SharpDX.Direct3D9.Device)">
            <summary>	
            Creates a copy of an effect.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the effect. </para></param>	
            <returns><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Effect"/> interface, containing the cloned effect. </para></returns>	
            <remarks>	
            Note??This function will not clone an effect if the user specifies <see cref="F:SharpDX.Direct3D9.FX.NotCloneable"/> during effect creation.To update shared and non-shared parameters in an active technique of a cloned effect, see <see cref="M:SharpDX.Direct3D9.Effect.CommitChanges"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::CloneEffect']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::CloneEffect([In] IDirect3DDevice9* pDevice,[Out] ID3DXEffect** ppEffect)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Effect.SetRawValue(SharpDX.Direct3D9.EffectHandle,System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Set a contiguous range of shader constants with a memory copy.	
            </summary>	
            <param name="hParameter"><para>Handle to the value to set, or the name of the value passed in as a string. Passing in a handle is more efficient. See Handles (Direct3D 9). </para></param>	
            <param name="dataRef"><para>Pointer to a buffer containing the data to be set. SetRawValue checks for valid memory, but does not do any checking for valid data.</para></param>	
            <param name="byteOffset"><para>Number of bytes between the beginning of the effect data and the beginning of the effect constants you are going to set.</para></param>	
            <param name="bytes"><para>The size of the buffer to be set, in bytes.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following:E_INVALIDCALL.</returns>	
            <remarks>	
            SetRawValue is a very fast way to set effect constants since it performs a memory copy without performing validation or any data conversion (like converting a row-major matrix to a column-major matrix). Use SetRawValue to set a series of contiguous effect constants. For instance, you could set an array of twenty matrices with 20 calls to <see cref="M:SharpDX.Direct3D9.BaseEffect.SetMatrix(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@)"/> or by using a single SetRawValue.All values are expected to be either matrix4x4s or float4s and all matrices are expected to be in column-major order. Int or float values are cast into a float4; therefore, it is highly recommended that you use SetRawValue with only float4 or matrix4x4 data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::SetRawValue']/*"/>	
            <unmanaged>HRESULT ID3DXEffect::SetRawValue([In] D3DXHANDLE hParameter,[In] const void* pData,[In] unsigned int ByteOffset,[In] unsigned int Bytes)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Effect.Technique">
            <summary>
            Gets or sets the current technique.
            </summary>
            <value>
            The technique.
            </value>
            <unmanaged>D3DXHANDLE ID3DXEffect::GetCurrentTechnique()</unmanaged>	
            <unmanaged>HRESULT ID3DXEffect::SetTechnique([In] D3DXHANDLE hTechnique)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Effect.Pool">
            <summary>	
            Gets a reference to the pool of shared parameters.	
            </summary>	
            <remarks>	
            Pools contain shared parameters between effects. See Cloning and Sharing (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::GetPool']/*"/>	
            <unmanaged>GetPool</unmanaged>	
            <unmanaged>HRESULT ID3DXEffect::GetPool([Out] ID3DXEffectPool** ppPool)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Effect.Device">
            <summary>	
            Retrieves the device associated with the effect.	
            </summary>	
            <remarks>	
            Calling this method will increase the internal reference count for the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Be sure to call IUnknown::Release when you are done using the <see cref="T:SharpDX.Direct3D9.Device"/> interface or you will have a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT ID3DXEffect::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Effect.StateManager">
            <summary>	
            Get the effect state manager.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.Direct3D9.EffectStateManager"/> is a user-implemented interface that furnishes callbacks into an application for setting device state from an effect.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffect::GetStateManager']/*"/>	
            <unmanaged>GetStateManager</unmanaged>	
            <unmanaged>HRESULT ID3DXEffect::GetStateManager([Out] ID3DXEffectStateManager** ppManager)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.EffectCompiler">
            <summary>	
            Compiles a shader from an effect that contains one or more functions.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectCompiler']/*"/>	
            <unmanaged>ID3DXEffectCompiler</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.#ctor(System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.EffectCompiler"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="defines">The defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="flags">The flags.</param>
            <unmanaged>HRESULT D3DXCreateEffectCompiler([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.CompileEffect(SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compile an effect.
            </summary>
            <param name="flags">The flags.</param>
            <exception cref="T:SharpDX.CompilationException">If a compilation errors occurs</exception>
            <returns>Buffer containing the compiled effect.</returns>
            <unmanaged>HRESULT ID3DXEffectCompiler::CompileEffect([In] unsigned int Flags,[In] ID3DXBuffer** ppEffect,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.CompileShader(SharpDX.Direct3D9.EffectHandle,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles a shader from an effect that contains one or more functions.
            </summary>
            <param name="functionHandle">The function handle.</param>
            <param name="target">The target.</param>
            <param name="flags">The flags.</param>
            <exception cref="T:SharpDX.CompilationException">If a compilation errors occurs</exception>
            <returns>The bytecode of the effect.</returns>
            <unmanaged>HRESULT ID3DXEffectCompiler::CompileShader([In] D3DXHANDLE hFunction,[In] const char* pTarget,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.CompileShader(SharpDX.Direct3D9.EffectHandle,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.ConstantTable@)">
            <summary>
            Compiles a shader from an effect that contains one or more functions.
            </summary>
            <param name="functionHandle">The function handle.</param>
            <param name="target">The target.</param>
            <param name="flags">The flags.</param>
            <param name="constantTable">The constant table.</param>
            <exception cref="T:SharpDX.CompilationException">If a compilation errors occurs</exception>
            <returns>The bytecode of the effect.</returns>
            <unmanaged>HRESULT ID3DXEffectCompiler::CompileShader([In] D3DXHANDLE hFunction,[In] const char* pTarget,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.FromFile(System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Creates an effect compiler from a file on disk containing an ASCII effect description .
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="flags">The flags.</param>
            <returns>
            An instance of <see cref="T:SharpDX.Direct3D9.EffectCompiler"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectCompiler([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[Out, Fast] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.FromFile(System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Creates an effect compiler from a file on disk containing an ASCII effect description .
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="defines">The defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="flags">The flags.</param>
            <returns>
            An instance of <see cref="T:SharpDX.Direct3D9.EffectCompiler"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectCompiler([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[Out, Fast] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.FromMemory(System.Byte[],SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Creates an effect compiler from a memory buffer containing an ASCII effect description .
            </summary>
            <param name="data">The data.</param>
            <param name="flags">The flags.</param>
            <returns>
            An instance of <see cref="T:SharpDX.Direct3D9.EffectCompiler"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectCompiler([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[Out, Fast] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.FromMemory(System.Byte[],SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Creates an effect compiler from a memory buffer containing an ASCII effect description .
            </summary>
            <param name="data">The data.</param>
            <param name="defines">The defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="flags">The flags.</param>
            <returns>
            An instance of <see cref="T:SharpDX.Direct3D9.EffectCompiler"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectCompiler([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[Out, Fast] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.FromStream(System.IO.Stream,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Creates an effect compiler from a stream containing an ASCII effect description .
            </summary>
            <param name="stream">The stream.</param>
            <param name="flags">The flags.</param>
            <returns>
            An instance of <see cref="T:SharpDX.Direct3D9.EffectCompiler"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateEffectCompiler([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[Out, Fast] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.FromStream(System.IO.Stream,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Creates an effect compiler from a stream containing an ASCII effect description .
            </summary>
            <param name="stream">The stream.</param>
            <param name="defines">The defines.</param>
            <param name="includeFile">The include file.</param>
            <param name="flags">The flags.</param>
            <returns>An instance of <see cref="T:SharpDX.Direct3D9.EffectCompiler"/></returns>
            <unmanaged>HRESULT D3DXCreateEffectCompiler([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[Out, Fast] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.EffectCompiler"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.SetLiteral(SharpDX.Direct3D9.EffectHandle,System.Boolean)">
            <summary>	
            Toggles the literal status of a parameter. A literal parameter has a value that doesn't change during the lifetime of an effect.	
            </summary>	
            <param name="hParameter"><para>Unique identifier to a parameter. See Handles (Direct3D 9).</para></param>	
            <param name="literal"><para>Set to TRUE to make the parameter a literal, and <see cref="F:SharpDX.Result.False"/> if the parameter can change value during the shader lifetime.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This methods only changes whether the parameter is a literal or not. To change the value of a parameter, use a method like <see cref="M:SharpDX.Direct3D9.BaseEffect.SetBool(SharpDX.Direct3D9.EffectHandle,System.Boolean)"/> or <see cref="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,System.Boolean)"/>.This function must be called before the effect is compiled.  Here is an example of how one might use this function:<code>	
             LPD3DXEFFECTCOMPILER pEffectCompiler; char errors[1000]; <see cref="T:SharpDX.Result"/> hr; hr = <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromFileW(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)"/>("shader.fx", <c>null</c>, <c>null</c>, 0, &amp;pEffectCompiler,  &amp;errors); //In the fx file, literalInt is declared as an int. //By calling this function, the compiler will treat //it as a literal (i.e. #define) hr = pEffectCompiler-&gt;SetLiteral("literalInt", TRUE); //create ten different variations of the same effect LPD3DXBUFFER pEffects[10]; LPD3DXBUFFER pErrors; for(int i = 0; i &lt; 10; ++i) { hr = pEffectCompiler-&gt;SetInt("literalInt", i); hr = pEffectCompiler-&gt;CompileEffect(0, &amp;pEffects[i], &amp;pErrors); }	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectCompiler::SetLiteral']/*"/>	
            <unmanaged>HRESULT ID3DXEffectCompiler::SetLiteral([In] D3DXHANDLE hParameter,[In] BOOL Literal)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.GetLiteral(SharpDX.Direct3D9.EffectHandle)">
            <summary>	
            Gets a literal status of a parameter. A literal parameter has a value that doesn't change during the lifetime of an effect.	
            </summary>	
            <param name="hParameter"><para>Unique identifier to a parameter. See Handles (Direct3D 9).</para></param>	
            <returns><para>Returns True if the parameter is a literal, and False otherwise.</para></returns>	
            <remarks>	
            This methods only changes whether the parameter is a literal or not. To change the value of a parameter, use a method like <see cref="M:SharpDX.Direct3D9.BaseEffect.SetBool(SharpDX.Direct3D9.EffectHandle,System.Boolean)"/> or <see cref="M:SharpDX.Direct3D9.BaseEffect.SetValue(SharpDX.Direct3D9.EffectHandle,System.Boolean)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectCompiler::GetLiteral']/*"/>	
            <unmanaged>HRESULT ID3DXEffectCompiler::GetLiteral([In] D3DXHANDLE hParameter,[Out] BOOL* pLiteral)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.CompileEffect(System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Compile an effect.	
            </summary>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="effectOut"><para>Buffer containing the compiled effect. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <param name="errorMsgsOut"><para>Buffer containing at least the first compile error message that occurred. This includes effect compiler errors and high-level language compile errors. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>.If the arguments are invalid, the method will return <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.If the method fails, the return value will be E_FAIL.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectCompiler::CompileEffect']/*"/>	
            <unmanaged>HRESULT ID3DXEffectCompiler::CompileEffect([In] unsigned int Flags,[In] ID3DXBuffer** ppEffect,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectCompiler.CompileShader(SharpDX.Direct3D9.EffectHandle,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)">
            <summary>	
            Compiles a shader from an effect that contains one or more functions.	
            </summary>	
            <param name="hFunction"><para>Unique identifier to the function to be compiled. This value must not be <c>null</c>. See Handles (Direct3D 9).</para></param>	
            <param name="targetRef"><para>Pointer to a shader profile which determines the shader instruction set. See <see cref="M:SharpDX.Direct3D9.D3DX9.GetVertexShaderProfile(SharpDX.Direct3D9.Device)"/> or <see cref="M:SharpDX.Direct3D9.D3DX9.GetPixelShaderProfile(SharpDX.Direct3D9.Device)"/> for a list of the profiles available.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Buffer containing the compiled shader. The compiler shader is an array of DWORDs. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <param name="errorMsgsOut"><para>Buffer containing at least the first compile error message that occurred. This includes effect compiler errors and high-level language compile errors. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <param name="constantTableOut"><para>Returns an <see cref="T:SharpDX.Direct3D9.ConstantTable"/> interface, which can be used to access shader constants. This value can be <c>null</c>. If you compile your application as large address aware (that is, you use the /LARGEADDRESSAWARE linker option to handle addresses larger than 2 GB), you cannot use this parameter and must set it to <c>null</c>. Instead, you must use the <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> function to retrieve the shader-constant table that is embedded inside the shader. In this <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> call, you must pass the D3DXCONSTTABLE_LARGEADDRESSAWARE flag to the Flags parameter to specify to access up to 4 GB of virtual address space.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>.If the arguments are invalid, the method will return <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.If the method fails, the return value will be E_FAIL.</returns>	
            <remarks>	
            Targets can be specified for vertex shaders, pixel shaders, and texture fill functions.Vertex shader targetsvs_1_1, vs_2_0, vs_2_sw, vs_3_0 Pixel shader targetsps_1_1, ps_1_2, ps_1_3, ps_1_4, ps_2_0, ps_2_sw, ps_3_0 Texture fill targetstx_0, tx_1?This method compiles a shader from a function that is written in a C-like language. For more information, see HLSL.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectCompiler::CompileShader']/*"/>	
            <unmanaged>HRESULT ID3DXEffectCompiler::CompileShader([In] D3DXHANDLE hFunction,[In] const char* pTarget,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.EffectDefault">
            <summary>	
            Effect default parameters.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTDEFAULT']/*"/>	
            <unmanaged>D3DXEFFECTDEFAULT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDefault.ParameterName">
            <summary>	
            <para>Parameter name.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTDEFAULT::pParamName']/*"/>	
            <unmanaged>char* pParamName</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDefault.Type">
            <summary>	
            <para>Data type in pValue. For more information, see <see cref="T:SharpDX.Direct3D9.EffectDefaultType"/> </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTDEFAULT::Type']/*"/>	
            <unmanaged>D3DXEFFECTDEFAULTTYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDefault.BufferSize">
            <summary>	
            <para>Size, in bytes, of the data pointed to by pValue.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTDEFAULT::NumBytes']/*"/>	
            <unmanaged>unsigned int NumBytes</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDefault.BufferPointer">
            <summary>	
            <para>Pointer to the memory location that contains the data.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTDEFAULT::pValue']/*"/>	
            <unmanaged>void* pValue</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.EffectDefault.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.EffectInstance">
            <summary>	
            Data type for managing a set of default effect parameters.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTINSTANCE']/*"/>	
            <unmanaged>D3DXEFFECTINSTANCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectInstance.EffectFilename">
            <summary>	
            <para>Name of the effect file.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTINSTANCE::pEffectFilename']/*"/>	
            <unmanaged>char* pEffectFilename</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectInstance.DefaultCount">
            <summary>	
            <para>Number of default parameters.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTINSTANCE::NumDefaults']/*"/>	
            <unmanaged>unsigned int NumDefaults</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectInstance.DefaultPointer">
            <summary>	
            <para>Pointer to an array of <see cref="T:SharpDX.Direct3D9.EffectDefault"/> elements, each of which contains an  effect parameter.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTINSTANCE::pDefaults']/*"/>	
            <unmanaged>D3DXEFFECTDEFAULT* pDefaults</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.EffectPool">
            <summary>	
            Applications use the <see cref="T:SharpDX.Direct3D9.EffectPool"/> interface to identify parameters that are going to be shared across effects. See parameter sharing in Cloning and Sharing (Direct3D 9). This interface has no methods.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectPool']/*"/>	
            <unmanaged>ID3DXEffectPool</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectPool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.EffectPool"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectPool.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.EffectPool"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="T:SharpDX.Direct3D9.Fill2DCallback">
            <summary>
            A callback function used to fill 2D texture.
            </summary>
            <param name="coordinate">Texture coordinate being sampled.</param>
            <param name="texelSize">Dimensions of the texel.</param>
            <returns>The desired color of the specified texel.</returns>
            <unmanaged>typedef VOID (WINAPI *LPD3DXFILL2D)(D3DXVECTOR4 *pOut, CONST D3DXVECTOR2 *pTexCoord, CONST D3DXVECTOR2 *pTexelSize, LPVOID pData);</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Fill3DCallback">
            <summary>
            A callback function used to fill 3D texture.
            </summary>
            <param name="coordinate">Texture coordinate being sampled.</param>
            <param name="texelSize">Dimensions of the texel.</param>
            <returns>The desired color of the specified texel.</returns>
            <unmanaged>typedef VOID (WINAPI *LPD3DXFILL2D)(D3DXVECTOR4 *pOut, CONST D3DXVECTOR2 *pTexCoord, CONST D3DXVECTOR2 *pTexelSize, LPVOID pData);</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.FillCallbackHelper">
            <summary>
            Fill callback helper class.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.FillCallbackHelper.Native2DCallbackPtr">
            <summary>
            Pointer to the native callback for 2D function
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.FillCallbackHelper.Native3DCallbackPtr">
            <summary>
            Pointer to the native callback for 3D function
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.EffectHandle">
            <summary>
            EffectHandle used to identify a shader parameter.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.EffectHandle.UseCacheStrings">
            <summary>
            Defines the behaviour for caching strings. True by default.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.EffectHandle.AllocatedStrings">
            <summary>
            Cache of allocated strings.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.EffectHandle.pointer">
            <summary>
            Pointer to the handle or the allocated string.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.EffectHandle.isStringToRelease">
            <summary>
            If the <see cref="F:SharpDX.Direct3D9.EffectHandle.pointer"/> is a custom string not cached that needs to be released by this instance.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.EffectHandle"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.EffectHandle"/> class.
            </summary>
            <param name="pointer">
            The pointer.
            </param>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.#ctor(System.Void*)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.EffectHandle"/> class.
            </summary>
            <param name="pointer">
            The pointer.
            </param>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.EffectHandle"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.ClearCache">
            <summary>
            Clears the cache.
            </summary>
            <remarks>
            By default, this class is caching all strings that are implicitly used as an effect handle.
            Use this method in order to deallocate all strings that were previously cached.
            </remarks>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.__MarshalFree(SharpDX.Direct3D9.EffectHandle@,SharpDX.Direct3D9.EffectHandle.__Native@)">
            <summary>
            marshal free.
            </summary>
            <param name="__from">The __from.</param>
            <param name="ref">The @ref.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.__MarshalFrom(SharpDX.Direct3D9.EffectHandle@,SharpDX.Direct3D9.EffectHandle.__Native@)">
            <summary>
            Method to marshal from native to managed struct
            </summary>
            <param name="__from">The __from.</param>
            <param name="ref">The @ref.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.__MarshalTo(SharpDX.Direct3D9.EffectHandle@,SharpDX.Direct3D9.EffectHandle.__Native@)">
            <summary>
            Method to marshal from managed struct tot native
            </summary>
            <param name="__from">The __from.</param>
            <param name="ref">The @ref.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.AllocateString(System.String)">
            <summary>
            Allocates a string.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            Pointer to the allocated string
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.op_Implicit(SharpDX.Direct3D9.EffectHandle)~System.IntPtr">
            <summary>
            Performs an implicit conversion from <see cref="T:SharpDX.Direct3D9.EffectHandle"/> to <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.op_Implicit(System.IntPtr)~SharpDX.Direct3D9.EffectHandle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.op_Implicit(SharpDX.Direct3D9.EffectHandle)~System.Void*">
            <summary>
            Performs an implicit conversion from <see cref="T:SharpDX.Direct3D9.EffectHandle"/> to <see cref="!:System.Void*"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.op_Implicit(System.Void*)~SharpDX.Direct3D9.EffectHandle">
            <summary>
            Performs an implicit conversion from <see cref="!:System.Void*"/> to <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.EffectHandle.op_Implicit(System.String)~SharpDX.Direct3D9.EffectHandle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.
            </summary>
            <param name="name">The name.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:SharpDX.Direct3D9.BackBufferType">
            <summary>	
            Defines constants that describe the type of back buffer.	
            </summary>	
            <remarks>	
            Direct3D 9 does not support stereo view, so Direct3D does not use the <see cref="F:SharpDX.Direct3D9.BackBufferType.Left"/> and <see cref="F:SharpDX.Direct3D9.BackBufferType.Right"/> values of this enumerated type.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBACKBUFFER_TYPE']/*"/>	
            <unmanaged>D3DBACKBUFFER_TYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BackBufferType.Mono">
            <summary>	
            <para>Specifies a nonstereo swap chain. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBACKBUFFER_TYPE_MONO']/*"/>	
            <unmanaged>D3DBACKBUFFER_TYPE_MONO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BackBufferType.Left">
            <summary>	
            <para>Specifies the left side of a stereo pair in a swap chain. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBACKBUFFER_TYPE_LEFT']/*"/>	
            <unmanaged>D3DBACKBUFFER_TYPE_LEFT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BackBufferType.Right">
            <summary>	
            <para>Specifies the right side of a stereo pair in a swap chain. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBACKBUFFER_TYPE_RIGHT']/*"/>	
            <unmanaged>D3DBACKBUFFER_TYPE_RIGHT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Basis">
            <summary>	
            Defines the basis type of a high-order patch surface.	
            </summary>	
            <remarks>	
            The members of <see cref="T:SharpDX.Direct3D9.Basis"/> specify the formulation to be used in evaluating the high-order patch surface primitive during tessellation.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBASISTYPE']/*"/>	
            <unmanaged>D3DBASISTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Basis.Bezier">
            <summary>	
            <para>Input vertices are treated as a series of B?zier patches. The number of vertices specified must be divisible by 4. Portions of the mesh beyond this criterion will not be rendered. Full continuity is assumed between sub-patches in the interior of the surface rendered by each call. Only the vertices at the corners of each sub-patch are guaranteed to lie on the resulting surface. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBASIS_BEZIER']/*"/>	
            <unmanaged>D3DBASIS_BEZIER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Basis.BSpline">
            <summary>	
            <para>Input vertices are treated as control points of a B-spline surface. The number of apertures rendered is two fewer than the number of apertures in that direction. In general, the generated surface does not contain the control vertices specified. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBASIS_BSPLINE']/*"/>	
            <unmanaged>D3DBASIS_BSPLINE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Basis.CatmullRom">
            <summary>	
            <para>An interpolating basis defines the surface so that the surface goes through all the input vertices specified. In DirectX 8, this was D3DBASIS_INTERPOLATE.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBASIS_CATMULL_ROM']/*"/>	
            <unmanaged>D3DBASIS_CATMULL_ROM</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Blend">
            <summary>	
            Defines the supported blend mode.	
            </summary>	
            <remarks>	
            In the preceding member descriptions, the RGBA values of the source and destination are indicated by the s and d subscripts.The values in this enumerated type are used by the following render states:<see cref="F:SharpDX.Direct3D9.RenderState.DestinationBlend"/> <see cref="F:SharpDX.Direct3D9.RenderState.SourceBlend"/> <see cref="F:SharpDX.Direct3D9.RenderState.DestinationBlendAlpha"/> <see cref="F:SharpDX.Direct3D9.RenderState.SourceBlendAlpha"/>See <see cref="T:SharpDX.Direct3D9.RenderState"/>Render Target BlendingDirect3D 9Ex has improved text rendering capabilities. Rendering clear-type fonts would normally require two passes. To eliminate the second pass, a pixel shader can be used to output two colors, which we can call PSOutColor[0] and PSOutColor[1]. The first color would contain the standard 3 color components (RGB). The second color would contain 3 alpha components (one for each component of the first color).These new blending modes are only used for text rendering on the first render target.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND']/*"/>	
            <unmanaged>D3DBLEND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.Zero">
            <summary>	
            <para>Blend factor is (0, 0, 0, 0). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_ZERO']/*"/>	
            <unmanaged>D3DBLEND_ZERO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.One">
            <summary>	
            <para>Blend factor is (1, 1, 1, 1). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_ONE']/*"/>	
            <unmanaged>D3DBLEND_ONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.SourceColor">
            <summary>	
            <para>Blend factor is (Rs, Gs, Bs, As). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_SRCCOLOR']/*"/>	
            <unmanaged>D3DBLEND_SRCCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.InverseSourceColor">
            <summary>	
            <para>Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_INVSRCCOLOR']/*"/>	
            <unmanaged>D3DBLEND_INVSRCCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.SourceAlpha">
            <summary>	
            <para>Blend factor is (As, As, As, As). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_SRCALPHA']/*"/>	
            <unmanaged>D3DBLEND_SRCALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.InverseSourceAlpha">
            <summary>	
            <para>Blend factor is ( 1 - As, 1 - As, 1 - As, 1 - As). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_INVSRCALPHA']/*"/>	
            <unmanaged>D3DBLEND_INVSRCALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.DestinationAlpha">
            <summary>	
            <para>Blend factor is (Ad Ad Ad Ad). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_DESTALPHA']/*"/>	
            <unmanaged>D3DBLEND_DESTALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.InverseDestinationAlpha">
            <summary>	
            <para>Blend factor is (1 - Ad 1 - Ad 1 - Ad 1 - Ad). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_INVDESTALPHA']/*"/>	
            <unmanaged>D3DBLEND_INVDESTALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.DestinationColor">
            <summary>	
            <para>Blend factor is (Rd, Gd, Bd, Ad). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_DESTCOLOR']/*"/>	
            <unmanaged>D3DBLEND_DESTCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.InverseDestinationColor">
            <summary>	
            <para>Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_INVDESTCOLOR']/*"/>	
            <unmanaged>D3DBLEND_INVDESTCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.SourceAlphaSaturated">
            <summary>	
            <para>Blend factor is (f, f, f, 1); where f = min(As, 1 - Ad). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_SRCALPHASAT']/*"/>	
            <unmanaged>D3DBLEND_SRCALPHASAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.Bothsrcalpha">
            <summary>	
            <para>Obsolete. Starting with DirectX 6, you can achieve the same effect by setting the source and destination blend factors to <see cref="F:SharpDX.Direct3D9.Blend.SourceAlpha"/> and <see cref="F:SharpDX.Direct3D9.Blend.InverseSourceAlpha"/> in separate calls. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_BOTHSRCALPHA']/*"/>	
            <unmanaged>D3DBLEND_BOTHSRCALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.BothInverseSourceAlpha">
            <summary>	
            <para>Source blend factor is (1 - As, 1 - As, 1 - As, 1 - As), and destination blend factor is (As, As, As, As); the destination blend selection is overridden. This blend mode is supported only for the <see cref="F:SharpDX.Direct3D9.RenderState.SourceBlend"/> render state. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_BOTHINVSRCALPHA']/*"/>	
            <unmanaged>D3DBLEND_BOTHINVSRCALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.BlendFactor">
            <summary>	
            <para>Constant color blending factor used by the frame-buffer blender. This blend mode is supported only if <see cref="F:SharpDX.Direct3D9.BlendCaps.BlendFactor"/> is set in the SrcBlendCaps or DestBlendCaps members of <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_BLENDFACTOR']/*"/>	
            <unmanaged>D3DBLEND_BLENDFACTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.InverseBlendFactor">
            <summary>	
            <para>Inverted constant color-blending factor used by the frame-buffer blender. This blend mode is supported only if the <see cref="F:SharpDX.Direct3D9.BlendCaps.BlendFactor"/> bit is set in the SrcBlendCaps or DestBlendCaps members of <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_INVBLENDFACTOR']/*"/>	
            <unmanaged>D3DBLEND_INVBLENDFACTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.SourceColor2">
            <summary>	
            <para>Blend factor is (PSOutColor[1]r, PSOutColor[1]g, PSOutColor[1]b, not used). See Render. </para>	
               <para>Differences between Direct3D 9 and Direct3D 9Ex:</para>	
             <para>This flag is available in Direct3D 9Ex only.</para>	
               <para>?</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_SRCCOLOR2']/*"/>	
            <unmanaged>D3DBLEND_SRCCOLOR2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Blend.InverseSourceColor2">
            <summary>	
            <para>Blend factor is (1 - PSOutColor[1]r, 1 - PSOutColor[1]g, 1 - PSOutColor[1]b, not used)). See Render. </para>	
               <para>Differences between Direct3D 9 and Direct3D 9Ex:</para>	
             <para>This flag is available in Direct3D 9Ex only.</para>	
               <para>?</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLEND_INVSRCCOLOR2']/*"/>	
            <unmanaged>D3DBLEND_INVSRCCOLOR2</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.BlendCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS']/*"/>	
            <unmanaged>D3DPBLENDCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.Zero">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_ZERO']/*"/>	
            <unmanaged>D3DPBLENDCAPS_ZERO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.One">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_ONE']/*"/>	
            <unmanaged>D3DPBLENDCAPS_ONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.SourceColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_SRCCOLOR']/*"/>	
            <unmanaged>D3DPBLENDCAPS_SRCCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.InverseSourceColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_INVSRCCOLOR']/*"/>	
            <unmanaged>D3DPBLENDCAPS_INVSRCCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.SourceAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_SRCALPHA']/*"/>	
            <unmanaged>D3DPBLENDCAPS_SRCALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.InverseSourceAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_INVSRCALPHA']/*"/>	
            <unmanaged>D3DPBLENDCAPS_INVSRCALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.DestinationAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_DESTALPHA']/*"/>	
            <unmanaged>D3DPBLENDCAPS_DESTALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.InverseDestinationAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_INVDESTALPHA']/*"/>	
            <unmanaged>D3DPBLENDCAPS_INVDESTALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.DestinationColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_DESTCOLOR']/*"/>	
            <unmanaged>D3DPBLENDCAPS_DESTCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.InverseDestinationColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_INVDESTCOLOR']/*"/>	
            <unmanaged>D3DPBLENDCAPS_INVDESTCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.SourceAlphaSaturated">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_SRCALPHASAT']/*"/>	
            <unmanaged>D3DPBLENDCAPS_SRCALPHASAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.Bothsrcalpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_BOTHSRCALPHA']/*"/>	
            <unmanaged>D3DPBLENDCAPS_BOTHSRCALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.BothInverseSourceAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_BOTHINVSRCALPHA']/*"/>	
            <unmanaged>D3DPBLENDCAPS_BOTHINVSRCALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.BlendFactor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_BLENDFACTOR']/*"/>	
            <unmanaged>D3DPBLENDCAPS_BLENDFACTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.Srccolor2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_SRCCOLOR2']/*"/>	
            <unmanaged>D3DPBLENDCAPS_SRCCOLOR2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendCaps.Invsrccolor2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPBLENDCAPS_INVSRCCOLOR2']/*"/>	
            <unmanaged>D3DPBLENDCAPS_INVSRCCOLOR2</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.BlendOperation">
            <summary>	
            Defines the supported blend operations. See Remarks for definitions of terms.	
            </summary>	
            <remarks>	
            Source, Destination, and Result are defined as:TermTypeDescription SourceInputColor of the source pixel before the operation. DestinationInputColor of the pixel in the destination buffer before the operation. ResultOutputReturned value that is the blended color resulting from the operation.?This enumerated type defines values used by the following render states:<see cref="F:SharpDX.Direct3D9.RenderState.BlendOperation"/> <see cref="F:SharpDX.Direct3D9.RenderState.BlendOperationAlpha"/>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLENDOP']/*"/>	
            <unmanaged>D3DBLENDOP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendOperation.Add">
            <summary>	
            <para>The result is the destination added to the source.  Result = Source + Destination</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLENDOP_ADD']/*"/>	
            <unmanaged>D3DBLENDOP_ADD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendOperation.Subtract">
            <summary>	
            <para>The result is the destination subtracted from to the source.  Result = Source - Destination</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLENDOP_SUBTRACT']/*"/>	
            <unmanaged>D3DBLENDOP_SUBTRACT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendOperation.ReverseSubtract">
            <summary>	
            <para>The result is the source subtracted from the destination.  Result = Destination - Source</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLENDOP_REVSUBTRACT']/*"/>	
            <unmanaged>D3DBLENDOP_REVSUBTRACT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendOperation.Minimum">
            <summary>	
            <para>The result is the minimum of the source and destination.  Result = MIN(Source, Destination)</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLENDOP_MIN']/*"/>	
            <unmanaged>D3DBLENDOP_MIN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BlendOperation.Maximum">
            <summary>	
            <para>The result is the maximum of the source and destination.  Result = MAX(Source, Destination)</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBLENDOP_MAX']/*"/>	
            <unmanaged>D3DBLENDOP_MAX</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CallbackSearchFlags">
            <summary>	
            Flags used to obtain callback information.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCALLBACK_SEARCH_FLAGS']/*"/>	
            <unmanaged>D3DXCALLBACK_SEARCH_FLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CallbackSearchFlags.SearchExcludingInitialPosition">
            <summary>	
            <para>Exclude callbacks located at the initial position from the search.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCALLBACK_SEARCH_EXCLUDING_INITIAL_POSITION']/*"/>	
            <unmanaged>D3DXCALLBACK_SEARCH_EXCLUDING_INITIAL_POSITION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CallbackSearchFlags.SearchBehindInitialPosition">
            <summary>	
            <para>Reverse the callback search direction.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCALLBACK_SEARCH_BEHIND_INITIAL_POSITION']/*"/>	
            <unmanaged>D3DXCALLBACK_SEARCH_BEHIND_INITIAL_POSITION</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Caps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS']/*"/>	
            <unmanaged>D3DCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps.Overlay">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS_OVERLAY']/*"/>	
            <unmanaged>D3DCAPS_OVERLAY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps.ReadScanline">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS_READ_SCANLINE']/*"/>	
            <unmanaged>D3DCAPS_READ_SCANLINE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Caps2">
            <summary>	
            Driver capability flags.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS2']/*"/>	
            <unmanaged>D3DCAPS2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps2.FullScreenGamma">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS2_FULLSCREENGAMMA']/*"/>	
            <unmanaged>D3DCAPS2_FULLSCREENGAMMA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps2.CanCalibrateGamma">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS2_CANCALIBRATEGAMMA']/*"/>	
            <unmanaged>D3DCAPS2_CANCALIBRATEGAMMA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps2.CanManageResource">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS2_CANMANAGERESOURCE']/*"/>	
            <unmanaged>D3DCAPS2_CANMANAGERESOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps2.DynamicTextures">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS2_DYNAMICTEXTURES']/*"/>	
            <unmanaged>D3DCAPS2_DYNAMICTEXTURES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps2.CanAutoGenerateMipMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS2_CANAUTOGENMIPMAP']/*"/>	
            <unmanaged>D3DCAPS2_CANAUTOGENMIPMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps2.CanShareResource">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS2_CANSHARERESOURCE']/*"/>	
            <unmanaged>D3DCAPS2_CANSHARERESOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps2.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Caps3">
            <summary>	
            Driver capability flags.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS3']/*"/>	
            <unmanaged>D3DCAPS3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps3.AlphaFullScreenFlipOrDiscard">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD']/*"/>	
            <unmanaged>D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps3.LinearToSrgbPresentation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION']/*"/>	
            <unmanaged>D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps3.CopyToVideoMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS3_COPY_TO_VIDMEM']/*"/>	
            <unmanaged>D3DCAPS3_COPY_TO_VIDMEM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps3.CopyToSystemMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS3_COPY_TO_SYSTEMMEM']/*"/>	
            <unmanaged>D3DCAPS3_COPY_TO_SYSTEMMEM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps3.DXVAHd">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCAPS3_DXVAHD']/*"/>	
            <unmanaged>D3DCAPS3_DXVAHD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Caps3.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Channel">
            <summary>	
            The following flags are used to specify which channels in a texture to operate on.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_CHANNEL']/*"/>	
            <unmanaged>D3DX_CHANNEL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Channel.Red">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_CHANNEL_RED']/*"/>	
            <unmanaged>D3DX_CHANNEL_RED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Channel.Blue">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_CHANNEL_BLUE']/*"/>	
            <unmanaged>D3DX_CHANNEL_BLUE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Channel.Green">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_CHANNEL_GREEN']/*"/>	
            <unmanaged>D3DX_CHANNEL_GREEN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Channel.Alpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_CHANNEL_ALPHA']/*"/>	
            <unmanaged>D3DX_CHANNEL_ALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Channel.Luminance">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_CHANNEL_LUMINANCE']/*"/>	
            <unmanaged>D3DX_CHANNEL_LUMINANCE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CleanType">
            <summary>	
            Defines operations to perform on vertices in preparation for mesh cleaning.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCLEANTYPE']/*"/>	
            <unmanaged>D3DXCLEANTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CleanType.BackFacing">
            <summary>	
            <para>Merge triangles that share the same vertex indices but have face normals pointing in opposite directions (back-facing triangles). Unless the triangles are not split by adding a replicated vertex, mesh adjacency data from the two triangles may conflict.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCLEAN_BACKFACING']/*"/>	
            <unmanaged>D3DXCLEAN_BACKFACING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CleanType.Bowties">
            <summary>	
            <para>If a vertex is the apex of two triangle fans (a bowtie) and mesh operations will affect one of the fans, then split the shared vertex into two new vertices. Bowties can cause problems for operations such as mesh simplification that remove vertices, because removing one vertex affects two distinct sets of triangles.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCLEAN_BOWTIES']/*"/>	
            <unmanaged>D3DXCLEAN_BOWTIES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CleanType.Skinning">
            <summary>	
            <para>Use this flag to prevent infinite loops during skinning setup mesh operations.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCLEAN_SKINNING']/*"/>	
            <unmanaged>D3DXCLEAN_SKINNING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CleanType.Optimization">
            <summary>	
            <para>Use this flag to prevent infinite loops during mesh optimization operations.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCLEAN_OPTIMIZATION']/*"/>	
            <unmanaged>D3DXCLEAN_OPTIMIZATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CleanType.Simplification">
            <summary>	
            <para>Use this flag to prevent infinite loops during mesh simplification operations.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCLEAN_SIMPLIFICATION']/*"/>	
            <unmanaged>D3DXCLEAN_SIMPLIFICATION</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ClearFlags">
            <summary>	
            These flags identify a surface to reset when calling Clear.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCLEAR']/*"/>	
            <unmanaged>D3DCLEAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClearFlags.Target">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCLEAR_TARGET']/*"/>	
            <unmanaged>D3DCLEAR_TARGET</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClearFlags.ZBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCLEAR_ZBUFFER']/*"/>	
            <unmanaged>D3DCLEAR_ZBUFFER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClearFlags.Stencil">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCLEAR_STENCIL']/*"/>	
            <unmanaged>D3DCLEAR_STENCIL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClearFlags.All">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCLEAR_ALL']/*"/>	
            <unmanaged>D3DCLEAR_ALL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClearFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ClipFlags">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS']/*"/>	
            <unmanaged>D3DCS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Left">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_LEFT']/*"/>	
            <unmanaged>D3DCS_LEFT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Right">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_RIGHT']/*"/>	
            <unmanaged>D3DCS_RIGHT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Top">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_TOP']/*"/>	
            <unmanaged>D3DCS_TOP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Bottom">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_BOTTOM']/*"/>	
            <unmanaged>D3DCS_BOTTOM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Front">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_FRONT']/*"/>	
            <unmanaged>D3DCS_FRONT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Back">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_BACK']/*"/>	
            <unmanaged>D3DCS_BACK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Plane0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_PLANE0']/*"/>	
            <unmanaged>D3DCS_PLANE0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Plane1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_PLANE1']/*"/>	
            <unmanaged>D3DCS_PLANE1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Plane2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_PLANE2']/*"/>	
            <unmanaged>D3DCS_PLANE2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Plane3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_PLANE3']/*"/>	
            <unmanaged>D3DCS_PLANE3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Plane4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_PLANE4']/*"/>	
            <unmanaged>D3DCS_PLANE4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.Plane5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_PLANE5']/*"/>	
            <unmanaged>D3DCS_PLANE5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ClipFlags.All">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCS_ALL']/*"/>	
            <unmanaged>D3DCS_ALL</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ColorSource">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMATERIALCOLORSOURCE']/*"/>	
            <unmanaged>D3DMATERIALCOLORSOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ColorSource.Material">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMCS_MATERIAL']/*"/>	
            <unmanaged>D3DMCS_MATERIAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ColorSource.Color1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMCS_COLOR1']/*"/>	
            <unmanaged>D3DMCS_COLOR1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ColorSource.Color2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMCS_COLOR2']/*"/>	
            <unmanaged>D3DMCS_COLOR2</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ColorWriteEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOLORWRITEENABLE']/*"/>	
            <unmanaged>D3DCOLORWRITEENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ColorWriteEnable.Red">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOLORWRITEENABLE_RED']/*"/>	
            <unmanaged>D3DCOLORWRITEENABLE_RED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ColorWriteEnable.Green">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOLORWRITEENABLE_GREEN']/*"/>	
            <unmanaged>D3DCOLORWRITEENABLE_GREEN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ColorWriteEnable.Blue">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOLORWRITEENABLE_BLUE']/*"/>	
            <unmanaged>D3DCOLORWRITEENABLE_BLUE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ColorWriteEnable.Alpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOLORWRITEENABLE_ALPHA']/*"/>	
            <unmanaged>D3DCOLORWRITEENABLE_ALPHA</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Compare">
            <summary>	
            Defines the supported compare functions.	
            </summary>	
            <remarks>	
            The values in this enumerated type define the supported compare functions for the <see cref="F:SharpDX.Direct3D9.RenderState.ZFunc"/>, <see cref="F:SharpDX.Direct3D9.RenderState.AlphaFunc"/>, and <see cref="F:SharpDX.Direct3D9.RenderState.StencilFunc"/> render states.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCMPFUNC']/*"/>	
            <unmanaged>D3DCMPFUNC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Compare.Never">
            <summary>	
            <para>Always fail the test. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCMP_NEVER']/*"/>	
            <unmanaged>D3DCMP_NEVER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Compare.Less">
            <summary>	
            <para>Accept the new pixel if its value is less than the value of the current pixel. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCMP_LESS']/*"/>	
            <unmanaged>D3DCMP_LESS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Compare.Equal">
            <summary>	
            <para>Accept the new pixel if its value equals the value of the current pixel. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCMP_EQUAL']/*"/>	
            <unmanaged>D3DCMP_EQUAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Compare.LessEqual">
            <summary>	
            <para>Accept the new pixel if its value is less than or equal to the value of the current pixel. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCMP_LESSEQUAL']/*"/>	
            <unmanaged>D3DCMP_LESSEQUAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Compare.Greater">
            <summary>	
            <para>Accept the new pixel if its value is greater than the value of the current pixel. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCMP_GREATER']/*"/>	
            <unmanaged>D3DCMP_GREATER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Compare.NotEqual">
            <summary>	
            <para>Accept the new pixel if its value does not equal the value of the current pixel. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCMP_NOTEQUAL']/*"/>	
            <unmanaged>D3DCMP_NOTEQUAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Compare.GreaterEqual">
            <summary>	
            <para>Accept the new pixel if its value is greater than or equal to the value of the current pixel. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCMP_GREATEREQUAL']/*"/>	
            <unmanaged>D3DCMP_GREATEREQUAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Compare.Always">
            <summary>	
            <para>Always pass the test. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCMP_ALWAYS']/*"/>	
            <unmanaged>D3DCMP_ALWAYS</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CompareCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPCMPCAPS']/*"/>	
            <unmanaged>D3DPCMPCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CompareCaps.Never">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPCMPCAPS_NEVER']/*"/>	
            <unmanaged>D3DPCMPCAPS_NEVER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CompareCaps.Less">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPCMPCAPS_LESS']/*"/>	
            <unmanaged>D3DPCMPCAPS_LESS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CompareCaps.Equal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPCMPCAPS_EQUAL']/*"/>	
            <unmanaged>D3DPCMPCAPS_EQUAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CompareCaps.LessEqual">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPCMPCAPS_LESSEQUAL']/*"/>	
            <unmanaged>D3DPCMPCAPS_LESSEQUAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CompareCaps.Greater">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPCMPCAPS_GREATER']/*"/>	
            <unmanaged>D3DPCMPCAPS_GREATER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CompareCaps.NotEqual">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPCMPCAPS_NOTEQUAL']/*"/>	
            <unmanaged>D3DPCMPCAPS_NOTEQUAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CompareCaps.GreaterEqual">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPCMPCAPS_GREATEREQUAL']/*"/>	
            <unmanaged>D3DPCMPCAPS_GREATEREQUAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CompareCaps.Always">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPCMPCAPS_ALWAYS']/*"/>	
            <unmanaged>D3DPCMPCAPS_ALWAYS</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ComposeRectOperation">
            <summary>	
            Specifies how to combine the glyph data from the source and destination surfaces in a call to ComposeRects.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOMPOSERECTSOP']/*"/>	
            <unmanaged>D3DCOMPOSERECTSOP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ComposeRectOperation.Copy">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOMPOSERECTS_COPY']/*"/>	
            <unmanaged>D3DCOMPOSERECTS_COPY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ComposeRectOperation.Or">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOMPOSERECTS_OR']/*"/>	
            <unmanaged>D3DCOMPOSERECTS_OR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ComposeRectOperation.And">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOMPOSERECTS_AND']/*"/>	
            <unmanaged>D3DCOMPOSERECTS_AND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ComposeRectOperation.Negate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCOMPOSERECTS_NEG']/*"/>	
            <unmanaged>D3DCOMPOSERECTS_NEG</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CompressionFlags">
            <summary>	
            Defines the compression mode used for storing compressed animation set data.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCOMPRESSION_FLAGS']/*"/>	
            <unmanaged>D3DXCOMPRESSION_FLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CompressionFlags.Default">
            <summary>	
            <para>Implements fast compression.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCOMPRESS_DEFAULT']/*"/>	
            <unmanaged>D3DXCOMPRESS_DEFAULT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CreateFlags">
            <summary>	
            A combination of one or more flags that control the device create behavior.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE']/*"/>	
            <unmanaged>D3DCREATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.FpuPreserve">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_FPU_PRESERVE']/*"/>	
            <unmanaged>D3DCREATE_FPU_PRESERVE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.Multithreaded">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_MULTITHREADED']/*"/>	
            <unmanaged>D3DCREATE_MULTITHREADED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.PureDevice">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_PUREDEVICE']/*"/>	
            <unmanaged>D3DCREATE_PUREDEVICE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.SoftwareVertexProcessing">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_SOFTWARE_VERTEXPROCESSING']/*"/>	
            <unmanaged>D3DCREATE_SOFTWARE_VERTEXPROCESSING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.HardwareVertexProcessing">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_HARDWARE_VERTEXPROCESSING']/*"/>	
            <unmanaged>D3DCREATE_HARDWARE_VERTEXPROCESSING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.MixedVertexProcessing">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_MIXED_VERTEXPROCESSING']/*"/>	
            <unmanaged>D3DCREATE_MIXED_VERTEXPROCESSING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.DisableDriverManagement">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_DISABLE_DRIVER_MANAGEMENT']/*"/>	
            <unmanaged>D3DCREATE_DISABLE_DRIVER_MANAGEMENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.AdapterGroupDevice">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_ADAPTERGROUP_DEVICE']/*"/>	
            <unmanaged>D3DCREATE_ADAPTERGROUP_DEVICE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.DisableExtendedDriverManagement">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX']/*"/>	
            <unmanaged>D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.NoWindowChanges">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_NOWINDOWCHANGES']/*"/>	
            <unmanaged>D3DCREATE_NOWINDOWCHANGES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.DisablePsgpThreading">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_DISABLE_PSGP_THREADING']/*"/>	
            <unmanaged>D3DCREATE_DISABLE_PSGP_THREADING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.EnablePresentStatistics">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_ENABLE_PRESENTSTATS']/*"/>	
            <unmanaged>D3DCREATE_ENABLE_PRESENTSTATS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.DisablePrintScreen">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_DISABLE_PRINTSCREEN']/*"/>	
            <unmanaged>D3DCREATE_DISABLE_PRINTSCREEN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.AllowScreensavers">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCREATE_SCREENSAVER']/*"/>	
            <unmanaged>D3DCREATE_SCREENSAVER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreateFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CubeMapFace">
            <summary>	
            Defines the faces of a cubemap.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCUBEMAP_FACES']/*"/>	
            <unmanaged>D3DCUBEMAP_FACES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CubeMapFace.PositiveX">
            <summary>	
            <para>Positive x-face of the cubemap. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCUBEMAP_FACE_POSITIVE_X']/*"/>	
            <unmanaged>D3DCUBEMAP_FACE_POSITIVE_X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CubeMapFace.NegativeX">
            <summary>	
            <para>Negative x-face of the cubemap. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCUBEMAP_FACE_NEGATIVE_X']/*"/>	
            <unmanaged>D3DCUBEMAP_FACE_NEGATIVE_X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CubeMapFace.PositiveY">
            <summary>	
            <para>Positive y-face of the cubemap. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCUBEMAP_FACE_POSITIVE_Y']/*"/>	
            <unmanaged>D3DCUBEMAP_FACE_POSITIVE_Y</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CubeMapFace.NegativeY">
            <summary>	
            <para>Negative y-face of the cubemap. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCUBEMAP_FACE_NEGATIVE_Y']/*"/>	
            <unmanaged>D3DCUBEMAP_FACE_NEGATIVE_Y</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CubeMapFace.PositiveZ">
            <summary>	
            <para>Positive z-face of the cubemap. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCUBEMAP_FACE_POSITIVE_Z']/*"/>	
            <unmanaged>D3DCUBEMAP_FACE_POSITIVE_Z</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CubeMapFace.NegativeZ">
            <summary>	
            <para>Negative z-face of the cubemap. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCUBEMAP_FACE_NEGATIVE_Z']/*"/>	
            <unmanaged>D3DCUBEMAP_FACE_NEGATIVE_Z</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Cull">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCULL']/*"/>	
            <unmanaged>D3DCULL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Cull.None">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCULL_NONE']/*"/>	
            <unmanaged>D3DCULL_NONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Cull.Clockwise">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCULL_CW']/*"/>	
            <unmanaged>D3DCULL_CW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Cull.Counterclockwise">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCULL_CCW']/*"/>	
            <unmanaged>D3DCULL_CCW</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CursorCaps">
            <summary>	
            Driver cursor capability flags.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCURSORCAPS']/*"/>	
            <unmanaged>D3DCURSORCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CursorCaps.Color">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCURSORCAPS_COLOR']/*"/>	
            <unmanaged>D3DCURSORCAPS_COLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CursorCaps.LowResolution">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCURSORCAPS_LOWRES']/*"/>	
            <unmanaged>D3DCURSORCAPS_LOWRES</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DebugMonitorTokens">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEBUGMONITORTOKENS']/*"/>	
            <unmanaged>D3DDEBUGMONITORTOKENS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DebugMonitorTokens.Enable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDMT_ENABLE']/*"/>	
            <unmanaged>D3DDMT_ENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DebugMonitorTokens.Disable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDMT_DISABLE']/*"/>	
            <unmanaged>D3DDMT_DISABLE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DeclarationMethod">
            <summary>	
            Defines the vertex declaration method which is a predefined operation performed by the tessellator (or any procedural geometry routine on the vertex data during tessellation).	
            </summary>	
            <remarks>	
            The tessellator looks at the method to determine what data to calculate from the vertex data during tessellation. Mesh data should use the default value. Patches can use any of the other implemented types.Vertex data is declared with an array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> structures. Each element in the array contains a vertex declaration method.In addition to using <see cref="F:SharpDX.Direct3D9.DeclarationMethod.Default"/>, a normal mesh can use <see cref="F:SharpDX.Direct3D9.DeclarationMethod.Lookup"/> and <see cref="F:SharpDX.Direct3D9.DeclarationMethod.LookupPresampled"/> methods when N-patches are enabled.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLMETHOD']/*"/>	
            <unmanaged>D3DDECLMETHOD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationMethod.Default">
            <summary>	
            <para>Default value. The tessellator copies the vertex data (spline data for patches) as is, with no additional calculations. When the tessellator is used, this element is interpolated. Otherwise vertex data is copied into the input register. The input and output type can be any value, but are always the same type.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLMETHOD_DEFAULT']/*"/>	
            <unmanaged>D3DDECLMETHOD_DEFAULT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationMethod.PartialU">
            <summary>	
            <para>Computes the tangent at a point on the rectangle or triangle patch in the U direction. The input type can be one of the following:	
            </para>	
              <see cref="F:SharpDX.Direct3D9.DeclarationType.Color"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Float3"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Float4"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Short4"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Ubyte4"/>  <para> The output type is always <see cref="F:SharpDX.Direct3D9.DeclarationType.Float3"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLMETHOD_PARTIALU']/*"/>	
            <unmanaged>D3DDECLMETHOD_PARTIALU</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationMethod.PartialV">
            <summary>	
            <para>Computes the tangent at a point on the rectangle or triangle patch in the V direction. The input type can be one of the following:	
            </para>	
              <see cref="F:SharpDX.Direct3D9.DeclarationType.Color"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Float3"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Float4"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Short4"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Ubyte4"/>  <para> The output type is always <see cref="F:SharpDX.Direct3D9.DeclarationType.Float3"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLMETHOD_PARTIALV']/*"/>	
            <unmanaged>D3DDECLMETHOD_PARTIALV</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationMethod.CrossUV">
            <summary>	
            <para>Computes the normal at a point on the rectangle or triangle patch by taking the cross product of two tangents. The input type can be one of the following:	
            </para>	
              <see cref="F:SharpDX.Direct3D9.DeclarationType.Color"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Float3"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Float4"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Short4"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Ubyte4"/>  <para> The output type is always <see cref="F:SharpDX.Direct3D9.DeclarationType.Float3"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLMETHOD_CROSSUV']/*"/>	
            <unmanaged>D3DDECLMETHOD_CROSSUV</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationMethod.UV">
            <summary>	
            <para>Copy out the U, V values at a point on the rectangle or triangle patch. This results in a 2D float. The input type must be set to <see cref="F:SharpDX.Direct3D9.DeclarationType.Unused"/>. The output data type is always <see cref="F:SharpDX.Direct3D9.DeclarationType.Float2"/>. The input stream and offset are also unused (but must be set to 0).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLMETHOD_UV']/*"/>	
            <unmanaged>D3DDECLMETHOD_UV</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationMethod.Lookup">
            <summary>	
            <para>Look up a displacement map. The input type can be one of the following:	
            </para>	
              <see cref="F:SharpDX.Direct3D9.DeclarationType.Float2"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Float3"/> <see cref="F:SharpDX.Direct3D9.DeclarationType.Float4"/>  <para> Only the .x and .y components are used for the texture map lookup. The output type is always <see cref="F:SharpDX.Direct3D9.DeclarationType.Float1"/>. The device must support displacement mapping. For more information about displacement mapping, see Displacement Mapping (Direct3D 9). This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLMETHOD_LOOKUP']/*"/>	
            <unmanaged>D3DDECLMETHOD_LOOKUP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationMethod.LookupPresampled">
            <summary>	
            <para>Look up a presampled displacement map. The input type must be set to <see cref="F:SharpDX.Direct3D9.DeclarationType.Unused"/>; the stream index and the stream offset must be set to 0. The output type for this operation is always <see cref="F:SharpDX.Direct3D9.DeclarationType.Float1"/>. The device must support displacement mapping. For more information about displacement mapping, see Displacement Mapping (Direct3D 9). This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled. This method can be used only with <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Sample"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLMETHOD_LOOKUPPRESAMPLED']/*"/>	
            <unmanaged>D3DDECLMETHOD_LOOKUPPRESAMPLED</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DeclarationType">
            <summary>	
            Defines a vertex declaration data type.	
            </summary>	
            <remarks>	
            Vertex data is declared with an array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> structures. Each element in the array contains a vertex declaration data type.Use the DirectX Caps Viewer Tool tool to see which types are supported on your device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE']/*"/>	
            <unmanaged>D3DDECLTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Float1">
            <summary>	
            <para>One-component float expanded to (float, 0, 0, 1).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_FLOAT1']/*"/>	
            <unmanaged>D3DDECLTYPE_FLOAT1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Float2">
            <summary>	
            <para>Two-component float expanded to (float, float, 0, 1).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_FLOAT2']/*"/>	
            <unmanaged>D3DDECLTYPE_FLOAT2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Float3">
            <summary>	
            <para>Three-component float expanded to (float, float, float, 1).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_FLOAT3']/*"/>	
            <unmanaged>D3DDECLTYPE_FLOAT3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Float4">
            <summary>	
            <para>Four-component float expanded to (float, float, float, float).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_FLOAT4']/*"/>	
            <unmanaged>D3DDECLTYPE_FLOAT4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Color">
            <summary>	
            <para>Four-component, packed, unsigned bytes mapped to 0 to 1 range. Input is a <see cref="T:SharpDX.Color4"/> and is expanded to RGBA order.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_D3DCOLOR']/*"/>	
            <unmanaged>D3DDECLTYPE_D3DCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Ubyte4">
            <summary>	
            <para>Four-component, unsigned byte.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_UBYTE4']/*"/>	
            <unmanaged>D3DDECLTYPE_UBYTE4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Short2">
            <summary>	
            <para>Two-component, signed short expanded to (value, value, 0, 1).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_SHORT2']/*"/>	
            <unmanaged>D3DDECLTYPE_SHORT2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Short4">
            <summary>	
            <para>Four-component, signed short expanded to (value, value, value, value).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_SHORT4']/*"/>	
            <unmanaged>D3DDECLTYPE_SHORT4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.UByte4N">
            <summary>	
            <para>Four-component byte with each byte normalized by dividing with 255.0f.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_UBYTE4N']/*"/>	
            <unmanaged>D3DDECLTYPE_UBYTE4N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Short2N">
            <summary>	
            <para>Normalized, two-component, signed short, expanded to (first short/32767.0, second short/32767.0, 0, 1). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_SHORT2N']/*"/>	
            <unmanaged>D3DDECLTYPE_SHORT2N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Short4N">
            <summary>	
            <para>Normalized, four-component, signed short, expanded to (first short/32767.0, second short/32767.0, third short/32767.0, fourth short/32767.0). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_SHORT4N']/*"/>	
            <unmanaged>D3DDECLTYPE_SHORT4N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.UShort2N">
            <summary>	
            <para>Normalized, two-component, unsigned short, expanded to (first short/65535.0, short short/65535.0, 0, 1). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_USHORT2N']/*"/>	
            <unmanaged>D3DDECLTYPE_USHORT2N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.UShort4N">
            <summary>	
            <para>Normalized, four-component, unsigned short, expanded to (first short/65535.0, second short/65535.0, third short/65535.0, fourth short/65535.0). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_USHORT4N']/*"/>	
            <unmanaged>D3DDECLTYPE_USHORT4N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.UDec3">
            <summary>	
            <para>Three-component, unsigned, 10 10 10 format expanded to (value, value, value, 1).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_UDEC3']/*"/>	
            <unmanaged>D3DDECLTYPE_UDEC3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Dec3N">
            <summary>	
            <para>Three-component, signed, 10 10 10 format normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_DEC3N']/*"/>	
            <unmanaged>D3DDECLTYPE_DEC3N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.HalfTwo">
            <summary>	
            <para>Two-component, 16-bit, floating point expanded to (value, value, 0, 1).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_FLOAT16_2']/*"/>	
            <unmanaged>D3DDECLTYPE_FLOAT16_2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.HalfFour">
            <summary>	
            <para>Four-component, 16-bit, floating point expanded to (value, value, value, value). </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_FLOAT16_4']/*"/>	
            <unmanaged>D3DDECLTYPE_FLOAT16_4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationType.Unused">
            <summary>	
            <para>Type field in the declaration is unused. This is designed for use with <see cref="F:SharpDX.Direct3D9.DeclarationMethod.UV"/>  and <see cref="F:SharpDX.Direct3D9.DeclarationMethod.LookupPresampled"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLTYPE_UNUSED']/*"/>	
            <unmanaged>D3DDECLTYPE_UNUSED</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DeclarationTypeCaps">
            <summary>	
            Constants describing the vertex data types supported by a device.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS']/*"/>	
            <unmanaged>D3DDTCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.UByte4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_UBYTE4']/*"/>	
            <unmanaged>D3DDTCAPS_UBYTE4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.UByte4N">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_UBYTE4N']/*"/>	
            <unmanaged>D3DDTCAPS_UBYTE4N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.Short2N">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_SHORT2N']/*"/>	
            <unmanaged>D3DDTCAPS_SHORT2N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.Short4N">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_SHORT4N']/*"/>	
            <unmanaged>D3DDTCAPS_SHORT4N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.UShort2N">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_USHORT2N']/*"/>	
            <unmanaged>D3DDTCAPS_USHORT2N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.UShort4N">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_USHORT4N']/*"/>	
            <unmanaged>D3DDTCAPS_USHORT4N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.UDec3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_UDEC3']/*"/>	
            <unmanaged>D3DDTCAPS_UDEC3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.Dec3N">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_DEC3N']/*"/>	
            <unmanaged>D3DDTCAPS_DEC3N</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.HalfTwo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_FLOAT16_2']/*"/>	
            <unmanaged>D3DDTCAPS_FLOAT16_2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationTypeCaps.HalfFour">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDTCAPS_FLOAT16_4']/*"/>	
            <unmanaged>D3DDTCAPS_FLOAT16_4</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DeclarationUsage">
            <summary>	
            Identifies the intended use of vertex data.	
            </summary>	
            <remarks>	
            Vertex data is declared with an array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> structures. Each element in the array contains a usage type.For more information about vertex declarations, see Vertex Declaration (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE']/*"/>	
            <unmanaged>D3DDECLUSAGE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.Position">
            <summary>	
            <para>Position data ranging from (-1,-1) to (1,1). Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Position"/> with a usage index of 0 to specify untransformed position for fixed function vertex processing and the n-patch tessellator. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Position"/> with a usage index of 1 to specify untransformed position in the fixed function vertex shader for vertex tweening. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_POSITION']/*"/>	
            <unmanaged>D3DDECLUSAGE_POSITION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.BlendWeight">
            <summary>	
            <para>Blending weight data. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.BlendWeight"/> with a usage index of 0 to specify the blend weights used in indexed and nonindexed vertex blending.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_BLENDWEIGHT']/*"/>	
            <unmanaged>D3DDECLUSAGE_BLENDWEIGHT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.BlendIndices">
            <summary>	
            <para>Blending indices data. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.BlendIndices"/> with a usage index of 0 to specify matrix indices for indexed paletted skinning.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_BLENDINDICES']/*"/>	
            <unmanaged>D3DDECLUSAGE_BLENDINDICES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.Normal">
            <summary>	
            <para>Vertex normal data. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Normal"/> with a usage index of 0 to specify vertex normals for fixed function vertex processing and the n-patch tessellator. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Normal"/> with a usage index of 1 to specify vertex normals for fixed function vertex processing for vertex tweening.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_NORMAL']/*"/>	
            <unmanaged>D3DDECLUSAGE_NORMAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.PointSize">
            <summary>	
            <para>Point size data. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.PointSize"/> with a usage index of 0 to specify the point-size attribute used by the setup engine of the rasterizer to expand a point into a quad for the point-sprite functionality.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_PSIZE']/*"/>	
            <unmanaged>D3DDECLUSAGE_PSIZE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.TextureCoordinate">
            <summary>	
            <para>Texture coordinate data. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.TextureCoordinate"/>, n to specify texture coordinates in fixed function vertex processing and in pixel shaders prior to ps_3_0. These can be used to pass user defined data. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_TEXCOORD']/*"/>	
            <unmanaged>D3DDECLUSAGE_TEXCOORD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.Tangent">
            <summary>	
            <para>Vertex tangent data.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_TANGENT']/*"/>	
            <unmanaged>D3DDECLUSAGE_TANGENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.Binormal">
            <summary>	
            <para>Vertex binormal data. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_BINORMAL']/*"/>	
            <unmanaged>D3DDECLUSAGE_BINORMAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.TessellateFactor">
            <summary>	
            <para>Single positive floating point value. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.TessellateFactor"/> with a usage index of 0 to specify a tessellation factor used in the tessellation unit to control the rate of tessellation. For more information about the data type, see <see cref="F:SharpDX.Direct3D9.DeclarationType.Float1"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_TESSFACTOR']/*"/>	
            <unmanaged>D3DDECLUSAGE_TESSFACTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.PositionTransformed">
            <summary>	
            <para>Vertex data contains transformed position data ranging from (0,0) to (viewport width, viewport height). Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.PositionTransformed"/> with a usage index of 0 to specify transformed position. When a declaration containing this is set, the pipeline does not perform vertex processing.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_POSITIONT']/*"/>	
            <unmanaged>D3DDECLUSAGE_POSITIONT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.Color">
            <summary>	
            <para>Vertex data contains diffuse or specular color. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Color"/> with a usage index of 0 to specify the diffuse color in the fixed function vertex shader and pixel shaders prior to ps_3_0. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Color"/> with a usage index of 1 to specify the specular color in the fixed function vertex shader and pixel shaders prior to ps_3_0.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_COLOR']/*"/>	
            <unmanaged>D3DDECLUSAGE_COLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.Fog">
            <summary>	
            <para>Vertex data contains fog data. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Fog"/> with a usage index of 0 to specify a fog blend value used after pixel shading finishes. This applies to pixel shaders prior to version ps_3_0. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_FOG']/*"/>	
            <unmanaged>D3DDECLUSAGE_FOG</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.Depth">
            <summary>	
            <para>Vertex data contains depth data.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_DEPTH']/*"/>	
            <unmanaged>D3DDECLUSAGE_DEPTH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeclarationUsage.Sample">
            <summary>	
            <para>Vertex data contains sampler data. Use <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Sample"/> with a usage index of 0 to specify the displacement value to look up. It can be used only with D3DDECLUSAGE_LOOKUPPRESAMPLED or D3DDECLUSAGE_LOOKUP.  </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDECLUSAGE_SAMPLE']/*"/>	
            <unmanaged>D3DDECLUSAGE_SAMPLE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Degree">
            <summary>	
            Defines the degree of the variables in the equation that describes a curve.	
            </summary>	
            <remarks>	
            The values in this enumeration are used to describe the curves used by rectangle and triangle patches. For more information, see <see cref="F:SharpDX.Direct3D9.RenderState.CullMode"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEGREETYPE']/*"/>	
            <unmanaged>D3DDEGREETYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Degree.Linear">
            <summary>	
            <para>Curve is described by variables of first order.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEGREE_LINEAR']/*"/>	
            <unmanaged>D3DDEGREE_LINEAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Degree.Quadratic">
            <summary>	
            <para>Curve is described by variables of second order.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEGREE_QUADRATIC']/*"/>	
            <unmanaged>D3DDEGREE_QUADRATIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Degree.Cubic">
            <summary>	
            <para>Curve is described by variables of third order.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEGREE_CUBIC']/*"/>	
            <unmanaged>D3DDEGREE_CUBIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Degree.Quintic">
            <summary>	
            <para>Curve is described by variables of fourth order.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEGREE_QUINTIC']/*"/>	
            <unmanaged>D3DDEGREE_QUINTIC</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DeviceCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS']/*"/>	
            <unmanaged>D3DDEVCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.ExecuteSystemMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_EXECUTESYSTEMMEMORY']/*"/>	
            <unmanaged>D3DDEVCAPS_EXECUTESYSTEMMEMORY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.ExecuteVideoMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_EXECUTEVIDEOMEMORY']/*"/>	
            <unmanaged>D3DDEVCAPS_EXECUTEVIDEOMEMORY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.TLVertexSystemMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_TLVERTEXSYSTEMMEMORY']/*"/>	
            <unmanaged>D3DDEVCAPS_TLVERTEXSYSTEMMEMORY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.TLVertexVideoMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_TLVERTEXVIDEOMEMORY']/*"/>	
            <unmanaged>D3DDEVCAPS_TLVERTEXVIDEOMEMORY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.TextureSystemMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_TEXTURESYSTEMMEMORY']/*"/>	
            <unmanaged>D3DDEVCAPS_TEXTURESYSTEMMEMORY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.TextureVideoMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_TEXTUREVIDEOMEMORY']/*"/>	
            <unmanaged>D3DDEVCAPS_TEXTUREVIDEOMEMORY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.DrawPrimTLVertex">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_DRAWPRIMTLVERTEX']/*"/>	
            <unmanaged>D3DDEVCAPS_DRAWPRIMTLVERTEX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.CanRenderAfterFlip">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_CANRENDERAFTERFLIP']/*"/>	
            <unmanaged>D3DDEVCAPS_CANRENDERAFTERFLIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.TextureNonLocalVideoMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_TEXTURENONLOCALVIDMEM']/*"/>	
            <unmanaged>D3DDEVCAPS_TEXTURENONLOCALVIDMEM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.DrawPrimitives2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_DRAWPRIMITIVES2']/*"/>	
            <unmanaged>D3DDEVCAPS_DRAWPRIMITIVES2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.SeparateTextureMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_SEPARATETEXTUREMEMORIES']/*"/>	
            <unmanaged>D3DDEVCAPS_SEPARATETEXTUREMEMORIES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.DrawPrimitives2Extended">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_DRAWPRIMITIVES2EX']/*"/>	
            <unmanaged>D3DDEVCAPS_DRAWPRIMITIVES2EX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.HWTransformAndLight">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_HWTRANSFORMANDLIGHT']/*"/>	
            <unmanaged>D3DDEVCAPS_HWTRANSFORMANDLIGHT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.CanBlitSysToNonLocal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_CANBLTSYSTONONLOCAL']/*"/>	
            <unmanaged>D3DDEVCAPS_CANBLTSYSTONONLOCAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.HWRasterization">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_HWRASTERIZATION']/*"/>	
            <unmanaged>D3DDEVCAPS_HWRASTERIZATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.PureDevice">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_PUREDEVICE']/*"/>	
            <unmanaged>D3DDEVCAPS_PUREDEVICE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.QuinticRTPatches">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_QUINTICRTPATCHES']/*"/>	
            <unmanaged>D3DDEVCAPS_QUINTICRTPATCHES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.RTPatches">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_RTPATCHES']/*"/>	
            <unmanaged>D3DDEVCAPS_RTPATCHES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.RTPatchHandleZero">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_RTPATCHHANDLEZERO']/*"/>	
            <unmanaged>D3DDEVCAPS_RTPATCHHANDLEZERO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps.NPatches">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS_NPATCHES']/*"/>	
            <unmanaged>D3DDEVCAPS_NPATCHES</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DeviceCaps2">
            <summary>	
            D3DDEVCAPS2 driver capability flags.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS2']/*"/>	
            <unmanaged>D3DDEVCAPS2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps2.StreamOffset">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS2_STREAMOFFSET']/*"/>	
            <unmanaged>D3DDEVCAPS2_STREAMOFFSET</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps2.DMapNPatch">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS2_DMAPNPATCH']/*"/>	
            <unmanaged>D3DDEVCAPS2_DMAPNPATCH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps2.AdaptiveTessRTPatch">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS2_ADAPTIVETESSRTPATCH']/*"/>	
            <unmanaged>D3DDEVCAPS2_ADAPTIVETESSRTPATCH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps2.AdaptiveTessNPatch">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS2_ADAPTIVETESSNPATCH']/*"/>	
            <unmanaged>D3DDEVCAPS2_ADAPTIVETESSNPATCH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps2.CanStretchRectFromTextures">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES']/*"/>	
            <unmanaged>D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps2.PresampledMapNPatch">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH']/*"/>	
            <unmanaged>D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceCaps2.VertexElementsCanShareStreamOffset">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET']/*"/>	
            <unmanaged>D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DeviceType">
            <summary>	
            Defines device types.	
            </summary>	
            <remarks>	
            All methods of the <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface that take a <see cref="T:SharpDX.Direct3D9.DeviceType"/> device type will fail if <see cref="F:SharpDX.Direct3D9.DeviceType.NullReference"/> is specified. To use these methods, substitute <see cref="F:SharpDX.Direct3D9.DeviceType.Reference"/> in the method call.A <see cref="F:SharpDX.Direct3D9.DeviceType.Reference"/> device should be created in <see cref="F:SharpDX.Direct3D9.Pool.Scratch"/> memory, unless vertex and index buffers are required. To support vertex and index buffers, create the device in <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/> memory.If D3dref9.dll is installed, Direct3D will use the reference rasterizer to create a <see cref="F:SharpDX.Direct3D9.DeviceType.Reference"/> device type, even if <see cref="F:SharpDX.Direct3D9.DeviceType.NullReference"/> is specified. If D3dref9.dll is not available and <see cref="F:SharpDX.Direct3D9.DeviceType.NullReference"/> is specified, Direct3D will neither render nor present the scene.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVTYPE']/*"/>	
            <unmanaged>D3DDEVTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceType.Hardware">
            <summary>	
            <para>Hardware rasterization. Shading is done with software, hardware, or mixed transform and lighting.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVTYPE_HAL']/*"/>	
            <unmanaged>D3DDEVTYPE_HAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceType.Reference">
            <summary>	
            <para>Initialize Direct3D on a computer that has neither hardware nor reference rasterization available, and enable resources for 3D content creation. See Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVTYPE_REF']/*"/>	
            <unmanaged>D3DDEVTYPE_REF</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceType.Software">
            <summary>	
            <para>Direct3D features are implemented in software; however, the reference rasterizer does make use of special CPU instructions whenever it can.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVTYPE_SW']/*"/>	
            <unmanaged>D3DDEVTYPE_SW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DeviceType.NullReference">
            <summary>	
            <para>A pluggable software device that has been registered with <see cref="M:SharpDX.Direct3D9.Direct3D.RegisterSoftwareDevice(System.IntPtr)"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVTYPE_NULLREF']/*"/>	
            <unmanaged>D3DDEVTYPE_NULLREF</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DisplayRotation">
            <summary>	
            Specifies how the monitor being used to display a full-screen application is rotated.	
            </summary>	
            <remarks>	
            This enumeration is used in <see cref="M:SharpDX.Direct3D9.Direct3DEx.GetAdapterDisplayModeEx(System.Int32)"/>, <see cref="M:SharpDX.Direct3D9.DeviceEx.GetDisplayModeEx(System.Int32)"/>, and <see cref="M:SharpDX.Direct3D9.SwapChain9Ex.GetDisplayModeEx(SharpDX.Direct3D9.DisplayModeEx@,SharpDX.Direct3D9.DisplayRotation@)"/>.Applications may choose to handle monitor rotation themselves by using the <see cref="F:SharpDX.Direct3D9.PresentFlags.NoAutoRotate"/>, in which case, the application will need to know how the monitor is rotated so that it may adjust its rendering accordingly.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYROTATION']/*"/>	
            <unmanaged>D3DDISPLAYROTATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayRotation.Identity">
            <summary>	
            <para>Display is not rotated.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYROTATION_IDENTITY']/*"/>	
            <unmanaged>D3DDISPLAYROTATION_IDENTITY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayRotation.Rotation90">
            <summary>	
            <para>Display is rotated 90 degrees.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYROTATION_90']/*"/>	
            <unmanaged>D3DDISPLAYROTATION_90</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayRotation.Rotation180">
            <summary>	
            <para>Display is rotated 180 degrees.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYROTATION_180']/*"/>	
            <unmanaged>D3DDISPLAYROTATION_180</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayRotation.Rotation270">
            <summary>	
            <para>Display is rotated 270 degrees.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYROTATION_270']/*"/>	
            <unmanaged>D3DDISPLAYROTATION_270</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.EffectDefaultType">
            <summary>	
            Effect data types. The data is contained in the pValue member of <see cref="T:SharpDX.Direct3D9.EffectDefault"/>.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECTDEFAULTTYPE']/*"/>	
            <unmanaged>D3DXEFFECTDEFAULTTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDefaultType.String">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEDT_STRING']/*"/>	
            <unmanaged>D3DXEDT_STRING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDefaultType.Floats">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEDT_FLOATS']/*"/>	
            <unmanaged>D3DXEDT_FLOATS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDefaultType.Dword">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEDT_DWORD']/*"/>	
            <unmanaged>D3DXEDT_DWORD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDefaultType.DtForcedword">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEDT_FORCEDWORD']/*"/>	
            <unmanaged>D3DXEDT_FORCEDWORD</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.EventType">
            <summary>	
            Describes the type of events that can be keyed by the animation controller.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_TYPE']/*"/>	
            <unmanaged>D3DXEVENT_TYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventType.TrackSpeed">
            <summary>	
            <para>Track speed.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_TRACKSPEED']/*"/>	
            <unmanaged>D3DXEVENT_TRACKSPEED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventType.TrackWeight">
            <summary>	
            <para>Track weight.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_TRACKWEIGHT']/*"/>	
            <unmanaged>D3DXEVENT_TRACKWEIGHT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventType.TrackPosition">
            <summary>	
            <para>Track position.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_TRACKPOSITION']/*"/>	
            <unmanaged>D3DXEVENT_TRACKPOSITION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventType.TrackEnable">
            <summary>	
            <para>Enable flag.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_TRACKENABLE']/*"/>	
            <unmanaged>D3DXEVENT_TRACKENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventType.PriorityBlend">
            <summary>	
            <para>Priority blend value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_PRIORITYBLEND']/*"/>	
            <unmanaged>D3DXEVENT_PRIORITYBLEND</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.FillMode">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFILLMODE']/*"/>	
            <unmanaged>D3DFILLMODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FillMode.Point">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFILL_POINT']/*"/>	
            <unmanaged>D3DFILL_POINT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FillMode.Wireframe">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFILL_WIREFRAME']/*"/>	
            <unmanaged>D3DFILL_WIREFRAME</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FillMode.Solid">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFILL_SOLID']/*"/>	
            <unmanaged>D3DFILL_SOLID</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Filter">
            <summary>	
            The following flags are used to specify which channels in a texture to operate on.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER']/*"/>	
            <unmanaged>D3DX_FILTER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.None">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_NONE']/*"/>	
            <unmanaged>D3DX_FILTER_NONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.Point">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_POINT']/*"/>	
            <unmanaged>D3DX_FILTER_POINT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.Linear">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_LINEAR']/*"/>	
            <unmanaged>D3DX_FILTER_LINEAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.Triangle">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_TRIANGLE']/*"/>	
            <unmanaged>D3DX_FILTER_TRIANGLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.Box">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_BOX']/*"/>	
            <unmanaged>D3DX_FILTER_BOX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.MirrorU">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_MIRROR_U']/*"/>	
            <unmanaged>D3DX_FILTER_MIRROR_U</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.MirrorV">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_MIRROR_V']/*"/>	
            <unmanaged>D3DX_FILTER_MIRROR_V</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.MirrorW">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_MIRROR_W']/*"/>	
            <unmanaged>D3DX_FILTER_MIRROR_W</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.Mirror">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_MIRROR']/*"/>	
            <unmanaged>D3DX_FILTER_MIRROR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.Dither">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_DITHER']/*"/>	
            <unmanaged>D3DX_FILTER_DITHER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.DitherDiffusion">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_DITHER_DIFFUSION']/*"/>	
            <unmanaged>D3DX_FILTER_DITHER_DIFFUSION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.SrgbIn">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_SRGB_IN']/*"/>	
            <unmanaged>D3DX_FILTER_SRGB_IN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.SrgbOut">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_SRGB_OUT']/*"/>	
            <unmanaged>D3DX_FILTER_SRGB_OUT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.Srgb">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_SRGB']/*"/>	
            <unmanaged>D3DX_FILTER_SRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Filter.Default">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_FILTER_DEFAULT']/*"/>	
            <unmanaged>D3DX_FILTER_DEFAULT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.FilterCaps">
            <summary>	
            Texture filtering constants.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS']/*"/>	
            <unmanaged>D3DPTFILTERCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MinPoint">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MINFPOINT']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MINFPOINT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MinLinear">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MINFLINEAR']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MINFLINEAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MinAnisotropic">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MINFANISOTROPIC']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MINFANISOTROPIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MinPyramidalQuad">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MINFPYRAMIDALQUAD']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MINFPYRAMIDALQUAD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MinGaussianQuad">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MINFGAUSSIANQUAD']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MINFGAUSSIANQUAD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MipPoint">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MIPFPOINT']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MIPFPOINT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MipLinear">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MIPFLINEAR']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MIPFLINEAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.ConvolutionMono">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_CONVOLUTIONMONO']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_CONVOLUTIONMONO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MagPoint">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFPOINT']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MAGFPOINT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MagLinear">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFLINEAR']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MAGFLINEAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MagAnisotropic">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFANISOTROPIC']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MAGFANISOTROPIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MagPyramidalQuad">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FilterCaps.MagGaussianQuad">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFGAUSSIANQUAD']/*"/>	
            <unmanaged>D3DPTFILTERCAPS_MAGFGAUSSIANQUAD</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.FogMode">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFOGMODE']/*"/>	
            <unmanaged>D3DFOGMODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FogMode.None">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFOG_NONE']/*"/>	
            <unmanaged>D3DFOG_NONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FogMode.Exponential">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFOG_EXP']/*"/>	
            <unmanaged>D3DFOG_EXP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FogMode.ExponentialSquared">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFOG_EXP2']/*"/>	
            <unmanaged>D3DFOG_EXP2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FogMode.Linear">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFOG_LINEAR']/*"/>	
            <unmanaged>D3DFOG_LINEAR</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Format">
            <summary>	
            Defines the various types of surface formats.	
            </summary>	
            <remarks>	
            There are several types of formats:BackBuffer Buffer DXTn Floating-Point FOURCC IEEE Mixed Signed Unsigned Other ConstantAll formats are listed from left to right, most-significant bit to least-significant bit. For example, D3DFORMAT_ARGB is ordered from the most-significant bit channel A (alpha), to the least-significant bit channel B (blue). When traversing surface data, the data is stored in memory from least-significant bit to most-significant bit, which means that the channel order in memory is from least-significant bit (blue) to most-significant bit (alpha).The default value for formats that contain undefined channels (G16R16, A8, and so on) is 1. The only exception is the A8 format, which is initialized to 000 for the three color channels.The order of the bits is from the most significant byte first, so <see cref="F:SharpDX.Direct3D9.Format.A8L8"/> indicates that the high byte of this 2-byte format is alpha. <see cref="F:SharpDX.Direct3D9.Format.D16"/> indicates a 16-bit integer value and an application-lockable surface.Pixel formats have been chosen to enable the expression of hardware-vendor-defined extension formats, as well as to include the well-established FOURCC method. The set of formats understood by the Direct3D runtime is defined by <see cref="T:SharpDX.Direct3D9.Format"/>.Note that formats are supplied by independent hardware vendors (IHVs) and many FOURCC codes are not listed. The formats in this enumeration are unique in that they are sanctioned by the runtime, meaning that the reference rasterizer will operate on all these types. IHV-supplied formats will be supported by the individual IHVs on a card-by-card basis.BackBuffer or Display FormatsThese formats are the only valid formats for a back buffer or a display.FormatBack bufferDisplay A2R10G10B10xx (full-screen mode only) A8R8G8B8x X8R8G8B8xx A1R5G5B5x X1R5G5B5xx R5G6B5xx?Buffer FormatsDepth, stencil, vertex, and index buffers each have unique formats.Buffer flagsValueFormat D3DFMT_D16_LOCKABLE7016-bit z-buffer bit depth. D3DFMT_D327132-bit z-buffer bit depth. D3DFMT_D15S17316-bit z-buffer bit depth where 15 bits are reserved for the depth channel and 1 bit is reserved for the stencil channel. D3DFMT_D24S87532-bit z-buffer bit depth using 24 bits for the depth channel and 8 bits for the stencil channel. D3DFMT_D24X87732-bit z-buffer bit depth using 24 bits for the depth channel. D3DFMT_D24X4S47932-bit z-buffer bit depth using 24 bits for the depth channel and 4 bits for the stencil channel. D3DFMT_D32F_LOCKABLE82A lockable format where the depth value is represented as a standard IEEE floating-point number. D3DFMT_D24FS883A non-lockable format that contains 24 bits of depth (in a 24-bit floating point format - 20e4) and 8 bits of stencil. D3DFMT_D32_LOCKABLE84A lockable 32-bit depth buffer.	
            Differences between Direct3D 9 and Direct3D 9Ex:??This flag is available in Direct3D 9Ex only.  D3DFMT_S8_LOCKABLE84A lockable 8-bit stencil buffer.	
            Differences between Direct3D 9 and Direct3D 9Ex:??This flag is available in Direct3D 9Ex only.  D3DFMT_D168016-bit z-buffer bit depth. D3DFMT_VERTEXDATA100Describes a vertex buffer surface. D3DFMT_INDEX1610116-bit index buffer bit depth. D3DFMT_INDEX3210232-bit index buffer bit depth.?All depth-stencil formats except <see cref="F:SharpDX.Direct3D9.Format.D16Lockable"/> indicate no particular bit ordering per pixel, and the driver is allowed to consume more than the indicated number of bits-per-depth channel (but not stencil channel).DXTn Compressed Texture FormatsThese flags are used for compressed textures:DXTn Compressed Texture flagsValueFormat D3DFMT_DXT1MAKEFOURCC('D', 'X', 'T', '1')DXT1 compression texture format  D3DFMT_DXT2MAKEFOURCC('D', 'X', 'T', '2')DXT2 compression texture format  D3DFMT_DXT3MAKEFOURCC('D', 'X', 'T', '3')DXT3 compression texture format  D3DFMT_DXT4MAKEFOURCC('D', 'X', 'T', '4')DXT4 compression texture format  D3DFMT_DXT5MAKEFOURCC('D', 'X', 'T', '5')DXT5 compression texture format?The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4.  This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.Floating-Point FormatsThese flags are used for floating-point surface formats. These 16-bits-per-channel formats are also known as s10e5 formats.Floating-point flagsValueFormat D3DFMT_R16F11116-bit float format using 16 bits for the red channel. D3DFMT_G16R16F11232-bit float format using 16 bits for the red channel and 16 bits for the green channel. D3DFMT_A16B16G16R16F11364-bit float format using 16 bits for the each channel (alpha, blue, green, red).?FOURCC FormatsData in a FOURCC format is compressed data.MAKEFOURCCA macro for generating four-character codes follows:#define MAKEFOURCC(ch0, ch1, ch2, ch3)                              \ ((DWORD)(BYTE)(ch0) | ((DWORD)(BYTE)(ch1) &lt;&lt; 8) |   \ ((DWORD)(BYTE)(ch2) &lt;&lt; 16) | ((DWORD)(BYTE)(ch3) &lt;&lt; 24 ))Here are the defined FOURCC formats:FOURCC flagsValueFormat D3DFMT_MULTI2_ARGB8MAKEFOURCC('M','E','T','1')MultiElement texture (not compressed) D3DFMT_G8R8_G8B8MAKEFOURCC('G', 'R', 'G', 'B')A 16-bit packed RGB format analogous to YUY2 (Y0U0, Y1V0, Y2U2, and so on). It requires a pixel pair in order to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the high 8 bits) and 8 bits of red (in the low 8 bits). The second pixel contains 8 bits of green (in the high 8 bits) and 8 bits of blue (in the low 8 bits). Together, the two pixels share the red and blue components, while each has a unique green component (G0R0, G1B0, G2R2, and so on). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed function pixel shader, the hardware should normalize to the 0.f to 1.f range and essentially treat it as the YUY2 texture. Hardware that exposes this format must have the PixelShader1xMaxValue member of <see cref="T:SharpDX.Direct3D9.Capabilities"/> set to a value capable of handling that range. D3DFMT_R8G8_B8G8MAKEFOURCC('R', 'G', 'B', 'G')A 16-bit packed RGB format analogous to UYVY (U0Y0, V0Y1, U2Y2, and so on). It requires a pixel pair in order to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the low 8 bits) and 8 bits of red (in the high 8 bits). The second pixel contains 8 bits of green (in the low 8 bits) and 8 bits of blue (in the high 8 bits). Together, the two pixels share the red and blue components, while each has a unique green component (R0G0, B0G1, R2G2, and so on). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed function pixel shader, the hardware should normalize to the 0.f to 1.f range and essentially treat it as the YUY2 texture. Hardware that exposes this format must have PixelShader1xMaxValue member of <see cref="T:SharpDX.Direct3D9.Capabilities"/> set to a value capable of handling that range. D3DFMT_UYVYMAKEFOURCC('U', 'Y', 'V', 'Y')UYVY format (PC98 compliance) D3DFMT_YUY2MAKEFOURCC('Y', 'U', 'Y', '2')YUY2 format (PC98 compliance)?IEEE FormatsThese flags are used for floating-point surface formats. These 32-bits-per-channel formats are also known as s23e8 formats.Floating-point flagsValueFormat D3DFMT_R32F11432-bit float format using 32 bits for the red channel. D3DFMT_G32R32F11564-bit float format using 32 bits for the red channel and 32 bits for the green channel. D3DFMT_A32B32G32R32F116128-bit float format using 32 bits for the each channel (alpha, blue, green, red).?Mixed FormatsData in mixed formats can contain a combination of unsigned data and signed data.Mixed format flagsValueFormat D3DFMT_L6V5U56116-bit bump-map format with luminance using 6 bits for luminance, and 5 bits each for v and u. D3DFMT_X8L8V8U86232-bit bump-map format with luminance using 8 bits for each channel. D3DFMT_A2W10V10U106732-bit bump-map format using 2 bits for alpha and 10 bits each for w, v, and u.?Signed FormatsData in a signed format can be both positive and negative. Signed formats use combinations of (U), (V), (W), and (Q) data.Signed format flagsValueFormat D3DFMT_V8U86016-bit bump-map format using 8 bits each for u and v data. D3DFMT_Q8W8V8U86332-bit bump-map format using 8 bits for each channel. D3DFMT_V16U166432-bit bump-map format using 16 bits for each channel. D3DFMT_Q16W16V16U1611064-bit bump-map format using 16 bits for each component. D3DFMT_CxV8U811716-bit normal compression format. The texture sampler computes the C channel from: C = sqrt(1 - U2 - V2).?Unsigned FormatsData in an unsigned format must be positive. Unsigned formats use combinations of (R)ed, (G)reen, (B)lue, (A)lpha,  (L)uminance, and (P)alette data. Palette data is also referred to as color indexed data because the data is used to index a color palette.Unsigned format flagsValueFormat D3DFMT_R8G8B82024-bit RGB pixel format with 8 bits per channel. D3DFMT_A8R8G8B82132-bit ARGB pixel format with alpha, using 8 bits per channel. D3DFMT_X8R8G8B82232-bit RGB pixel format, where 8 bits are reserved for each color. D3DFMT_R5G6B52316-bit RGB pixel format with 5 bits for red, 6 bits for green, and 5 bits for blue. D3DFMT_X1R5G5B52416-bit pixel format where 5 bits are reserved for each color. D3DFMT_A1R5G5B52516-bit pixel format where 5 bits are reserved for each color and 1 bit is reserved for alpha. D3DFMT_A4R4G4B42616-bit ARGB pixel format with 4 bits for each channel. D3DFMT_R3G3B2278-bit RGB texture format using 3 bits for red, 3 bits for green, and 2 bits for blue. D3DFMT_A8288-bit alpha only. D3DFMT_A8R3G3B22916-bit ARGB texture format using 8 bits for alpha, 3 bits each for red and green, and 2 bits for blue. D3DFMT_X4R4G4B43016-bit RGB pixel format using 4 bits for each color. D3DFMT_A2B10G10R103132-bit pixel format using 10 bits for each color and 2 bits for alpha. D3DFMT_A8B8G8R83232-bit ARGB pixel format with alpha, using 8 bits per channel. D3DFMT_X8B8G8R83332-bit RGB pixel format, where 8 bits are reserved for each color. D3DFMT_G16R163432-bit pixel format using 16 bits each for green and red. D3DFMT_A2R10G10B103532-bit pixel format using 10 bits each for red, green, and blue, and 2 bits for alpha. D3DFMT_A16B16G16R163664-bit pixel format using 16 bits for each component. D3DFMT_A8P8408-bit color indexed with 8 bits of alpha. D3DFMT_P8418-bit color indexed. D3DFMT_L8508-bit luminance only. D3DFMT_L168116-bit luminance only. D3DFMT_A8L85116-bit using 8 bits each for alpha and luminance. D3DFMT_A4L4528-bit using 4 bits each for alpha and luminance. D3DFMT_A11181-bit monochrome.	
            Differences between Direct3D 9 and Direct3D 9Ex:??This flag is available in Direct3D 9Ex only.  D3DFMT_A2B10G10R10_XR_BIAS1192.8-biased fixed point.	
            Differences between Direct3D 9 and Direct3D 9Ex:??This flag is available in Direct3D 9Ex only.  D3DFMT_BINARYBUFFER199Binary format indicating that the data has no inherent type.	
            Differences between Direct3D 9 and Direct3D 9Ex:??This flag is available in Direct3D 9Ex only.?OtherThis flag is used for undefined formats.Other flagsValueFormat D3DFMT_UNKNOWN0Surface format is unknown?	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFORMAT']/*"/>	
            <unmanaged>D3DFORMAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Unknown">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_UNKNOWN']/*"/>	
            <unmanaged>D3DFMT_UNKNOWN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.R8G8B8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_R8G8B8']/*"/>	
            <unmanaged>D3DFMT_R8G8B8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A8R8G8B8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A8R8G8B8']/*"/>	
            <unmanaged>D3DFMT_A8R8G8B8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.X8R8G8B8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_X8R8G8B8']/*"/>	
            <unmanaged>D3DFMT_X8R8G8B8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.R5G6B5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_R5G6B5']/*"/>	
            <unmanaged>D3DFMT_R5G6B5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.X1R5G5B5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_X1R5G5B5']/*"/>	
            <unmanaged>D3DFMT_X1R5G5B5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A1R5G5B5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A1R5G5B5']/*"/>	
            <unmanaged>D3DFMT_A1R5G5B5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A4R4G4B4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A4R4G4B4']/*"/>	
            <unmanaged>D3DFMT_A4R4G4B4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.R3G3B2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_R3G3B2']/*"/>	
            <unmanaged>D3DFMT_R3G3B2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A8']/*"/>	
            <unmanaged>D3DFMT_A8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A8R3G3B2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A8R3G3B2']/*"/>	
            <unmanaged>D3DFMT_A8R3G3B2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.X4R4G4B4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_X4R4G4B4']/*"/>	
            <unmanaged>D3DFMT_X4R4G4B4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A2B10G10R10">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A2B10G10R10']/*"/>	
            <unmanaged>D3DFMT_A2B10G10R10</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A8B8G8R8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A8B8G8R8']/*"/>	
            <unmanaged>D3DFMT_A8B8G8R8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.X8B8G8R8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_X8B8G8R8']/*"/>	
            <unmanaged>D3DFMT_X8B8G8R8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.G16R16">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_G16R16']/*"/>	
            <unmanaged>D3DFMT_G16R16</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A2R10G10B10">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A2R10G10B10']/*"/>	
            <unmanaged>D3DFMT_A2R10G10B10</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A16B16G16R16">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A16B16G16R16']/*"/>	
            <unmanaged>D3DFMT_A16B16G16R16</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A8P8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A8P8']/*"/>	
            <unmanaged>D3DFMT_A8P8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.P8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_P8']/*"/>	
            <unmanaged>D3DFMT_P8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.L8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_L8']/*"/>	
            <unmanaged>D3DFMT_L8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A8L8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A8L8']/*"/>	
            <unmanaged>D3DFMT_A8L8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A4L4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A4L4']/*"/>	
            <unmanaged>D3DFMT_A4L4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.V8U8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_V8U8']/*"/>	
            <unmanaged>D3DFMT_V8U8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.L6V5U5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_L6V5U5']/*"/>	
            <unmanaged>D3DFMT_L6V5U5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.X8L8V8U8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_X8L8V8U8']/*"/>	
            <unmanaged>D3DFMT_X8L8V8U8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Q8W8V8U8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_Q8W8V8U8']/*"/>	
            <unmanaged>D3DFMT_Q8W8V8U8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.V16U16">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_V16U16']/*"/>	
            <unmanaged>D3DFMT_V16U16</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A2W10V10U10">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A2W10V10U10']/*"/>	
            <unmanaged>D3DFMT_A2W10V10U10</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Uyvy">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_UYVY']/*"/>	
            <unmanaged>D3DFMT_UYVY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.R8G8_B8G8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_R8G8_B8G8']/*"/>	
            <unmanaged>D3DFMT_R8G8_B8G8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Yuy2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_YUY2']/*"/>	
            <unmanaged>D3DFMT_YUY2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.G8R8_G8B8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_G8R8_G8B8']/*"/>	
            <unmanaged>D3DFMT_G8R8_G8B8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Dxt1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_DXT1']/*"/>	
            <unmanaged>D3DFMT_DXT1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Dxt2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_DXT2']/*"/>	
            <unmanaged>D3DFMT_DXT2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Dxt3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_DXT3']/*"/>	
            <unmanaged>D3DFMT_DXT3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Dxt4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_DXT4']/*"/>	
            <unmanaged>D3DFMT_DXT4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Dxt5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_DXT5']/*"/>	
            <unmanaged>D3DFMT_DXT5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D16Lockable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D16_LOCKABLE']/*"/>	
            <unmanaged>D3DFMT_D16_LOCKABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D32">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D32']/*"/>	
            <unmanaged>D3DFMT_D32</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D15S1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D15S1']/*"/>	
            <unmanaged>D3DFMT_D15S1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D24S8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D24S8']/*"/>	
            <unmanaged>D3DFMT_D24S8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D24X8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D24X8']/*"/>	
            <unmanaged>D3DFMT_D24X8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D24X4S4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D24X4S4']/*"/>	
            <unmanaged>D3DFMT_D24X4S4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D16">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D16']/*"/>	
            <unmanaged>D3DFMT_D16</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D32SingleLockable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D32F_LOCKABLE']/*"/>	
            <unmanaged>D3DFMT_D32F_LOCKABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D24SingleS8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D24FS8']/*"/>	
            <unmanaged>D3DFMT_D24FS8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.D32Lockable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_D32_LOCKABLE']/*"/>	
            <unmanaged>D3DFMT_D32_LOCKABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.S8Lockable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_S8_LOCKABLE']/*"/>	
            <unmanaged>D3DFMT_S8_LOCKABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.L16">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_L16']/*"/>	
            <unmanaged>D3DFMT_L16</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.VertexData">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_VERTEXDATA']/*"/>	
            <unmanaged>D3DFMT_VERTEXDATA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Index16">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_INDEX16']/*"/>	
            <unmanaged>D3DFMT_INDEX16</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Index32">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_INDEX32']/*"/>	
            <unmanaged>D3DFMT_INDEX32</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Q16W16V16U16">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_Q16W16V16U16']/*"/>	
            <unmanaged>D3DFMT_Q16W16V16U16</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.Multi2Argb8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_MULTI2_ARGB8']/*"/>	
            <unmanaged>D3DFMT_MULTI2_ARGB8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.R16F">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_R16F']/*"/>	
            <unmanaged>D3DFMT_R16F</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.G16R16F">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_G16R16F']/*"/>	
            <unmanaged>D3DFMT_G16R16F</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A16B16G16R16F">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A16B16G16R16F']/*"/>	
            <unmanaged>D3DFMT_A16B16G16R16F</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.R32F">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_R32F']/*"/>	
            <unmanaged>D3DFMT_R32F</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.G32R32F">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_G32R32F']/*"/>	
            <unmanaged>D3DFMT_G32R32F</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A32B32G32R32F">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A32B32G32R32F']/*"/>	
            <unmanaged>D3DFMT_A32B32G32R32F</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.MtCxV8U8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_CxV8U8']/*"/>	
            <unmanaged>D3DFMT_CxV8U8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.A1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A1']/*"/>	
            <unmanaged>D3DFMT_A1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.MtA2B10G10R10XrBias">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_A2B10G10R10_XR_BIAS']/*"/>	
            <unmanaged>D3DFMT_A2B10G10R10_XR_BIAS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Format.BinaryBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFMT_BINARYBUFFER']/*"/>	
            <unmanaged>D3DFMT_BINARYBUFFER</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.FX">
            <summary>	
            Options for saving and creating effects.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFX']/*"/>	
            <unmanaged>D3DXFX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FX.DoNotSaveState">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFX_DONOTSAVESTATE']/*"/>	
            <unmanaged>D3DXFX_DONOTSAVESTATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FX.DoNotSaveShaderState">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFX_DONOTSAVESHADERSTATE']/*"/>	
            <unmanaged>D3DXFX_DONOTSAVESHADERSTATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FX.DoNotSaveSamplerState">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFX_DONOTSAVESAMPLERSTATE']/*"/>	
            <unmanaged>D3DXFX_DONOTSAVESAMPLERSTATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FX.NotCloneable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFX_NOT_CLONEABLE']/*"/>	
            <unmanaged>D3DXFX_NOT_CLONEABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FX.Largeaddressaware">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFX_LARGEADDRESSAWARE']/*"/>	
            <unmanaged>D3DXFX_LARGEADDRESSAWARE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FX.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ImageFileFormat">
            <summary>	
            Describes the supported image file formats. See Remarks for descriptions of these formats.	
            </summary>	
            <remarks>	
            Functions that begin with D3DXLoadxxx support all of the formats listed. Functions that begin with D3DXSavexxx support all of the formats listed except the Truevision (.tga) and portable pixmap (.ppm) formats.The following table lists the available input and output formats.File ExtensionDescription .bmpWindows bitmap format. Contains a header that describes the resolution of the device on which the rectangle of pixels was created, the dimensions of the rectangle, the size of the array of bits, a logical palette, and an array of bits that defines the relationship between pixels in the bitmapped image and entries in the logical palette. .ddsDirectDraw Surface file format. Stores textures, volume textures, and cubic environment maps, with or without mipmap levels, and with or without pixel compression. See DDS. .dibWindows DIB. Contains an array of bits combined with structures that specify width and height of the bitmapped image, color format of the device where the image was created, and resolution of the device used to create that image. .hdrHDR format. Encodes each pixel as an RGBE 32-bit color, with 8 bits of mantissa for red, green, and blue, and a shared 8-bit exponent. Each channel is separately compressed with run-length encoding (RLE). .jpgJPEG standard. Specifies variable compression of 24-bit RGB color and 8-bit gray-scale Tagged Image File Format (TIFF) image document files. .pfmPortable float map format. A raw floating point image format, without any compression. The file header specifies image width, height, monochrome or color, and machine word order. Pixel data is stored as 32-bit floating point values, with 3 values per pixel for color, and one value per pixel for monochrome. .pngPNG format. A non-proprietary bitmap format using lossless compression. .ppmPortable Pixmap format. A binary or ASCII file format for color images that includes image height and width and the maximum color component value. .tgaTarga or Truevision Graphics Adapter format. Supports depths of 8, 15, 16, 24, and 32 bits, including 8-bit gray scale, and contains optional color palette data, image (x, y) origin and size data, and pixel data.?See Types of Bitmaps for more information on some of these formats.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMAGE_FILEFORMAT']/*"/>	
            <unmanaged>D3DXIMAGE_FILEFORMAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageFileFormat.Bmp">
            <summary>	
            <para>Windows bitmap (BMP) file format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIFF_BMP']/*"/>	
            <unmanaged>D3DXIFF_BMP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageFileFormat.Jpg">
            <summary>	
            <para>Joint Photographics Experts Group (JPEG) compressed file format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIFF_JPG']/*"/>	
            <unmanaged>D3DXIFF_JPG</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageFileFormat.Tga">
            <summary>	
            <para>Truevision (Targa, or TGA) image file format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIFF_TGA']/*"/>	
            <unmanaged>D3DXIFF_TGA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageFileFormat.Png">
            <summary>	
            <para>Portable Network Graphics (PNG) file format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIFF_PNG']/*"/>	
            <unmanaged>D3DXIFF_PNG</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageFileFormat.Dds">
            <summary>	
            <para>DirectDraw surface (DDS) file format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIFF_DDS']/*"/>	
            <unmanaged>D3DXIFF_DDS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageFileFormat.Ppm">
            <summary>	
            <para>Portable pixmap (PPM) file format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIFF_PPM']/*"/>	
            <unmanaged>D3DXIFF_PPM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageFileFormat.Dib">
            <summary>	
            <para>Windows device-independent bitmap (DIB) file format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIFF_DIB']/*"/>	
            <unmanaged>D3DXIFF_DIB</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageFileFormat.Hdr">
            <summary>	
            <para>High dynamic range (HDR) file format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIFF_HDR']/*"/>	
            <unmanaged>D3DXIFF_HDR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageFileFormat.Pfm">
            <summary>	
            <para>Portable float map file format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIFF_PFM']/*"/>	
            <unmanaged>D3DXIFF_PFM</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.IncludeType">
            <summary>	
            Describes the location for the include file.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXINCLUDE_TYPE']/*"/>	
            <unmanaged>D3DXINCLUDE_TYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.IncludeType.Local">
            <summary>	
            <para>Look in the local project for the include file.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXINC_LOCAL']/*"/>	
            <unmanaged>D3DXINC_LOCAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.IncludeType.System">
            <summary>	
            <para>Look in the system path for the include file.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXINC_SYSTEM']/*"/>	
            <unmanaged>D3DXINC_SYSTEM</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Issue">
            <summary>	
            This macro creates a value used by Issue to issue a query end.	
            </summary>	
            <remarks>	
            This macro changes the query state to nonsignaled.D3DISSUE_END is valid for the following query types.<see cref="F:SharpDX.Direct3D9.QueryType.VCache"/> D3DQUERYTYPE_ResourceManager <see cref="F:SharpDX.Direct3D9.QueryType.VertexStats"/> <see cref="F:SharpDX.Direct3D9.QueryType.Event"/> <see cref="F:SharpDX.Direct3D9.QueryType.Occlusion"/>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DISSUE']/*"/>	
            <unmanaged>D3DISSUE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Issue.End">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DISSUE_END']/*"/>	
            <unmanaged>D3DISSUE_END</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Issue.Begin">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DISSUE_BEGIN']/*"/>	
            <unmanaged>D3DISSUE_BEGIN</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.LightType">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHTTYPE']/*"/>	
            <unmanaged>D3DLIGHTTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LightType.Point">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT_POINT']/*"/>	
            <unmanaged>D3DLIGHT_POINT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LightType.Spot">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT_SPOT']/*"/>	
            <unmanaged>D3DLIGHT_SPOT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LightType.Directional">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT_DIRECTIONAL']/*"/>	
            <unmanaged>D3DLIGHT_DIRECTIONAL</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.LineCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLINECAPS']/*"/>	
            <unmanaged>D3DLINECAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LineCaps.Texture">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLINECAPS_TEXTURE']/*"/>	
            <unmanaged>D3DLINECAPS_TEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LineCaps.DepthTest">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLINECAPS_ZTEST']/*"/>	
            <unmanaged>D3DLINECAPS_ZTEST</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LineCaps.Blend">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLINECAPS_BLEND']/*"/>	
            <unmanaged>D3DLINECAPS_BLEND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LineCaps.AlphaCompare">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLINECAPS_ALPHACMP']/*"/>	
            <unmanaged>D3DLINECAPS_ALPHACMP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LineCaps.Fog">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLINECAPS_FOG']/*"/>	
            <unmanaged>D3DLINECAPS_FOG</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LineCaps.Antialias">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLINECAPS_ANTIALIAS']/*"/>	
            <unmanaged>D3DLINECAPS_ANTIALIAS</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.LockFlags">
            <summary>	
            A combination of zero or more locking options that describe the type of lock to perform.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCK']/*"/>	
            <unmanaged>D3DLOCK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockFlags.ReadOnly">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCK_READONLY']/*"/>	
            <unmanaged>D3DLOCK_READONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockFlags.Discard">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCK_DISCARD']/*"/>	
            <unmanaged>D3DLOCK_DISCARD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockFlags.NoOverwrite">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCK_NOOVERWRITE']/*"/>	
            <unmanaged>D3DLOCK_NOOVERWRITE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockFlags.NoSystemLock">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCK_NOSYSLOCK']/*"/>	
            <unmanaged>D3DLOCK_NOSYSLOCK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockFlags.DoNotWait">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCK_DONOTWAIT']/*"/>	
            <unmanaged>D3DLOCK_DONOTWAIT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCK_NO_DIRTY_UPDATE']/*"/>	
            <unmanaged>D3DLOCK_NO_DIRTY_UPDATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockFlags.DoNotCopyData">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCK_DONOTCOPYDATA']/*"/>	
            <unmanaged>D3DLOCK_DONOTCOPYDATA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.MeshDataType">
            <summary>	
            Defines the type of mesh data present in <see cref="T:SharpDX.Direct3D9.MeshData"/>.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHDATATYPE']/*"/>	
            <unmanaged>D3DXMESHDATATYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshDataType.Mesh">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHTYPE_MESH']/*"/>	
            <unmanaged>D3DXMESHTYPE_MESH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshDataType.ProgressiveMesh">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHTYPE_PMESH']/*"/>	
            <unmanaged>D3DXMESHTYPE_PMESH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshDataType.PatchMesh">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHTYPE_PATCHMESH']/*"/>	
            <unmanaged>D3DXMESHTYPE_PATCHMESH</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.MeshFlags">
            <summary>	
            Flags used to specify creation options for a mesh.	
            </summary>	
            <remarks>	
            A 32-bit mesh (<see cref="F:SharpDX.Direct3D9.MeshFlags.Use32Bit"/>) can theoretically support (2^32)-1 faces and vertices. However, allocating memory for a mesh that large on a 32-bit operating system is not practical.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='_D3DXMESH']/*"/>	
            <unmanaged>_D3DXMESH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.Use32Bit">
            <summary>	
            <para>The mesh has 32-bit indices instead of 16-bit indices. See Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_32BIT']/*"/>	
            <unmanaged>D3DXMESH_32BIT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.DoNotClip">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Usage.DoNotClip"/> usage flag for vertex and index buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_DONOTCLIP']/*"/>	
            <unmanaged>D3DXMESH_DONOTCLIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.Points">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Usage.Points"/> usage flag for vertex and index buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_POINTS']/*"/>	
            <unmanaged>D3DXMESH_POINTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.RTPatches">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Usage.RTPatches"/> usage flag for vertex and index buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_RTPATCHES']/*"/>	
            <unmanaged>D3DXMESH_RTPATCHES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.NPatches">
            <summary>	
            <para>Specifying this flag causes the vertex and index buffer of the mesh to be created with <see cref="F:SharpDX.Direct3D9.Usage.NPatches"/> flag. This is required if the mesh object is to be rendered using N-patch enhancement using Direct3D.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_NPATCHES']/*"/>	
            <unmanaged>D3DXMESH_NPATCHES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.VertexBufferSystemMemory">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/> usage flag for vertex buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_VB_SYSTEMMEM']/*"/>	
            <unmanaged>D3DXMESH_VB_SYSTEMMEM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.VertexBufferManaged">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> usage flag for vertex buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_VB_MANAGED']/*"/>	
            <unmanaged>D3DXMESH_VB_MANAGED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.VertexBufferWriteOnly">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Usage.WriteOnly"/> usage flag for vertex buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_VB_WRITEONLY']/*"/>	
            <unmanaged>D3DXMESH_VB_WRITEONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.VertexBufferDynamic">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> usage flag for vertex buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_VB_DYNAMIC']/*"/>	
            <unmanaged>D3DXMESH_VB_DYNAMIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.VertexBufferSoftware">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Usage.SoftwareProcessing"/> usage flag for vertex buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_VB_SOFTWAREPROCESSING']/*"/>	
            <unmanaged>D3DXMESH_VB_SOFTWAREPROCESSING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.IndexBufferSystemMemory">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/> usage flag for index buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_IB_SYSTEMMEM']/*"/>	
            <unmanaged>D3DXMESH_IB_SYSTEMMEM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.IndexBufferManaged">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> usage flag for index buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_IB_MANAGED']/*"/>	
            <unmanaged>D3DXMESH_IB_MANAGED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.IndexBufferWriteOnly">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Usage.WriteOnly"/> usage flag for index buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_IB_WRITEONLY']/*"/>	
            <unmanaged>D3DXMESH_IB_WRITEONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.IndexBufferDynamic">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> usage flag for index buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_IB_DYNAMIC']/*"/>	
            <unmanaged>D3DXMESH_IB_DYNAMIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.IndexBufferSoftware">
            <summary>	
            <para>Use the <see cref="F:SharpDX.Direct3D9.Usage.SoftwareProcessing"/> usage flag for index buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_IB_SOFTWAREPROCESSING']/*"/>	
            <unmanaged>D3DXMESH_IB_SOFTWAREPROCESSING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.VertexBufferShare">
            <summary>	
            <para>Forces the cloned meshes to share vertex buffers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_VB_SHARE']/*"/>	
            <unmanaged>D3DXMESH_VB_SHARE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.UseHardwareOnly">
            <summary>	
            <para>Use hardware processing only. For mixed-mode device, this flag will cause the system to use hardware (if supported in hardware) or will default to software processing.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_USEHWONLY']/*"/>	
            <unmanaged>D3DXMESH_USEHWONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.SystemMemory">
            <summary>	
            <para>Equivalent to specifying both <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferSystemMemory"/> and <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferSystemMemory"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_SYSTEMMEM']/*"/>	
            <unmanaged>D3DXMESH_SYSTEMMEM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.Managed">
            <summary>	
            <para>Equivalent to specifying both <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferManaged"/> and <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferManaged"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_MANAGED']/*"/>	
            <unmanaged>D3DXMESH_MANAGED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.WriteOnly">
            <summary>	
            <para>Equivalent to specifying both <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferWriteOnly"/> and <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferWriteOnly"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_WRITEONLY']/*"/>	
            <unmanaged>D3DXMESH_WRITEONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.Dynamic">
            <summary>	
            <para>Equivalent to specifying both <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferDynamic"/> and <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferDynamic"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_DYNAMIC']/*"/>	
            <unmanaged>D3DXMESH_DYNAMIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshFlags.Software">
            <summary>	
            <para>Equivalent to specifying both <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferSoftware"/> and <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferSoftware"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESH_SOFTWAREPROCESSING']/*"/>	
            <unmanaged>D3DXMESH_SOFTWAREPROCESSING</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.MeshOptimizeFlags">
            <summary>	
            Specifies the type of mesh optimization to be performed.	
            </summary>	
            <remarks>	
            The <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.StripReorder"/> and <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.VertexCache"/> optimization flags are mutually exclusive.The D3DXMESHOPT_SHAREVB flag has been removed from this enumeration. Use <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferShare"/> instead, in D3DXMESH.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='_D3DXMESHOPT']/*"/>	
            <unmanaged>_D3DXMESHOPT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshOptimizeFlags.Compact">
            <summary>	
            <para>Reorders faces to remove unused vertices and faces.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHOPT_COMPACT']/*"/>	
            <unmanaged>D3DXMESHOPT_COMPACT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshOptimizeFlags.AttributeSort">
            <summary>	
            <para>Reorders faces to optimize for fewer attribute bundle state changes and enhanced <see cref="M:SharpDX.Direct3D9.BaseMesh.DrawSubset(System.Int32)"/> performance.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHOPT_ATTRSORT']/*"/>	
            <unmanaged>D3DXMESHOPT_ATTRSORT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshOptimizeFlags.VertexCache">
            <summary>	
            <para>Reorders faces to increase the cache hit rate of vertex caches.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHOPT_VERTEXCACHE']/*"/>	
            <unmanaged>D3DXMESHOPT_VERTEXCACHE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshOptimizeFlags.StripReorder">
            <summary>	
            <para>Reorders faces to maximize length of adjacent triangles.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHOPT_STRIPREORDER']/*"/>	
            <unmanaged>D3DXMESHOPT_STRIPREORDER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshOptimizeFlags.IgnoreVertices">
            <summary>	
            <para>Optimize the faces only; do not optimize the vertices.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHOPT_IGNOREVERTS']/*"/>	
            <unmanaged>D3DXMESHOPT_IGNOREVERTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshOptimizeFlags.DoNotSplit">
            <summary>	
            <para>While attribute sorting, do not split vertices that are shared between attribute groups.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHOPT_DONOTSPLIT']/*"/>	
            <unmanaged>D3DXMESHOPT_DONOTSPLIT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshOptimizeFlags.DeviceIndependent">
            <summary>	
            <para>Affects the vertex cache size. Using this flag specifies a default vertex cache size that works well on legacy hardware.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHOPT_DEVICEINDEPENDENT']/*"/>	
            <unmanaged>D3DXMESHOPT_DEVICEINDEPENDENT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.MeshSimplification">
            <summary>	
            Specifies simplification options for a mesh.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='_D3DXMESHSIMP']/*"/>	
            <unmanaged>_D3DXMESHSIMP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshSimplification.Vertex">
            <summary>	
            <para>The mesh will be simplified by the number of vertices specified in the MinValue parameter.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHSIMP_VERTEX']/*"/>	
            <unmanaged>D3DXMESHSIMP_VERTEX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshSimplification.Face">
            <summary>	
            <para>The mesh will be simplified by the number of faces specified in the MinValue parameter.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHSIMP_FACE']/*"/>	
            <unmanaged>D3DXMESHSIMP_FACE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.MultisampleType">
            <summary>	
            Defines the levels of full-scene multisampling that the device can apply.	
            </summary>	
            <remarks>	
            In addition to enabling full-scene multisampling at <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> time, there will be render states that turn various aspects on and off at fine-grained levels.Multisampling is valid only on a swap chain that is being created or reset with the <see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/> swap effect.The multisample antialiasing value can be set with the parameters (or sub-parameters) in the following methods.MethodParametersSub-parameters  <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultiSampleType_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType,System.Int32@)"/> MultiSampleType and pQualityLevels  <see cref="M:SharpDX.Direct3D9.Direct3D.CreateDevice(System.Int32,SharpDX.Direct3D9.DeviceType,System.IntPtr,SharpDX.Direct3D9.CreateFlags,SharpDX.Direct3D9.PresentParameters[],SharpDX.Direct3D9.Device)"/> pPresentationParametersMultiSampleType and pQualityLevels  <see cref="M:SharpDX.Direct3D9.Device.CreateAdditionalSwapChain(SharpDX.Direct3D9.PresentParameters@,SharpDX.Direct3D9.SwapChain)"/> pPresentationParametersMultiSampleType and pQualityLevels  <see cref="M:SharpDX.Direct3D9.Device.CreateDepthStencilSurface(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr)"/> MultiSampleType and pQualityLevels  <see cref="M:SharpDX.Direct3D9.Device.CreateRenderTarget(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr)"/> MultiSampleType and pQualityLevels  <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> pPresentationParametersMultiSampleType and pQualityLevels?It is not good practice to switch from one multisample type to another to raise the quality of the antialiasing.D3DMULTISAMPLE_NONE enables swap effects other than discarding, locking, and so on.Whether the display device supports maskable multisampling (more than one sample for a multiple-sample render-target format plus antialias support) or just non-maskable multisampling (only antialias support), the driver for the device provides the number of quality levels for the <see cref="F:SharpDX.Direct3D9.MultisampleType.NonMaskable"/> multiple-sample type. Applications that just use multisampling for antialiasing purposes only need to query for the number of non-maskable multiple-sample quality levels that the driver supports.The quality levels supported by the device can be obtained with the pQualityLevels parameter of <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceMultiSampleType_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.MultisampleType,System.Int32@)"/>. Quality levels used by the application are set with the MultiSampleQuality parameter of <see cref="M:SharpDX.Direct3D9.Device.CreateDepthStencilSurface(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr)"/> and <see cref="M:SharpDX.Direct3D9.Device.CreateRenderTarget(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr)"/>.See <see cref="F:SharpDX.Direct3D9.RenderState.MultisampleMask"/> for discussion of maskable multisampling.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_TYPE']/*"/>	
            <unmanaged>D3DMULTISAMPLE_TYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.None">
            <summary>	
            <para>No level of full-scene multisampling is available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_NONE']/*"/>	
            <unmanaged>D3DMULTISAMPLE_NONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.NonMaskable">
            <summary>	
            <para>Enables the multisample quality value. See Remarks. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_NONMASKABLE']/*"/>	
            <unmanaged>D3DMULTISAMPLE_NONMASKABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.TwoSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_2_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_2_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.ThreeSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_3_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_3_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.FourSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_4_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_4_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.FiveSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_5_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_5_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.SixSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_6_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_6_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.SevenSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_7_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_7_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.EightSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_8_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_8_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.NineSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_9_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_9_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.TenSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_10_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_10_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.ElevenSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_11_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_11_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.TwelveSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_12_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_12_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.ThirteenSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_13_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_13_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.FourteenSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_14_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_14_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.FifteenSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_15_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_15_SAMPLES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MultisampleType.SixteenSamples">
            <summary>	
            <para>Level of full-scene multisampling available. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMULTISAMPLE_16_SAMPLES']/*"/>	
            <unmanaged>D3DMULTISAMPLE_16_SAMPLES</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.NormalMapFlags">
            <summary>	
            Normal maps generation constants.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_NORMALMAP']/*"/>	
            <unmanaged>D3DX_NORMALMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.NormalMapFlags.MirrorU">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_NORMALMAP_MIRROR_U']/*"/>	
            <unmanaged>D3DX_NORMALMAP_MIRROR_U</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.NormalMapFlags.MirrorV">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_NORMALMAP_MIRROR_V']/*"/>	
            <unmanaged>D3DX_NORMALMAP_MIRROR_V</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.NormalMapFlags.Mirror">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_NORMALMAP_MIRROR']/*"/>	
            <unmanaged>D3DX_NORMALMAP_MIRROR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.NormalMapFlags.InvertSign">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_NORMALMAP_INVERTSIGN']/*"/>	
            <unmanaged>D3DX_NORMALMAP_INVERTSIGN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.NormalMapFlags.ComputeOcclusion">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_NORMALMAP_COMPUTE_OCCLUSION']/*"/>	
            <unmanaged>D3DX_NORMALMAP_COMPUTE_OCCLUSION</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ParameterClass">
            <summary>	
            The type of object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_CLASS']/*"/>	
            <unmanaged>D3DXPARAMETER_CLASS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterClass.Scalar">
            <summary>	
            <para>Constant is a scalar.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPC_SCALAR']/*"/>	
            <unmanaged>D3DXPC_SCALAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterClass.Vector">
            <summary>	
            <para>Constant is a vector.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPC_VECTOR']/*"/>	
            <unmanaged>D3DXPC_VECTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterClass.MatrixRows">
            <summary>	
            <para>Constant is a row major matrix.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPC_MATRIX_ROWS']/*"/>	
            <unmanaged>D3DXPC_MATRIX_ROWS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterClass.MatrixColumns">
            <summary>	
            <para>Constant is a column major matrix.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPC_MATRIX_COLUMNS']/*"/>	
            <unmanaged>D3DXPC_MATRIX_COLUMNS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterClass.Object">
            <summary>	
            <para>Constant is either a texture, shader, or a string.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPC_OBJECT']/*"/>	
            <unmanaged>D3DXPC_OBJECT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterClass.Struct">
            <summary>	
            <para>Constant is a structure.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPC_STRUCT']/*"/>	
            <unmanaged>D3DXPC_STRUCT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ParameterFlags">
            <summary>	
            These flags provide additional information about effect parameters.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_PARAMETER']/*"/>	
            <unmanaged>D3DX_PARAMETER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterFlags.Shared">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_PARAMETER_SHARED']/*"/>	
            <unmanaged>D3DX_PARAMETER_SHARED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterFlags.Literal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_PARAMETER_LITERAL']/*"/>	
            <unmanaged>D3DX_PARAMETER_LITERAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterFlags.Annotation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_PARAMETER_ANNOTATION']/*"/>	
            <unmanaged>D3DX_PARAMETER_ANNOTATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ParameterType">
            <summary>	
            Describes the data contained by the enumeration.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_TYPE']/*"/>	
            <unmanaged>D3DXPARAMETER_TYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Void">
            <summary>	
            <para>Parameter is a void reference.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_VOID']/*"/>	
            <unmanaged>D3DXPT_VOID</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Bool">
            <summary>	
            <para>Parameter is a Boolean. Any non-zero value passed into <see cref="M:SharpDX.Direct3D9.ConstantTable.SetBool(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Boolean)"/>, <see cref="M:SharpDX.Direct3D9.ConstantTable.SetBoolArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Int32[],System.Int32)"/>, <see cref="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Boolean)"/>, <see cref="M:SharpDX.Direct3D9.ConstantTable.SetVector(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4)"/>, or <see cref="M:SharpDX.Direct3D9.ConstantTable.SetVectorArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4[],System.Int32)"/> will be mapped to 1 (TRUE) before being written into the constant table; otherwise, the value will be set to 0 in the constant table.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_BOOL']/*"/>	
            <unmanaged>D3DXPT_BOOL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Int">
            <summary>	
            <para>Parameter is an integer. Any floating-point values passed into <see cref="M:SharpDX.Direct3D9.ConstantTable.SetValue(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,System.Boolean)"/>, <see cref="M:SharpDX.Direct3D9.ConstantTable.SetVector(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4)"/>, or <see cref="M:SharpDX.Direct3D9.ConstantTable.SetVectorArray(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4[],System.Int32)"/> will be rounded off (to zero decimal places) before being written into the constant table.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_INT']/*"/>	
            <unmanaged>D3DXPT_INT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Float">
            <summary>	
            <para>Parameter is a floating-point number.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_FLOAT']/*"/>	
            <unmanaged>D3DXPT_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.String">
            <summary>	
            <para>Parameter is a string.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_STRING']/*"/>	
            <unmanaged>D3DXPT_STRING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Texture">
            <summary>	
            <para>Parameter is a texture.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_TEXTURE']/*"/>	
            <unmanaged>D3DXPT_TEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Texture1D">
            <summary>	
            <para>Parameter is a 1D texture.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_TEXTURE1D']/*"/>	
            <unmanaged>D3DXPT_TEXTURE1D</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Texture2D">
            <summary>	
            <para>Parameter is a 2D texture.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_TEXTURE2D']/*"/>	
            <unmanaged>D3DXPT_TEXTURE2D</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Texture3D">
            <summary>	
            <para>Parameter is a 3D texture.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_TEXTURE3D']/*"/>	
            <unmanaged>D3DXPT_TEXTURE3D</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.TextureCube">
            <summary>	
            <para>Parameter is a cube texture.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_TEXTURECUBE']/*"/>	
            <unmanaged>D3DXPT_TEXTURECUBE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Sampler">
            <summary>	
            <para>Parameter is a sampler.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_SAMPLER']/*"/>	
            <unmanaged>D3DXPT_SAMPLER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Sampler1D">
            <summary>	
            <para>Parameter is a 1D sampler.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_SAMPLER1D']/*"/>	
            <unmanaged>D3DXPT_SAMPLER1D</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Sampler2D">
            <summary>	
            <para>Parameter is a 2D sampler.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_SAMPLER2D']/*"/>	
            <unmanaged>D3DXPT_SAMPLER2D</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Sampler3D">
            <summary>	
            <para>Parameter is a 3D sampler.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_SAMPLER3D']/*"/>	
            <unmanaged>D3DXPT_SAMPLER3D</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.SamplerCube">
            <summary>	
            <para>Parameter is a cube sampler.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_SAMPLERCUBE']/*"/>	
            <unmanaged>D3DXPT_SAMPLERCUBE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.PixelShader">
            <summary>	
            <para>Parameter is a pixel shader.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_PIXELSHADER']/*"/>	
            <unmanaged>D3DXPT_PIXELSHADER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.VertexShader">
            <summary>	
            <para>Parameter is a vertex shader.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_VERTEXSHADER']/*"/>	
            <unmanaged>D3DXPT_VERTEXSHADER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.PixelFragment">
            <summary>	
            <para>Parameter is a pixel shader fragment.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_PIXELFRAGMENT']/*"/>	
            <unmanaged>D3DXPT_PIXELFRAGMENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.VertexFragment">
            <summary>	
            <para>Parameter is a vertex shader fragment.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_VERTEXFRAGMENT']/*"/>	
            <unmanaged>D3DXPT_VERTEXFRAGMENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterType.Unsupported">
            <summary>	
            <para>Parameter is not supported.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPT_UNSUPPORTED']/*"/>	
            <unmanaged>D3DXPT_UNSUPPORTED</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PatchEdgeStyle">
            <summary>	
            Defines whether the current tessellation mode is discrete or continuous.	
            </summary>	
            <remarks>	
            Note that continuous tessellation produces a completely different tessellation pattern from the discrete one for the same tessellation values (this is more apparent in wireframe mode). Thus, 4.0 continuous is not the same as 4 discrete.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPATCHEDGESTYLE']/*"/>	
            <unmanaged>D3DPATCHEDGESTYLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PatchEdgeStyle.Discrete">
            <summary>	
            <para>Discrete edge style. In discrete mode, you can specify float tessellation but it will be truncated to integers. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPATCHEDGE_DISCRETE']/*"/>	
            <unmanaged>D3DPATCHEDGE_DISCRETE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PatchEdgeStyle.Continuous">
            <summary>	
            <para>Continuous edge style. In continuous mode, tessellation is specified as float values that can be smoothly varied to reduce "popping" artifacts. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPATCHEDGE_CONTINUOUS']/*"/>	
            <unmanaged>D3DPATCHEDGE_CONTINUOUS</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PatchMeshType">
            <summary>	
            Mesh patch types.	
            </summary>	
            <remarks>	
            Triangle patches have three sides and are described in <see cref="T:SharpDX.Direct3D9.TrianglePatchInfo"/>. Rectangle patches are four-sided and are described in <see cref="T:SharpDX.Direct3D9.RectanglePatchInfo"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPATCHMESHTYPE']/*"/>	
            <unmanaged>D3DXPATCHMESHTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PatchMeshType.Rectangle">
            <summary>	
            <para>Rectangle patch mesh type.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPATCHMESH_RECT']/*"/>	
            <unmanaged>D3DXPATCHMESH_RECT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PatchMeshType.Triangle">
            <summary>	
            <para>Triangle patch mesh type.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPATCHMESH_TRI']/*"/>	
            <unmanaged>D3DXPATCHMESH_TRI</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PatchMeshType.NPatch">
            <summary>	
            <para>N-patch mesh type.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPATCHMESH_NPATCH']/*"/>	
            <unmanaged>D3DXPATCHMESH_NPATCH</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PixelShaderCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPS20CAPS']/*"/>	
            <unmanaged>D3DPS20CAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShaderCaps.ArbitrarySwizzle">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPS20CAPS_ARBITRARYSWIZZLE']/*"/>	
            <unmanaged>D3DPS20CAPS_ARBITRARYSWIZZLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShaderCaps.GradientInstructions">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPS20CAPS_GRADIENTINSTRUCTIONS']/*"/>	
            <unmanaged>D3DPS20CAPS_GRADIENTINSTRUCTIONS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShaderCaps.Predication">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPS20CAPS_PREDICATION']/*"/>	
            <unmanaged>D3DPS20CAPS_PREDICATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShaderCaps.NoDependentReadLimit">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPS20CAPS_NODEPENDENTREADLIMIT']/*"/>	
            <unmanaged>D3DPS20CAPS_NODEPENDENTREADLIMIT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShaderCaps.NoTextureInstructionLimit">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT']/*"/>	
            <unmanaged>D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShaderCaps.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PlaybackType">
            <summary>	
            Defines the type of animation set looping modes used for playback.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPLAYBACK_TYPE']/*"/>	
            <unmanaged>D3DXPLAYBACK_TYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PlaybackType.Loop">
            <summary>	
            <para>The animation repeats endlessly.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPLAY_LOOP']/*"/>	
            <unmanaged>D3DXPLAY_LOOP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PlaybackType.Once">
            <summary>	
            <para>The animation plays once, and then it stops on the last frame.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPLAY_ONCE']/*"/>	
            <unmanaged>D3DXPLAY_ONCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PlaybackType.PingPong">
            <summary>	
            <para>The animation alternates endlessly between playing forward and playing backward.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPLAY_PINGPONG']/*"/>	
            <unmanaged>D3DXPLAY_PINGPONG</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Pool">
            <summary>	
            Defines the memory class that holds the buffers for a resource.	
            </summary>	
            <remarks>	
            All pool types are valid with all resources including: vertex buffers, index buffers, textures, and surfaces.The following tables indicate restrictions on pool types for render targets, depth stencils, and dynamic and mipmap usages. An x indicates a compatible combination; lack of an x indicates incompatibility.PoolD3DUSAGE_RENDERTARGETD3DUSAGE_DEPTHSTENCIL D3DPOOL_DEFAULTxx <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> <see cref="F:SharpDX.Direct3D9.Pool.Scratch"/> <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/>?PoolD3DUSAGE_DYNAMICD3DUSAGE_AUTOGENMIPMAP D3DPOOL_DEFAULTxx D3DPOOL_MANAGEDx <see cref="F:SharpDX.Direct3D9.Pool.Scratch"/> D3DPOOL_SYSTEMMEMx?For more information about usage types, see <see cref="T:SharpDX.Direct3D9.Usage"/>.Pools cannot be mixed for different objects contained within one resource (mip levels in a mipmap) and, when a pool is chosen, it cannot be changed.Applications should use <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> for most static resources because this saves the application from having to deal with lost devices. (Managed resources are restored by the runtime.) This is especially beneficial for unified memory architecture (UMA) systems. Other dynamic resources are not a good match for <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>. In fact, index buffers and vertex buffers cannot be created using <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> together with <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/>.For dynamic textures, it is sometimes desirable to use a pair of video memory and system memory textures, allocating the video memory using <see cref="F:SharpDX.Direct3D9.Pool.Default"/> and the system memory using <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/>. You can lock and modify the bits of the system memory texture using a locking method. Then you can update the video memory texture using <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPOOL']/*"/>	
            <unmanaged>D3DPOOL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Pool.Default">
            <summary>	
            <para>Resources are placed in the memory pool most appropriate for the set of usages requested for the given resource. This is usually video memory, including both local video memory and AGP memory. The <see cref="F:SharpDX.Direct3D9.Pool.Default"/> pool is separate from <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> and <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/>, and it specifies that the resource is placed in the preferred memory for device access. Note that <see cref="F:SharpDX.Direct3D9.Pool.Default"/> never indicates that either <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> or <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/> should be chosen as the memory pool type for this resource. Textures placed in the <see cref="F:SharpDX.Direct3D9.Pool.Default"/> pool cannot be locked unless they are dynamic textures or they are private, FOURCC, driver formats. To access unlockable textures, you must use functions such as <see cref="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/>, <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/>, <see cref="M:SharpDX.Direct3D9.Device.GetFrontBufferData(System.Int32)"/>, and <see cref="M:SharpDX.Direct3D9.Device.GetRenderTargetData(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/>. <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> is probably a better choice than <see cref="F:SharpDX.Direct3D9.Pool.Default"/> for most applications. Note that some textures created in driver-proprietary pixel formats, unknown to the Direct3D runtime, can be locked. Also note that - unlike textures - swap chain back buffers, render targets, vertex buffers, and index buffers can be locked. When a device is lost, resources created using <see cref="F:SharpDX.Direct3D9.Pool.Default"/> must be released before calling <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>. For more information, see Lost Devices (Direct3D 9). </para>	
             <para>When creating resources with <see cref="F:SharpDX.Direct3D9.Pool.Default"/>, if video card memory is already committed, managed resources will be evicted to free enough memory to satisfy the request.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPOOL_DEFAULT']/*"/>	
            <unmanaged>D3DPOOL_DEFAULT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Pool.Managed">
            <summary>	
            <para>Resources are copied automatically to device-accessible memory as needed. Managed resources are backed by system memory and do not need to be recreated when a device is lost. See Managing Resources (Direct3D 9) for more information. Managed resources can be locked. Only the system-memory copy is directly modified. Direct3D copies your changes to driver-accessible memory as needed. </para>	
               <para>Differences between Direct3D 9 and Direct3D 9Ex:</para>	
             <para><see cref="F:SharpDX.Direct3D9.Pool.Managed"/> is valid with <see cref="T:SharpDX.Direct3D9.Device"/>; however, it is not valid with <see cref="T:SharpDX.Direct3D9.DeviceEx"/>.</para>	
               <para>?</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPOOL_MANAGED']/*"/>	
            <unmanaged>D3DPOOL_MANAGED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Pool.SystemMemory">
            <summary>	
            <para>Resources are placed in memory that is not typically accessible by the Direct3D device. This memory allocation consumes system RAM but does not reduce pageable RAM. These resources do not need to be recreated when a device is lost. Resources in this pool can be locked and can be used as the source for a <see cref="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/> or <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/> operation to a memory resource created with <see cref="F:SharpDX.Direct3D9.Pool.Default"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPOOL_SYSTEMMEM']/*"/>	
            <unmanaged>D3DPOOL_SYSTEMMEM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Pool.Scratch">
            <summary>	
            <para>Resources are placed in system RAM and do not need to be recreated when a device is lost.  These resources are not bound by device size or format restrictions.  Because of this, these resources cannot be accessed by the Direct3D device nor set as textures or render targets. However, these resources can always be created, locked, and copied.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPOOL_SCRATCH']/*"/>	
            <unmanaged>D3DPOOL_SCRATCH</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Present">
            <summary>	
            Describes the relationship between the adapter refresh rate and the rate at which Present or Present operations are completed.  These values also serve as flag values for the PresentationIntervals field of <see cref="T:SharpDX.Direct3D9.Capabilities"/>.	
            </summary>	
            <remarks>	
            Windowed mode supports <see cref="F:SharpDX.Direct3D9.PresentInterval.Default"/>, <see cref="F:SharpDX.Direct3D9.PresentInterval.Immediate"/>, and <see cref="F:SharpDX.Direct3D9.PresentInterval.One"/>. <see cref="F:SharpDX.Direct3D9.PresentInterval.Default"/> and the <see cref="F:SharpDX.Direct3D9.PresentInterval.One"/> are nearly equivalent (see  the information regarding timer resolution below). They perform similarly to COPY_VSYNC in that there is only one present per frame, and they prevent tearing with beam-following. In contrast, <see cref="F:SharpDX.Direct3D9.PresentInterval.Immediate"/> will attempt to provide an unlimited presentation rate.Full-screen mode supports similar usage as windowed mode by supporting <see cref="F:SharpDX.Direct3D9.PresentInterval.Immediate"/> regardless of the refresh rate or swap effect. <see cref="F:SharpDX.Direct3D9.PresentInterval.Default"/> uses the default system timer resolution whereas the <see cref="F:SharpDX.Direct3D9.PresentInterval.One"/> calls timeBeginPeriod to enhance system timer resolution. This improves the quality of vertical sync, but consumes slightly more processing time. Both parameters attempt to synchronize vertically.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT']/*"/>	
            <unmanaged>D3DPRESENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.BackBuffersMaximum">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_BACK_BUFFERS_MAX']/*"/>	
            <unmanaged>D3DPRESENT_BACK_BUFFERS_MAX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.BackBuffersMaximumEx">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_BACK_BUFFERS_MAX_EX']/*"/>	
            <unmanaged>D3DPRESENT_BACK_BUFFERS_MAX_EX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.DoNotWait">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_DONOTWAIT']/*"/>	
            <unmanaged>D3DPRESENT_DONOTWAIT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.LinearContent">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_LINEAR_CONTENT']/*"/>	
            <unmanaged>D3DPRESENT_LINEAR_CONTENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.DoNotFlip">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_DONOTFLIP']/*"/>	
            <unmanaged>D3DPRESENT_DONOTFLIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.FlipRestart">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_FLIPRESTART']/*"/>	
            <unmanaged>D3DPRESENT_FLIPRESTART</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.VideoRestrictToMonitor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR']/*"/>	
            <unmanaged>D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.UpdateOverlayOnly">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_UPDATEOVERLAYONLY']/*"/>	
            <unmanaged>D3DPRESENT_UPDATEOVERLAYONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.HideOverlay">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_HIDEOVERLAY']/*"/>	
            <unmanaged>D3DPRESENT_HIDEOVERLAY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.UpdateColorKey">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_UPDATECOLORKEY']/*"/>	
            <unmanaged>D3DPRESENT_UPDATECOLORKEY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.ForceImmediate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_FORCEIMMEDIATE']/*"/>	
            <unmanaged>D3DPRESENT_FORCEIMMEDIATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.RateDefault">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_RATE_DEFAULT']/*"/>	
            <unmanaged>D3DPRESENT_RATE_DEFAULT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Present.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PresentFlags">
            <summary>	
            Constants used by <see cref="T:SharpDX.Direct3D9.PresentParameters"/>.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG']/*"/>	
            <unmanaged>D3DPRESENTFLAG</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.LockableBackBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_LOCKABLE_BACKBUFFER']/*"/>	
            <unmanaged>D3DPRESENTFLAG_LOCKABLE_BACKBUFFER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.DiscardDepthStencil">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL']/*"/>	
            <unmanaged>D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.DeviceClip">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_DEVICECLIP']/*"/>	
            <unmanaged>D3DPRESENTFLAG_DEVICECLIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.Video">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_VIDEO']/*"/>	
            <unmanaged>D3DPRESENTFLAG_VIDEO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.NoAutoRotate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_NOAUTOROTATE']/*"/>	
            <unmanaged>D3DPRESENTFLAG_NOAUTOROTATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.UnprunedMode">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_UNPRUNEDMODE']/*"/>	
            <unmanaged>D3DPRESENTFLAG_UNPRUNEDMODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.OverlayLimitedRgb">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_OVERLAY_LIMITEDRGB']/*"/>	
            <unmanaged>D3DPRESENTFLAG_OVERLAY_LIMITEDRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.OverlayYCbCrBt709">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_OVERLAY_YCbCr_BT709']/*"/>	
            <unmanaged>D3DPRESENTFLAG_OVERLAY_YCbCr_BT709</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.OverlayYCbCrXvYCC">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC']/*"/>	
            <unmanaged>D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.RestrictedContent">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_RESTRICTED_CONTENT']/*"/>	
            <unmanaged>D3DPRESENTFLAG_RESTRICTED_CONTENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.RestrictSharedResourceDriver">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER']/*"/>	
            <unmanaged>D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PresentInterval">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_INTERVAL']/*"/>	
            <unmanaged>D3DPRESENT_INTERVAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentInterval.Default">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_INTERVAL_DEFAULT']/*"/>	
            <unmanaged>D3DPRESENT_INTERVAL_DEFAULT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentInterval.One">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_INTERVAL_ONE']/*"/>	
            <unmanaged>D3DPRESENT_INTERVAL_ONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentInterval.Two">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_INTERVAL_TWO']/*"/>	
            <unmanaged>D3DPRESENT_INTERVAL_TWO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentInterval.Three">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_INTERVAL_THREE']/*"/>	
            <unmanaged>D3DPRESENT_INTERVAL_THREE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentInterval.Four">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_INTERVAL_FOUR']/*"/>	
            <unmanaged>D3DPRESENT_INTERVAL_FOUR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentInterval.Immediate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_INTERVAL_IMMEDIATE']/*"/>	
            <unmanaged>D3DPRESENT_INTERVAL_IMMEDIATE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PrimitiveMiscCaps">
            <summary>	
            Miscellaneous driver primitive capability flags.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS']/*"/>	
            <unmanaged>D3DPMISCCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.MaskZ">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_MASKZ']/*"/>	
            <unmanaged>D3DPMISCCAPS_MASKZ</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.CullNone">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_CULLNONE']/*"/>	
            <unmanaged>D3DPMISCCAPS_CULLNONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.CullCW">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_CULLCW']/*"/>	
            <unmanaged>D3DPMISCCAPS_CULLCW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.CullCCW">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_CULLCCW']/*"/>	
            <unmanaged>D3DPMISCCAPS_CULLCCW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.ColorWriteEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_COLORWRITEENABLE']/*"/>	
            <unmanaged>D3DPMISCCAPS_COLORWRITEENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.ClipPlanesScaledPoints">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_CLIPPLANESCALEDPOINTS']/*"/>	
            <unmanaged>D3DPMISCCAPS_CLIPPLANESCALEDPOINTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.ClipTLVertices">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_CLIPTLVERTS']/*"/>	
            <unmanaged>D3DPMISCCAPS_CLIPTLVERTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.TssArgTemp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_TSSARGTEMP']/*"/>	
            <unmanaged>D3DPMISCCAPS_TSSARGTEMP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.BlendOperation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_BLENDOP']/*"/>	
            <unmanaged>D3DPMISCCAPS_BLENDOP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.NullReference">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_NULLREFERENCE']/*"/>	
            <unmanaged>D3DPMISCCAPS_NULLREFERENCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.IndependentWriteMasks">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_INDEPENDENTWRITEMASKS']/*"/>	
            <unmanaged>D3DPMISCCAPS_INDEPENDENTWRITEMASKS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.PerStageConstant">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_PERSTAGECONSTANT']/*"/>	
            <unmanaged>D3DPMISCCAPS_PERSTAGECONSTANT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.FogAndSpecularAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_FOGANDSPECULARALPHA']/*"/>	
            <unmanaged>D3DPMISCCAPS_FOGANDSPECULARALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.SeparateAlphaBlend">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_SEPARATEALPHABLEND']/*"/>	
            <unmanaged>D3DPMISCCAPS_SEPARATEALPHABLEND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.MrtIndependentBitDepths">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS']/*"/>	
            <unmanaged>D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.MrtPostPixelShaderBlending">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING']/*"/>	
            <unmanaged>D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.FogVertexClamped">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_FOGVERTEXCLAMPED']/*"/>	
            <unmanaged>D3DPMISCCAPS_FOGVERTEXCLAMPED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveMiscCaps.PostBlendSrgbConvert">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPMISCCAPS_POSTBLENDSRGBCONVERT']/*"/>	
            <unmanaged>D3DPMISCCAPS_POSTBLENDSRGBCONVERT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PrimitiveType">
            <summary>	
            Defines the primitives supported by Direct3D.	
            </summary>	
            <remarks>	
            Using Triangle Strips or Triangle Fans (Direct3D 9) is often more efficient than using triangle lists because fewer vertices are duplicated.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRIMITIVETYPE']/*"/>	
            <unmanaged>D3DPRIMITIVETYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveType.PointList">
            <summary>	
            <para>Renders the vertices as a collection of isolated points. This value is unsupported for indexed primitives.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPT_POINTLIST']/*"/>	
            <unmanaged>D3DPT_POINTLIST</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveType.LineList">
            <summary>	
            <para>Renders the vertices as a list of isolated straight line segments.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPT_LINELIST']/*"/>	
            <unmanaged>D3DPT_LINELIST</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveType.LineStrip">
            <summary>	
            <para>Renders the vertices as a single polyline.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPT_LINESTRIP']/*"/>	
            <unmanaged>D3DPT_LINESTRIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveType.TriangleList">
            <summary>	
            <para>Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. </para>	
             <para>Back-face culling is affected by the current winding-order render state.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPT_TRIANGLELIST']/*"/>	
            <unmanaged>D3DPT_TRIANGLELIST</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveType.TriangleStrip">
            <summary>	
            <para>Renders the vertices as a triangle strip. The backface-culling flag is automatically flipped on even-numbered triangles. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPT_TRIANGLESTRIP']/*"/>	
            <unmanaged>D3DPT_TRIANGLESTRIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PrimitiveType.TriangleFan">
            <summary>	
            <para>Renders the vertices as a triangle fan. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPT_TRIANGLEFAN']/*"/>	
            <unmanaged>D3DPT_TRIANGLEFAN</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.QueryType">
            <summary>	
            Identifies the query type. For information about queries, see Queries (Direct3D 9)	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE']/*"/>	
            <unmanaged>D3DQUERYTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.VCache">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_VCACHE']/*"/>	
            <unmanaged>D3DQUERYTYPE_VCACHE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.ResourceManager">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_RESOURCEMANAGER']/*"/>	
            <unmanaged>D3DQUERYTYPE_RESOURCEMANAGER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.VertexStats">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_VERTEXSTATS']/*"/>	
            <unmanaged>D3DQUERYTYPE_VERTEXSTATS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.Event">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_EVENT']/*"/>	
            <unmanaged>D3DQUERYTYPE_EVENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.Occlusion">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_OCCLUSION']/*"/>	
            <unmanaged>D3DQUERYTYPE_OCCLUSION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.Timestamp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_TIMESTAMP']/*"/>	
            <unmanaged>D3DQUERYTYPE_TIMESTAMP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.TimestampDisjoint">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_TIMESTAMPDISJOINT']/*"/>	
            <unmanaged>D3DQUERYTYPE_TIMESTAMPDISJOINT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.TimestampFreq">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_TIMESTAMPFREQ']/*"/>	
            <unmanaged>D3DQUERYTYPE_TIMESTAMPFREQ</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.PipelineTimings">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_PIPELINETIMINGS']/*"/>	
            <unmanaged>D3DQUERYTYPE_PIPELINETIMINGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.InterfaceTimings">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_INTERFACETIMINGS']/*"/>	
            <unmanaged>D3DQUERYTYPE_INTERFACETIMINGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.VertexTimings">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_VERTEXTIMINGS']/*"/>	
            <unmanaged>D3DQUERYTYPE_VERTEXTIMINGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.PixelTimings">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_PIXELTIMINGS']/*"/>	
            <unmanaged>D3DQUERYTYPE_PIXELTIMINGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.BandwidthTimings">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_BANDWIDTHTIMINGS']/*"/>	
            <unmanaged>D3DQUERYTYPE_BANDWIDTHTIMINGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.CacheUtilization">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_CACHEUTILIZATION']/*"/>	
            <unmanaged>D3DQUERYTYPE_CACHEUTILIZATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.QueryType.Memorypressure">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DQUERYTYPE_MEMORYPRESSURE']/*"/>	
            <unmanaged>D3DQUERYTYPE_MEMORYPRESSURE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.RasterCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS']/*"/>	
            <unmanaged>D3DPRASTERCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.Dither">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_DITHER']/*"/>	
            <unmanaged>D3DPRASTERCAPS_DITHER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.DepthTest">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_ZTEST']/*"/>	
            <unmanaged>D3DPRASTERCAPS_ZTEST</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.FogVertex">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_FOGVERTEX']/*"/>	
            <unmanaged>D3DPRASTERCAPS_FOGVERTEX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.FogTable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_FOGTABLE']/*"/>	
            <unmanaged>D3DPRASTERCAPS_FOGTABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.MipMapLodBias">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_MIPMAPLODBIAS']/*"/>	
            <unmanaged>D3DPRASTERCAPS_MIPMAPLODBIAS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.ZBufferLessHsr">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_ZBUFFERLESSHSR']/*"/>	
            <unmanaged>D3DPRASTERCAPS_ZBUFFERLESSHSR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.FogRange">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_FOGRANGE']/*"/>	
            <unmanaged>D3DPRASTERCAPS_FOGRANGE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.Anisotropy">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_ANISOTROPY']/*"/>	
            <unmanaged>D3DPRASTERCAPS_ANISOTROPY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.WBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_WBUFFER']/*"/>	
            <unmanaged>D3DPRASTERCAPS_WBUFFER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.WFog">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_WFOG']/*"/>	
            <unmanaged>D3DPRASTERCAPS_WFOG</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.ZFog">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_ZFOG']/*"/>	
            <unmanaged>D3DPRASTERCAPS_ZFOG</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.ColorPerspective">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_COLORPERSPECTIVE']/*"/>	
            <unmanaged>D3DPRASTERCAPS_COLORPERSPECTIVE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.ScissorTest">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_SCISSORTEST']/*"/>	
            <unmanaged>D3DPRASTERCAPS_SCISSORTEST</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.SlopeScaleDepthBias">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS']/*"/>	
            <unmanaged>D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.DepthBias">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_DEPTHBIAS']/*"/>	
            <unmanaged>D3DPRASTERCAPS_DEPTHBIAS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterCaps.MultisampleToggle">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRASTERCAPS_MULTISAMPLE_TOGGLE']/*"/>	
            <unmanaged>D3DPRASTERCAPS_MULTISAMPLE_TOGGLE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.RegisterSet">
            <summary>	
            Data type of the register.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXREGISTER_SET']/*"/>	
            <unmanaged>D3DXREGISTER_SET</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RegisterSet.Bool">
            <summary>	
            <para>Boolean value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRS_BOOL']/*"/>	
            <unmanaged>D3DXRS_BOOL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RegisterSet.Int4">
            <summary>	
            <para>4D integer number.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRS_INT4']/*"/>	
            <unmanaged>D3DXRS_INT4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RegisterSet.Float4">
            <summary>	
            <para>4D floating-point number.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRS_FLOAT4']/*"/>	
            <unmanaged>D3DXRS_FLOAT4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RegisterSet.Sampler">
            <summary>	
            <para>The register contains 4D sampler data.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRS_SAMPLER']/*"/>	
            <unmanaged>D3DXRS_SAMPLER</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.RenderState">
            <summary>	
            The <see cref="T:SharpDX.Direct3D9.RenderState"/> enumerated type lists a variety of attributes, or render states. The enumerators of <see cref="T:SharpDX.Direct3D9.RenderState"/> that are used exclusively by drivers can specify either rendering information or a texture attribute. The following render states are used by display drivers:	
            </summary>	
            <remarks>	
            The driver uses these render states when it performs graphics rendering. Only render states that are specific to drivers are included in the Windows Driver Kit (WDK) documentation. The render states accessible to DirectX applications are included in the DirectX SDK documentation. These application-level render states include such characteristics as whether alpha blending is enabled, whether dithering is enabled, whether Direct3D lighting is used, and the type of shading to be used.To update a particular render state, Direct3D stores information about the render state, and then calls the driver's D3dDrawPrimitives2 callback routine. The information provided to the driver enables it to:<para>Determine that it should update one or more render states.</para>	
               <para>Identify which render states to update, and what the new render state values should be.</para>Note that for certain render states to be honored, the driver must have previously set capability flags in the relevant member of the D3DPRIMCAPS structure.In order to indicate a specific render state update, Direct3D inserts a D3DHAL_DP2COMMAND structure into the command buffer, setting the bCommand member of this structure to D3DDP2OP_RENDERSTATE (see the description for D3DDP2OP_RENDERSTATE in D3DHAL_DP2OPERATION), and setting the wStateCount member of the same structure to the number of render states to be updated.Immediately following the D3DHAL_DP2COMMAND structure, Direct3D inserts one D3DHAL_DP2RENDERSTATE structure into the command buffer for each render state to be updated. The RenderState member of this structure identifies the render state to be changed; the new value of this render state is specified in either the dwState member (for DWORD values) or the fState member (for D3DVALUE values).The following figure shows a portion of the command buffer containing a D3DDP2OP_RENDERSTATE command and two D3DHAL_DP2RENDERSTATE structures. The first of the three structures indicates that two render states are to be updated. The second structure indicates that the D3DRENDERSTATE_FILLMODE render state is to be changed to <see cref="F:SharpDX.Direct3D9.FillMode.Solid"/>. The third structure indicates that the D3DRENDERSTATE_SHADEMODE render state should be updated to <see cref="F:SharpDX.Direct3D9.ShadeMode.Gouraud"/>.Additional NotesSee the <see cref="T:SharpDX.Direct3D9.TextureStage"/>, <see cref="T:SharpDX.Direct3D9.TextureOperation"/>, and D3DTEXTUREFILTER enumerated types in the DirectX SDK documentation for complete listings of all of the enabled render state types.Some changes have been made to the <see cref="T:SharpDX.Direct3D9.RenderState"/> enumerated type for DirectX 5.0 and beyond. D3DRENDERSTATE_BLENDENABLE has been removed completely although it is defined as D3DRENDERSTATE_ALPHABLENDENABLE in the d3dtypes.h header file. See D3DRENDERSTATE_COLORKEYENABLE for an explanation. The 128 integer values in the interval [128, 255] are reserved for texture coordinate wrap flags. These are constructed with the D3DWRAP_U and D3DWRAP_V macros. Using a flags word preserves forward compatibility with texture coordinates of higher dimension than 2D.Multitexture macro ops and D3DRENDERSTATE_TEXTUREFACTOR override all of the per-texture stage blending controls (COLOR{OP,ARG1,ARG2} &amp; ALPHA{OP,ARG1,ARG2}).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRENDERSTATETYPE']/*"/>	
            <unmanaged>D3DRENDERSTATETYPE</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "F:SharpDX.Direct3D9.RenderState.ZEnable" -->
        <!-- Badly formed XML comment ignored for member "F:SharpDX.Direct3D9.RenderState.FillMode" -->
        <!-- Badly formed XML comment ignored for member "F:SharpDX.Direct3D9.RenderState.ShadeMode" -->
        <!-- Badly formed XML comment ignored for member "F:SharpDX.Direct3D9.RenderState.ZWriteEnable" -->
        <!-- Badly formed XML comment ignored for member "F:SharpDX.Direct3D9.RenderState.AlphaTestEnable" -->
        <member name="F:SharpDX.Direct3D9.RenderState.LastPixel">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_LASTPIXEL']/*"/>	
            <unmanaged>D3DRS_LASTPIXEL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.SourceBlend">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_SRCBLEND']/*"/>	
            <unmanaged>D3DRS_SRCBLEND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.DestinationBlend">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_DESTBLEND']/*"/>	
            <unmanaged>D3DRS_DESTBLEND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.CullMode">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_CULLMODE']/*"/>	
            <unmanaged>D3DRS_CULLMODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.ZFunc">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ZFUNC']/*"/>	
            <unmanaged>D3DRS_ZFUNC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.AlphaRef">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ALPHAREF']/*"/>	
            <unmanaged>D3DRS_ALPHAREF</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.AlphaFunc">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ALPHAFUNC']/*"/>	
            <unmanaged>D3DRS_ALPHAFUNC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.DitherEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_DITHERENABLE']/*"/>	
            <unmanaged>D3DRS_DITHERENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.AlphaBlendEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ALPHABLENDENABLE']/*"/>	
            <unmanaged>D3DRS_ALPHABLENDENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.FogEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_FOGENABLE']/*"/>	
            <unmanaged>D3DRS_FOGENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.SpecularEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_SPECULARENABLE']/*"/>	
            <unmanaged>D3DRS_SPECULARENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.FogColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_FOGCOLOR']/*"/>	
            <unmanaged>D3DRS_FOGCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.FogTableMode">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_FOGTABLEMODE']/*"/>	
            <unmanaged>D3DRS_FOGTABLEMODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.FogStart">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_FOGSTART']/*"/>	
            <unmanaged>D3DRS_FOGSTART</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.FogEnd">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_FOGEND']/*"/>	
            <unmanaged>D3DRS_FOGEND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.FogDensity">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_FOGDENSITY']/*"/>	
            <unmanaged>D3DRS_FOGDENSITY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.RangeFogEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_RANGEFOGENABLE']/*"/>	
            <unmanaged>D3DRS_RANGEFOGENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.StencilEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_STENCILENABLE']/*"/>	
            <unmanaged>D3DRS_STENCILENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.StencilFail">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_STENCILFAIL']/*"/>	
            <unmanaged>D3DRS_STENCILFAIL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.StencilZFail">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_STENCILZFAIL']/*"/>	
            <unmanaged>D3DRS_STENCILZFAIL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.StencilPass">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_STENCILPASS']/*"/>	
            <unmanaged>D3DRS_STENCILPASS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.StencilFunc">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_STENCILFUNC']/*"/>	
            <unmanaged>D3DRS_STENCILFUNC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.StencilRef">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_STENCILREF']/*"/>	
            <unmanaged>D3DRS_STENCILREF</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.StencilMask">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_STENCILMASK']/*"/>	
            <unmanaged>D3DRS_STENCILMASK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.StencilWriteMask">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_STENCILWRITEMASK']/*"/>	
            <unmanaged>D3DRS_STENCILWRITEMASK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.TextureFactor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_TEXTUREFACTOR']/*"/>	
            <unmanaged>D3DRS_TEXTUREFACTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP0']/*"/>	
            <unmanaged>D3DRS_WRAP0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP1']/*"/>	
            <unmanaged>D3DRS_WRAP1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP2']/*"/>	
            <unmanaged>D3DRS_WRAP2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP3']/*"/>	
            <unmanaged>D3DRS_WRAP3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP4']/*"/>	
            <unmanaged>D3DRS_WRAP4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP5']/*"/>	
            <unmanaged>D3DRS_WRAP5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap6">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP6']/*"/>	
            <unmanaged>D3DRS_WRAP6</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap7">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP7']/*"/>	
            <unmanaged>D3DRS_WRAP7</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Clipping">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_CLIPPING']/*"/>	
            <unmanaged>D3DRS_CLIPPING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Lighting">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_LIGHTING']/*"/>	
            <unmanaged>D3DRS_LIGHTING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Ambient">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_AMBIENT']/*"/>	
            <unmanaged>D3DRS_AMBIENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.FogVertexMode">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_FOGVERTEXMODE']/*"/>	
            <unmanaged>D3DRS_FOGVERTEXMODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.ColorVertex">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_COLORVERTEX']/*"/>	
            <unmanaged>D3DRS_COLORVERTEX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.LocalViewer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_LOCALVIEWER']/*"/>	
            <unmanaged>D3DRS_LOCALVIEWER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.NormalizeNormals">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_NORMALIZENORMALS']/*"/>	
            <unmanaged>D3DRS_NORMALIZENORMALS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.DiffuseMaterialSource">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_DIFFUSEMATERIALSOURCE']/*"/>	
            <unmanaged>D3DRS_DIFFUSEMATERIALSOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.SpecularMaterialSource">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_SPECULARMATERIALSOURCE']/*"/>	
            <unmanaged>D3DRS_SPECULARMATERIALSOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.AmbientMaterialSource">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_AMBIENTMATERIALSOURCE']/*"/>	
            <unmanaged>D3DRS_AMBIENTMATERIALSOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.EmissiveMaterialSource">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_EMISSIVEMATERIALSOURCE']/*"/>	
            <unmanaged>D3DRS_EMISSIVEMATERIALSOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.VertexBlend">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_VERTEXBLEND']/*"/>	
            <unmanaged>D3DRS_VERTEXBLEND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.ClipPlaneEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_CLIPPLANEENABLE']/*"/>	
            <unmanaged>D3DRS_CLIPPLANEENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PointSize">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_POINTSIZE']/*"/>	
            <unmanaged>D3DRS_POINTSIZE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PointSizeMin">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_POINTSIZE_MIN']/*"/>	
            <unmanaged>D3DRS_POINTSIZE_MIN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PointSpriteEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_POINTSPRITEENABLE']/*"/>	
            <unmanaged>D3DRS_POINTSPRITEENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PointScaleEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_POINTSCALEENABLE']/*"/>	
            <unmanaged>D3DRS_POINTSCALEENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PointScaleA">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_POINTSCALE_A']/*"/>	
            <unmanaged>D3DRS_POINTSCALE_A</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PointScaleB">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_POINTSCALE_B']/*"/>	
            <unmanaged>D3DRS_POINTSCALE_B</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PointScaleC">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_POINTSCALE_C']/*"/>	
            <unmanaged>D3DRS_POINTSCALE_C</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.MultisampleAntialias">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_MULTISAMPLEANTIALIAS']/*"/>	
            <unmanaged>D3DRS_MULTISAMPLEANTIALIAS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.MultisampleMask">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_MULTISAMPLEMASK']/*"/>	
            <unmanaged>D3DRS_MULTISAMPLEMASK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PatchEdgeStyle">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_PATCHEDGESTYLE']/*"/>	
            <unmanaged>D3DRS_PATCHEDGESTYLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.DebugMonitorToken">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_DEBUGMONITORTOKEN']/*"/>	
            <unmanaged>D3DRS_DEBUGMONITORTOKEN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PointSizeMax">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_POINTSIZE_MAX']/*"/>	
            <unmanaged>D3DRS_POINTSIZE_MAX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.IndexedVertexBlendEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_INDEXEDVERTEXBLENDENABLE']/*"/>	
            <unmanaged>D3DRS_INDEXEDVERTEXBLENDENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.ColorWriteEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_COLORWRITEENABLE']/*"/>	
            <unmanaged>D3DRS_COLORWRITEENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.TweenFactor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_TWEENFACTOR']/*"/>	
            <unmanaged>D3DRS_TWEENFACTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.BlendOperation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_BLENDOP']/*"/>	
            <unmanaged>D3DRS_BLENDOP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.PositionDegree">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_POSITIONDEGREE']/*"/>	
            <unmanaged>D3DRS_POSITIONDEGREE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.NormalDegree">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_NORMALDEGREE']/*"/>	
            <unmanaged>D3DRS_NORMALDEGREE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.ScissorTestEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_SCISSORTESTENABLE']/*"/>	
            <unmanaged>D3DRS_SCISSORTESTENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.SlopeScaleDepthBias">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_SLOPESCALEDEPTHBIAS']/*"/>	
            <unmanaged>D3DRS_SLOPESCALEDEPTHBIAS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.AntialiasedLineEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ANTIALIASEDLINEENABLE']/*"/>	
            <unmanaged>D3DRS_ANTIALIASEDLINEENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.MinTessellationLevel">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_MINTESSELLATIONLEVEL']/*"/>	
            <unmanaged>D3DRS_MINTESSELLATIONLEVEL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.MaxTessellationLevel">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_MAXTESSELLATIONLEVEL']/*"/>	
            <unmanaged>D3DRS_MAXTESSELLATIONLEVEL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.AdaptiveTessX">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ADAPTIVETESS_X']/*"/>	
            <unmanaged>D3DRS_ADAPTIVETESS_X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.AdaptiveTessY">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ADAPTIVETESS_Y']/*"/>	
            <unmanaged>D3DRS_ADAPTIVETESS_Y</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.AdaptiveTessZ">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ADAPTIVETESS_Z']/*"/>	
            <unmanaged>D3DRS_ADAPTIVETESS_Z</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.AdaptiveTessW">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ADAPTIVETESS_W']/*"/>	
            <unmanaged>D3DRS_ADAPTIVETESS_W</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.EnableAdaptiveTessellation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_ENABLEADAPTIVETESSELLATION']/*"/>	
            <unmanaged>D3DRS_ENABLEADAPTIVETESSELLATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.TwoSidedStencilMode">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_TWOSIDEDSTENCILMODE']/*"/>	
            <unmanaged>D3DRS_TWOSIDEDSTENCILMODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.CcwStencilFail">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_CCW_STENCILFAIL']/*"/>	
            <unmanaged>D3DRS_CCW_STENCILFAIL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.CcwStencilZFail">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_CCW_STENCILZFAIL']/*"/>	
            <unmanaged>D3DRS_CCW_STENCILZFAIL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.CcwStencilPass">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_CCW_STENCILPASS']/*"/>	
            <unmanaged>D3DRS_CCW_STENCILPASS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.CcwStencilFunc">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_CCW_STENCILFUNC']/*"/>	
            <unmanaged>D3DRS_CCW_STENCILFUNC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.ColorWriteEnable1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_COLORWRITEENABLE1']/*"/>	
            <unmanaged>D3DRS_COLORWRITEENABLE1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.ColorWriteEnable2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_COLORWRITEENABLE2']/*"/>	
            <unmanaged>D3DRS_COLORWRITEENABLE2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.ColorWriteEnable3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_COLORWRITEENABLE3']/*"/>	
            <unmanaged>D3DRS_COLORWRITEENABLE3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.BlendFactor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_BLENDFACTOR']/*"/>	
            <unmanaged>D3DRS_BLENDFACTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.SrgbWriteEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_SRGBWRITEENABLE']/*"/>	
            <unmanaged>D3DRS_SRGBWRITEENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.DepthBias">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_DEPTHBIAS']/*"/>	
            <unmanaged>D3DRS_DEPTHBIAS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP8']/*"/>	
            <unmanaged>D3DRS_WRAP8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap9">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP9']/*"/>	
            <unmanaged>D3DRS_WRAP9</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap10">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP10']/*"/>	
            <unmanaged>D3DRS_WRAP10</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap11">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP11']/*"/>	
            <unmanaged>D3DRS_WRAP11</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap12">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP12']/*"/>	
            <unmanaged>D3DRS_WRAP12</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap13">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP13']/*"/>	
            <unmanaged>D3DRS_WRAP13</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap14">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP14']/*"/>	
            <unmanaged>D3DRS_WRAP14</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.Wrap15">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_WRAP15']/*"/>	
            <unmanaged>D3DRS_WRAP15</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.SeparateAlphaBlendEnable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_SEPARATEALPHABLENDENABLE']/*"/>	
            <unmanaged>D3DRS_SEPARATEALPHABLENDENABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.SourceBlendAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_SRCBLENDALPHA']/*"/>	
            <unmanaged>D3DRS_SRCBLENDALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.DestinationBlendAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_DESTBLENDALPHA']/*"/>	
            <unmanaged>D3DRS_DESTBLENDALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderState.BlendOperationAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRS_BLENDOPALPHA']/*"/>	
            <unmanaged>D3DRS_BLENDOPALPHA</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ResourceResidency">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_RESOURCE_RESIDENCY']/*"/>	
            <unmanaged>D3DX_RESOURCE_RESIDENCY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceResidency.Resident">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_RESOURCE_RESIDENCY_RESIDENT']/*"/>	
            <unmanaged>D3DX_RESOURCE_RESIDENCY_RESIDENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceResidency.ResidentInSharedMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_RESOURCE_RESIDENCY_RESIDENT_IN_SHARED_MEMORY']/*"/>	
            <unmanaged>D3DX_RESOURCE_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceResidency.NotResident">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX_RESOURCE_RESIDENCY_NOT_RESIDENT']/*"/>	
            <unmanaged>D3DX_RESOURCE_RESIDENCY_NOT_RESIDENT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ResourceType">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCETYPE']/*"/>	
            <unmanaged>D3DRESOURCETYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceType.Surface">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRTYPE_SURFACE']/*"/>	
            <unmanaged>D3DRTYPE_SURFACE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceType.Volume">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRTYPE_VOLUME']/*"/>	
            <unmanaged>D3DRTYPE_VOLUME</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceType.Texture">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRTYPE_TEXTURE']/*"/>	
            <unmanaged>D3DRTYPE_TEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceType.VolumeTexture">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRTYPE_VOLUMETEXTURE']/*"/>	
            <unmanaged>D3DRTYPE_VOLUMETEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceType.CubeTexture">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRTYPE_CUBETEXTURE']/*"/>	
            <unmanaged>D3DRTYPE_CUBETEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceType.VertexBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRTYPE_VERTEXBUFFER']/*"/>	
            <unmanaged>D3DRTYPE_VERTEXBUFFER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceType.IndexBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRTYPE_INDEXBUFFER']/*"/>	
            <unmanaged>D3DRTYPE_INDEXBUFFER</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.SamplerState">
            <summary>	
            Sampler states define texture sampling operations such as texture addressing and texture filtering. Some sampler states set-up vertex processing, and some set-up pixel processing. Sampler states can be saved and restored using stateblocks (see State Blocks Save and Restore State (Direct3D 9)).	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMPLERSTATETYPE']/*"/>	
            <unmanaged>D3DSAMPLERSTATETYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.AddressU">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_ADDRESSU']/*"/>	
            <unmanaged>D3DSAMP_ADDRESSU</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.AddressV">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_ADDRESSV']/*"/>	
            <unmanaged>D3DSAMP_ADDRESSV</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.AddressW">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_ADDRESSW']/*"/>	
            <unmanaged>D3DSAMP_ADDRESSW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.BorderColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_BORDERCOLOR']/*"/>	
            <unmanaged>D3DSAMP_BORDERCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.MagFilter">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_MAGFILTER']/*"/>	
            <unmanaged>D3DSAMP_MAGFILTER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.MinFilter">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_MINFILTER']/*"/>	
            <unmanaged>D3DSAMP_MINFILTER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.MipFilter">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_MIPFILTER']/*"/>	
            <unmanaged>D3DSAMP_MIPFILTER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.MipMapLodBias">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_MIPMAPLODBIAS']/*"/>	
            <unmanaged>D3DSAMP_MIPMAPLODBIAS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.MaxMipLevel">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_MAXMIPLEVEL']/*"/>	
            <unmanaged>D3DSAMP_MAXMIPLEVEL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.MaxAnisotropy">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_MAXANISOTROPY']/*"/>	
            <unmanaged>D3DSAMP_MAXANISOTROPY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.SrgbTexture">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_SRGBTEXTURE']/*"/>	
            <unmanaged>D3DSAMP_SRGBTEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.ElementIndex">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_ELEMENTINDEX']/*"/>	
            <unmanaged>D3DSAMP_ELEMENTINDEX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerState.DisplacementMapOffset">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMP_DMAPOFFSET']/*"/>	
            <unmanaged>D3DSAMP_DMAPOFFSET</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.SamplerTextureType">
            <summary>	
            Defines the sampler texture types for vertex shaders.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSAMPLER_TEXTURE_TYPE']/*"/>	
            <unmanaged>D3DSAMPLER_TEXTURE_TYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerTextureType.Unknown">
            <summary>	
            <para>Uninitialized value. The value of this element is D3DSP_TEXTURETYPE_SHIFT.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTT_UNKNOWN']/*"/>	
            <unmanaged>D3DSTT_UNKNOWN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerTextureType.Texture2D">
            <summary>	
            <para>Declaring a 2D texture. The value of this element is D3DSP_TEXTURETYPE_SHIFT * 4.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTT_2D']/*"/>	
            <unmanaged>D3DSTT_2D</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerTextureType.Cube">
            <summary>	
            <para>Declaring a cube texture. The value of this element is D3DSP_TEXTURETYPE_SHIFT * 8.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTT_CUBE']/*"/>	
            <unmanaged>D3DSTT_CUBE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SamplerTextureType.Volume">
            <summary>	
            <para>Declaring a volume texture. The value of this element is D3DSP_TEXTURETYPE_SHIFT * 16.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTT_VOLUME']/*"/>	
            <unmanaged>D3DSTT_VOLUME</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ScanlineOrdering">
            <summary>	
            Flags indicating the method the rasterizer uses to create an image on a surface.	
            </summary>	
            <remarks>	
            This enumeration is used as a member in <see cref="T:SharpDX.Direct3D9.DisplayModeFilter"/> and <see cref="T:SharpDX.Direct3D9.DisplayModeEx"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSCANLINEORDERING']/*"/>	
            <unmanaged>D3DSCANLINEORDERING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ScanlineOrdering.Unknown">
            <summary>	
            <para>The image is created from the first scanline to the last without skipping any.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSCANLINEORDERING_UNKNOWN']/*"/>	
            <unmanaged>D3DSCANLINEORDERING_UNKNOWN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ScanlineOrdering.Progressive">
            <summary>	
            <para>The image is created using the interlaced method in which odd-numbered lines are drawn on odd-numbered passes and even lines are drawn on even-numbered passes.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSCANLINEORDERING_PROGRESSIVE']/*"/>	
            <unmanaged>D3DSCANLINEORDERING_PROGRESSIVE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ScanlineOrdering.Interlaced">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSCANLINEORDERING_INTERLACED']/*"/>	
            <unmanaged>D3DSCANLINEORDERING_INTERLACED</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ShadeCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADECAPS']/*"/>	
            <unmanaged>D3DPSHADECAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShadeCaps.ColorGouraudRgb">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADECAPS_COLORGOURAUDRGB']/*"/>	
            <unmanaged>D3DPSHADECAPS_COLORGOURAUDRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShadeCaps.SpecularGouraudRgb">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADECAPS_SPECULARGOURAUDRGB']/*"/>	
            <unmanaged>D3DPSHADECAPS_SPECULARGOURAUDRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShadeCaps.AlphaGouraudBlend">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADECAPS_ALPHAGOURAUDBLEND']/*"/>	
            <unmanaged>D3DPSHADECAPS_ALPHAGOURAUDBLEND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShadeCaps.FogGouraud">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADECAPS_FOGGOURAUD']/*"/>	
            <unmanaged>D3DPSHADECAPS_FOGGOURAUD</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ShadeMode">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSHADEMODE']/*"/>	
            <unmanaged>D3DSHADEMODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShadeMode.Flat">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSHADE_FLAT']/*"/>	
            <unmanaged>D3DSHADE_FLAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShadeMode.Gouraud">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSHADE_GOURAUD']/*"/>	
            <unmanaged>D3DSHADE_GOURAUD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShadeMode.Phong">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSHADE_PHONG']/*"/>	
            <unmanaged>D3DSHADE_PHONG</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ShaderFlags">
            <summary>	
            The following flags are used for parsing, compiling, or assembling shaders:	
            </summary>	
            <remarks>	
            Applying Compiler or Assembler to the incorrect API will fail shader validation. Check the Direct3D error code return value from the function (with the DirectX Error Lookup Tool) to help track down this error.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER']/*"/>	
            <unmanaged>D3DXSHADER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.Debug">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_DEBUG']/*"/>	
            <unmanaged>D3DXSHADER_DEBUG</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.SkipValidation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_SKIPVALIDATION']/*"/>	
            <unmanaged>D3DXSHADER_SKIPVALIDATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.SkipOptimization">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_SKIPOPTIMIZATION']/*"/>	
            <unmanaged>D3DXSHADER_SKIPOPTIMIZATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.PackMatrixRowMajor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_PACKMATRIX_ROWMAJOR']/*"/>	
            <unmanaged>D3DXSHADER_PACKMATRIX_ROWMAJOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.PackMatrixColumnMajor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_PACKMATRIX_COLUMNMAJOR']/*"/>	
            <unmanaged>D3DXSHADER_PACKMATRIX_COLUMNMAJOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.PartialPrecision">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_PARTIALPRECISION']/*"/>	
            <unmanaged>D3DXSHADER_PARTIALPRECISION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.ForceVSSoftwareNoOpt">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_FORCE_VS_SOFTWARE_NOOPT']/*"/>	
            <unmanaged>D3DXSHADER_FORCE_VS_SOFTWARE_NOOPT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.ForcePSSoftwareNoOpt">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_FORCE_PS_SOFTWARE_NOOPT']/*"/>	
            <unmanaged>D3DXSHADER_FORCE_PS_SOFTWARE_NOOPT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.NoPreshader">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_NO_PRESHADER']/*"/>	
            <unmanaged>D3DXSHADER_NO_PRESHADER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.AvoidFlowControl">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_AVOID_FLOW_CONTROL']/*"/>	
            <unmanaged>D3DXSHADER_AVOID_FLOW_CONTROL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.PreferFlowControl">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_PREFER_FLOW_CONTROL']/*"/>	
            <unmanaged>D3DXSHADER_PREFER_FLOW_CONTROL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.EnableBackwardsCompatibility">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_ENABLE_BACKWARDS_COMPATIBILITY']/*"/>	
            <unmanaged>D3DXSHADER_ENABLE_BACKWARDS_COMPATIBILITY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.IeeeStrictness">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_IEEE_STRICTNESS']/*"/>	
            <unmanaged>D3DXSHADER_IEEE_STRICTNESS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.UseLegacyD3DX9_31Dll">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_USE_LEGACY_D3DX9_31_DLL']/*"/>	
            <unmanaged>D3DXSHADER_USE_LEGACY_D3DX9_31_DLL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.OptimizationLevel0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_OPTIMIZATION_LEVEL0']/*"/>	
            <unmanaged>D3DXSHADER_OPTIMIZATION_LEVEL0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.OptimizationLevel1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_OPTIMIZATION_LEVEL1']/*"/>	
            <unmanaged>D3DXSHADER_OPTIMIZATION_LEVEL1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.OptimizationLevel2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_OPTIMIZATION_LEVEL2']/*"/>	
            <unmanaged>D3DXSHADER_OPTIMIZATION_LEVEL2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.OptimizationLevel3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_OPTIMIZATION_LEVEL3']/*"/>	
            <unmanaged>D3DXSHADER_OPTIMIZATION_LEVEL3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.SpriteFlags">
            <summary>	
            The following flags are used to specify sprite rendering options to the flags parameter in the Begin method:	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE']/*"/>	
            <unmanaged>D3DXSPRITE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.DoNotSaveState">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE_DONOTSAVESTATE']/*"/>	
            <unmanaged>D3DXSPRITE_DONOTSAVESTATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.DoNotModifyRenderState">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE_DONOTMODIFY_RENDERSTATE']/*"/>	
            <unmanaged>D3DXSPRITE_DONOTMODIFY_RENDERSTATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.ObjectSpace">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE_OBJECTSPACE']/*"/>	
            <unmanaged>D3DXSPRITE_OBJECTSPACE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.Billboard">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE_BILLBOARD']/*"/>	
            <unmanaged>D3DXSPRITE_BILLBOARD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.AlphaBlend">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE_ALPHABLEND']/*"/>	
            <unmanaged>D3DXSPRITE_ALPHABLEND</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.SortTexture">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE_SORT_TEXTURE']/*"/>	
            <unmanaged>D3DXSPRITE_SORT_TEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.SortDepthFrontToBack">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE_SORT_DEPTH_FRONTTOBACK']/*"/>	
            <unmanaged>D3DXSPRITE_SORT_DEPTH_FRONTTOBACK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.SortDepthBackToFront">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE_SORT_DEPTH_BACKTOFRONT']/*"/>	
            <unmanaged>D3DXSPRITE_SORT_DEPTH_BACKTOFRONT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.DoNotAddRefTexture">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSPRITE_DO_NOT_ADDREF_TEXTURE']/*"/>	
            <unmanaged>D3DXSPRITE_DO_NOT_ADDREF_TEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SpriteFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.StateBlockType">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTATEBLOCKTYPE']/*"/>	
            <unmanaged>D3DSTATEBLOCKTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StateBlockType.All">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSBT_ALL']/*"/>	
            <unmanaged>D3DSBT_ALL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StateBlockType.PixelState">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSBT_PIXELSTATE']/*"/>	
            <unmanaged>D3DSBT_PIXELSTATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StateBlockType.VertexState">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSBT_VERTEXSTATE']/*"/>	
            <unmanaged>D3DSBT_VERTEXSTATE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.StencilCaps">
            <summary>	
            Driver stencil capability flags.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS']/*"/>	
            <unmanaged>D3DSTENCILCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilCaps.Keep">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS_KEEP']/*"/>	
            <unmanaged>D3DSTENCILCAPS_KEEP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilCaps.Zero">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS_ZERO']/*"/>	
            <unmanaged>D3DSTENCILCAPS_ZERO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilCaps.Replace">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS_REPLACE']/*"/>	
            <unmanaged>D3DSTENCILCAPS_REPLACE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilCaps.IncrementClamp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS_INCRSAT']/*"/>	
            <unmanaged>D3DSTENCILCAPS_INCRSAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilCaps.DecrementClamp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS_DECRSAT']/*"/>	
            <unmanaged>D3DSTENCILCAPS_DECRSAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilCaps.Invert">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS_INVERT']/*"/>	
            <unmanaged>D3DSTENCILCAPS_INVERT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilCaps.Increment">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS_INCR']/*"/>	
            <unmanaged>D3DSTENCILCAPS_INCR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilCaps.Decrement">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS_DECR']/*"/>	
            <unmanaged>D3DSTENCILCAPS_DECR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilCaps.TwoSided">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILCAPS_TWOSIDED']/*"/>	
            <unmanaged>D3DSTENCILCAPS_TWOSIDED</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.StencilOperation">
            <summary>	
            Defines stencil-buffer operations.	
            </summary>	
            <remarks>	
            Stencil-buffer entries are integer values ranging from 0 through 2n - 1, where n is the bit depth of the stencil buffer.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILOP']/*"/>	
            <unmanaged>D3DSTENCILOP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilOperation.Keep">
            <summary>	
            <para>Do not update the entry in the stencil buffer. This is the default value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILOP_KEEP']/*"/>	
            <unmanaged>D3DSTENCILOP_KEEP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilOperation.Zero">
            <summary>	
            <para>Set the stencil-buffer entry to 0.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILOP_ZERO']/*"/>	
            <unmanaged>D3DSTENCILOP_ZERO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilOperation.Replace">
            <summary>	
            <para>Replace the stencil-buffer entry with a reference value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILOP_REPLACE']/*"/>	
            <unmanaged>D3DSTENCILOP_REPLACE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilOperation.IncrementSaturate">
            <summary>	
            <para>Increment the stencil-buffer entry, clamping to the maximum value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILOP_INCRSAT']/*"/>	
            <unmanaged>D3DSTENCILOP_INCRSAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilOperation.DecrementSaturate">
            <summary>	
            <para>Decrement the stencil-buffer entry, clamping to zero.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILOP_DECRSAT']/*"/>	
            <unmanaged>D3DSTENCILOP_DECRSAT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilOperation.Invert">
            <summary>	
            <para>Invert the bits in the stencil-buffer entry.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILOP_INVERT']/*"/>	
            <unmanaged>D3DSTENCILOP_INVERT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilOperation.Increment">
            <summary>	
            <para>Increment the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILOP_INCR']/*"/>	
            <unmanaged>D3DSTENCILOP_INCR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StencilOperation.Decrement">
            <summary>	
            <para>Decrement the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTENCILOP_DECR']/*"/>	
            <unmanaged>D3DSTENCILOP_DECR</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.StreamSource">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTREAMSOURCE']/*"/>	
            <unmanaged>D3DSTREAMSOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StreamSource.IndexedData">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTREAMSOURCE_INDEXEDDATA']/*"/>	
            <unmanaged>D3DSTREAMSOURCE_INDEXEDDATA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StreamSource.InstanceData">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSTREAMSOURCE_INSTANCEDATA']/*"/>	
            <unmanaged>D3DSTREAMSOURCE_INSTANCEDATA</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.SwapEffect">
            <summary>	
            Defines swap effects.	
            </summary>	
            <remarks>	
            The state of the back buffer after a call to Present is well-defined by each of these swap effects, and whether the Direct3D device was created with a full-screen swap chain or a windowed swap chain has no effect on this state. In particular, the <see cref="F:SharpDX.Direct3D9.SwapEffect.Flip"/> swap effect operates the same whether windowed or full-screen, and the Direct3D runtime guarantees this by creating extra buffers. As a result, it is recommended that applications use <see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/> whenever possible to avoid any such penalties. This is because this swap effect will always be the most efficient in terms of memory consumption and performance.Applications that use <see cref="F:SharpDX.Direct3D9.SwapEffect.Flip"/> or <see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/> should not expect full-screen destination alpha to work. This means that the <see cref="F:SharpDX.Direct3D9.RenderState.DestinationBlend"/> render state will not work as expected because full-screen swap chains with these swap effects do not have an explicit pixel format from the driver's point of view. The driver infers that they should take on the display format, which does not have an alpha channel. To work around this, take the following steps:Use <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/>. Check the <see cref="F:SharpDX.Direct3D9.Caps3.AlphaFullScreenFlipOrDiscard"/> flag in the Caps3 member of the <see cref="T:SharpDX.Direct3D9.Capabilities"/> structure. This flag indicates whether the driver can do alpha blending when <see cref="F:SharpDX.Direct3D9.SwapEffect.Flip"/> or <see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/> is used. Applications using flip mode swap effect (<see cref="F:SharpDX.Direct3D9.SwapEffect.FlipEx"/>) should call PresentEx after a window resize or region change to ensure that the display content is updated.An invisible window cannot receive user-mode events; furthermore, an invisible-fullscreen window will interfere with the presentation of another applications' windowed-mode window. Therefore, each application needs to ensure that a device window is visible when a swapchain is presented in fullscreen mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSWAPEFFECT']/*"/>	
            <unmanaged>D3DSWAPEFFECT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SwapEffect.Discard">
            <summary>	
            <para>When a swap chain is created with a swap effect of <see cref="F:SharpDX.Direct3D9.SwapEffect.Flip"/> or  <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/>, the runtime will guarantee that an <see cref="M:SharpDX.Direct3D9.Device.Present"/> operation will not affect the content of any of the back buffers. Unfortunately, meeting this guarantee can involve substantial video memory or processing overheads, especially when implementing flip semantics for a windowed swap chain or copy semantics for a full-screen swap chain. An application may use the <see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/> swap effect to avoid these overheads and to enable the display driver to select the most efficient presentation technique for the swap chain. This is also the only swap effect that may be used when specifying a value other than <see cref="F:SharpDX.Direct3D9.MultisampleType.None"/> for the MultiSampleType member of <see cref="T:SharpDX.Direct3D9.PresentParameters"/>.</para>	
             <para>Like a swap chain that uses <see cref="F:SharpDX.Direct3D9.SwapEffect.Flip"/>, a swap chain that uses <see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/> might include more than one back buffer, any of which may be accessed using <see cref="M:SharpDX.Direct3D9.Device.GetBackBuffer(System.Int32,System.Int32)"/> or <see cref="M:SharpDX.Direct3D9.SwapChain.GetBackBuffer(System.Int32,SharpDX.Direct3D9.BackBufferType)"/>. The swap chain is best envisaged as a queue in which 0 always indexes the back buffer that will be displayed by the next Present operation and from which buffers are discarded when they have been displayed.</para>	
             <para>An application that uses this swap effect cannot make any assumptions about the contents of a discarded back buffer and should therefore update an entire back buffer before invoking a Present operation that would display it. Although this is not enforced, the debug version of the runtime will overwrite the contents of discarded back buffers with random data to enable developers to verify that their applications are updating the entire back buffer surfaces correctly.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSWAPEFFECT_DISCARD']/*"/>	
            <unmanaged>D3DSWAPEFFECT_DISCARD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SwapEffect.Flip">
            <summary>	
            <para>The swap chain might include multiple back buffers and is best envisaged as a circular queue that includes the front buffer. Within this queue, the back buffers are always numbered sequentially from 0 to (n - 1), where n is the number of back buffers, so that 0 denotes the least recently presented buffer. When Present is invoked, the queue is "rotated" so that the front buffer becomes back buffer (n - 1), while the back buffer 0 becomes the new front buffer.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSWAPEFFECT_FLIP']/*"/>	
            <unmanaged>D3DSWAPEFFECT_FLIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SwapEffect.Copy">
            <summary>	
            <para>This swap effect may be specified only for a swap chain comprising a single back buffer. Whether the swap chain is windowed or full-screen, the runtime will guarantee the semantics implied by a copy-based Present operation, namely that the operation leaves the content of the back buffer unchanged, instead of replacing it with the content of the front buffer as a flip-based Present operation would. </para>	
             <para>For a full-screen swap chain, the runtime uses a combination of flip operations and copy operations, supported if necessary by hidden back buffers, to accomplish the Present operation. Accordingly, the presentation is synchronized with the display adapter's vertical retrace and its rate is constrained by the chosen presentation interval. A swap chain specified with the <see cref="F:SharpDX.Direct3D9.PresentInterval.Immediate"/> flag is the only exception. (Refer to the description of the PresentationIntervals member of the <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure.) In this case, a Present operation copies the back buffer content directly to the front buffer without waiting for the vertical retrace.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSWAPEFFECT_COPY']/*"/>	
            <unmanaged>D3DSWAPEFFECT_COPY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SwapEffect.Overlay">
            <summary>	
            <para>Use a dedicated area of video memory that can be overlayed on the primary surface. No copy is performed when the overlay is displayed.  The overlay operation is performed in hardware, without modifying the data in the primary surface.</para>	
               <para>Differences between Direct3D 9 and Direct3D 9Ex:</para>	
             <para><see cref="F:SharpDX.Direct3D9.SwapEffect.Overlay"/> is only available in Direct3D9Ex running on Windows 7 (or more current operating system).</para>	
               <para>?</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSWAPEFFECT_OVERLAY']/*"/>	
            <unmanaged>D3DSWAPEFFECT_OVERLAY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SwapEffect.FlipEx">
            <summary>	
            <para>Designates when an application is adopting flip mode, during which time an application's frame is passed instead of copied to the Desktop Window Manager(DWM) for composition when the application is presenting in windowed mode. Flip mode allows an application to more efficiently use memory bandwidth as well as enabling an application to take advantage of full-screen-present statistics. Flip mode does not affect full-screen behavior. A sample application that uses <see cref="F:SharpDX.Direct3D9.Present.ForceImmediate"/> and <see cref="F:SharpDX.Direct3D9.SwapEffect.FlipEx"/> is the D3D9ExFlipEx sample on the MSDN Code Gallery.</para>	
               <para>Differences between Direct3D 9 and Direct3D 9Ex:</para>	
             <para><see cref="F:SharpDX.Direct3D9.SwapEffect.FlipEx"/> is only available in Direct3D9Ex running on Windows 7 (or more current operating system).</para>	
               <para>?</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSWAPEFFECT_FLIPEX']/*"/>	
            <unmanaged>D3DSWAPEFFECT_FLIPEX</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TangentOptions">
            <summary>	
            Defines settings used for mesh tangent frame computations.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT']/*"/>	
            <unmanaged>D3DXTANGENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.WrapU">
            <summary>	
            <para>Texture coordinate values in the u direction are between 0 and 1. In this case a texture coordinate set will be chosen that minimizes the perimeter of the triangle. See Texture Wrapping (Direct3D 9).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_WRAP_U']/*"/>	
            <unmanaged>D3DXTANGENT_WRAP_U</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.WrapV">
            <summary>	
            <para>Texture coordinate values in the v direction are between 0 and 1. In this case a texture coordinate set will be chosen that minimizes the perimeter of the triangle. See Texture Wrapping (Direct3D 9).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_WRAP_V']/*"/>	
            <unmanaged>D3DXTANGENT_WRAP_V</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.WrapUV">
            <summary>	
            <para>Texture coordinate values in both u and v directions are between 0 and 1. In this case a texture coordinate set will be chosen that minimizes the perimeter of the triangle. See Texture Wrapping (Direct3D 9).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_WRAP_UV']/*"/>	
            <unmanaged>D3DXTANGENT_WRAP_UV</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.DontNormalizePartials">
            <summary>	
            <para>Do not normalize partial derivatives with respect to texture coordinates. If not normalized, the scale of the partial derivatives is proportional to the scale of the 3D model divided by the scale of the triangle in (u, v) space. This scale value provides a measure of how much the texture is stretched in a given direction. The resulting vector length is a weighted sum of the lengths of the partial derivatives.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_DONT_NORMALIZE_PARTIALS']/*"/>	
            <unmanaged>D3DXTANGENT_DONT_NORMALIZE_PARTIALS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.DontOrthogonalize">
            <summary>	
            <para>Do not transform texture coordinates to orthogonal Cartesian coordinates. Mutually exclusive with <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/> and <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_DONT_ORTHOGONALIZE']/*"/>	
            <unmanaged>D3DXTANGENT_DONT_ORTHOGONALIZE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV">
            <summary>	
            <para>Compute the partial derivative with respect to texture coordinate v independently for each vertex, and then compute the partial derivative with respect to u as the cross product of the partial derivative with respect to v and the normal vector. Mutually exclusive with <see cref="F:SharpDX.Direct3D9.TangentOptions.DontOrthogonalize"/> and <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_ORTHOGONALIZE_FROM_V']/*"/>	
            <unmanaged>D3DXTANGENT_ORTHOGONALIZE_FROM_V</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU">
            <summary>	
            <para>Compute the partial derivative with respect to texture coordinate u independently for each vertex, and then compute the partial derivative with respect to v as  the cross product of the normal vector and the partial derivative with respect to u. Mutually exclusive with <see cref="F:SharpDX.Direct3D9.TangentOptions.DontOrthogonalize"/> and <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_ORTHOGONALIZE_FROM_U']/*"/>	
            <unmanaged>D3DXTANGENT_ORTHOGONALIZE_FROM_U</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.WeightByArea">
            <summary>	
            <para>Weight the direction of the computed per-vertex normal or partial derivative vector according to the areas of triangles attached to that vertex. Mutually exclusive with <see cref="F:SharpDX.Direct3D9.TangentOptions.WeightEqual"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_WEIGHT_BY_AREA']/*"/>	
            <unmanaged>D3DXTANGENT_WEIGHT_BY_AREA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.WeightEqual">
            <summary>	
            <para>Compute a unit-length normal vector for each triangle of the input mesh. Mutually exclusive with <see cref="F:SharpDX.Direct3D9.TangentOptions.WeightByArea"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_WEIGHT_EQUAL']/*"/>	
            <unmanaged>D3DXTANGENT_WEIGHT_EQUAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.WindCW">
            <summary>	
            <para>Vertices are ordered in a clockwise direction around each triangle. The computed normal vector direction is therefore inverted 180 degrees from the direction computed using counterclockwise vertex ordering.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_WIND_CW']/*"/>	
            <unmanaged>D3DXTANGENT_WIND_CW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.CalculateNormals">
            <summary>	
            <para>Compute the per-vertex normal vector for each triangle of the input mesh, and ignore any normal vectors already in the input mesh.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_CALCULATE_NORMALS']/*"/>	
            <unmanaged>D3DXTANGENT_CALCULATE_NORMALS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.GenerateInPlace">
            <summary>	
            <para>The results are stored in the original input mesh, and the output mesh is not used.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTANGENT_GENERATE_IN_PLACE']/*"/>	
            <unmanaged>D3DXTANGENT_GENERATE_IN_PLACE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TangentOptions.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureAddress">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXTUREADDRESS']/*"/>	
            <unmanaged>D3DTEXTUREADDRESS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddress.Wrap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTADDRESS_WRAP']/*"/>	
            <unmanaged>D3DTADDRESS_WRAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddress.Mirror">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTADDRESS_MIRROR']/*"/>	
            <unmanaged>D3DTADDRESS_MIRROR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddress.Clamp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTADDRESS_CLAMP']/*"/>	
            <unmanaged>D3DTADDRESS_CLAMP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddress.Border">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTADDRESS_BORDER']/*"/>	
            <unmanaged>D3DTADDRESS_BORDER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddress.MirrorOnce">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTADDRESS_MIRRORONCE']/*"/>	
            <unmanaged>D3DTADDRESS_MIRRORONCE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureAddressCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTADDRESSCAPS']/*"/>	
            <unmanaged>D3DPTADDRESSCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddressCaps.Wrap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTADDRESSCAPS_WRAP']/*"/>	
            <unmanaged>D3DPTADDRESSCAPS_WRAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddressCaps.Mirror">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTADDRESSCAPS_MIRROR']/*"/>	
            <unmanaged>D3DPTADDRESSCAPS_MIRROR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddressCaps.Clamp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTADDRESSCAPS_CLAMP']/*"/>	
            <unmanaged>D3DPTADDRESSCAPS_CLAMP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddressCaps.Border">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTADDRESSCAPS_BORDER']/*"/>	
            <unmanaged>D3DPTADDRESSCAPS_BORDER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddressCaps.IndependentUV">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTADDRESSCAPS_INDEPENDENTUV']/*"/>	
            <unmanaged>D3DPTADDRESSCAPS_INDEPENDENTUV</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureAddressCaps.MirrorOnce">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTADDRESSCAPS_MIRRORONCE']/*"/>	
            <unmanaged>D3DPTADDRESSCAPS_MIRRORONCE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureArgument">
            <summary>	
            Texture argument constants are used as values for the following members of the <see cref="T:SharpDX.Direct3D9.TextureStage"/> enumerated type:	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA']/*"/>	
            <unmanaged>D3DTA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.SelectMask">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_SELECTMASK']/*"/>	
            <unmanaged>D3DTA_SELECTMASK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.Diffuse">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_DIFFUSE']/*"/>	
            <unmanaged>D3DTA_DIFFUSE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.Current">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_CURRENT']/*"/>	
            <unmanaged>D3DTA_CURRENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.Texture">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_TEXTURE']/*"/>	
            <unmanaged>D3DTA_TEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.TFactor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_TFACTOR']/*"/>	
            <unmanaged>D3DTA_TFACTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.Specular">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_SPECULAR']/*"/>	
            <unmanaged>D3DTA_SPECULAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.Temp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_TEMP']/*"/>	
            <unmanaged>D3DTA_TEMP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.Constant">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_CONSTANT']/*"/>	
            <unmanaged>D3DTA_CONSTANT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.Complement">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_COMPLEMENT']/*"/>	
            <unmanaged>D3DTA_COMPLEMENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureArgument.AlphaReplicate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTA_ALPHAREPLICATE']/*"/>	
            <unmanaged>D3DTA_ALPHAREPLICATE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS']/*"/>	
            <unmanaged>D3DPTEXTURECAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.Perspective">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_PERSPECTIVE']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_PERSPECTIVE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.Pow2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_POW2']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_POW2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.Alpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_ALPHA']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_ALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.SquareOnly">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_SQUAREONLY']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_SQUAREONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.TextureRepeatNotScaledBySize">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.AlphaPalette">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_ALPHAPALETTE']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_ALPHAPALETTE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.NonPow2Conditional">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_NONPOW2CONDITIONAL']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_NONPOW2CONDITIONAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.Projected">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_PROJECTED']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_PROJECTED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.CubeMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_CUBEMAP']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_CUBEMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.VolumeMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_VOLUMEMAP']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_VOLUMEMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.MipMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_MIPMAP']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_MIPMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.MipVolumeMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_MIPVOLUMEMAP']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_MIPVOLUMEMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.MipCubeMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_MIPCUBEMAP']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_MIPCUBEMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.CubeMapPow2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_CUBEMAP_POW2']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_CUBEMAP_POW2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.VolumeMapPow2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_VOLUMEMAP_POW2']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_VOLUMEMAP_POW2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCaps.NoProjectedBumpEnvironment">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPTEXTURECAPS_NOPROJECTEDBUMPENV']/*"/>	
            <unmanaged>D3DPTEXTURECAPS_NOPROJECTEDBUMPENV</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureCoordIndex">
            <summary>	
            Driver texture coordinate capability flags.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_TCI']/*"/>	
            <unmanaged>D3DTSS_TCI</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCoordIndex.PassThru">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_TCI_PASSTHRU']/*"/>	
            <unmanaged>D3DTSS_TCI_PASSTHRU</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCoordIndex.CameraSpaceNormal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_TCI_CAMERASPACENORMAL']/*"/>	
            <unmanaged>D3DTSS_TCI_CAMERASPACENORMAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCoordIndex.CameraSpacePosition">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_TCI_CAMERASPACEPOSITION']/*"/>	
            <unmanaged>D3DTSS_TCI_CAMERASPACEPOSITION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCoordIndex.CameraSpaceReflectionVector">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR']/*"/>	
            <unmanaged>D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureCoordIndex.SphereMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_TCI_SPHEREMAP']/*"/>	
            <unmanaged>D3DTSS_TCI_SPHEREMAP</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureFilter">
            <summary>	
            Defines texture filtering modes for a texture stage.	
            </summary>	
            <remarks>	
            D3DTEXTUREFILTERTYPE is used by <see cref="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,SharpDX.Direct3D9.TextureFilter)"/> along with <see cref="T:SharpDX.Direct3D9.SamplerState"/> to define texture filtering modes for a texture stage.To check if a format supports texture filter types other than <see cref="F:SharpDX.Direct3D9.TextureFilter.Point"/> (which is always supported), call <see cref="M:SharpDX.Direct3D9.Direct3D.CheckDeviceFormat_(System.Int32,SharpDX.Direct3D9.DeviceType,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Direct3D9.ResourceType,SharpDX.Direct3D9.Format)"/> with <see cref="F:SharpDX.Direct3D9.Usage.QueryFilter"/>.Set a texture stage's magnification filter by calling <see cref="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,SharpDX.Direct3D9.TextureFilter)"/> with the <see cref="F:SharpDX.Direct3D9.SamplerState.MagFilter"/> value as the second parameter and one member of this enumeration as the third parameter.Set a texture stage's minification filter by calling <see cref="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,SharpDX.Direct3D9.TextureFilter)"/> with the <see cref="F:SharpDX.Direct3D9.SamplerState.MinFilter"/> value as the second parameter and one member of this enumeration as the third parameter.Set the texture filter to use between-mipmap levels by calling <see cref="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,SharpDX.Direct3D9.TextureFilter)"/> with the <see cref="F:SharpDX.Direct3D9.SamplerState.MipFilter"/> value as the second parameter and one member of this enumeration as the third parameter.Not all valid filtering modes for a device will apply to volume maps. In general, <see cref="F:SharpDX.Direct3D9.TextureFilter.Point"/> and <see cref="F:SharpDX.Direct3D9.TextureFilter.Linear"/> magnification filters will be supported for volume maps. If <see cref="F:SharpDX.Direct3D9.TextureCaps.MipVolumeMap"/> is set, then the <see cref="F:SharpDX.Direct3D9.TextureFilter.Point"/> mipmap filter and <see cref="F:SharpDX.Direct3D9.TextureFilter.Point"/> and <see cref="F:SharpDX.Direct3D9.TextureFilter.Linear"/> minification filters will be supported for volume maps. The device may or may not support the <see cref="F:SharpDX.Direct3D9.TextureFilter.Linear"/> mipmap filter for volume maps. Devices that support anisotropic filtering for 2D maps do not necessarily support anisotropic filtering for volume maps. However, applications that enable anisotropic filtering will receive the best available filtering (probably linear) if anisotropic filtering is not supported.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXTUREFILTERTYPE']/*"/>	
            <unmanaged>D3DTEXTUREFILTERTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureFilter.None">
            <summary>	
            <para>When used with <see cref="F:SharpDX.Direct3D9.SamplerState.MipFilter"/>, disables mipmapping.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXF_NONE']/*"/>	
            <unmanaged>D3DTEXF_NONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureFilter.Point">
            <summary>	
            <para>When used with D3DSAMP_ MAGFILTER or <see cref="F:SharpDX.Direct3D9.SamplerState.MinFilter"/>,  specifies that point filtering is to be used as the texture magnification or minification filter respectively. When used  with <see cref="F:SharpDX.Direct3D9.SamplerState.MipFilter"/>, enables mipmapping and specifies that the rasterizer chooses the color from the  texel of the nearest mip level.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXF_POINT']/*"/>	
            <unmanaged>D3DTEXF_POINT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureFilter.Linear">
            <summary>	
            <para>When used with D3DSAMP_ MAGFILTER or <see cref="F:SharpDX.Direct3D9.SamplerState.MinFilter"/>,  specifies that linear filtering is to be used as the texture magnification or minification filter respectively. When used  with <see cref="F:SharpDX.Direct3D9.SamplerState.MipFilter"/>, enables mipmapping and trilinear filtering; it specifies that the rasterizer  interpolates between the two nearest mip levels.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXF_LINEAR']/*"/>	
            <unmanaged>D3DTEXF_LINEAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureFilter.Anisotropic">
            <summary>	
            <para>When used with D3DSAMP_ MAGFILTER or <see cref="F:SharpDX.Direct3D9.SamplerState.MinFilter"/>,  specifies that anisotropic texture filtering used as a texture magnification or minification filter respectively.  Compensates for distortion caused by the difference in angle between the texture polygon and the plane of the screen.  Use with <see cref="F:SharpDX.Direct3D9.SamplerState.MipFilter"/> is undefined.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXF_ANISOTROPIC']/*"/>	
            <unmanaged>D3DTEXF_ANISOTROPIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureFilter.PyramidalQuad">
            <summary>	
            <para>A 4-sample tent filter used as a texture magnification or minification filter.  Use with <see cref="F:SharpDX.Direct3D9.SamplerState.MipFilter"/> is undefined.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXF_PYRAMIDALQUAD']/*"/>	
            <unmanaged>D3DTEXF_PYRAMIDALQUAD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureFilter.GaussianQuad">
            <summary>	
            <para>A 4-sample Gaussian filter used as a texture magnification or minification filter.  Use with <see cref="F:SharpDX.Direct3D9.SamplerState.MipFilter"/> is undefined.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXF_GAUSSIANQUAD']/*"/>	
            <unmanaged>D3DTEXF_GAUSSIANQUAD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureFilter.ConvolutionMono">
            <summary>	
            <para>Convolution filter for monochrome textures.  See <see cref="F:SharpDX.Direct3D9.Format.A1"/>. </para>	
               <para>Differences between Direct3D 9 and Direct3D 9Ex:</para>	
             <para>This flag is available in Direct3D 9Ex only.</para>	
               <para>?</para>	
             <para> Use with <see cref="F:SharpDX.Direct3D9.SamplerState.MipFilter"/> is undefined. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXF_CONVOLUTIONMONO']/*"/>	
            <unmanaged>D3DTEXF_CONVOLUTIONMONO</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureOperation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXTUREOP']/*"/>	
            <unmanaged>D3DTEXTUREOP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.Disable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_DISABLE']/*"/>	
            <unmanaged>D3DTOP_DISABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.SelectArg1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_SELECTARG1']/*"/>	
            <unmanaged>D3DTOP_SELECTARG1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.SelectArg2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_SELECTARG2']/*"/>	
            <unmanaged>D3DTOP_SELECTARG2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.Modulate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_MODULATE']/*"/>	
            <unmanaged>D3DTOP_MODULATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.Modulate2X">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_MODULATE2X']/*"/>	
            <unmanaged>D3DTOP_MODULATE2X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.Modulate4X">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_MODULATE4X']/*"/>	
            <unmanaged>D3DTOP_MODULATE4X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.Add">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_ADD']/*"/>	
            <unmanaged>D3DTOP_ADD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.AddSigned">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_ADDSIGNED']/*"/>	
            <unmanaged>D3DTOP_ADDSIGNED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.AddSigned2X">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_ADDSIGNED2X']/*"/>	
            <unmanaged>D3DTOP_ADDSIGNED2X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.Subtract">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_SUBTRACT']/*"/>	
            <unmanaged>D3DTOP_SUBTRACT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.AddSmooth">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_ADDSMOOTH']/*"/>	
            <unmanaged>D3DTOP_ADDSMOOTH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.BlendDiffuseAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_BLENDDIFFUSEALPHA']/*"/>	
            <unmanaged>D3DTOP_BLENDDIFFUSEALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.BlendTextureAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_BLENDTEXTUREALPHA']/*"/>	
            <unmanaged>D3DTOP_BLENDTEXTUREALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.BlendFactorAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_BLENDFACTORALPHA']/*"/>	
            <unmanaged>D3DTOP_BLENDFACTORALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.BlendTextureAlphaPM">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_BLENDTEXTUREALPHAPM']/*"/>	
            <unmanaged>D3DTOP_BLENDTEXTUREALPHAPM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.BlendCurrentAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_BLENDCURRENTALPHA']/*"/>	
            <unmanaged>D3DTOP_BLENDCURRENTALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.Premodulate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_PREMODULATE']/*"/>	
            <unmanaged>D3DTOP_PREMODULATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.ModulateAlphaAddColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_MODULATEALPHA_ADDCOLOR']/*"/>	
            <unmanaged>D3DTOP_MODULATEALPHA_ADDCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.ModulateColorAddAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_MODULATECOLOR_ADDALPHA']/*"/>	
            <unmanaged>D3DTOP_MODULATECOLOR_ADDALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.ModulateInvAlphaAddColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_MODULATEINVALPHA_ADDCOLOR']/*"/>	
            <unmanaged>D3DTOP_MODULATEINVALPHA_ADDCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.ModulateInvColorAddAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_MODULATEINVCOLOR_ADDALPHA']/*"/>	
            <unmanaged>D3DTOP_MODULATEINVCOLOR_ADDALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.BumpEnvironmentMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_BUMPENVMAP']/*"/>	
            <unmanaged>D3DTOP_BUMPENVMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.BumpEnvironmentMapLuminance">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_BUMPENVMAPLUMINANCE']/*"/>	
            <unmanaged>D3DTOP_BUMPENVMAPLUMINANCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.DotProduct3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_DOTPRODUCT3']/*"/>	
            <unmanaged>D3DTOP_DOTPRODUCT3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.MultiplyAdd">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_MULTIPLYADD']/*"/>	
            <unmanaged>D3DTOP_MULTIPLYADD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperation.Lerp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTOP_LERP']/*"/>	
            <unmanaged>D3DTOP_LERP</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureOperationCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS']/*"/>	
            <unmanaged>D3DTEXOPCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.Disable">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_DISABLE']/*"/>	
            <unmanaged>D3DTEXOPCAPS_DISABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.SelectArg1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_SELECTARG1']/*"/>	
            <unmanaged>D3DTEXOPCAPS_SELECTARG1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.SelectArg2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_SELECTARG2']/*"/>	
            <unmanaged>D3DTEXOPCAPS_SELECTARG2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.Modulate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_MODULATE']/*"/>	
            <unmanaged>D3DTEXOPCAPS_MODULATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.Modulate2X">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_MODULATE2X']/*"/>	
            <unmanaged>D3DTEXOPCAPS_MODULATE2X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.Modulate4X">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_MODULATE4X']/*"/>	
            <unmanaged>D3DTEXOPCAPS_MODULATE4X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.Add">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_ADD']/*"/>	
            <unmanaged>D3DTEXOPCAPS_ADD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.AddSigned">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_ADDSIGNED']/*"/>	
            <unmanaged>D3DTEXOPCAPS_ADDSIGNED</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.AddSigned2X">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_ADDSIGNED2X']/*"/>	
            <unmanaged>D3DTEXOPCAPS_ADDSIGNED2X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.Subtract">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_SUBTRACT']/*"/>	
            <unmanaged>D3DTEXOPCAPS_SUBTRACT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.AddSmooth">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_ADDSMOOTH']/*"/>	
            <unmanaged>D3DTEXOPCAPS_ADDSMOOTH</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.BlendDiffuseAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_BLENDDIFFUSEALPHA']/*"/>	
            <unmanaged>D3DTEXOPCAPS_BLENDDIFFUSEALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.BlendTextureAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_BLENDTEXTUREALPHA']/*"/>	
            <unmanaged>D3DTEXOPCAPS_BLENDTEXTUREALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.BlendFactorAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_BLENDFACTORALPHA']/*"/>	
            <unmanaged>D3DTEXOPCAPS_BLENDFACTORALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.BlendTextureAlphaPM">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_BLENDTEXTUREALPHAPM']/*"/>	
            <unmanaged>D3DTEXOPCAPS_BLENDTEXTUREALPHAPM</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.BlendCurrentAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_BLENDCURRENTALPHA']/*"/>	
            <unmanaged>D3DTEXOPCAPS_BLENDCURRENTALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.Premodulate">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_PREMODULATE']/*"/>	
            <unmanaged>D3DTEXOPCAPS_PREMODULATE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.ModulateAlphaAddColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR']/*"/>	
            <unmanaged>D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.ModulateColorAddAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA']/*"/>	
            <unmanaged>D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.ModulateInvAlphaAddColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR']/*"/>	
            <unmanaged>D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.ModulateInvColorAddAlpha">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA']/*"/>	
            <unmanaged>D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.BumpEnvironmentMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_BUMPENVMAP']/*"/>	
            <unmanaged>D3DTEXOPCAPS_BUMPENVMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.BumpEnvironmentMapLuminance">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_BUMPENVMAPLUMINANCE']/*"/>	
            <unmanaged>D3DTEXOPCAPS_BUMPENVMAPLUMINANCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.DotProduct3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_DOTPRODUCT3']/*"/>	
            <unmanaged>D3DTEXOPCAPS_DOTPRODUCT3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.MultiplyAdd">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_MULTIPLYADD']/*"/>	
            <unmanaged>D3DTEXOPCAPS_MULTIPLYADD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureOperationCaps.Lerp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXOPCAPS_LERP']/*"/>	
            <unmanaged>D3DTEXOPCAPS_LERP</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureStage">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXTURESTAGESTATETYPE']/*"/>	
            <unmanaged>D3DTEXTURESTAGESTATETYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.ColorOperation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_COLOROP']/*"/>	
            <unmanaged>D3DTSS_COLOROP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.ColorArg1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_COLORARG1']/*"/>	
            <unmanaged>D3DTSS_COLORARG1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.ColorArg2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_COLORARG2']/*"/>	
            <unmanaged>D3DTSS_COLORARG2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.AlphaOperation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_ALPHAOP']/*"/>	
            <unmanaged>D3DTSS_ALPHAOP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.AlphaArg1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_ALPHAARG1']/*"/>	
            <unmanaged>D3DTSS_ALPHAARG1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.AlphaArg2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_ALPHAARG2']/*"/>	
            <unmanaged>D3DTSS_ALPHAARG2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.BumpEnvironmentMat00">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_BUMPENVMAT00']/*"/>	
            <unmanaged>D3DTSS_BUMPENVMAT00</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.BumpEnvironmentMat01">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_BUMPENVMAT01']/*"/>	
            <unmanaged>D3DTSS_BUMPENVMAT01</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.BumpEnvironmentMat10">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_BUMPENVMAT10']/*"/>	
            <unmanaged>D3DTSS_BUMPENVMAT10</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.BumpEnvironmentMat11">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_BUMPENVMAT11']/*"/>	
            <unmanaged>D3DTSS_BUMPENVMAT11</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.TexCoordIndex">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_TEXCOORDINDEX']/*"/>	
            <unmanaged>D3DTSS_TEXCOORDINDEX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.BumpEnvironmentLScale">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_BUMPENVLSCALE']/*"/>	
            <unmanaged>D3DTSS_BUMPENVLSCALE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.BumpEnvironmentLOffset">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_BUMPENVLOFFSET']/*"/>	
            <unmanaged>D3DTSS_BUMPENVLOFFSET</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.TextureTransformFlags">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_TEXTURETRANSFORMFLAGS']/*"/>	
            <unmanaged>D3DTSS_TEXTURETRANSFORMFLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.ColorArg0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_COLORARG0']/*"/>	
            <unmanaged>D3DTSS_COLORARG0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.AlphaArg0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_ALPHAARG0']/*"/>	
            <unmanaged>D3DTSS_ALPHAARG0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.ResultArg">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_RESULTARG']/*"/>	
            <unmanaged>D3DTSS_RESULTARG</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureStage.Constant">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTSS_CONSTANT']/*"/>	
            <unmanaged>D3DTSS_CONSTANT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureTransform">
            <summary>	
            Defines texture coordinate transformation values.	
            </summary>	
            <remarks>	
            Texture coordinates can be transformed using a 4 x 4 matrix before the results are passed to the rasterizer. The texture coordinate transforms are set by calling <see cref="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,SharpDX.Direct3D9.TextureArgument)"/>, and by passing in the <see cref="F:SharpDX.Direct3D9.TextureStage.TextureTransformFlags"/> texture stage state and one of the values from <see cref="T:SharpDX.Direct3D9.TextureTransform"/>. For more information about texture transforms, see Texture Coordinate Transformations (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTEXTURETRANSFORMFLAGS']/*"/>	
            <unmanaged>D3DTEXTURETRANSFORMFLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureTransform.Disable">
            <summary>	
            <para>Texture coordinates are passed directly to the rasterizer. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTTFF_DISABLE']/*"/>	
            <unmanaged>D3DTTFF_DISABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureTransform.Count1">
            <summary>	
            <para>The rasterizer should expect 1D texture coordinates. This value is used by fixed function vertex processing; it should be set to 0 when using a programmable vertex shader.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTTFF_COUNT1']/*"/>	
            <unmanaged>D3DTTFF_COUNT1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureTransform.Count2">
            <summary>	
            <para>The rasterizer should expect 2D texture coordinates. This value is used by fixed function vertex processing; it should be set to 0 when using a programmable vertex shader.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTTFF_COUNT2']/*"/>	
            <unmanaged>D3DTTFF_COUNT2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureTransform.Count3">
            <summary>	
            <para>The rasterizer should expect 3D texture coordinates. This value is used by fixed function vertex processing; it should be set to 0 when using a programmable vertex shader.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTTFF_COUNT3']/*"/>	
            <unmanaged>D3DTTFF_COUNT3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureTransform.Count4">
            <summary>	
            <para>The rasterizer should expect 4D texture coordinates. This value is used by fixed function vertex processing; it should be set to 0 when using a programmable vertex shader.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTTFF_COUNT4']/*"/>	
            <unmanaged>D3DTTFF_COUNT4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureTransform.Projected">
            <summary>	
            <para>This flag is honored by the fixed function pixel pipeline, as well as the programmable pixel pipeline in versions ps_1_1 to ps_1_3. When texture projection is enabled for a texture stage, all four floating point values must be written to the corresponding texture register. Each texture coordinate is divided by the last element before being passed to the rasterizer. For example, if this flag is specified with the <see cref="F:SharpDX.Direct3D9.TextureTransform.Count3"/> flag, the first and second texture coordinates are divided by the third coordinate before being passed to the rasterizer. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTTFF_PROJECTED']/*"/>	
            <unmanaged>D3DTTFF_PROJECTED</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TextureWrapping">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DWRAPCOORD']/*"/>	
            <unmanaged>D3DWRAPCOORD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureWrapping.WrapCoordinate0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DWRAPCOORD_0']/*"/>	
            <unmanaged>D3DWRAPCOORD_0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureWrapping.WrapCoordinate1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DWRAPCOORD_1']/*"/>	
            <unmanaged>D3DWRAPCOORD_1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureWrapping.WrapCoordinate2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DWRAPCOORD_2']/*"/>	
            <unmanaged>D3DWRAPCOORD_2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureWrapping.WrapCoordinate3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DWRAPCOORD_3']/*"/>	
            <unmanaged>D3DWRAPCOORD_3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TextureWrapping.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TrackPriority">
            <summary>	
            Defines the priority type to which an animation track is assigned.	
            </summary>	
            <remarks>	
            Tracks with the same priority are blended together, and the two resulting values are then blended using the priority blend factor.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPRIORITY_TYPE']/*"/>	
            <unmanaged>D3DXPRIORITY_TYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrackPriority.Low">
            <summary>	
            <para>Track should be blended with all the low-priority tracks before the low-priority blend is mixed with the high-priority blend.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPRIORITY_LOW']/*"/>	
            <unmanaged>D3DXPRIORITY_LOW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrackPriority.High">
            <summary>	
            <para>Track should be blended with all the high-priority tracks before the high-priority blend is mixed with the low-priority blend.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPRIORITY_HIGH']/*"/>	
            <unmanaged>D3DXPRIORITY_HIGH</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TransformState">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTRANSFORMSTATETYPE2']/*"/>	
            <unmanaged>D3DTRANSFORMSTATETYPE2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.View">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_VIEW']/*"/>	
            <unmanaged>D3DTS2_VIEW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.Projection">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_PROJECTION']/*"/>	
            <unmanaged>D3DTS2_PROJECTION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.World">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_WORLD']/*"/>	
            <unmanaged>D3DTS2_WORLD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.World1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_WORLD1']/*"/>	
            <unmanaged>D3DTS2_WORLD1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.World2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_WORLD2']/*"/>	
            <unmanaged>D3DTS2_WORLD2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.World3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_WORLD3']/*"/>	
            <unmanaged>D3DTS2_WORLD3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.Texture0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_TEXTURE0']/*"/>	
            <unmanaged>D3DTS2_TEXTURE0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.Texture1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_TEXTURE1']/*"/>	
            <unmanaged>D3DTS2_TEXTURE1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.Texture2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_TEXTURE2']/*"/>	
            <unmanaged>D3DTS2_TEXTURE2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.Texture3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_TEXTURE3']/*"/>	
            <unmanaged>D3DTS2_TEXTURE3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.Texture4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_TEXTURE4']/*"/>	
            <unmanaged>D3DTS2_TEXTURE4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.Texture5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_TEXTURE5']/*"/>	
            <unmanaged>D3DTS2_TEXTURE5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.Texture6">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_TEXTURE6']/*"/>	
            <unmanaged>D3DTS2_TEXTURE6</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransformState.Texture7">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTS2_TEXTURE7']/*"/>	
            <unmanaged>D3DTS2_TEXTURE7</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "T:SharpDX.Direct3D9.TransitionType" -->
        <member name="F:SharpDX.Direct3D9.TransitionType.Linear">
            <summary>	
            <para>Linear transition between values.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTRANSITION_LINEAR']/*"/>	
            <unmanaged>D3DXTRANSITION_LINEAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TransitionType.EaseInEaseOut">
            <summary>	
            <para>Ease-in, ease-out spline transition between values.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTRANSITION_EASEINEASEOUT']/*"/>	
            <unmanaged>D3DXTRANSITION_EASEINEASEOUT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Usage">
            <summary>	
            Usage options that identify how resources are to be used.	
            </summary>	
            <remarks>	
            Usage and Resource CombinationsUsages are either specified when a resource is created, or specified with CheckDeviceType to test the capability of an  existing resource. The following table identifies which usages can be applied to which resource types.UsageVertex buffer createIndex buffer createTexture createCube texture createVolume texture createSurface createCheck device format D3DUSAGE_AUTOGENMIPMAPxxx D3DUSAGE_DEPTHSTENCILxxxx D3DUSAGE_DMAPxx D3DUSAGE_DONOTCLIPxx D3DUSAGE_DYNAMICxxxxxx D3DUSAGE_NONSECURExxxxxxx D3DUSAGE_NPATCHESxx D3DUSAGE_POINTSxx D3DUSAGE_RTPATCHESxx D3DUSAGE_RENDERTARGETxxxx D3DUSAGE_SOFTWAREPROCESSINGxxxxxx D3DUSAGE_TEXTAPIxx D3DUSAGE_WRITEONLYxx?Use CheckDeviceFormat to check hardware support for these usages.Each of the resource creation methods is listed here.CreateCubeTexture   CreateDepthStencilSurface   CreateIndexBuffer   CreateOffscreenPlainSurface   CreateRenderTarget   CreateTexture   CreateVertexBuffer   CreateVolumeTextureThe D3DXCreatexxx texturing functions also use some of these constant values for  resource creation.For more information about pool types and their restrictions with certain usages, see <see cref="T:SharpDX.Direct3D9.Pool"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE']/*"/>	
            <unmanaged>D3DUSAGE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.RenderTarget">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_RENDERTARGET']/*"/>	
            <unmanaged>D3DUSAGE_RENDERTARGET</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.DepthStencil">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_DEPTHSTENCIL']/*"/>	
            <unmanaged>D3DUSAGE_DEPTHSTENCIL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.Dynamic">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_DYNAMIC']/*"/>	
            <unmanaged>D3DUSAGE_DYNAMIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.NonSecure">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_NONSECURE']/*"/>	
            <unmanaged>D3DUSAGE_NONSECURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.AutoGenerateMipMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_AUTOGENMIPMAP']/*"/>	
            <unmanaged>D3DUSAGE_AUTOGENMIPMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.DisplacementMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_DMAP']/*"/>	
            <unmanaged>D3DUSAGE_DMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.QueryLegacyBumpMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_QUERY_LEGACYBUMPMAP']/*"/>	
            <unmanaged>D3DUSAGE_QUERY_LEGACYBUMPMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.QuerySrgbRead">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_QUERY_SRGBREAD']/*"/>	
            <unmanaged>D3DUSAGE_QUERY_SRGBREAD</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.QueryFilter">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_QUERY_FILTER']/*"/>	
            <unmanaged>D3DUSAGE_QUERY_FILTER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.QuerySrgbWrite">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_QUERY_SRGBWRITE']/*"/>	
            <unmanaged>D3DUSAGE_QUERY_SRGBWRITE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.QueryPostPixelShaderBlending">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING']/*"/>	
            <unmanaged>D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.QueryVertexTexture">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_QUERY_VERTEXTEXTURE']/*"/>	
            <unmanaged>D3DUSAGE_QUERY_VERTEXTEXTURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.QueryWrapAndMip">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_QUERY_WRAPANDMIP']/*"/>	
            <unmanaged>D3DUSAGE_QUERY_WRAPANDMIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.WriteOnly">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_WRITEONLY']/*"/>	
            <unmanaged>D3DUSAGE_WRITEONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.SoftwareProcessing">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_SOFTWAREPROCESSING']/*"/>	
            <unmanaged>D3DUSAGE_SOFTWAREPROCESSING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.DoNotClip">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_DONOTCLIP']/*"/>	
            <unmanaged>D3DUSAGE_DONOTCLIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.Points">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_POINTS']/*"/>	
            <unmanaged>D3DUSAGE_POINTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.RTPatches">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_RTPATCHES']/*"/>	
            <unmanaged>D3DUSAGE_RTPATCHES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.NPatches">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_NPATCHES']/*"/>	
            <unmanaged>D3DUSAGE_NPATCHES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.TextApi">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_TEXTAPI']/*"/>	
            <unmanaged>D3DUSAGE_TEXTAPI</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.RestrictedContent">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_RESTRICTED_CONTENT']/*"/>	
            <unmanaged>D3DUSAGE_RESTRICTED_CONTENT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.RestrictSharedResource">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_RESTRICT_SHARED_RESOURCE']/*"/>	
            <unmanaged>D3DUSAGE_RESTRICT_SHARED_RESOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.RestrictSharedResourceDriver">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER']/*"/>	
            <unmanaged>D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Usage.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.UVAtlasQuality">
            <summary>	
            Texture wrapping options for IMT computation APIs.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMT']/*"/>	
            <unmanaged>D3DXIMT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.UVAtlasQuality.WrapU">
            <summary>	
            <para>The texture wraps in the U direction.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMT_WRAP_U']/*"/>	
            <unmanaged>D3DXIMT_WRAP_U</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.UVAtlasQuality.WrapV">
            <summary>	
            <para>The texture wraps in the V direction.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMT_WRAP_V']/*"/>	
            <unmanaged>D3DXIMT_WRAP_V</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.UVAtlasQuality.WrapUv">
            <summary>	
            <para>The texture wraps in both the U and V direction.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMT_WRAP_UV']/*"/>	
            <unmanaged>D3DXIMT_WRAP_UV</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexBlend">
            <summary>	
            Defines flags used to control the number or matrices that the system applies when performing multimatrix vertex blending.	
            </summary>	
            <remarks>	
            Members of this type are used with the <see cref="F:SharpDX.Direct3D9.RenderState.VertexBlend"/> render state.Geometry blending (multimatrix vertex blending) requires that your application use a vertex format that has blending (beta) weights for each vertex.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXBLENDFLAGS']/*"/>	
            <unmanaged>D3DVERTEXBLENDFLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBlend.Disable">
            <summary>	
            <para>Disable vertex blending; apply only the world matrix set by the D3DTS_WORLDMATRIX macro, where the index value for the transformation state is 0. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVBF_DISABLE']/*"/>	
            <unmanaged>D3DVBF_DISABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBlend.Weights1">
            <summary>	
            <para>Enable vertex blending between the two matrices set by the D3DTS_WORLDMATRIX macro, where the index value for the transformation states are 0 and 1. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVBF_1WEIGHTS']/*"/>	
            <unmanaged>D3DVBF_1WEIGHTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBlend.Weights2">
            <summary>	
            <para>Enable vertex blending between the three matrices set by the D3DTS_WORLDMATRIX macro, where the index value for the transformation states are 0, 1, and 2. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVBF_2WEIGHTS']/*"/>	
            <unmanaged>D3DVBF_2WEIGHTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBlend.Weights3">
            <summary>	
            <para>Enable vertex blending between the four matrices set by the D3DTS_WORLDMATRIX macro, where the index value for the transformation states are 0, 1, 2, and 3. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVBF_3WEIGHTS']/*"/>	
            <unmanaged>D3DVBF_3WEIGHTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBlend.Tweening">
            <summary>	
            <para>Vertex blending is done by using the value assigned to <see cref="F:SharpDX.Direct3D9.RenderState.TweenFactor"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVBF_TWEENING']/*"/>	
            <unmanaged>D3DVBF_TWEENING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBlend.Weights0">
            <summary>	
            <para>Use a single matrix with a weight of 1.0. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVBF_0WEIGHTS']/*"/>	
            <unmanaged>D3DVBF_0WEIGHTS</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexFormat">
            <summary>	
            Flexible Vertex Format Constants, or FVF codes, are used to describe the contents of vertices  interleaved in a single data stream that will be processed by the fixed-function pipeline.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF']/*"/>	
            <unmanaged>D3DFVF</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Reserved0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_RESERVED0']/*"/>	
            <unmanaged>D3DFVF_RESERVED0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.PositionMask">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_POSITION_MASK']/*"/>	
            <unmanaged>D3DFVF_POSITION_MASK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Position">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_XYZ']/*"/>	
            <unmanaged>D3DFVF_XYZ</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.PositionRhw">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_XYZRHW']/*"/>	
            <unmanaged>D3DFVF_XYZRHW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.PositionBlend1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_XYZB1']/*"/>	
            <unmanaged>D3DFVF_XYZB1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.PositionBlend2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_XYZB2']/*"/>	
            <unmanaged>D3DFVF_XYZB2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.PositionBlend3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_XYZB3']/*"/>	
            <unmanaged>D3DFVF_XYZB3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.PositionBlend4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_XYZB4']/*"/>	
            <unmanaged>D3DFVF_XYZB4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.PositionBlend5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_XYZB5']/*"/>	
            <unmanaged>D3DFVF_XYZB5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.PositionW">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_XYZW']/*"/>	
            <unmanaged>D3DFVF_XYZW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_NORMAL']/*"/>	
            <unmanaged>D3DFVF_NORMAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.PointSize">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_PSIZE']/*"/>	
            <unmanaged>D3DFVF_PSIZE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Diffuse">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_DIFFUSE']/*"/>	
            <unmanaged>D3DFVF_DIFFUSE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Specular">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_SPECULAR']/*"/>	
            <unmanaged>D3DFVF_SPECULAR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.TextureCountMask">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEXCOUNT_MASK']/*"/>	
            <unmanaged>D3DFVF_TEXCOUNT_MASK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.TextureCountShift">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEXCOUNT_SHIFT']/*"/>	
            <unmanaged>D3DFVF_TEXCOUNT_SHIFT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Texture0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEX0']/*"/>	
            <unmanaged>D3DFVF_TEX0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Texture1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEX1']/*"/>	
            <unmanaged>D3DFVF_TEX1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Texture2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEX2']/*"/>	
            <unmanaged>D3DFVF_TEX2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Texture3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEX3']/*"/>	
            <unmanaged>D3DFVF_TEX3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Texture4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEX4']/*"/>	
            <unmanaged>D3DFVF_TEX4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Texture5">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEX5']/*"/>	
            <unmanaged>D3DFVF_TEX5</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Texture6">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEX6']/*"/>	
            <unmanaged>D3DFVF_TEX6</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Texture7">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEX7']/*"/>	
            <unmanaged>D3DFVF_TEX7</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.Texture8">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_TEX8']/*"/>	
            <unmanaged>D3DFVF_TEX8</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.LastBetaUByte4">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_LASTBETA_UBYTE4']/*"/>	
            <unmanaged>D3DFVF_LASTBETA_UBYTE4</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.LastBetaColor">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVF_LASTBETA_D3DCOLOR']/*"/>	
            <unmanaged>D3DFVF_LASTBETA_D3DCOLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormat.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexFormatCaps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVFCAPS']/*"/>	
            <unmanaged>D3DFVFCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormatCaps.TextureCoordCountMask">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVFCAPS_TEXCOORDCOUNTMASK']/*"/>	
            <unmanaged>D3DFVFCAPS_TEXCOORDCOUNTMASK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormatCaps.DoNotStripElements">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVFCAPS_DONOTSTRIPELEMENTS']/*"/>	
            <unmanaged>D3DFVFCAPS_DONOTSTRIPELEMENTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormatCaps.PointSize">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DFVFCAPS_PSIZE']/*"/>	
            <unmanaged>D3DFVFCAPS_PSIZE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexFormatDeclaratorCount">
            <summary>	
            This constant is the maximum number of vertex declarators for a mesh.	
            </summary>	
            <remarks>	
            MAXD3DDECLLENGTH is defined as a maximum of 64 (see d3d9types.h). This does not include the "end" marker vertex element.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='_MAX_FVF_DECL_SIZE']/*"/>	
            <unmanaged>_MAX_FVF_DECL_SIZE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexFormatDeclaratorCount.Max">
            <summary>	
            <para>The maximum number of elements in the vertex declaration. The additional (+1) is for D3DDECL_END.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='MAX_FVF_DECL_SIZE']/*"/>	
            <unmanaged>MAX_FVF_DECL_SIZE</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexProcessingCaps">
            <summary>	
            A combination of one or more flags that control the device create behavior.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVTXPCAPS']/*"/>	
            <unmanaged>D3DVTXPCAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexProcessingCaps.TextureGen">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVTXPCAPS_TEXGEN']/*"/>	
            <unmanaged>D3DVTXPCAPS_TEXGEN</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexProcessingCaps.MaterialSource7">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVTXPCAPS_MATERIALSOURCE7']/*"/>	
            <unmanaged>D3DVTXPCAPS_MATERIALSOURCE7</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexProcessingCaps.DirectionalLights">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVTXPCAPS_DIRECTIONALLIGHTS']/*"/>	
            <unmanaged>D3DVTXPCAPS_DIRECTIONALLIGHTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexProcessingCaps.PositionalLights">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVTXPCAPS_POSITIONALLIGHTS']/*"/>	
            <unmanaged>D3DVTXPCAPS_POSITIONALLIGHTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexProcessingCaps.LocalViewer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVTXPCAPS_LOCALVIEWER']/*"/>	
            <unmanaged>D3DVTXPCAPS_LOCALVIEWER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexProcessingCaps.Tweening">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVTXPCAPS_TWEENING']/*"/>	
            <unmanaged>D3DVTXPCAPS_TWEENING</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexProcessingCaps.TexGenSphereMap">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVTXPCAPS_TEXGEN_SPHEREMAP']/*"/>	
            <unmanaged>D3DVTXPCAPS_TEXGEN_SPHEREMAP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexProcessingCaps.NoTexGenNonLocalViewer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER']/*"/>	
            <unmanaged>D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexShaderCaps">
            <summary>	
            Vertex shader caps constants. These constants are used by the VS20Caps member of <see cref="T:SharpDX.Direct3D9.Capabilities"/>.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVS20CAPS']/*"/>	
            <unmanaged>D3DVS20CAPS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShaderCaps.Predication">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVS20CAPS_PREDICATION']/*"/>	
            <unmanaged>D3DVS20CAPS_PREDICATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShaderCaps.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexTextureSampler">
            <summary>	
            Vertex texture sampler constants.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER']/*"/>	
            <unmanaged>D3DVERTEXTEXTURESAMPLER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexTextureSampler.Sampler0">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER0']/*"/>	
            <unmanaged>D3DVERTEXTEXTURESAMPLER0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexTextureSampler.Sampler1">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER1']/*"/>	
            <unmanaged>D3DVERTEXTEXTURESAMPLER1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexTextureSampler.Sampler2">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER2']/*"/>	
            <unmanaged>D3DVERTEXTEXTURESAMPLER2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexTextureSampler.Sampler3">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER3']/*"/>	
            <unmanaged>D3DVERTEXTEXTURESAMPLER3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexTextureSampler.DisplacementMapSampler">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLERMAPSAMPLER']/*"/>	
            <unmanaged>D3DVERTEXTEXTURESAMPLERMAPSAMPLER</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VideoSubType">
            <summary>	
            Specifies the type of I/O bus used by the graphics adapter.	
            </summary>	
            <remarks>	
            As many as three flags can be set. Flags in the range 0x00 through 0x04 (D3DBUSTYPE_Xxx) provide the basic bus type. Flags in the range 0x10000 through 0x50000 (D3DBUSIMPL_MODIFIER_Xxx) modify the basic description. The driver sets one bus-type flag, and can set zero or one modifier flag. If the driver sets a modifier flag, it also sets the <see cref="F:SharpDX.Direct3D9.VideoSubType.NonStandard"/> flag. Flags are combined with a bitwise OR.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSTYPE']/*"/>	
            <unmanaged>D3DBUSTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.Other">
            <summary>	
            <para>Indicates a type of bus other than the types listed here.	
            </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSTYPE_OTHER']/*"/>	
            <unmanaged>D3DBUSTYPE_OTHER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.Pci">
            <summary>	
            <para>PCI bus.	
            </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSTYPE_PCI']/*"/>	
            <unmanaged>D3DBUSTYPE_PCI</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.PciX">
            <summary>	
            <para>PCI-X bus.	
            </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSTYPE_PCIX']/*"/>	
            <unmanaged>D3DBUSTYPE_PCIX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.PciExpress">
            <summary>	
            <para>PCI Express bus.	
            </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSTYPE_PCIEXPRESS']/*"/>	
            <unmanaged>D3DBUSTYPE_PCIEXPRESS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.Agp">
            <summary>	
            <para>Accelerated Graphics Port (AGP) bus.	
            </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSTYPE_AGP']/*"/>	
            <unmanaged>D3DBUSTYPE_AGP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.InsideOfChipset">
            <summary>	
            <para>The implementation for the graphics adapter is in a motherboard chipset's north bridge. This flag implies that data never goes over an expansion bus (such as PCI or AGP) when it is transferred from main memory to the graphics adapter.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET']/*"/>	
            <unmanaged>D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.TracksOnMotherBoardToChip">
            <summary>	
            <para>Indicates that the graphics adapter is connected to a motherboard chipset's north bridge by tracks on the motherboard and all of the graphics adapter's chips are soldered to the motherboard. This flag implies that data never goes over an expansion bus (such as PCI or AGP) when it is transferred from main memory to the graphics adapter.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP']/*"/>	
            <unmanaged>D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.TracksOnMotherBoardToSocket">
            <summary>	
            <para>The graphics adapter is connected to a motherboard chipset's north bridge by tracks on the motherboard, and all of the graphics adapter's chips are connected through sockets to the motherboard.	
            </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET']/*"/>	
            <unmanaged>D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.DaughterBoardConnector">
            <summary>	
            <para>The graphics adapter is connected to the motherboard through a daughterboard connector.	
            </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR']/*"/>	
            <unmanaged>D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.DaughterBoardConnectorInsideOfNuae">
            <summary>	
            <para>The graphics adapter is connected to the motherboard through a daughterboard connector, and the graphics adapter is inside an enclosure that is not user accessible.	
            </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE']/*"/>	
            <unmanaged>D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VideoSubType.NonStandard">
            <summary>	
            <para>One of the D3DBUSIMPL_MODIFIER_MODIFIER_Xxx flags is set.	
            </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_NON_STANDARD']/*"/>	
            <unmanaged>D3DBUSIMPL_MODIFIER_NON_STANDARD</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.WeldFlags">
            <summary>	
            Options for welding together vertices.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='_D3DXWELDEPSILONSFLAGS']/*"/>	
            <unmanaged>_D3DXWELDEPSILONSFLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldFlags.WeldAll">
            <summary>	
            <para>Weld together all vertices that are at the same location. Using this flag avoids an epsilon comparison between vertex components.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS_WELDALL']/*"/>	
            <unmanaged>D3DXWELDEPSILONS_WELDALL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldFlags.WeldPartialMatches">
            <summary>	
            <para>If a given vertex component is within epsilon, modify partially matched vertices so that both components are identical. If all components are equal, remove one of the vertices.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS_WELDPARTIALMATCHES']/*"/>	
            <unmanaged>D3DXWELDEPSILONS_WELDPARTIALMATCHES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldFlags.DoNotRemoveVertices">
            <summary>	
            <para>Instructs the weld to allow only modifications to vertices and not removal. This flag is valid only if <see cref="F:SharpDX.Direct3D9.WeldFlags.WeldPartialMatches"/> is set. It is useful to modify vertices to be equal, but not to allow vertices to be removed.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS_DONOTREMOVEVERTICES']/*"/>	
            <unmanaged>D3DXWELDEPSILONS_DONOTREMOVEVERTICES</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldFlags.DoNotSplit">
            <summary>	
            <para>Instructs the weld not to split vertices that are in separate attribute groups. When the <see cref="M:SharpDX.Direct3D9.Mesh.Optimize(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)"/> method is called with the <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.AttributeSort"/> flag, then the <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.DoNotSplit"/> flag will also be set. Setting this flag can slow down software vertex processing.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS_DONOTSPLIT']/*"/>	
            <unmanaged>D3DXWELDEPSILONS_DONOTSPLIT</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.XFileFormat">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXF_FILEFORMAT2']/*"/>	
            <unmanaged>D3DXF_FILEFORMAT2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.XFileFormat.Binary">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXF_FILEFORMAT_BINARY']/*"/>	
            <unmanaged>D3DXF_FILEFORMAT_BINARY</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.XFileFormat.Text">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXF_FILEFORMAT_TEXT']/*"/>	
            <unmanaged>D3DXF_FILEFORMAT_TEXT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.XFileFormat.Compressed">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXF_FILEFORMAT_COMPRESSED']/*"/>	
            <unmanaged>D3DXF_FILEFORMAT_COMPRESSED</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ZBufferType">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DZBUFFERTYPE']/*"/>	
            <unmanaged>D3DZBUFFERTYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ZBufferType.DontUseZBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DZB_FALSE']/*"/>	
            <unmanaged>D3DZB_FALSE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ZBufferType.UseZBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DZB_TRUE']/*"/>	
            <unmanaged>D3DZB_TRUE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ZBufferType.UseWBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DZB_USEW']/*"/>	
            <unmanaged>D3DZB_USEW</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.D3D9">
            <summary>	
            Functions	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.Direct3D9.D3D9']/*"/>	
        </member>
        <member name="F:SharpDX.Direct3D9.D3D9.SdkVersion">
            <summary>Constant SdkVersion.</summary>
            <unmanaged>D3D_SDK_VERSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.D3D9.DllHandle0_">
            <summary>
            DLLs loaders
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.D3D9.Create9Ex(System.Int32,SharpDX.Direct3D9.Direct3DEx)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> object and returns an interface to it.	
            </summary>	
            <param name="sDKVersion">No documentation.</param>	
            <param name="arg1">No documentation.</param>	
            <returns>if Direct3DEx features are not supported (no WDDM driver is installed) or if the SDKVersion does not match the version of the DLL.   D3DERR_OUTOFMEMORY if out-of-memory conditions are detected when creating the enumerator object.  <see cref="F:SharpDX.Result.Ok"/> if the creation of the enumerator object is successful.</returns>	
            <remarks>	
            The <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> object is the first object that the application creates and the last object thta the application releases. Functions for enumerating and retrieving capabilities of a device are accessible through the <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> object. This enables applications to select devices without creating them.The <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> interface supports enumeration of active display adapters and allows the creation of <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> objects. If the user dynamically adds adapters (either by adding devices to the desktop, or by hot-docking a laptop), these devices are not included in the enumeration. Creating a new <see cref="T:SharpDX.Direct3D9.Direct3DEx"/> interface will expose the new devices.Pass the <see cref="F:SharpDX.Direct3D9.D3D9.SdkVersion"/> flag to this function to ensure that header files used in the compiled application match the version of the installed runtime DLLs. <see cref="F:SharpDX.Direct3D9.D3D9.SdkVersion"/> is changed in the runtime only when a header or another code change would require rebuilding the application. If this function fails, it indicates that the versions of the header file and the runtime DLL do not match.Note??Direct3DCreate9Ex is supported only in Windows Vista, Windows Server 2008, and Windows 7.   Earlier versions of the D3D9.dll library do not include Direct3D9Ex and Direct3DCreate9Ex.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='Direct3DCreate9Ex']/*"/>	
            <unmanaged>HRESULT Direct3DCreate9Ex([In] unsigned int SDKVersion,[Out, Fast] IDirect3D9Ex** arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3D9.Create9(System.Int32)">
            <summary>	
            Create an <see cref="T:SharpDX.Direct3D9.Direct3D"/> object and return an interface to it.	
            </summary>	
            <param name="sDKVersion"><para>The value of this parameter should be <see cref="F:SharpDX.Direct3D9.D3D9.SdkVersion"/>. See Remarks.</para></param>	
            <returns>If successful, this function returns a reference to an <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface; otherwise, a <c>null</c> reference is returned.</returns>	
            <remarks>	
            The Direct3D object is the first Direct3D COM object that your graphical application needs to create and the last object that your application needs to release. Functions for enumerating and retrieving capabilities of a device are accessible through the Direct3D object. This enables applications to select devices without creating them.Create an <see cref="T:SharpDX.Direct3D9.Direct3D"/> object as shown here:<code>	
             LPDIRECT3D9 g_pD3D = <c>null</c>; if( <c>null</c> == (g_pD3D = Direct3DCreate9(<see cref="F:SharpDX.Direct3D9.D3D9.SdkVersion"/>))) return E_FAIL;	
            	
            </code>The <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface supports enumeration of active display adapters and allows the creation of <see cref="T:SharpDX.Direct3D9.Device"/> objects. If the user dynamically adds adapters (either by adding devices to the desktop, or by hot-docking a laptop), those devices will not be included in the enumeration. Creating a new <see cref="T:SharpDX.Direct3D9.Direct3D"/> interface will expose the new devices.D3D_SDK_VERSION is passed to this function to ensure that the header files against which an application is compiled match the version of the runtime DLL's that are installed on the machine. <see cref="F:SharpDX.Direct3D9.D3D9.SdkVersion"/> is only changed in the runtime when a header change (or other code change) would require an application to be rebuilt. If this function fails, it indicates that the header file version does not match the runtime DLL version.For an example, see Creating a Device (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='Direct3DCreate9']/*"/>	
            <unmanaged>IDirect3D9* Direct3DCreate9([In] unsigned int SDKVersion)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.D3DX9">
            <summary>	
            Functions	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.Direct3D9.D3DX9']/*"/>	
        </member>
        <member name="F:SharpDX.Direct3D9.D3DX9.Version">
            <summary>Constant Version.</summary>
            <unmanaged>D3DX_VERSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.D3DX9.SdkVersion">
            <summary>Constant SdkVersion.</summary>
            <unmanaged>D3DX_SDK_VERSION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.D3DX9.DllHandle0_">
            <summary>
            DLLs loaders
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetStatus">
            <summary>	
            Determine the current state of the profiler from the target program.	
            </summary>	
            <returns><para>Returns a non-zero value when PIX is profiling the target program; otherwise, returns zero.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPERF_GetStatus']/*"/>	
            <unmanaged>unsigned int D3DPERF_GetStatus()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SetMarker(SharpDX.Color4,System.String)">
            <summary>	
            Mark an instantaneous event. PIX can use this event to trigger an action.	
            </summary>	
            <param name="col">Event color. This is the color to display the event in the event view.</param>	
            <param name="wszName">Event name.</param>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPERF_SetMarker']/*"/>	
            <unmanaged>void D3DPERF_SetMarker([In] D3DCOLOR col,[In] const wchar_t* wszName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.QueryRepeatFrame">
            <summary>	
            Determine whether a performance profiler is requesting that the current frame be resubmitted to Direct3D for performance analysis. This function is not currently supported by PIX.	
            </summary>	
            <returns><para>If the return value is TRUE, the caller should repeat the same sequence of calls. If <see cref="F:SharpDX.Result.False"/>, the caller should continue.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPERF_QueryRepeatFrame']/*"/>	
            <unmanaged>BOOL D3DPERF_QueryRepeatFrame()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.BeginEvent(SharpDX.Color4,System.String)">
            <summary>	
            Marks the beginning of a user-defined event. PIX can use this event to trigger an action.	
            </summary>	
            <param name="col">Event color. This is the color to display the event in the  event view.</param>	
            <param name="wszName">Event name.</param>	
            <returns><para>The zero-based level of the hierarchy that this event is starting in. If an error occurs, the return value will be negative.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPERF_BeginEvent']/*"/>	
            <unmanaged>int D3DPERF_BeginEvent([In] D3DCOLOR col,[In] const wchar_t* wszName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SetOptions(System.Int32)">
            <summary>	
            Set profiler options specified by the target program.	
            </summary>	
            <param name="dwOptions">User options recognizable by PIX. Set this to 1 to notify PIX that the target program does not give permission to be profiled.</param>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPERF_SetOptions']/*"/>	
            <unmanaged>void D3DPERF_SetOptions([In] unsigned int dwOptions)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SetRegion(SharpDX.Color4,System.String)">
            <summary>	
            Mark a series of frames with the specified color and name in the PIXRun file. This function is not currently supported by PIX.	
            </summary>	
            <param name="col">Event color.</param>	
            <param name="wszName">Event name or marker name.</param>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPERF_SetRegion']/*"/>	
            <unmanaged>void D3DPERF_SetRegion([In] D3DCOLOR col,[In] const wchar_t* wszName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.EndEvent">
            <summary>	
            Mark the end of a user-defined event. PIX can use this event to trigger an action.	
            </summary>	
            <returns><para>The level of the hierarchy in which the event is ending.  If an error occurs, this value is negative.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPERF_EndEvent']/*"/>	
            <unmanaged>int D3DPERF_EndEvent()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FrameAppendChild(SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.Frame@)">
            <summary>	
            Adds a child frame to a frame.	
            </summary>	
            <param name="frameParentRef"><para>Pointer to the parent node.</para></param>	
            <param name="frameChildRef"><para>Pointer to the child node.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFrameAppendChild']/*"/>	
            <unmanaged>HRESULT D3DXFrameAppendChild([In] D3DXFRAME* pFrameParent,[In] const D3DXFRAME* pFrameChild)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateKeyframedAnimationSet(System.String,System.Double,SharpDX.Direct3D9.PlaybackType,System.Int32,System.Int32,SharpDX.Direct3D9.CallbackKey,SharpDX.Direct3D9.KeyframedAnimationSet@)">
            <summary>	
            Creates a <see cref="T:SharpDX.Direct3D9.KeyframedAnimationSet"/> key framed animation set interface.	
            </summary>	
            <param name="nameRef">No documentation.</param>	
            <param name="ticksPerSecond">No documentation.</param>	
            <param name="playback">No documentation.</param>	
            <param name="numAnimations">No documentation.</param>	
            <param name="numCallbackKeys">No documentation.</param>	
            <param name="callbackKeysRef">No documentation.</param>	
            <param name="animationSetOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateKeyframedAnimationSet']/*"/>	
            <unmanaged>HRESULT D3DXCreateKeyframedAnimationSet([In] const char* pName,[In] double TicksPerSecond,[In] D3DXPLAYBACK_TYPE Playback,[In] unsigned int NumAnimations,[In] unsigned int NumCallbackKeys,[In] const D3DXKEY_CALLBACK* pCallbackKeys,[In] ID3DXKeyframedAnimationSet** ppAnimationSet)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FrameRegisterNamedMatrices(SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController)">
            <summary>	
            Given a frame hierarchy, registers all the named matrices in the animation mixer.	
            </summary>	
            <param name="frameRootRef"><para>The top level node in the frame hierarchy.</para></param>	
            <param name="animControllerRef"><para>Pointer to the animation controller object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFrameRegisterNamedMatrices']/*"/>	
            <unmanaged>HRESULT D3DXFrameRegisterNamedMatrices([In] D3DXFRAME* pFrameRoot,[In] ID3DXAnimationController* pAnimController)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXInMemory(System.IntPtr,System.Int32,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)">
            <summary>	
            Loads the first frame hierarchy from a .x file.	
            </summary>	
            <param name="memory"><para>Pointer to a buffer that contains the mesh hierarchy.</para></param>	
            <param name="sizeOfMemory"><para>Size of the pMemory buffer, in bytes.</para></param>	
            <param name="meshOptions"><para>Combination of one or more flags from the D3DXMESH enumeration that specify creation options for the mesh.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device object associated with the mesh.</para></param>	
            <param name="allocRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.IAllocateHierarchy"/> interface.</para></param>	
            <param name="userDataLoaderRef"><para>Application provided interface that allows loading of user data. See <see cref="T:SharpDX.Direct3D9.ILoadUserData"/>.</para></param>	
            <param name="frameHierarchyOut"><para>Returns a reference to the loaded frame hierarchy. See <see cref="T:SharpDX.Direct3D9.Frame"/>.</para></param>	
            <param name="animControllerOut"><para>Returns a reference to the animation controller corresponding to animation in the .x file. This is created with default tracks and events. See <see cref="T:SharpDX.Direct3D9.AnimationController"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            All the meshes in the file will be collapsed into one output mesh. If the file contains a frame hierarchy, all the transformations will be applied to the mesh.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadMeshHierarchyFromXInMemory']/*"/>	
            <unmanaged>HRESULT D3DXLoadMeshHierarchyFromXInMemory([In] const void* Memory,[In] unsigned int SizeOfMemory,[In] unsigned int MeshOptions,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXAllocateHierarchy* pAlloc,[In] ID3DXLoadUserData* pUserDataLoader,[In] D3DXFRAME** ppFrameHierarchy,[In] ID3DXAnimationController** ppAnimController)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCompressedAnimationSet(System.String,System.Double,SharpDX.Direct3D9.PlaybackType,SharpDX.Direct3D.Blob,System.Int32,SharpDX.Direct3D9.CallbackKey,SharpDX.Direct3D9.CompressedAnimationSet@)">
            <summary>	
            Creates a <see cref="T:SharpDX.Direct3D9.CompressedAnimationSet"/> key framed animation set interface that stores key frame data in a compressed format.	
            </summary>	
            <param name="nameRef">No documentation.</param>	
            <param name="ticksPerSecond">No documentation.</param>	
            <param name="playback">No documentation.</param>	
            <param name="compressedDataRef">No documentation.</param>	
            <param name="numCallbackKeys">No documentation.</param>	
            <param name="callbackKeysRef">No documentation.</param>	
            <param name="animationSetOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCompressedAnimationSet']/*"/>	
            <unmanaged>HRESULT D3DXCreateCompressedAnimationSet([In] const char* pName,[In] double TicksPerSecond,[In] D3DXPLAYBACK_TYPE Playback,[In] ID3DXBuffer* pCompressedData,[In] unsigned int NumCallbackKeys,[In] const D3DXKEY_CALLBACK* pCallbackKeys,[In] ID3DXCompressedAnimationSet** ppAnimationSet)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveMeshHierarchyToFileW(System.String,System.Int32,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController,SharpDX.Direct3D9.ISaveUserData)">
            <summary>	
            Creates a .x file and saves the mesh hierarchy and corresponding animations in it.	
            </summary>	
            <param name="filename"><para>Pointer to a string that specifies the name of the .x file identifying the saved mesh. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="xFormat"><para>Format of the .x file (text or binary, compressed or not). See <see cref="T:SharpDX.Direct3D9.XFileFormat"/>. <see cref="F:SharpDX.Direct3D9.XFileFormat.Compressed"/> can be combined (using a logical OR) with either the <see cref="F:SharpDX.Direct3D9.XFileFormat.Binary"/> or <see cref="F:SharpDX.Direct3D9.XFileFormat.Text"/> flags to reduce the output file size.</para></param>	
            <param name="frameRootRef"><para>Root node of the hierarchy to be saved. See <see cref="T:SharpDX.Direct3D9.Frame"/>.</para></param>	
            <param name="animControllerRef"><para>Animation controller that has animation sets to be stored. See <see cref="T:SharpDX.Direct3D9.AnimationController"/>.</para></param>	
            <param name="userDataSaverRef"><para>Application-provided interface that allows saving of user data. See <see cref="T:SharpDX.Direct3D9.ISaveUserData"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveMeshHierarchyToFileW(System.String,System.Int32,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController,SharpDX.Direct3D9.ISaveUserData)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveMeshHierarchyToFileA(System.String,System.Int32,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController,SharpDX.Direct3D9.ISaveUserData)"/>.This function does not save compressed animation sets.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveMeshHierarchyToFileW']/*"/>	
            <unmanaged>HRESULT D3DXSaveMeshHierarchyToFileW([In] const wchar_t* Filename,[In] unsigned int XFormat,[In] const D3DXFRAME* pFrameRoot,[In] ID3DXAnimationController* pAnimController,[In] ID3DXSaveUserData* pUserDataSaver)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FrameCalculateBoundingSphere(SharpDX.Direct3D9.Frame@,SharpDX.Vector3,System.Single)">
            <summary>	
            Computes the bounding sphere of all the meshes in the frame hierarchy.	
            </summary>	
            <param name="frameRootRef"><para>Pointer to the root node.</para></param>	
            <param name="objectCenterRef"><para>Returns the center of the bounding sphere.</para></param>	
            <param name="objectRadiusRef"><para>Returns the radius of the bounding sphere.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFrameCalculateBoundingSphere']/*"/>	
            <unmanaged>HRESULT D3DXFrameCalculateBoundingSphere([In] const D3DXFRAME* pFrameRoot,[In] D3DXVECTOR3* pObjectCenter,[In] float* pObjectRadius)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FrameFind(SharpDX.Direct3D9.Frame@,System.String)">
            <summary>	
            Finds the child frame of a root frame.	
            </summary>	
            <param name="frameRootRef"><para>Pointer to the root frame. See <see cref="T:SharpDX.Direct3D9.Frame"/>.</para></param>	
            <param name="name"><para>Name of the child frame to find.</para></param>	
            <returns>Returns the child frame if it is found, or <c>null</c> otherwise. See <see cref="T:SharpDX.Direct3D9.Frame"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFrameFind']/*"/>	
            <unmanaged>D3DXFRAME* D3DXFrameFind([In] const D3DXFRAME* pFrameRoot,[In] const char* Name)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateAnimationController(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.AnimationController@)">
            <summary>	
            Creates an animation controller object.	
            </summary>	
            <param name="maxNumMatrices"><para>Maximum number of animation outputs the controller can support.</para></param>	
            <param name="maxNumAnimationSets"><para>Maximum number of animation sets that can be mixed.</para></param>	
            <param name="maxNumTracks"><para>Maximum number of animation sets that can be mixed simultaneously.</para></param>	
            <param name="maxNumEvents"><para>Maximum number of outstanding events that the controller will support.</para></param>	
            <param name="animControllerOut"><para>Pointer to the animation controller object created. See <see cref="T:SharpDX.Direct3D9.AnimationController"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            An animation controller controls an animation mixer. The controller adds methods to modify blending parameters over time to enable smooth transitions.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateAnimationController']/*"/>	
            <unmanaged>HRESULT D3DXCreateAnimationController([In] unsigned int MaxNumMatrices,[In] unsigned int MaxNumAnimationSets,[In] unsigned int MaxNumTracks,[In] unsigned int MaxNumEvents,[In] ID3DXAnimationController** ppAnimController)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FrameDestroy(SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.IAllocateHierarchy)">
            <summary>	
            Destroys the subtree of frames under the root, including the root.	
            </summary>	
            <param name="frameRootRef"><para>Pointer to the root node.</para></param>	
            <param name="allocRef"><para>Allocation interface used to deallocate nodes of the frame hierarchy.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFrameDestroy']/*"/>	
            <unmanaged>HRESULT D3DXFrameDestroy([In] D3DXFRAME* pFrameRoot,[In] ID3DXAllocateHierarchy* pAlloc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveMeshHierarchyToFileA(System.String,System.Int32,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController,SharpDX.Direct3D9.ISaveUserData)">
            <summary>	
            Creates a .x file and saves the mesh hierarchy and corresponding animations in it.	
            </summary>	
            <param name="filename"><para>Pointer to a string that specifies the name of the .x file identifying the saved mesh. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="xFormat"><para>Format of the .x file (text or binary, compressed or not). See <see cref="T:SharpDX.Direct3D9.XFileFormat"/>. <see cref="F:SharpDX.Direct3D9.XFileFormat.Compressed"/> can be combined (using a logical OR) with either the <see cref="F:SharpDX.Direct3D9.XFileFormat.Binary"/> or <see cref="F:SharpDX.Direct3D9.XFileFormat.Text"/> flags to reduce the output file size.</para></param>	
            <param name="frameRootRef"><para>Root node of the hierarchy to be saved. See <see cref="T:SharpDX.Direct3D9.Frame"/>.</para></param>	
            <param name="animcontrollerRef"><para>Animation controller that has animation sets to be stored. See <see cref="T:SharpDX.Direct3D9.AnimationController"/>.</para></param>	
            <param name="userDataSaverRef"><para>Application-provided interface that allows saving of user data. See <see cref="T:SharpDX.Direct3D9.ISaveUserData"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveMeshHierarchyToFileW(System.String,System.Int32,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController,SharpDX.Direct3D9.ISaveUserData)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveMeshHierarchyToFileA(System.String,System.Int32,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController,SharpDX.Direct3D9.ISaveUserData)"/>.This function does not save compressed animation sets.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveMeshHierarchyToFileA']/*"/>	
            <unmanaged>HRESULT D3DXSaveMeshHierarchyToFileA([In] const char* Filename,[In] unsigned int XFormat,[In] const D3DXFRAME* pFrameRoot,[In] ID3DXAnimationController* pAnimcontroller,[In] ID3DXSaveUserData* pUserDataSaver)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXA(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="filename">No documentation.</param>	
            <param name="meshOptions">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="allocRef">No documentation.</param>	
            <param name="userDataLoaderRef">No documentation.</param>	
            <param name="frameHierarchyOut">No documentation.</param>	
            <param name="animControllerOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadMeshHierarchyFromXA']/*"/>	
            <unmanaged>HRESULT D3DXLoadMeshHierarchyFromXA([In] const char* Filename,[In] unsigned int MeshOptions,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXAllocateHierarchy* pAlloc,[In] ID3DXLoadUserData* pUserDataLoader,[In] D3DXFRAME** ppFrameHierarchy,[In] ID3DXAnimationController** ppAnimController)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)">
            <summary>	
            Loads the first frame hierarchy from a .x file.	
            </summary>	
            <param name="filename"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="meshOptions"><para>Combination of one or more flags from the D3DXMESH enumeration that specify creation options for the mesh.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device object associated with the mesh.</para></param>	
            <param name="allocRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.IAllocateHierarchy"/> interface.</para></param>	
            <param name="userDataLoaderRef"><para>Application provided interface that allows loading of user data. See <see cref="T:SharpDX.Direct3D9.ILoadUserData"/>.</para></param>	
            <param name="frameHierarchyOut"><para>Returns a reference to the loaded frame hierarchy. See <see cref="T:SharpDX.Direct3D9.Frame"/>.</para></param>	
            <param name="animControllerOut"><para>Returns a reference to the animation controller corresponding to animation in the .x file. This is created with default tracks and events. See <see cref="T:SharpDX.Direct3D9.AnimationController"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXA(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/>.All the meshes in the file will be collapsed into one output mesh. If the file contains a frame hierarchy, all the transformations will be applied to the mesh.D3DXLoadMeshHierarchyFromX loads the animation data and frame hierarchy from a .x file. It scans the .x file and builds a frame hierarchy and animation controller according to the <see cref="T:SharpDX.Direct3D9.IAllocateHierarchy"/>-derived object passed to it through pAlloc. Loading the data requires several steps as follows:Derive <see cref="T:SharpDX.Direct3D9.IAllocateHierarchy"/>, implementing each method.  This controls how frames and meshes are allocated and freed. Derive <see cref="T:SharpDX.Direct3D9.ILoadUserData"/>, implementing each method. If your .x file has no embedded user-defined data, or if you do not need it, you can skip this part. Create an object of your <see cref="T:SharpDX.Direct3D9.IAllocateHierarchy"/> class, and optionally of your LoadUserData class. You do not need to call any methods of these objects yourself. Call <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/>, passing in your <see cref="T:SharpDX.Direct3D9.IAllocateHierarchy"/> object and your <see cref="T:SharpDX.Direct3D9.ILoadUserData"/> object (or <c>null</c>) to create the frame hierarchy and animation controller.  All the animation sets and frames are automatically registered to the animation controller.During the load, CreateFrame and LoadFrameChildData are called back on each frame to control loading and allocation of the frame.  The application defines these methods to control how frames are stored.  CreateMeshContainer and LoadMeshChildData are called back on each mesh object to control loading and allocation of mesh objects.  LoadTopLevelData is called back for each top level object that doesn't get loaded by the other methods.To free this data, call ID3DXAnimationController::Release to free the animation sets, and D3DXFRAMEDestroy, passing in the root node of the frame hierarchy and an object of your derived <see cref="T:SharpDX.Direct3D9.IAllocateHierarchy"/> class.  DestroyFrame and DestroyMeshContainer will each be called for every frame and mesh object in the frame hierarchy.  Your implementation of DestroyFrame should release everything allocated by CreateFrame, and likewise for the mesh container methods.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadMeshHierarchyFromXW']/*"/>	
            <unmanaged>HRESULT D3DXLoadMeshHierarchyFromXW([In] const wchar_t* Filename,[In] unsigned int MeshOptions,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXAllocateHierarchy* pAlloc,[In] ID3DXLoadUserData* pUserDataLoader,[In] D3DXFRAME** ppFrameHierarchy,[In] ID3DXAnimationController** ppAnimController)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FrameNumNamedMatrices(SharpDX.Direct3D9.Frame@)">
            <summary>	
            Counts number of frames in a subtree that have non-null names.	
            </summary>	
            <param name="frameRootRef"><para>Pointer to the root node of the subtree.</para></param>	
            <returns>Returns the frame count.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFrameNumNamedMatrices']/*"/>	
            <unmanaged>unsigned int D3DXFrameNumNamedMatrices([In] const D3DXFRAME* pFrameRoot)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetDriverLevel(SharpDX.Direct3D9.Device)">
            <summary>	
            Returns the driver level.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface representing the device.</para></param>	
            <returns>The driver level. See remarks.</returns>	
            <remarks>	
            This method returns the driver version, which is one of the following:700 - Direct3D 7 level driver 800 - Direct3D 8 level driver 900 - Direct3D 9 level driver	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetDriverLevel']/*"/>	
            <unmanaged>unsigned int D3DXGetDriverLevel([In] IDirect3DDevice9* pDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.DebugMute(System.Boolean)">
            <summary>	
            Turns on or off all D3DX debug output.	
            </summary>	
            <param name="mute"><para>If TRUE, debugger output is halted; if <see cref="F:SharpDX.Result.False"/>, debug output is enabled.</para></param>	
            <returns>Returns the previous value of Mute.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXDebugMute']/*"/>	
            <unmanaged>BOOL D3DXDebugMute([In] BOOL Mute)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateFontA(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,SharpDX.Direct3D9.Font@)">
            <summary>	
            Creates a font object for a device and font.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device to be associated with the font object.</para></param>	
            <param name="height"><para>The height of the characters in logical units.</para></param>	
            <param name="width"><para>The width of the characters in logical units.</para></param>	
            <param name="weight"><para>Typeface weight. One example is bold.</para></param>	
            <param name="mipLevels"><para>The number of mipmap levels.</para></param>	
            <param name="italic"><para>True for italic font, false otherwise.</para></param>	
            <param name="charSet"><para>The character set of the font.</para></param>	
            <param name="outputPrecision"><para>Specifies how Windows should attempt to match the desired font sizes and characteristics with actual fonts. Use OUT_TT_ONLY_PRECIS for instance, to ensure that you always get a TrueType font.</para></param>	
            <param name="quality"><para>Specifies how Windows should match the desired font with a real font. It applies to raster fonts only and should not affect TrueType fonts.</para></param>	
            <param name="pitchAndFamily"><para>Pitch and family index.</para></param>	
            <param name="faceNameRef"><para>String containing the typeface name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks. </para></param>	
            <param name="fontOut"><para>Returns a reference to an <see cref="T:SharpDX.Direct3D9.Font"/> interface, representing the created font object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The creation of an <see cref="T:SharpDX.Direct3D9.Font"/> object requires that the device supports 32-bit color.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateFontW(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,SharpDX.Direct3D9.Font@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateFontA(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,SharpDX.Direct3D9.Font@)"/> because ANSI strings are being used.If you want more information about font parameters, see The Logical Font.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateFontA']/*"/>	
            <unmanaged>HRESULT D3DXCreateFontA([In] IDirect3DDevice9* pDevice,[In] int Height,[In] unsigned int Width,[In] unsigned int Weight,[In] unsigned int MipLevels,[In] BOOL Italic,[In] unsigned int CharSet,[In] unsigned int OutputPrecision,[In] unsigned int Quality,[In] unsigned int PitchAndFamily,[In] const char* pFaceName,[In] ID3DXFont** ppFont)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateFontW(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,SharpDX.Direct3D9.Font@)">
            <summary>	
            Creates a font object for a device and font.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device to be associated with the font object.</para></param>	
            <param name="height"><para>The height of the characters in logical units.</para></param>	
            <param name="width"><para>The width of the characters in logical units.</para></param>	
            <param name="weight"><para>Typeface weight. One example is bold.</para></param>	
            <param name="mipLevels"><para>The number of mipmap levels.</para></param>	
            <param name="italic"><para>True for italic font, false otherwise.</para></param>	
            <param name="charSet"><para>The character set of the font.</para></param>	
            <param name="outputPrecision"><para>Specifies how Windows should attempt to match the desired font sizes and characteristics with actual fonts. Use OUT_TT_ONLY_PRECIS for instance, to ensure that you always get a TrueType font.</para></param>	
            <param name="quality"><para>Specifies how Windows should match the desired font with a real font. It applies to raster fonts only and should not affect TrueType fonts.</para></param>	
            <param name="pitchAndFamily"><para>Pitch and family index.</para></param>	
            <param name="faceNameRef"><para>String containing the typeface name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks. </para></param>	
            <param name="fontOut"><para>Returns a reference to an <see cref="T:SharpDX.Direct3D9.Font"/> interface, representing the created font object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The creation of an <see cref="T:SharpDX.Direct3D9.Font"/> object requires that the device supports 32-bit color.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateFontW(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,SharpDX.Direct3D9.Font@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateFontA(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,SharpDX.Direct3D9.Font@)"/> because ANSI strings are being used.If you want more information about font parameters, see The Logical Font.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateFontW']/*"/>	
            <unmanaged>HRESULT D3DXCreateFontW([In] IDirect3DDevice9* pDevice,[In] int Height,[In] unsigned int Width,[In] unsigned int Weight,[In] unsigned int MipLevels,[In] BOOL Italic,[In] unsigned int CharSet,[In] unsigned int OutputPrecision,[In] unsigned int Quality,[In] unsigned int PitchAndFamily,[In] const wchar_t* pFaceName,[In] ID3DXFont** ppFont)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CheckVersion(System.Int32,System.Int32)">
            <summary>	
            Verify that the version of D3DX you compiled with is the version that you are running.	
            </summary>	
            <param name="d3DSdkVersion"><para>Use <see cref="F:SharpDX.Direct3D9.D3D9.SdkVersion"/>. See remarks.</para></param>	
            <param name="d3DXSdkVersion"><para>Use <see cref="F:SharpDX.Direct3D9.D3DX9.SdkVersion"/>. See remarks.</para></param>	
            <returns>Returns TRUE if the version of D3DX you compiled against is the version you are running with; otherwise, <see cref="F:SharpDX.Result.False"/> is returned.</returns>	
            <remarks>	
            Use this function during the initialization of your application like this:<code>	
             <see cref="T:SharpDX.Result"/> CD3DXMyApplication::Initialize(<see cref="T:System.IntPtr"/> hInstance,  LPCSTR szWindowName, LPCSTR szClassName, UINT uWidth, UINT uHeight)	
            { <see cref="T:SharpDX.Result"/> hr; if (!<see cref="M:SharpDX.Direct3D9.D3DX9.CheckVersion(System.Int32,System.Int32)"/>(<see cref="F:SharpDX.Direct3D9.D3D9.SdkVersion"/>, <see cref="F:SharpDX.Direct3D9.D3DX9.SdkVersion"/>)) return E_FAIL; ...	
            }	
            	
            </code>Use Direct3DCreate9 to verify that the correct runtime is installed.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCheckVersion']/*"/>	
            <unmanaged>BOOL D3DXCheckVersion([In] unsigned int D3DSdkVersion,[In] unsigned int D3DXSdkVersion)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateRenderToSurface(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.RenderToSurface@)">
            <summary>	
            Creates a render surface.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device to be associated with the render surface.</para></param>	
            <param name="width"><para>Width of the render surface, in pixels.</para></param>	
            <param name="height"><para>Height of the render surface, in pixels.</para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the pixel format of the render surface.</para></param>	
            <param name="depthStencil"><para>If TRUE, the render surface supports a depth-stencil surface. Otherwise, this member is set to <see cref="F:SharpDX.Result.False"/>. This function will create a new depth buffer.</para></param>	
            <param name="depthStencilFormat"><para>If  DepthStencil is set to TRUE, this parameter is a member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the depth-stencil format of the render surface.</para></param>	
            <param name="renderToSurfaceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.RenderToSurface"/> interface, representing the created render surface.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateRenderToSurface']/*"/>	
            <unmanaged>HRESULT D3DXCreateRenderToSurface([In] IDirect3DDevice9* pDevice,[In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] BOOL DepthStencil,[In] D3DFORMAT DepthStencilFormat,[In] ID3DXRenderToSurface** ppRenderToSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateFontIndirectW(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.FontDescription@,SharpDX.Direct3D9.Font@)">
            <summary>	
            Creates a font object indirectly for both a device and a font.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device to be associated with the font object.</para></param>	
            <param name="descRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.FontDescription"/> structure, describing the attributes of the font object to create. If the compiler settings require Unicode, the data type <see cref="T:SharpDX.Direct3D9.FontDescription"/> resolves to <see cref="T:SharpDX.Direct3D9.FontDescription"/>; otherwise, the data type resolves to D3DXFONT_DESCA. See Remarks.</para></param>	
            <param name="fontOut"><para>Returns a reference to an <see cref="T:SharpDX.Direct3D9.Font"/> interface, representing the created font object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateFontIndirectW(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.FontDescription@,SharpDX.Direct3D9.Font@)"/>. Otherwise, the function call resolves to D3DXCreateFontIndirectA because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateFontIndirectW']/*"/>	
            <unmanaged>HRESULT D3DXCreateFontIndirectW([In] IDirect3DDevice9* pDevice,[In] const D3DXFONT_DESCW* pDesc,[In] ID3DXFont** ppFont)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateSprite(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Sprite@)">
            <summary>	
            Creates a sprite object which is associated with a particular device. Sprite objects are used to draw 2D images to the screen.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device to be associated with the sprite.</para></param>	
            <param name="spriteOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Sprite"/> interface. This interface allows the user to access sprite functions. </para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>.If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This interface can be used to draw two dimensional images in screen space of the associated device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateSprite']/*"/>	
            <unmanaged>HRESULT D3DXCreateSprite([In] IDirect3DDevice9* pDevice,[In] ID3DXSprite** ppSprite)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateLine(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Line@)">
            <summary>	
            Uses a left-handed coordinate system to create a line.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the created box mesh.</para></param>	
            <param name="lineOut"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Line"/> interface.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function creates a mesh with the <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/> creation option and <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> Flexible Vertex Format (FVF).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateLine']/*"/>	
            <unmanaged>HRESULT D3DXCreateLine([In] IDirect3DDevice9* pDevice,[In] ID3DXLine** ppLine)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateRenderToEnvMap(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Format,System.Boolean,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.RenderToEnvironmentMap@)">
            <summary>	
            Creates a render environment map.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, which is the device to associate with the render surface.</para></param>	
            <param name="size"><para>Size of the render surface.</para></param>	
            <param name="mipLevels"><para>The number of mipmap levels.</para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type that describes the pixel format of the environment map.</para></param>	
            <param name="depthStencil"><para>If TRUE, the render surface supports a depth-stencil surface. Otherwise, this member is set to <see cref="F:SharpDX.Result.False"/>.</para></param>	
            <param name="depthStencilFormat"><para>If DepthStencil is set to TRUE, this parameter is a member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type that describes the depth-stencil format of the environment map.</para></param>	
            <param name="renderToEnvMapOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.RenderToEnvironmentMap"/> interface that represents the created render environment map.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateRenderToEnvMap']/*"/>	
            <unmanaged>HRESULT D3DXCreateRenderToEnvMap([In] IDirect3DDevice9* pDevice,[In] unsigned int Size,[In] unsigned int MipLevels,[In] D3DFORMAT Format,[In] BOOL DepthStencil,[In] D3DFORMAT DepthStencilFormat,[In] ID3DXRenderToEnvMap** ppRenderToEnvMap)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffect(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Create an effect from an ASCII or binary effect description.	
            </summary>	
            <param name="deviceRef"><para>Pointer to the device that will create the effect. See <see cref="T:SharpDX.Direct3D9.Device"/>.</para></param>	
            <param name="srcDataRef"><para>Pointer to a buffer containing an effect description.</para></param>	
            <param name="srcDataLen"><para>Length of the effect data, in bytes.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c>-terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures that describe preprocessor definitions. This value can be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory. </para></param>	
            <param name="flags"><para>If pSrcData contains a text effect, flags can be a combination of <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags and <see cref="T:SharpDX.Direct3D9.FX"/> flags; otherwise, pSrcData contains a binary effect and the only flags honored are <see cref="T:SharpDX.Direct3D9.FX"/> flags. The Direct3D 10 HLSL compiler is now the default. See Effect-Compiler Tool for details.</para></param>	
            <param name="poolRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.EffectPool"/> object to use for shared parameters. If this value is <c>null</c>, no parameters will be shared.</para></param>	
            <param name="effectOut"><para>Returns a reference to an <see cref="T:SharpDX.Direct3D9.Effect"/> interface.</para></param>	
            <param name="compilationErrorsOut"><para>Returns a buffer containing a listing of compile errors.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffect']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffect([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompiler(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler,SharpDX.Direct3D.Blob@)">
            <summary>	
            Creates an effect compiler from an ASCII effect description.	
            </summary>	
            <param name="srcDataRef"><para>Pointer to a buffer containing an effect description.</para></param>	
            <param name="srcDataLen"><para>Length, in bytes, of the effect data.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c>-terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures that describe preprocessor definitions. This value can be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory. </para></param>	
            <param name="flags"><para>Compile options identified by various flags (see <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags). The Direct3D 10 HLSL compiler is now the default. See Effect-Compiler Tool for details.</para></param>	
            <param name="compilerOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.EffectCompiler"/> interface containing the effect compiler. </para></param>	
            <param name="parseErrorsOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface containing any error messages that occurred during compilation. This parameter can be set to <c>null</c> to ignore error messages. </para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectCompiler']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectCompiler([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[Out, Fast] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromResourceW(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct3D9.EffectCompiler"/> from an ASCII effect description.	
            </summary>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="definesRef">No documentation.</param>	
            <param name="includeRef">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="compilerOut">No documentation.</param>	
            <param name="parseErrorsOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromResourceW(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromResourceA(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectCompilerFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectCompilerFromResourceW([In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.DisassembleEffect(SharpDX.Direct3D9.Effect,System.Boolean,SharpDX.Direct3D.Blob@)">
            <summary>	
            Disassemble an effect.	
            </summary>	
            <param name="effectRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Effect"/> interface that contains the effect.</para></param>	
            <param name="enableColorCode"><para>Enable color coding to make the disassembly easier to read.</para></param>	
            <param name="disassemblyOut"><para>Returns a buffer containing the disassembled shader. See <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXDisassembleEffect']/*"/>	
            <unmanaged>HRESULT D3DXDisassembleEffect([In] ID3DXEffect* pEffect,[In] BOOL EnableColorCode,[In] ID3DXBuffer** ppDisassembly)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileExW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Create an effect from an ASCII or binary effect description. This function is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to control which parameters are ignored by the effects system.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcFileRef">No documentation.</param>	
            <param name="definesRef">No documentation.</param>	
            <param name="includeRef">No documentation.</param>	
            <param name="skipConstantsRef">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="poolRef">No documentation.</param>	
            <param name="effectOut">No documentation.</param>	
            <param name="compilationErrorsOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to specify which effect constants will be managed by the application. A constant that is managed by the application is ignored by the effects system. That is, the application is responsible for initializing the constant as well as saving and restoring its state whenever appropriate.This function checks each constant in pSkipConstants to see that:It is bound to a constant register. It is only used in HLSL shader code.If a constant is named in the string that is not present in the effect, it is ignored.If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectFromFileExW']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromFileA(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Creates an effect compiler from an ASCII effect description.	
            </summary>	
            <param name="srcFileRef"><para>Pointer to the filename. This parameter supports both Unicode and ANSI strings. See Remarks.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c>-terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures that describe preprocessor definitions. This value can be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory. </para></param>	
            <param name="flags"><para>Compile options identified by various flags (see <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags). The Direct3D 10 HLSL compiler is now the default. See Effect-Compiler Tool for details.</para></param>	
            <param name="compilerOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.EffectCompiler"/> interface, containing the effect compiler. </para></param>	
            <param name="parseErrorsOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface, containing any error messages that occurred during compilation. This parameter can be set to <c>null</c> to ignore error messages. </para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromFileW(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromFileA(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectCompilerFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectCompilerFromFileA([In] const char* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromFileW(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Creates an effect compiler from an ASCII effect description.	
            </summary>	
            <param name="srcFileRef"><para>Pointer to the filename. This parameter supports both Unicode and ANSI strings. See Remarks.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c>-terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures that describe preprocessor definitions. This value can be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory. </para></param>	
            <param name="flags"><para>Compile options identified by various flags (see <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags). The Direct3D 10 HLSL compiler is now the default. See Effect-Compiler Tool for details.</para></param>	
            <param name="compilerOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.EffectCompiler"/> interface, containing the effect compiler. </para></param>	
            <param name="parseErrorsOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface, containing any error messages that occurred during compilation. This parameter can be set to <c>null</c> to ignore error messages. </para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromFileW(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromFileA(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectCompilerFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectCompilerFromFileW([In] const wchar_t* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileExA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Create an effect from an ASCII or binary effect description. This function is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to control which parameters are ignored by the effects system.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcFileRef">No documentation.</param>	
            <param name="definesRef">No documentation.</param>	
            <param name="includeRef">No documentation.</param>	
            <param name="skipConstantsRef">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="poolRef">No documentation.</param>	
            <param name="effectOut">No documentation.</param>	
            <param name="compilationErrorsOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to specify which effect constants will be managed by the application. A constant that is managed by the application is ignored by the effects system. That is, the application is responsible for initializing the constant as well as saving and restoring its state whenever appropriate.This function checks each constant in pSkipConstants to see that:It is bound to a constant register. It is only used in HLSL shader code.If a constant is named in the string that is not present in the effect, it is ignored.If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectFromFileExA']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectFromFileExA([In] IDirect3DDevice9* pDevice,[In] const char* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Create an effect from an ASCII or binary effect description. This is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to control which parameters are ignored by the effects system.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="definesRef">No documentation.</param>	
            <param name="includeRef">No documentation.</param>	
            <param name="skipConstantsRef">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="poolRef">No documentation.</param>	
            <param name="effectOut">No documentation.</param>	
            <param name="compilationErrorsOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to specify which effect constants will be managed by the application. A constant that is managed by the application is ignored by the effects system. That is, the application is responsible for initializing the constant as well as saving and restoring its state whenever appropriate.This function checks each constant in pSkipConstants to see that:It is bound to a constant register. It is only used in HLSL shader code.If a constant is named in the string that is not present in the effect, it is ignored.If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.D3DXCreateEffectFromResource loads data from a resource of type RT_RCDATA. See MSDN for more information about Windows resources.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectFromResourceExA']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectFromResourceExA([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Create an effect from an ASCII or binary effect description. This is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to control which parameters are ignored by the effects system.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="definesRef">No documentation.</param>	
            <param name="includeRef">No documentation.</param>	
            <param name="skipConstantsRef">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="poolRef">No documentation.</param>	
            <param name="effectOut">No documentation.</param>	
            <param name="compilationErrorsOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to specify which effect constants will be managed by the application. A constant that is managed by the application is ignored by the effects system. That is, the application is responsible for initializing the constant as well as saving and restoring its state whenever appropriate.This function checks each constant in pSkipConstants to see that:It is bound to a constant register. It is only used in HLSL shader code.If a constant is named in the string that is not present in the effect, it is ignored.If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.D3DXCreateEffectFromResource loads data from a resource of type RT_RCDATA. See MSDN for more information about Windows resources.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectFromResourceExW']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectFromResourceExW([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Create an effect from an ASCII or binary effect description.	
            </summary>	
            <param name="deviceRef"><para>Pointer to the device.</para></param>	
            <param name="hSrcModule"><para>Handle to a module containing the effect description. If this parameter is <c>null</c>, the current module will be used.</para></param>	
            <param name="srcResourceRef"><para>Pointer to the resource. This parameter supports both Unicode and ANSI strings. See Remarks.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c>-terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures that describe preprocessor definitions. This value can be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory. </para></param>	
            <param name="flags"><para>If hSrcModule contains a text effect, flags can be a combination of <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags and <see cref="T:SharpDX.Direct3D9.FX"/> flags; otherwise, hSrcModule contains a binary effect and the only flags honored are <see cref="T:SharpDX.Direct3D9.FX"/> flags. The Direct3D 10 HLSL compiler is now the default. See Effect-Compiler Tool for details.</para></param>	
            <param name="poolRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.EffectPool"/> object to use for shared parameters. If this value is <c>null</c>, no parameters will be shared.</para></param>	
            <param name="effectOut"><para>Returns a buffer containing the compiled effect.</para></param>	
            <param name="compilationErrorsOut"><para>Returns a buffer containing a listing of compile errors.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.D3DXCreateEffectFromResource loads data from a resource of type RT_RCDATA. See MSDN for more information about Windows resources.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectFromResourceW([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectEx(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Creates an effect from an ASCII or binary effect description. This function is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffect(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to control which parameters are ignored by the effects system.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcDataRef">No documentation.</param>	
            <param name="srcDataLen">No documentation.</param>	
            <param name="definesRef">No documentation.</param>	
            <param name="includeRef">No documentation.</param>	
            <param name="skipConstantsRef">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="poolRef">No documentation.</param>	
            <param name="effectOut">No documentation.</param>	
            <param name="compilationErrorsOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function is an extended version of <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffect(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> that allows an application to specify which effect constants will be managed by the application. A constant that is managed by the application is ignored by the effects system. That is, the application is responsible for initializing the constant as well as saving and restoring its state whenever appropriate.This function checks each constant in pSkipConstants to see that:It is bound to a constant register. It is only used in HLSL shader code.If a constant is named in the string that is not present in the effect, it is ignored.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectEx']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pSkipConstants,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Create an effect from an ASCII or binary effect description.	
            </summary>	
            <param name="deviceRef"><para>Pointer to the device that will create the effect. See <see cref="T:SharpDX.Direct3D9.Device"/>.</para></param>	
            <param name="srcFileRef"><para>Pointer to the filename. This parameter supports both Unicode and ANSI strings. See Remarks.</para></param>	
            <param name="definesRef"><para>Optional <c>null</c>-terminated array of preprocessor macro definitions. See <see cref="T:SharpDX.Direct3D9.Macro"/>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory. </para></param>	
            <param name="flags"><para>If pSrcFile contains a text effect, flags can be a combination of <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags and <see cref="T:SharpDX.Direct3D9.FX"/> flags; otherwise, pSrcFile contains a binary effect and the only flags honored are <see cref="T:SharpDX.Direct3D9.FX"/> flags. The Direct3D 10 HLSL compiler is now the default. See Effect-Compiler Tool for details.</para></param>	
            <param name="poolRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.EffectPool"/> object to use for shared parameters. If this value is <c>null</c>, no parameters will be shared.</para></param>	
            <param name="effectOut"><para>Returns a reference to a buffer containing the compiled effect. See <see cref="T:SharpDX.Direct3D9.Effect"/>.</para></param>	
            <param name="compilationErrorsOut"><para>Returns a reference to a buffer containing a listing of compile errors. See <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectFromFileA([In] IDirect3DDevice9* pDevice,[In] const char* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Create an effect from an ASCII or binary effect description.	
            </summary>	
            <param name="deviceRef"><para>Pointer to the device that will create the effect. See <see cref="T:SharpDX.Direct3D9.Device"/>.</para></param>	
            <param name="srcFileRef"><para>Pointer to the filename. This parameter supports both Unicode and ANSI strings. See Remarks.</para></param>	
            <param name="definesRef"><para>Optional <c>null</c>-terminated array of preprocessor macro definitions. See <see cref="T:SharpDX.Direct3D9.Macro"/>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory. </para></param>	
            <param name="flags"><para>If pSrcFile contains a text effect, flags can be a combination of <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags and <see cref="T:SharpDX.Direct3D9.FX"/> flags; otherwise, pSrcFile contains a binary effect and the only flags honored are <see cref="T:SharpDX.Direct3D9.FX"/> flags. The Direct3D 10 HLSL compiler is now the default. See Effect-Compiler Tool for details.</para></param>	
            <param name="poolRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.EffectPool"/> object to use for shared parameters. If this value is <c>null</c>, no parameters will be shared.</para></param>	
            <param name="effectOut"><para>Returns a reference to a buffer containing the compiled effect. See <see cref="T:SharpDX.Direct3D9.Effect"/>.</para></param>	
            <param name="compilationErrorsOut"><para>Returns a reference to a buffer containing a listing of compile errors. See <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectFromFileW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectPool(SharpDX.Direct3D9.EffectPool)">
            <summary>	
            Create an effect pool. A pool is used to share parameters between effects.	
            </summary>	
            <param name="poolOut"><para>Returns a reference to the created pool.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>.If the arguments are invalid, the method will return <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.If the method fails, the return value will be E_FAIL.</returns>	
            <remarks>	
            For effects within a pool, shared parameters with the same name share values.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectPool']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectPool([Out, Fast] ID3DXEffectPool** ppPool)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromResourceA(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Creates an <see cref="T:SharpDX.Direct3D9.EffectCompiler"/> from an ASCII effect description.	
            </summary>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="definesRef">No documentation.</param>	
            <param name="includeRef">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="compilerOut">No documentation.</param>	
            <param name="parseErrorsOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromResourceW(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectCompilerFromResourceA(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectCompiler@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectCompilerFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectCompilerFromResourceA([In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectCompiler** ppCompiler,[In] ID3DXBuffer** ppParseErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Create an effect from an ASCII or binary effect description.	
            </summary>	
            <param name="deviceRef"><para>Pointer to the device.</para></param>	
            <param name="hSrcModule"><para>Handle to a module containing the effect description. If this parameter is <c>null</c>, the current module will be used.</para></param>	
            <param name="srcResourceRef"><para>Pointer to the resource. This parameter supports both Unicode and ANSI strings. See Remarks.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c>-terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures that describe preprocessor definitions. This value can be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory. </para></param>	
            <param name="flags"><para>If hSrcModule contains a text effect, flags can be a combination of <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags and <see cref="T:SharpDX.Direct3D9.FX"/> flags; otherwise, hSrcModule contains a binary effect and the only flags honored are <see cref="T:SharpDX.Direct3D9.FX"/> flags. The Direct3D 10 HLSL compiler is now the default. See Effect-Compiler Tool for details.</para></param>	
            <param name="poolRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.EffectPool"/> object to use for shared parameters. If this value is <c>null</c>, no parameters will be shared.</para></param>	
            <param name="effectOut"><para>Returns a buffer containing the compiled effect.</para></param>	
            <param name="compilationErrorsOut"><para>Returns a buffer containing a listing of compile errors.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the LPCTSTR data type resolves to LPCSTR.The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D9.EffectPool,SharpDX.Direct3D9.Effect@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.D3DXCreateEffectFromResource loads data from a resource of type RT_RCDATA. See MSDN for more information about Windows resources.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateEffectFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXCreateEffectFromResourceA([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXEffectPool* pPool,[In] ID3DXEffect** ppEffect,[In] ID3DXBuffer** ppCompilationErrors)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FVFFromDeclarator(SharpDX.Direct3D9.VertexElement[])">
            <summary>	
            Returns a flexible vertex format (FVF) code from a declarator.	
            </summary>	
            <param name="declaratorRef"><para>Array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements, describing the FVF code.</para></param>	
            <returns><para>Pointer to a  DWORD value, representing the returned combination of <see cref="T:SharpDX.Direct3D9.VertexFormat"/> that describes the vertex format returned from the declarator.</para></returns>	
            <remarks>	
            This function will fail for any declarator that does not map directly to an FVF.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFVFFromDeclarator']/*"/>	
            <unmanaged>HRESULT D3DXFVFFromDeclarator([In, Buffer] const D3DVERTEXELEMENT9* pDeclarator,[Out] D3DFVF* pFVF)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveMeshToXW(System.String,SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.ExtendedMaterial@,SharpDX.Direct3D9.EffectInstance,System.Int32,System.Int32)">
            <summary>	
            Saves a mesh to a .x file.	
            </summary>	
            <param name="filenameRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="meshRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the mesh to save to a .x file.</para></param>	
            <param name="adjacencyRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the mesh. This parameter may be <c>null</c>.</para></param>	
            <param name="materialsRef"><para>Pointer to an array of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures, containing material information to be saved in the .x file.</para></param>	
            <param name="effectInstancesRef"><para>Pointer to an array of effect instances, one per attribute group in the mesh. This parameter may be <c>null</c>. An effect instance is a particular instance of state information used to initialize an effect. For more information, see <see cref="T:SharpDX.Direct3D9.EffectInstance"/>.</para></param>	
            <param name="numMaterials"><para>Number of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures in the pMaterials array.</para></param>	
            <param name="format"><para>A combination of file format and save options when saving an .x file. See D3DX X File Constants.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveMeshToXW(System.String,SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.ExtendedMaterial@,SharpDX.Direct3D9.EffectInstance,System.Int32,System.Int32)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveMeshToXA(System.String,SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.ExtendedMaterial@,SharpDX.Direct3D9.EffectInstance,System.Int32,System.Int32)"/> because ANSI strings are being used.The default file format is binary; however, if a file is specified as both a binary and a text file, it will be saved as a text file. Regardless of the file format, you may also use the compressed format to reduce the file size.The following is a typical code example of how to use this function.<code>	
             <see cref="T:SharpDX.Direct3D9.Mesh"/>*    m_pMesh;           // Mesh object to be saved to a .x file	
            <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/>* m_pMaterials;      // Array of material structs in the mesh	
            DWORD         m_dwNumMaterials;  // Number of material structs in the mesh DWORD dwFormat = <see cref="F:SharpDX.Direct3D9.XFileFormat.Binary"/>;  // Binary-format .x file (default)	
            // DWORD dwFormat = <see cref="F:SharpDX.Direct3D9.XFileFormat.Text"/>; // Text-format .x file // Load mesh into m_pMesh and determine values of m_pMaterials and 	
            // m_dwNumMaterials with calls to D3DXLoadMeshxxx or other D3DX functions // ... <see cref="M:SharpDX.Direct3D9.D3DX9.SaveMeshToXW(System.String,SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.ExtendedMaterial@,SharpDX.Direct3D9.EffectInstance,System.Int32,System.Int32)"/>( L"outputxfilename.x", m_pMesh, <c>null</c>, m_pMaterials, <c>null</c>, m_dwNumMaterials, dwFormat );	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveMeshToXW']/*"/>	
            <unmanaged>HRESULT D3DXSaveMeshToXW([In] const wchar_t* pFilename,[In] ID3DXMesh* pMesh,[In] const unsigned int* pAdjacency,[In] const D3DXMATERIAL* pMaterials,[In] const D3DXEFFECTINSTANCE* pEffectInstances,[In] unsigned int NumMaterials,[In] unsigned int Format)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SimplifyMesh(SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.AttributeWeights@,System.Single,System.Int32,System.Int32,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Generates a simplified mesh using the provided weights that come as close as possible to the given MinValue.	
            </summary>	
            <param name="meshRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the source mesh.</para></param>	
            <param name="adjacencyRef"><para>Pointer to an array of three  DWORDs per face that specify the three neighbors for each face in the mesh to be simplified.</para></param>	
            <param name="vertexAttributeWeightsRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.AttributeWeights"/> structure, containing the weight for each vertex component. If this parameter is set to <c>null</c>, a default structure is used. See Remarks.</para></param>	
            <param name="vertexWeightsRef"><para>Pointer to an array of vertex weights. If this parameter is set to <c>null</c>, all vertex weights are set to 1.0.</para></param>	
            <param name="minValue"><para>Number of vertices or faces, depending on the flag set in the  Options parameter, by which to simplify the source mesh.</para></param>	
            <param name="options"><para>Specifies simplification options for the mesh. One of the flags in D3DXMESHSIMP can be set.</para></param>	
            <param name="meshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the returned simplification mesh.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function generates a mesh that has MinValue vertices or faces.If the simplification process cannot reduce the mesh to MinValue, the call still succeeds because MinValue is a desired minimum, not an absolute minimum.If pVertexAttributeWeights is set to <c>null</c>, the following values are assigned to the default <see cref="T:SharpDX.Direct3D9.AttributeWeights"/> structure.<code>	
             <see cref="T:SharpDX.Direct3D9.AttributeWeights"/> AttributeWeights; AttributeWeights.Position  = 1.0;	
            AttributeWeights.Boundary =  1.0;	
            AttributeWeights.Normal   =  1.0;	
            AttributeWeights.Diffuse  =  0.0;	
            AttributeWeights.Specular =  0.0;	
            AttributeWeights.Tex[8]   =  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};	
            	
            </code>This default structure is what most applications should use because it considers only geometric and normal adjustment. Only in special cases will the other member fields need to be modified.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSimplifyMesh']/*"/>	
            <unmanaged>HRESULT D3DXSimplifyMesh([In] ID3DXMesh* pMesh,[In] const unsigned int* pAdjacency,[In] const D3DXATTRIBUTEWEIGHTS* pVertexAttributeWeights,[In] const float* pVertexWeights,[In] unsigned int MinValue,[In] unsigned int Options,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.TessellateRectPatch(SharpDX.Direct3D9.VertexBuffer,System.Single,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.RectanglePatchInfo@,SharpDX.Direct3D9.Mesh)">
            <summary>	
            Tessellates a rectangular higher-order surface patch into a triangle mesh.	
            </summary>	
            <param name="vBRef"><para>Vertex buffer containing the patch data.</para></param>	
            <param name="numSegsRef"><para>Pointer to an array of four floating-point values that identify the number of segments into which each edge of the rectangle patch should be divided when tessellated. See <see cref="T:SharpDX.Direct3D9.RectanglePatchInfo"/>.</para></param>	
            <param name="dwInDeclRef"><para>Vertex declaration structure that defines the vertex data. See <see cref="T:SharpDX.Direct3D9.VertexElement"/>.</para></param>	
            <param name="rectPatchInfoRef"><para>Describes a rectangular patch. See <see cref="T:SharpDX.Direct3D9.RectanglePatchInfo"/>.</para></param>	
            <param name="meshRef"><para>Pointer to the created mesh. See <see cref="T:SharpDX.Direct3D9.Mesh"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Use <see cref="M:SharpDX.Direct3D9.D3DX9.RectPatchSize(System.Single,System.Int32@,System.Int32@)"/> to get the number of output vertices and indices that the tessellation function needs.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTessellateRectPatch']/*"/>	
            <unmanaged>HRESULT D3DXTessellateRectPatch([In] IDirect3DVertexBuffer9* pVB,[In] const float* pNumSegs,[In] const D3DVERTEXELEMENT9* pdwInDecl,[In] const D3DRECTPATCH_INFO* pRectPatchInfo,[In] ID3DXMesh* pMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.IntersectSubset(SharpDX.Direct3D9.BaseMesh,System.Int32,SharpDX.Vector3,SharpDX.Vector3,System.Boolean,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D.Blob@,System.Int32)">
            <summary>	
            Intersects the specified ray with the given mesh subset. This provides similar functionality to <see cref="M:SharpDX.Direct3D9.D3DX9.Intersect(SharpDX.Direct3D9.BaseMesh,SharpDX.Vector3,SharpDX.Vector3,System.Boolean,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D.Blob@,System.Int32)"/>.	
            </summary>	
            <param name="meshRef">No documentation.</param>	
            <param name="attribId">No documentation.</param>	
            <param name="rayPosRef">No documentation.</param>	
            <param name="rayDirRef">No documentation.</param>	
            <param name="hitRef">No documentation.</param>	
            <param name="faceIndexRef">No documentation.</param>	
            <param name="uRef">No documentation.</param>	
            <param name="vRef">No documentation.</param>	
            <param name="distRef">No documentation.</param>	
            <param name="allHitsOut">No documentation.</param>	
            <param name="countOfHitsRef">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following value: E_OUTOFMEMORY.</returns>	
            <remarks>	
            The <see cref="M:SharpDX.Direct3D9.D3DX9.IntersectSubset(SharpDX.Direct3D9.BaseMesh,System.Int32,SharpDX.Vector3,SharpDX.Vector3,System.Boolean,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D.Blob@,System.Int32)"/> function provides a way to understand points in and around a triangle, independent of where the triangle is actually located. This function returns the resulting point by using the following equation: V1 + U(V2 - V1) + V(V3 - V1).Any point in the plane V1V2V3 can be represented by the barycentric coordinate (U,V). The parameter U controls how much V2 gets weighted into the result and the parameter V controls how much V3 gets weighted into the result. Lastly, the value of [1 - (U + V)] controls how much V1 gets weighted into the result.Barycentric coordinates are a form of general coordinates. In this context, using barycentric coordinates represents a change in coordinate systems. What holds true for Cartesian coordinates holds true for barycentric coordinates.Barycentric coordinates define a point inside a triangle in terms of the triangle's vertices.  For a more in-depth description of barycentric coordinates, see Mathworld's Barycentric Coordinates Description.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIntersectSubset']/*"/>	
            <unmanaged>HRESULT D3DXIntersectSubset([In] ID3DXBaseMesh* pMesh,[In] unsigned int AttribId,[In] const D3DXVECTOR3* pRayPos,[In] const D3DXVECTOR3* pRayDir,[In] BOOL* pHit,[In] unsigned int* pFaceIndex,[In] float* pU,[In] float* pV,[In] float* pDist,[In] ID3DXBuffer** ppAllHits,[In] unsigned int* pCountOfHits)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrameEx(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Performs tangent frame computations on a mesh. Tangent, binormal, and optionally normal vectors are generated. Singularities are handled as required by grouping edges and splitting vertices.	
            </summary>	
            <param name="meshRef"><para>Pointer to an input <see cref="T:SharpDX.Direct3D9.Mesh"/> mesh object.</para></param>	
            <param name="dwTextureInSemantic"><para>Specifies the texture coordinate input semantic. If D3DX_DEFAULT, the function assumes that there are no texture coordinates, and the function will fail unless normal vector calculation is specified.</para></param>	
            <param name="dwTextureInIndex"><para>If a mesh has multiple texture coordinates, specifies the texture coordinate to use for the tangent frame computations. If zero, the mesh has only a single texture coordinate.</para></param>	
            <param name="dwUPartialOutSemantic"><para>Specifies the output semantic for the type, typically <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Tangent"/>, that describes where the partial derivative with respect to the U texture coordinate will be stored. If D3DX_DEFAULT, then this partial derivative will not be stored.</para></param>	
            <param name="dwUPartialOutIndex"><para>Specifies the semantic index at which to store the partial derivative with respect to the U texture coordinate.</para></param>	
            <param name="dwVPartialOutSemantic"><para>Specifies the <see cref="T:SharpDX.Direct3D9.DeclarationUsage"/> type, typically <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Binormal"/>, that describes where the partial derivative with respect to the V texture coordinate will be stored. If D3DX_DEFAULT, then this partial derivative will not be stored.</para></param>	
            <param name="dwVPartialOutIndex"><para>Specifies the semantic index at which to store the partial derivative with respect to the V texture coordinate.</para></param>	
            <param name="dwNormalOutSemantic"><para>Specifies the output normal semantic, typically <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Normal"/>, that describes where the normal vector at each vertex will be stored. If D3DX_DEFAULT, then this normal vector will not be stored.</para></param>	
            <param name="dwNormalOutIndex"><para>Specifies the semantic index at which to store the normal vector at each vertex.</para></param>	
            <param name="dwOptions"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.TangentOptions"/> flags that specify tangent frame computation options. If <c>null</c>, the following options will be specified:</para>  Description <see cref="T:SharpDX.Direct3D9.TangentOptions"/> Flag Value Weight the normal vector length by the angle, in radians, subtended by the two edges leaving the vertex.&amp; !( <see cref="F:SharpDX.Direct3D9.TangentOptions.WeightByArea"/> | <see cref="F:SharpDX.Direct3D9.TangentOptions.WeightEqual"/> ) Compute orthogonal Cartesian coordinates from texture coordinates (u, v). See Remarks.&amp; !( <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/> | <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV"/> ) Textures are not wrapped in either u or v directions&amp; !( <see cref="F:SharpDX.Direct3D9.TangentOptions.WrapUV"/> ) Partial derivatives with respect to texture coordinates are normalized.&amp; !( <see cref="F:SharpDX.Direct3D9.TangentOptions.DontNormalizePartials"/> ) Vertices are ordered in a counterclockwise direction around each triangle.&amp; !( <see cref="F:SharpDX.Direct3D9.TangentOptions.WindCW"/> ) Use per-vertex normal vectors already present in the input mesh.&amp; !( <see cref="F:SharpDX.Direct3D9.TangentOptions.CalculateNormals"/> )  <para>?</para> <para>If <see cref="F:SharpDX.Direct3D9.TangentOptions.GenerateInPlace"/> is not set, the input mesh is cloned. The original mesh must therefore have sufficient space to store the computed normal vector and partial derivative data.</para></param>	
            <param name="dwAdjacencyRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the mesh. The number of bytes in this array must be at least 3 * GetNumFaces * sizeof(DWORD).</para></param>	
            <param name="fPartialEdgeThreshold"><para>Specifies the maximum cosine of the angle at which two partial derivatives are deemed to be incompatible with each other. If the dot product of the direction of the two partial derivatives in adjacent triangles is less than or equal to this threshold, then the vertices shared between these triangles will be split.</para></param>	
            <param name="fSingularPointThreshold"><para>Specifies the maximum magnitude of a partial derivative at which a vertex will be deemed singular. As multiple triangles are incident on a point that have nearby tangent frames, but altogether cancel each other out (such as at the top of a sphere), the magnitude of the partial derivative will decrease. If the magnitude is less than or equal to this threshold, then the vertex will be split for every triangle that contains it.</para></param>	
            <param name="fNormalEdgeThreshold"><para>Similar to fPartialEdgeThreshold, specifies the maximum cosine of the angle between two normals that is a threshold beyond which vertices shared between triangles will be split. If the dot product of the two normals is less than the threshold, the shared vertices will be split, forming a hard edge between neighboring triangles. If the dot product is more than the threshold, neighboring triangles will have their normals interpolated.</para></param>	
            <param name="meshOutOut"><para>Address of a reference to an output <see cref="T:SharpDX.Direct3D9.Mesh"/> mesh object that receives the computed tangent, binormal, and normal vector data.</para></param>	
            <param name="vertexMappingOut"><para>Address of a reference to an output <see cref="T:SharpDX.Direct3D.Blob"/> buffer object that receives a mapping of new vertices computed by this method to the original vertices. The buffer is an array of DWORDs, with the array size defined as the number of vertices in ppMeshOut.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            A simplified version of this function is available as <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrame(SharpDX.Direct3D9.Mesh,System.Int32)"/>.The computed normal vector at each vertex is always normalized to have unit length.The most robust solution for computing orthogonal Cartesian coordinates is to not set flags <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/> and <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV"/>, so that orthogonal coordinates are computed from both texture coordinates u and v. However, in this case, if either u or v is zero, then the function will compute orthogonal coordinates using <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV"/> or <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeTangentFrameEx']/*"/>	
            <unmanaged>HRESULT D3DXComputeTangentFrameEx([In] ID3DXMesh* pMesh,[In] unsigned int dwTextureInSemantic,[In] unsigned int dwTextureInIndex,[In] unsigned int dwUPartialOutSemantic,[In] unsigned int dwUPartialOutIndex,[In] unsigned int dwVPartialOutSemantic,[In] unsigned int dwVPartialOutIndex,[In] unsigned int dwNormalOutSemantic,[In] unsigned int dwNormalOutIndex,[In] unsigned int dwOptions,[In] const unsigned int* pdwAdjacency,[In] float fPartialEdgeThreshold,[In] float fSingularPointThreshold,[In] float fNormalEdgeThreshold,[In] ID3DXMesh** ppMeshOut,[In] ID3DXBuffer** ppVertexMapping)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeIMTFromPerTexelSignal(SharpDX.Direct3D9.Mesh,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.FunctionCallback,System.IntPtr,SharpDX.Direct3D.Blob@)">
            <summary>	
            Calculate per-triangle IMT's from per-texel data. This function is similar to <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeIMTFromTexture(SharpDX.Direct3D9.Mesh,SharpDX.Direct3D9.Texture,System.Int32,System.Int32,SharpDX.FunctionCallback,System.IntPtr,SharpDX.Direct3D.Blob@)"/>, but it uses a float array to pass in the data, and it can calculate higher dimensional values than 4.	
            </summary>	
            <param name="meshRef">No documentation.</param>	
            <param name="dwTextureIndex">No documentation.</param>	
            <param name="fTexelSignalRef">No documentation.</param>	
            <param name="uWidth">No documentation.</param>	
            <param name="uHeight">No documentation.</param>	
            <param name="uSignalDimension">No documentation.</param>	
            <param name="uComponents">No documentation.</param>	
            <param name="dwOptions">No documentation.</param>	
            <param name="statusCallbackRef">No documentation.</param>	
            <param name="userContextRef">No documentation.</param>	
            <param name="iMTDataOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>; otherwise, the value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeIMTFromPerTexelSignal']/*"/>	
            <unmanaged>HRESULT D3DXComputeIMTFromPerTexelSignal([In] ID3DXMesh* pMesh,[In] unsigned int dwTextureIndex,[In] float* pfTexelSignal,[In] unsigned int uWidth,[In] unsigned int uHeight,[In] unsigned int uSignalDimension,[In] unsigned int uComponents,[In] unsigned int dwOptions,[In] __function__stdcall* pStatusCallback,[In] void* pUserContext,[In] ID3DXBuffer** ppIMTData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.DeclaratorFromFVF(SharpDX.Direct3D9.VertexFormat,SharpDX.Direct3D9.VertexElement[])">
            <summary>	
            Returns a declarator from a flexible vertex format (FVF) code.	
            </summary>	
            <param name="fvf"><para>Combination of <see cref="T:SharpDX.Direct3D9.VertexFormat"/> that describes the FVF from which to generate the returned declarator array.</para></param>	
            <param name="declaratorRef"><para>An array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements describing the vertex format of the mesh vertices. The upper limit of this declarator array is <see cref="F:SharpDX.Direct3D9.VertexFormatDeclaratorCount.Max"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: D3DXERR_INVALIDMESH.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXDeclaratorFromFVF']/*"/>	
            <unmanaged>HRESULT D3DXDeclaratorFromFVF([In] D3DFVF FVF,[In, Buffer] D3DVERTEXELEMENT9* pDeclarator)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.UVAtlasCreate(SharpDX.Direct3D9.Mesh,System.Int32,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Single,SharpDX.FunctionCallback,System.Single,System.IntPtr,System.Int32,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Single,System.Int32)">
            <summary>	
            Create a UV atlas for a mesh.	
            </summary>	
            <param name="meshRef"><para>Pointer to an input mesh (see <see cref="T:SharpDX.Direct3D9.Mesh"/>) which contains the object geometry for calculating the atlas. At a minimum, the mesh must contain position data and 2D texture coordinates.</para></param>	
            <param name="uMaxChartNumber"><para>The maximum number of charts to partition the mesh into. See remarks about the partitioning modes. Use 0 to tell D3DX that the atlas should be parameterized based on stretch.</para></param>	
            <param name="fMaxStretch"><para>The amount of stretching allowed. 0 means no stretching is allowed, 1 means any amount of stretching can be used.</para></param>	
            <param name="uWidth"><para>Texture width.</para></param>	
            <param name="uHeight"><para>Texture height.</para></param>	
            <param name="fGutter"><para>The minimum distance, in texels, between two charts on the atlas. The gutter is always scaled by the width; so, if a gutter of 2.5 is used on a 512x512 texture, then the minimum distance between two charts is 2.5 / 512.0 texels.</para></param>	
            <param name="dwTextureIndex"><para>Zero-based texture coordinate index that identifies which set of texture coordinates to use.</para></param>	
            <param name="dwAdjacencyRef"><para>A reference to an array of adjacency data. with 3 DWORDs per face, indicating which triangles are adjacent to each other (see <see cref="M:SharpDX.Direct3D9.BaseMesh.GenerateAdjacency(System.Single,System.Int32)"/>).</para></param>	
            <param name="dwFalseEdgeAdjacencyRef"><para>An array with 3 DWORDS per face. Each face indicates if an edge is false or not. A non-false edge is indicated by -1, a false edge is indicated by any other value. This enables the parameterization of a mesh of quads where the edges down the middle of each quad will not be cut.</para></param>	
            <param name="fIMTArrayRef"><para>A reference to an array of integrated metric tensors that describes how to stretch a triangle (see IntegratedMetricTensor).</para></param>	
            <param name="statusCallbackRef"><para>A reference to a callback function (see LPD3DXUVATLASCB) that is useful for monitoring progress.</para></param>	
            <param name="fCallbackFrequency"><para>Specify how often D3DX will call the callback; a reasonable default value is 0.0001f.</para></param>	
            <param name="userContextRef"><para>Pointer to a user-defined value which is passed to the callback function; typically used by an application to pass a reference to a data structure that provides context information for the callback function.</para></param>	
            <param name="dwOptions"><para>Specify the quality of the charts generated. See D3DXUVATLAS.</para></param>	
            <param name="meshOutOut"><para>Pointer to the created mesh with the atlas (see <see cref="T:SharpDX.Direct3D9.Mesh"/>).</para></param>	
            <param name="facePartitioningOut"><para>A reference to an array of the final face-partitioning data. Each element contains one DWORD per face (see <see cref="T:SharpDX.Direct3D.Blob"/>).</para></param>	
            <param name="vertexRemapArrayOut"><para>A reference to an array of remapped vertices. Each array element identifies the original vertex that each final vertex came from (if the vertex was split during remapping). Each array element contains one DWORD per vertex.</para></param>	
            <param name="fMaxStretchOutRef"><para>A reference to the maximum stretch value generated by the atlas algorithm. The range is between 0.0 and 1.0.</para></param>	
            <param name="uNumChartsOutRef"><para>A reference to the number of charts created by the atlas algorithm. If dwMaxChartNumber is too low, this parameter will return the minimum number of charts required to create an atlas.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>; otherwise, the value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            D3DXUVAtlasCreate can partition mesh geometry two ways:Based on the number of charts Based on the maximum allowed stretch. If the maximum allowed stretch is 0, each triangle will likely be in its own chart.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXUVAtlasCreate']/*"/>	
            <unmanaged>HRESULT D3DXUVAtlasCreate([In] ID3DXMesh* pMesh,[In] unsigned int uMaxChartNumber,[In] float fMaxStretch,[In] unsigned int uWidth,[In] unsigned int uHeight,[In] float fGutter,[In] unsigned int dwTextureIndex,[In] const unsigned int* pdwAdjacency,[In] const unsigned int* pdwFalseEdgeAdjacency,[In] const float* pfIMTArray,[In] __function__stdcall* pStatusCallback,[In] float fCallbackFrequency,[In] void* pUserContext,[In] unsigned int dwOptions,[In] ID3DXMesh** ppMeshOut,[In] ID3DXBuffer** ppFacePartitioning,[In] ID3DXBuffer** ppVertexRemapArray,[In] float* pfMaxStretchOut,[In] unsigned int* puNumChartsOut)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadSkinMeshFromXof(SharpDX.Direct3D9.XFileData,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.SkinInfo@,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Loads a skin mesh from a DirectX .x file data object.	
            </summary>	
            <param name="xofMeshRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.XFileData"/> interface, representing the file data object to load.</para></param>	
            <param name="options"><para>Combination of one or more flags, from the D3DXMESH enumeration, specifying creation options for the mesh.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device object associated with the mesh.</para></param>	
            <param name="adjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When this method returns, this parameter is filled with an array of three  DWORDs per face that specify the three neighbors for each face in the mesh.</para></param>	
            <param name="materialsOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When the method returns, this parameter is filled with an array of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures.</para></param>	
            <param name="effectInstancesOut"><para>Pointer to a buffer containing an array of effect instances, one per attribute group in the returned mesh. An effect instance is a particular instance of state information used to initialize an effect. See <see cref="T:SharpDX.Direct3D9.EffectInstance"/>. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <param name="matOutRef"><para>Pointer to the number of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures in the  ppMaterials array, when the method returns.</para></param>	
            <param name="skinInfoOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.SkinInfo"/> interface, which represents the skinning information. 									 </para></param>	
            <param name="meshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, which represents the loaded mesh. 									 </para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY</returns>	
            <remarks>	
            This method takes a reference to an internal object in the .x file, enabling you to load the frame hierarchy.For mesh files that do not contain effect instance information, default effect instances will be generated from the material information in the .x file. A default effect instance will have default values that correspond to the members of the <see cref="T:SharpDX.Direct3D9.Material"/> structure.The default texture name is also filled in, but is handled differently. The name will be Texture0@Name, which corresponds to an effect variable by the name of "Texture0" with an annotation called "Name." This will contain the string file name for the texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadSkinMeshFromXof']/*"/>	
            <unmanaged>HRESULT D3DXLoadSkinMeshFromXof([In] ID3DXFileData* pxofMesh,[In] unsigned int Options,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXBuffer** ppAdjacency,[In] ID3DXBuffer** ppMaterials,[In] ID3DXBuffer** ppEffectInstances,[In] unsigned int* pMatOut,[In] ID3DXSkinInfo** ppSkinInfo,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.UVAtlasPack(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,SharpDX.FunctionCallback,System.Single,System.IntPtr,System.Int32,SharpDX.Direct3D.Blob)">
            <summary>	
            Pack mesh partitioning data into an atlas.	
            </summary>	
            <param name="meshRef"><para>Pointer to an input mesh (see <see cref="T:SharpDX.Direct3D9.Mesh"/>) which contains the object geometry for calculating the atlas. At a minimum, the mesh must contain position data and 2D texture coordinates.</para></param>	
            <param name="uWidth"><para>Texture width.</para></param>	
            <param name="uHeight"><para>Texture height.</para></param>	
            <param name="fGutter"><para>The minimum distance, in texels, between two charts on the atlas. The gutter is always scaled by the width; so, if a gutter of 2.5 is used on a 512x512 texture, then the minimum distance between two charts is 2.5 / 512.0 texels.</para></param>	
            <param name="dwTextureIndex"><para>Zero-based texture coordinate index that identifies which set of texture coordinates to use.</para></param>	
            <param name="dwPartitionResultAdjacencyRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the mesh. It should be derived from the ppPartitionResultAdjacency returned from <see cref="M:SharpDX.Direct3D9.D3DX9.UVAtlasPartition(SharpDX.Direct3D9.Mesh,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Single,SharpDX.FunctionCallback,System.Single,System.IntPtr,System.Int32,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Single,System.Int32)"/>. This value cannot be <c>null</c>, because Pack needs to know where charts were cut in the partition step in order to find the edges of each chart.</para></param>	
            <param name="statusCallbackRef"><para>A reference to a callback function (see LPD3DXUVATLASCB) that is useful for monitoring progress.</para></param>	
            <param name="fCallbackFrequency"><para>Specify how often D3DX will call the callback; a reasonable default value is 0.0001f.</para></param>	
            <param name="userContextRef"><para>A void reference to be passed back to the callback function.</para></param>	
            <param name="dwOptions"><para>This options parameter is currently reserved.</para></param>	
            <param name="facePartitioningRef"><para>A reference to an <see cref="T:SharpDX.Direct3D.Blob"/> containing the array of the final face-partitioning. Each element contains one DWORD per face.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>; otherwise, the value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXUVAtlasPack']/*"/>	
            <unmanaged>HRESULT D3DXUVAtlasPack([In] ID3DXMesh* pMesh,[In] unsigned int uWidth,[In] unsigned int uHeight,[In] float fGutter,[In] unsigned int dwTextureIndex,[In] const unsigned int* pdwPartitionResultAdjacency,[In] __function__stdcall* pStatusCallback,[In] float fCallbackFrequency,[In] void* pUserContext,[In] unsigned int dwOptions,[In] ID3DXBuffer* pFacePartitioning)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXof(SharpDX.Direct3D9.XFileData,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Loads a mesh from an <see cref="T:SharpDX.Direct3D9.XFileData"/> object.	
            </summary>	
            <param name="xofMeshRef">No documentation.</param>	
            <param name="options">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="adjacencyOut">No documentation.</param>	
            <param name="materialsOut">No documentation.</param>	
            <param name="effectInstancesOut">No documentation.</param>	
            <param name="numMaterialsRef">No documentation.</param>	
            <param name="meshOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            For mesh files that do not contain effect instance information, default effect instances will be generated from the material information in the .x file. A default effect instance will have default values that correspond to the members of the <see cref="T:SharpDX.Direct3D9.Material"/> structure.The default texture name is also filled in, but is handled differently. The name will be Texture0@Name, which corresponds to an effect variable by the name of "Texture0" with an annotation called "Name." This will contain the string file name for the texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadMeshFromXof']/*"/>	
            <unmanaged>HRESULT D3DXLoadMeshFromXof([In] ID3DXFileData* pxofMesh,[In] unsigned int Options,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXBuffer** ppAdjacency,[In] ID3DXBuffer** ppMaterials,[In] ID3DXBuffer** ppEffectInstances,[In] unsigned int* pNumMaterials,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeIMTFromSignal(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Single,System.Int32,SharpDX.FunctionCallback,System.IntPtr,SharpDX.FunctionCallback,System.IntPtr,SharpDX.Direct3D.Blob@)">
            <summary>	
            Calculates per-triangle IMT's from a custom application-specified signal that varies over the surface of the mesh (generally at a higher frequency than vertex data). The signal is evaluated via a user-specified callback function.	
            </summary>	
            <param name="meshRef"><para>A reference to an input mesh (see <see cref="T:SharpDX.Direct3D9.Mesh"/>) which contains the object geometry for calculating the IMT.</para></param>	
            <param name="dwTextureIndex"><para>Zero-based texture coordinate index that identifies which set of texture coordinates to use.</para></param>	
            <param name="uSignalDimension"><para>The number of components in each data point in the signal.</para></param>	
            <param name="fMaxUVDistance"><para>The maximum distance between vertices; the algorithm continues  subdividing until the distance between all vertices is less than or equal to fMaxUVDistance.</para></param>	
            <param name="dwOptions"><para>Texture wrap options. This is a combination of one or more <see cref="T:SharpDX.Direct3D9.UVAtlasQuality"/> FLAGS.</para></param>	
            <param name="signalCallbackRef"><para>A reference to a user-provided evaluator function, which will be used to compute the signal value at arbitrary U,V coordinates. The function follows the prototype of LPD3DXIMTSIGNALCALLBACK.</para></param>	
            <param name="userDataRef"><para>A reference to a user-defined value which is passed to the signal callback function. Typically used by an application to pass a reference to a data structure that provides context information for the callback function.</para></param>	
            <param name="statusCallbackRef"><para>A reference to a callback function to monitor IMT computation progress.</para></param>	
            <param name="userContextRef"><para>A reference to a user-defined variable which is passed to the status callback function. Typically used by an application to pass a reference to a data structure that provides context information for the callback function.</para></param>	
            <param name="iMTDataOut"><para>A reference to the buffer (see <see cref="T:SharpDX.Direct3D.Blob"/>) containing the returned IMT array. This array can be provided as input to the D3DX UVAtlas Functions to prioritize texture-space allocation in the texture parameterization.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>; otherwise, the value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This function requires that the input mesh contain a signal-to-mesh texture mapping (ie. texture coordinates). It allows the user to define a signal arbitrarily over the surface of the mesh.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeIMTFromSignal']/*"/>	
            <unmanaged>HRESULT D3DXComputeIMTFromSignal([In] ID3DXMesh* pMesh,[In] unsigned int dwTextureIndex,[In] unsigned int uSignalDimension,[In] float fMaxUVDistance,[In] unsigned int dwOptions,[In] __function__stdcall* pSignalCallback,[In] void* pUserData,[In] __function__stdcall* pStatusCallback,[In] void* pUserContext,[In] ID3DXBuffer** ppIMTData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrame(SharpDX.Direct3D9.Mesh,System.Int32)">
            <summary>	
            Compute tangent, binormal, and normal vectors for a mesh.	
            </summary>	
            <param name="meshRef"><para>Pointer to an input <see cref="T:SharpDX.Direct3D9.Mesh"/> mesh object.</para></param>	
            <param name="dwOptions"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.TangentOptions"/> flags.  </para> <para>Use <c>null</c> to specify the following options:</para>  Weight the normal vector length by the angle, in radians, subtended by the two edges leaving the vertex. Compute orthogonal Cartesian coordinates from the UV texture coordinates. Textures are not wrapped in either U or V directions Partial derivatives with respect to texture coordinates are normalized. Vertices are ordered in a counterclockwise direction around each triangle. Use per-vertex normal vectors already present in the input mesh. The results will be stored in the original input mesh. The function will fail if new vertices need to be created.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function simply calls <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrameEx(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)"/> with the following input parameters:<code>	
             <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrameEx(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)"/>(pMesh, <see cref="F:SharpDX.Direct3D9.DeclarationUsage.TextureCoordinate"/>, 0,    <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Binormal"/>, 0, <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Tangent"/>, 0,  <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Normal"/>, 0,  dwOptions | <see cref="F:SharpDX.Direct3D9.TangentOptions.GenerateInPlace"/>, <c>null</c>, 0.01f, 0.25f, 0.01f, <c>null</c>, <c>null</c>);	
            	
            </code>Singularities are handled as required by grouping edges and splitting vertices. If any vertices need to be split, the function will fail. The computed normal vector at each vertex is always normalized to have unit length.The most robust solution for computing orthogonal Cartesian coordinates is to not set flags <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/> and <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV"/>, so that orthogonal coordinates are computed from both UV texture coordinates. However, in this case, if either U or V is zero, then the function will compute orthogonal coordinates using <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV"/> or <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/> respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeTangentFrame']/*"/>	
            <unmanaged>HRESULT D3DXComputeTangentFrame([In] ID3DXMesh* pMesh,[In] unsigned int dwOptions)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.RectPatchSize(System.Single,System.Int32@,System.Int32@)">
            <summary>	
            Gets the size of the rectangle patch.	
            </summary>	
            <param name="fNumSegsRef"><para>Number of segments per edge to tessellate.</para></param>	
            <param name="dwTrianglesRef"><para>Pointer to a DWORD that contains the number of triangles in the patch.</para></param>	
            <param name="dwVerticesRef"><para>Pointer to a DWORD that contains the number of vertices in the patch.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRectPatchSize']/*"/>	
            <unmanaged>HRESULT D3DXRectPatchSize([In] const float* pfNumSegs,[Out] unsigned int* pdwTriangles,[Out] unsigned int* pdwVertices)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreatePMeshFromStream(System.IntPtr,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.ProgressiveMesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="streamRef">No documentation.</param>	
            <param name="options">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="materialsOut">No documentation.</param>	
            <param name="effectInstancesOut">No documentation.</param>	
            <param name="numMaterialsRef">No documentation.</param>	
            <param name="pMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreatePMeshFromStream']/*"/>	
            <unmanaged>HRESULT D3DXCreatePMeshFromStream([In] IStream* pStream,[In] unsigned int Options,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXBuffer** ppMaterials,[In] ID3DXBuffer** ppEffectInstances,[In] unsigned int* pNumMaterials,[In] ID3DXPMesh** ppPMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeBoundingBox(SharpDX.Vector3,System.Int32,System.Int32,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>	
            Computes a coordinate-axis oriented bounding box.	
            </summary>	
            <param name="firstPositionRef"><para>Pointer to the first position.</para></param>	
            <param name="numVertices"><para>Number of vertices.</para></param>	
            <param name="dwStride"><para>Count or number of bytes between vertices.</para></param>	
            <param name="minRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, describing the returned lower-left corner of the bounding box.</para></param>	
            <param name="maxRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, describing the returned upper-right corner of the bounding box.</para> <para></para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeBoundingBox']/*"/>	
            <unmanaged>HRESULT D3DXComputeBoundingBox([In] const D3DXVECTOR3* pFirstPosition,[In] unsigned int NumVertices,[In] unsigned int dwStride,[In] D3DXVECTOR3* pMin,[In] D3DXVECTOR3* pMax)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeIMTFromTexture(SharpDX.Direct3D9.Mesh,SharpDX.Direct3D9.Texture,System.Int32,System.Int32,SharpDX.FunctionCallback,System.IntPtr,SharpDX.Direct3D.Blob@)">
            <summary>	
            Calculates per-triangle IMT's from a texture mapped onto a mesh, to be used optionally as input to the D3DX UVAtlas Functions.	
            </summary>	
            <param name="meshRef">No documentation.</param>	
            <param name="textureRef">No documentation.</param>	
            <param name="dwTextureIndex">No documentation.</param>	
            <param name="dwOptions">No documentation.</param>	
            <param name="statusCallbackRef">No documentation.</param>	
            <param name="userContextRef">No documentation.</param>	
            <param name="iMTDataOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>; otherwise, the value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Given a texture that maps over the surface of the mesh, the algorithm computes the IMT for each face. This will cause triangles containing lower-frequency signal data to take up less space in the final texture atlas when parameterized with the UVAtlas functions. The texture is assumed to be interpolated over the mesh bilinearly.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeIMTFromTexture']/*"/>	
            <unmanaged>HRESULT D3DXComputeIMTFromTexture([In] ID3DXMesh* pMesh,[In] IDirect3DTexture9* pTexture,[In] unsigned int dwTextureIndex,[In] unsigned int dwOptions,[In] __function__stdcall* pStatusCallback,[In] void* pUserContext,[In] ID3DXBuffer** ppIMTData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXA(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="filenameRef">No documentation.</param>	
            <param name="options">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="adjacencyOut">No documentation.</param>	
            <param name="materialsOut">No documentation.</param>	
            <param name="effectInstancesOut">No documentation.</param>	
            <param name="numMaterialsRef">No documentation.</param>	
            <param name="meshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadMeshFromXA']/*"/>	
            <unmanaged>HRESULT D3DXLoadMeshFromXA([In] const char* pFilename,[In] unsigned int Options,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXBuffer** ppAdjacency,[In] ID3DXBuffer** ppMaterials,[In] ID3DXBuffer** ppEffectInstances,[In] unsigned int* pNumMaterials,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateBuffer(System.Int32,SharpDX.Direct3D.Blob@)">
            <summary>	
            Creates a buffer object.	
            </summary>	
            <param name="numBytes"><para>Size of the buffer to create, in bytes.</para></param>	
            <param name="bufferOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface, representing the created buffer object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateBuffer']/*"/>	
            <unmanaged>HRESULT D3DXCreateBuffer([In] unsigned int NumBytes,[In] ID3DXBuffer** ppBuffer)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.WeldVertices(SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.WeldEpsilons@,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@)">
            <summary>	
            Welds together replicated vertices that have equal attributes. This method uses specified epsilon values for equality comparisons.	
            </summary>	
            <param name="meshRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Mesh"/> object, the mesh from which to weld vertices.</para></param>	
            <param name="flags"><para>Combination of one or more flags from D3DXWELDEPSILONSFLAGS.</para></param>	
            <param name="epsilonsRef"><para>Pointer to a D3DXWeldEpsilons structure, specifying the epsilon values to be used for this method. Use <c>null</c> to initialize all structure members to a default value of 1.0e-6f.</para></param>	
            <param name="adjacencyInRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0xffffffff. If this parameter is set to <c>null</c>, <see cref="M:SharpDX.Direct3D9.BaseMesh.GenerateAdjacency(System.Single,System.Int32)"/> will be called to create logical adjacency information.</para></param>	
            <param name="adjacencyOutRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the optimized mesh. If the edge has no adjacent faces, the value is 0xffffffff.</para></param>	
            <param name="faceRemapRef"><para>An array of DWORDs, one per face, that identifies the original mesh face that corresponds to each face in the welded mesh.</para></param>	
            <param name="vertexRemapOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface, which contains a DWORD for each vertex that specifies how the new vertices map to the old vertices. This remap is useful if you need to alter external data based on the new vertex mapping.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function uses supplied adjacency information to determine the points that are replicated. Vertices are merged based on an epsilon comparison. Vertices with equal position must already have been calculated and represented by point-representative data.This function combines logically-welded vertices that have similar components, such as normals or texture coordinates within pEpsilons.The following example code calls this function with welding enabled. Vertices are compared using epsilon values for normal vector and vertex position. A reference is returned to a face remapping array (pFaceRemap).<code>	
             TCHAR            strMediaPath[512];       // X-file path 	
            LPD3DXBUFFER     pAdjacencyBuffer = <c>null</c>; // adjacency data buffer	
            LPD3DXBUFFER     pD3DXMtrlBuffer  = <c>null</c>; // material buffer	
            LPD3DXMESH       pMesh            = <c>null</c>; // mesh object	
            DWORD            m_dwNumMaterials;        // number of materials	
            <see cref="T:SharpDX.Direct3D9.WeldEpsilons"/> Epsilons;                // structure with epsilon values	
            DWORD            *pFaceRemap[65536];      // face remapping array	
            DWORD            i;                       // internal variable // Load the mesh from the specified file hr = <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)"/> ( strMediaPath, <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/>, m_pd3dDevice, &amp;pAdjacencyBuffer, &amp;pD3DXMtrlBuffer, <c>null</c>, &amp;m_dwNumMaterials, &amp;pMesh ) ) if( FAILED( hr ) )  goto End;              // Go to error handling // Set epsilon values Epsilons.Normal = 0.001; Epsilons.Position = 0.1; // Weld the vertices for( i=0; i &lt; 65536; i++ ) {  pFaceRemap[i] = 0;  } hr = <see cref="M:SharpDX.Direct3D9.D3DX9.WeldVertices(SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.WeldEpsilons@,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@)"/> ( pMesh, <see cref="F:SharpDX.Direct3D9.WeldFlags.WeldPartialMatches"/>, &amp;Epsilons, (DWORD*)pAdjacencyBuffer-&gt;GetBufferPointer(), (DWORD*)pAdjacencyBuffer-&gt;GetBufferPointer(), (DWORD*)pFaceRemap, <c>null</c> ) if( FAILED( hr ) )  goto End;              // Go to error handling	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWeldVertices']/*"/>	
            <unmanaged>HRESULT D3DXWeldVertices([In] ID3DXMesh* pMesh,[In] unsigned int Flags,[In] const D3DXWELDEPSILONS* pEpsilons,[In] const unsigned int* pAdjacencyIn,[In] unsigned int* pAdjacencyOut,[In] unsigned int* pFaceRemap,[In] ID3DXBuffer** ppVertexRemap)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GenerateOutputDecl(SharpDX.Direct3D9.VertexElement[],SharpDX.Direct3D9.VertexElement[])">
            <summary>	
            Generates an output vertex declaration from the input declaration. The output declaration is intended for use by the mesh tessellation functions.	
            </summary>	
            <param name="outputRef"><para>Pointer to the output vertex declaration. See <see cref="T:SharpDX.Direct3D9.VertexElement"/>.</para></param>	
            <param name="inputRef"><para>Pointer to the input vertex declaration. See <see cref="T:SharpDX.Direct3D9.VertexElement"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGenerateOutputDecl']/*"/>	
            <unmanaged>HRESULT D3DXGenerateOutputDecl([In, Buffer] D3DVERTEXELEMENT9* pOutput,[In, Buffer] const D3DVERTEXELEMENT9* pInput)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GeneratePMesh(SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.AttributeWeights@,System.Single,System.Int32,System.Int32,SharpDX.Direct3D9.ProgressiveMesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="meshRef">No documentation.</param>	
            <param name="adjacencyRef">No documentation.</param>	
            <param name="vertexAttributeWeightsRef">No documentation.</param>	
            <param name="vertexWeightsRef">No documentation.</param>	
            <param name="minValue">No documentation.</param>	
            <param name="options">No documentation.</param>	
            <param name="pMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGeneratePMesh']/*"/>	
            <unmanaged>HRESULT D3DXGeneratePMesh([In] ID3DXMesh* pMesh,[In] const unsigned int* pAdjacency,[In] const D3DXATTRIBUTEWEIGHTS* pVertexAttributeWeights,[In] const float* pVertexWeights,[In] unsigned int MinValue,[In] unsigned int Options,[In] ID3DXPMesh** ppPMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateMeshFVF(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.VertexFormat,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Creates a mesh object using a flexible vertex format (FVF) code.	
            </summary>	
            <param name="numFaces"><para>Number of faces for the mesh. The valid range for this number is greater than 0, and one less than the max DWORD value, typically 232 - 1, because the last index is reserved.</para></param>	
            <param name="numVertices"><para>Number of vertices for the mesh. This parameter must be greater than 0.</para></param>	
            <param name="options"><para>Combination of one or more flags from the  D3DXMESH enumeration, specifying creation options for the mesh. </para></param>	
            <param name="fvf"><para>Combination of <see cref="T:SharpDX.Direct3D9.VertexFormat"/> that describes the vertex format for the returned mesh. This function does not support <see cref="F:SharpDX.Direct3D9.VertexFormat.PositionRhw"/>.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device object to be associated with the mesh.</para></param>	
            <param name="meshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the created mesh object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateMeshFVF']/*"/>	
            <unmanaged>HRESULT D3DXCreateMeshFVF([In] unsigned int NumFaces,[In] unsigned int NumVertices,[In] unsigned int Options,[In] D3DFVF FVF,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ValidMesh(SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D.Blob@)">
            <summary>	
            Validates a mesh.	
            </summary>	
            <param name="meshInRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the mesh to be tested.</para></param>	
            <param name="adjacencyRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the mesh to be tested.</para></param>	
            <param name="errorsAndWarningsOut"><para>Returns a buffer containing a string of errors and warnings, which explain the problems found in the mesh.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: D3DXERR_INVALIDMESH, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This method validates the mesh by checking for invalid indices. Error information is available from the debugger output.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXValidMesh']/*"/>	
            <unmanaged>HRESULT D3DXValidMesh([In] ID3DXMesh* pMeshIn,[In] const unsigned int* pAdjacency,[In] ID3DXBuffer** ppErrorsAndWarnings)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateSPMesh(SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.AttributeWeights@,System.Single,SharpDX.Direct3D9.SimplificationMesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="meshRef">No documentation.</param>	
            <param name="adjacencyRef">No documentation.</param>	
            <param name="vertexAttributeWeightsRef">No documentation.</param>	
            <param name="vertexWeightsRef">No documentation.</param>	
            <param name="sMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateSPMesh']/*"/>	
            <unmanaged>HRESULT D3DXCreateSPMesh([In] ID3DXMesh* pMesh,[In] const unsigned int* pAdjacency,[In] const D3DXATTRIBUTEWEIGHTS* pVertexAttributeWeights,[In] const float* pVertexWeights,[In] ID3DXSPMesh** ppSMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateSkinInfoFVF(System.Int32,SharpDX.Direct3D9.VertexFormat,System.Int32,SharpDX.Direct3D9.SkinInfo@)">
            <summary>	
            Creates an empty skin mesh object using a flexible vertex format (FVF) code.	
            </summary>	
            <param name="numVertices"><para>Number of vertices for the skin mesh.</para></param>	
            <param name="fvf"><para>Combination of <see cref="T:SharpDX.Direct3D9.VertexFormat"/> that describes the vertex format for the returned skin mesh.</para></param>	
            <param name="numBones"><para>Number of bones for the skin mesh.</para></param>	
            <param name="skinInfoOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.SkinInfo"/> interface, representing the created skin information object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Use SetBoneInfluence to populate the empty skin mesh object returned by this method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateSkinInfoFVF']/*"/>	
            <unmanaged>HRESULT D3DXCreateSkinInfoFVF([In] unsigned int NumVertices,[In] D3DFVF FVF,[In] unsigned int NumBones,[In] ID3DXSkinInfo** ppSkinInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveMeshToXA(System.String,SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.ExtendedMaterial@,SharpDX.Direct3D9.EffectInstance,System.Int32,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="filenameRef">No documentation.</param>	
            <param name="meshRef">No documentation.</param>	
            <param name="adjacencyRef">No documentation.</param>	
            <param name="materialsRef">No documentation.</param>	
            <param name="effectInstancesRef">No documentation.</param>	
            <param name="numMaterials">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveMeshToXA']/*"/>	
            <unmanaged>HRESULT D3DXSaveMeshToXA([In] const char* pFilename,[In] ID3DXMesh* pMesh,[In] const unsigned int* pAdjacency,[In] const D3DXMATERIAL* pMaterials,[In] const D3DXEFFECTINSTANCE* pEffectInstances,[In] unsigned int NumMaterials,[In] unsigned int Format)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ValidPatchMesh(SharpDX.Direct3D9.PatchMesh,System.Int32,System.Int32,SharpDX.Direct3D.Blob@)">
            <summary>	
            Validates a patch mesh, returning the number of degenerate vertices and patches.	
            </summary>	
            <param name="meshRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.PatchMesh"/> interface, representing the patch mesh to be tested.</para></param>	
            <param name="dwcDegenerateVertices"><para>Returns the number of degenerate vertices in the patch mesh.</para></param>	
            <param name="dwcDegeneratePatches"><para>Returns the number of degenerate patches in the patch mesh.</para></param>	
            <param name="errorsAndWarningsOut"><para>Returns a reference to a buffer containing a string of errors and warnings that explain the problems found in the patch mesh.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This method validates the mesh by checking for invalid indices. Error information is available from the debugger output.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXValidPatchMesh']/*"/>	
            <unmanaged>HRESULT D3DXValidPatchMesh([In] ID3DXPatchMesh* pMesh,[In] unsigned int* dwcDegenerateVertices,[In] unsigned int* dwcDegeneratePatches,[In] ID3DXBuffer** ppErrorsAndWarnings)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeBoundingSphere(SharpDX.Vector3,System.Int32,System.Int32,SharpDX.Vector3,System.Single)">
            <summary>	
            Computes a bounding sphere for the mesh.	
            </summary>	
            <param name="firstPositionRef"><para>Pointer to first position.</para></param>	
            <param name="numVertices"><para>Number of vertices.</para></param>	
            <param name="dwStride"><para>Number of bytes between position vectors.  Use GetNumBytesPerVertex, <see cref="M:SharpDX.Direct3D9.D3DX9.GetFVFVertexSize(SharpDX.Direct3D9.VertexFormat)"/>, or <see cref="M:SharpDX.Direct3D9.D3DX9.GetDeclVertexSize(SharpDX.Direct3D9.VertexElement[],System.Int32)"/> to get the vertex stride.</para></param>	
            <param name="centerRef"><para> <see cref="T:SharpDX.Vector3"/> structure, defining the coordinate center of the returned bounding sphere.</para></param>	
            <param name="radiusRef"><para>Radius of the returned bounding sphere.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeBoundingSphere']/*"/>	
            <unmanaged>HRESULT D3DXComputeBoundingSphere([In] const D3DXVECTOR3* pFirstPosition,[In] unsigned int NumVertices,[In] unsigned int dwStride,[In] D3DXVECTOR3* pCenter,[In] float* pRadius)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.BoxBoundProbe(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>	
            Determines whether a ray intersects the volume of a box's bounding box.	
            </summary>	
            <param name="minRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/>, describing the lower-left corner of the bounding box. See Remarks.</para></param>	
            <param name="maxRef"><para>Pointer to a  <see cref="T:SharpDX.Vector3"/> structure, describing the upper-right corner of the bounding box. See Remarks.</para></param>	
            <param name="rayPositionRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the origin coordinate of the ray.</para></param>	
            <param name="rayDirectionRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the direction of the ray. This vector should not be (0,0,0) but does not need to be normalized.</para></param>	
            <returns>Returns TRUE if the ray intersects the volume of the box's bounding box. Otherwise, returns <see cref="F:SharpDX.Result.False"/>.</returns>	
            <remarks>	
            D3DXBoxBoundProbe determines if the ray intersects the volume of the box's bounding box, not just the surface of the box.The values passed to <see cref="M:SharpDX.Direct3D9.D3DX9.BoxBoundProbe(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)"/> are xmin, xmax, ymin, ymax, zmin, and zmax. Thus, the following defines the corners of the bounding box.<code>	
             xmax, ymax, zmax	
            xmax, ymax, zmin	
            xmax, ymin, zmax	
            xmax, ymin, zmin	
            xmin, ymax, zmax	
            xmin, ymax, zmin	
            xmin, ymin, zmax	
            xmin, ymin, zmin	
            	
            </code>The depth of the bounding box in the z direction is zmax - zmin, in the y direction is ymax - ymin, and in the x direction is xmax - xmin. For example, with the following minimum and maximum vectors, min (-1, -1, -1) and max (1, 1, 1), the bounding box is defined in the following manner.<code>	
             1,  1,  1 1,  1, -1 1, -1,  1 1, -1, -1	
            -1,  1,  1	
            -1,  1, -1	
            -1, -1,  1	
            -1, -1, -l	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXBoxBoundProbe']/*"/>	
            <unmanaged>BOOL D3DXBoxBoundProbe([In] const D3DXVECTOR3* pMin,[In] const D3DXVECTOR3* pMax,[In] const D3DXVECTOR3* pRayPosition,[In] const D3DXVECTOR3* pRayDirection)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.UVAtlasPartition(SharpDX.Direct3D9.Mesh,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Single,SharpDX.FunctionCallback,System.Single,System.IntPtr,System.Int32,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Single,System.Int32)">
            <summary>	
            Create a UV atlas for a mesh.	
            </summary>	
            <param name="meshRef"><para>Pointer to an input mesh (see <see cref="T:SharpDX.Direct3D9.Mesh"/>) that contains the object geometry for calculating the atlas. At a minimum, the mesh must contain position data and 2D texture coordinates.</para></param>	
            <param name="uMaxChartNumber"><para>The maximum number of charts to partition the mesh into. See remarks about the partitioning modes. Use 0 to tell D3DX that the atlas should be parameterized based on stretch.</para></param>	
            <param name="fMaxStretch"><para>The amount of stretching allowed. 0 means no stretching is allowed, 1 means any amount of stretching can be used.</para></param>	
            <param name="dwTextureIndex"><para>Zero-based texture coordinate index that identifies which set of texture coordinates to use.</para></param>	
            <param name="dwAdjacencyRef"><para>A reference to an array of adjacency data with 3 DWORDs per face, indicating which triangles are adjacent to each other (see <see cref="M:SharpDX.Direct3D9.BaseMesh.GenerateAdjacency(System.Single,System.Int32)"/>).</para></param>	
            <param name="dwFalseEdgeAdjacencyRef"><para>An array with 3 DWORDS per face. Each face indicates if an edge is false or not. A non-false edge is indicated by -1, a false edge is indicated by any other value. This enables the parameterization of a mesh of quads where the edges down the middle of each quad will not be cut.</para></param>	
            <param name="fIMTArrayRef"><para>A reference to an array of integrated metric tensors that describes how to stretch a triangle (see IntegratedMetricTensor).</para></param>	
            <param name="statusCallbackRef"><para>A reference to a callback function (see LPD3DXUVATLASCB) that is useful for monitoring progress.</para></param>	
            <param name="fCallbackFrequency"><para>Specify how often D3DX will call the callback; a reasonable default value is 0.0001f.</para></param>	
            <param name="userContextRef"><para>Pointer to a user-defined value that is passed to the callback function; typically used by an application to pass a reference to a data structure that provides context information for the callback function.</para></param>	
            <param name="dwOptions"><para>Specify the quality of the charts generated by combining one or more D3DXUVATLAS flags.</para></param>	
            <param name="meshOutOut"><para>Pointer to the created mesh with the atlas (see <see cref="T:SharpDX.Direct3D9.Mesh"/>).</para></param>	
            <param name="facePartitioningOut"><para>A reference to an array of the final face-partitioning data. Each element contains one DWORD per face (see <see cref="T:SharpDX.Direct3D.Blob"/>).</para></param>	
            <param name="vertexRemapArrayOut"><para>A reference to an array of remapped vertices. Each array element identifies the original vertex each final vertex came from (if the vertex was split during remapping). Each array element contains one DWORD per vertex.</para></param>	
            <param name="partitionResultAdjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. This buffer will contain an array of three DWORDs per face that specify the three neighbors for each face in the output mesh. This parameter must not be <c>null</c>, because the subsequent call to <see cref="M:SharpDX.Direct3D9.D3DX9.UVAtlasPack(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,SharpDX.FunctionCallback,System.Single,System.IntPtr,System.Int32,SharpDX.Direct3D.Blob)"/>() requires it.</para></param>	
            <param name="fMaxStretchOutRef"><para>A reference to the maximum stretch value generated by the atlas algorithm. The range is between 0.0 and 1.0.</para></param>	
            <param name="uNumChartsOutRef"><para>A reference to the number of charts created by the atlas algorithm. If dwMaxChartNumber is too low, this parameter will return the minimum number of charts required to create an atlas.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>; otherwise, the value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            D3DXUVAtlasPartition is similar to <see cref="M:SharpDX.Direct3D9.D3DX9.UVAtlasCreate(SharpDX.Direct3D9.Mesh,System.Int32,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Single,SharpDX.FunctionCallback,System.Single,System.IntPtr,System.Int32,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Single,System.Int32)"/>, except that <see cref="M:SharpDX.Direct3D9.D3DX9.UVAtlasPartition(SharpDX.Direct3D9.Mesh,System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Single,SharpDX.FunctionCallback,System.Single,System.IntPtr,System.Int32,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Single,System.Int32)"/> does not performing the final packing step.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXUVAtlasPartition']/*"/>	
            <unmanaged>HRESULT D3DXUVAtlasPartition([In] ID3DXMesh* pMesh,[In] unsigned int uMaxChartNumber,[In] float fMaxStretch,[In] unsigned int dwTextureIndex,[In] const unsigned int* pdwAdjacency,[In] const unsigned int* pdwFalseEdgeAdjacency,[In] const float* pfIMTArray,[In] __function__stdcall* pStatusCallback,[In] float fCallbackFrequency,[In] void* pUserContext,[In] unsigned int dwOptions,[In] ID3DXMesh** ppMeshOut,[In] ID3DXBuffer** ppFacePartitioning,[In] ID3DXBuffer** ppVertexRemapArray,[In] ID3DXBuffer** ppPartitionResultAdjacency,[In] float* pfMaxStretchOut,[In] unsigned int* puNumChartsOut)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SplitMesh(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Splits a mesh into meshes smaller than the specified size.	
            </summary>	
            <param name="meshInRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the source mesh.</para></param>	
            <param name="adjacencyInRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the mesh to be simplified.</para></param>	
            <param name="maxSize"><para> Maximum number of vertices in the resulting mesh.</para></param>	
            <param name="options"><para>Option flags for the new meshes.</para></param>	
            <param name="meshesOutRef"><para>Number of meshes returned.</para></param>	
            <param name="meshArrayOutOut"><para>Buffer containing an array of <see cref="T:SharpDX.Direct3D9.Mesh"/> interfaces for the new meshes. For a source mesh split into n meshes, ppMeshArrayOut is an array of n <see cref="T:SharpDX.Direct3D9.Mesh"/> references.</para></param>	
            <param name="adjacencyArrayOutOut"><para>Buffer containing an array of adjacency arrays (DWORDs) for the new meshes. See <see cref="T:SharpDX.Direct3D.Blob"/>. This parameter is optional.</para></param>	
            <param name="faceRemapArrayOutOut"><para>Buffer containing an array of face remap arrays (DWORDs) for the new meshes. See <see cref="T:SharpDX.Direct3D.Blob"/>. This parameter is optional.</para></param>	
            <param name="vertRemapArrayOutOut"><para>Buffer containing an array of vertex remap arrays for the new meshes. See <see cref="T:SharpDX.Direct3D.Blob"/>. This parameter is optional.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            A common use of this function is to split a mesh with 32-bit indices (more than 65535 vertices) into more than one mesh, each of which has 16-bit indices.The adjacency, vertex remap and face remap arrays are arrays are DWORDs where each array contains n DWORD references, followed by the DWORD data referenced by the references. For example, to obtain the face remap information for face 3 in mesh 2, the following code could be used, assuming the face remap data was returned in a variable named ppFaceRemapArrayOut.<code>	
             const DWORD **face_remaps =  static_cast&lt;DWORD **&gt;(ppFaceRemapArrayOut-&gt;GetBufferPointer());	
            const DWORD remap = face_remaps[2][3];	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSplitMesh']/*"/>	
            <unmanaged>HRESULT D3DXSplitMesh([In] ID3DXMesh* pMeshIn,[In] const unsigned int* pAdjacencyIn,[In] const unsigned int MaxSize,[In] const unsigned int Options,[In] unsigned int* pMeshesOut,[In] ID3DXBuffer** ppMeshArrayOut,[In] ID3DXBuffer** ppAdjacencyArrayOut,[In] ID3DXBuffer** ppFaceRemapArrayOut,[In] ID3DXBuffer** ppVertRemapArrayOut)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeTangent(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            Computes the tangent vectors for the texture coordinates given in the texture stage. Provided to support legacy applications. Use <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrameEx(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)"/> for better results.	
            </summary>	
            <param name="mesh">No documentation.</param>	
            <param name="texStage">No documentation.</param>	
            <param name="tangentIndex">No documentation.</param>	
            <param name="binormIndex">No documentation.</param>	
            <param name="wrap">No documentation.</param>	
            <param name="adjacencyRef">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the mesh vertex declaration specifies tangent or binormal fields, <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangent(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> will update any user-supplied tangent or binormal data. Alternatively, set TangentIndex to D3DX_DEFAULT to not update the user-supplied tangent data, or set BinormIndex to D3DX_DEFAULT to not update the user-supplied binormal data. TexStageIndex cannot be set to D3DX_DEFAULT.D3DXComputeTangent depends on the mesh vertex declaration containing either the binormal field (BinormIndex), the tangent field (TangentIndex), or both. If both are missing, this function will fail.This function simply calls <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrameEx(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)"/> with the following input parameters:<code>	
             <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrameEx(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)"/>( Mesh, <see cref="F:SharpDX.Direct3D9.DeclarationUsage.TextureCoordinate"/>, TexStageIndex, ( BinormIndex == D3DX_DEFAULT ) ? D3DX_DEFAULT : <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Binormal"/>, // provides backward function compatibility BinormIndex, ( TangentIndex == D3DX_DEFAULT ) ? D3DX_DEFAULT : <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Tangent"/>, TangentIndex, D3DX_DEFAULT, // do not store normals 0, ( Wrap ? <see cref="F:SharpDX.Direct3D9.TangentOptions.WrapUV"/> : 0 ) | <see cref="F:SharpDX.Direct3D9.TangentOptions.GenerateInPlace"/> | <see cref="F:SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/>, pAdjacency, -1.01f, -0.01f, -1.01f, <c>null</c>, <c>null</c>);	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeTangent']/*"/>	
            <unmanaged>HRESULT D3DXComputeTangent([In] ID3DXMesh* Mesh,[In] unsigned int TexStage,[In] unsigned int TangentIndex,[In] unsigned int BinormIndex,[In] unsigned int Wrap,[In] const unsigned int* pAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.Intersect(SharpDX.Direct3D9.BaseMesh,SharpDX.Vector3,SharpDX.Vector3,System.Boolean,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D.Blob@,System.Int32)">
            <summary>	
            Determines if a ray intersects with a mesh.	
            </summary>	
            <param name="meshRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.BaseMesh"/> interface, representing the mesh to be tested.</para></param>	
            <param name="rayPosRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the point where the ray begins.</para></param>	
            <param name="rayDirRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the direction of the ray.</para></param>	
            <param name="hitRef"><para>Pointer to a  <see cref="T:System.Boolean"/>. If the ray intersects a triangular face on the mesh, this value will be set to TRUE. Otherwise, this value is set to <see cref="F:SharpDX.Result.False"/>.</para></param>	
            <param name="faceIndexRef"><para>Pointer to an index value of the face closest to the ray origin, if pHit is TRUE.</para></param>	
            <param name="uRef"><para>Pointer to a barycentric hit coordinate, U.</para></param>	
            <param name="vRef"><para>Pointer to a barycentric hit coordinate, V.</para></param>	
            <param name="distRef"><para>Pointer to a ray intersection parameter distance.</para></param>	
            <param name="allHitsOut"><para>Pointer to an <see cref="T:SharpDX.Direct3D.Blob"/> object, containing an array of D3DXINTERSECTINFO structures.</para></param>	
            <param name="countOfHitsRef"><para>Pointer to a DWORD that contains the number of entries in the ppAllHits array.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be: E_OUTOFMEMORY.</returns>	
            <remarks>	
            The <see cref="M:SharpDX.Direct3D9.D3DX9.Intersect(SharpDX.Direct3D9.BaseMesh,SharpDX.Vector3,SharpDX.Vector3,System.Boolean,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D.Blob@,System.Int32)"/> function provides a way to understand points in and around a triangle, independent of where the triangle is actually located. This function returns the resulting point by using the following equation: V1 + U(V2 - V1) + V(V3 - V1).Any point in the plane V1V2V3 can be represented by the barycentric coordinate (U,V). The parameter U controls how much V2 gets weighted into the result, and the parameter V controls how much V3 gets weighted into the result. Lastly, the value of [1 - (U + V)] controls how much V1 gets weighted into the result.Barycentric coordinates are a form of general coordinates. In this context, using barycentric coordinates represents a change in coordinate systems. What holds true for Cartesian coordinates holds true for barycentric coordinates.Barycentric coordinates define a point inside a triangle in terms of the triangle's vertices.  For a more in-depth description of barycentric coordinates, see Mathworld's Barycentric Coordinates Description.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIntersect']/*"/>	
            <unmanaged>HRESULT D3DXIntersect([In] ID3DXBaseMesh* pMesh,[In] const D3DXVECTOR3* pRayPos,[In] const D3DXVECTOR3* pRayDir,[In] BOOL* pHit,[In] unsigned int* pFaceIndex,[In] float* pU,[In] float* pV,[In] float* pDist,[In] ID3DXBuffer** ppAllHits,[In] unsigned int* pCountOfHits)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXResource(System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Loads a mesh from a resource.	
            </summary>	
            <param name="module"><para>Handle to the module where the resource is located, or <c>null</c> for the module associated with the image the operating system used to create the current process. See remarks.</para></param>	
            <param name="name"><para>Pointer to a string that specifies the resource to create the mesh from. See remarks.</para></param>	
            <param name="type"><para>Pointer to a string that specifies the resource type. See remarks.</para></param>	
            <param name="options"><para>Combination of one or more flags from the D3DXMESH enumeration that specify creation options for the mesh.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device object associated with the mesh.</para></param>	
            <param name="adjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When the method returns, this parameter is filled with an array of three DWORDs per face that specify the three neighbors for each face in the mesh.</para></param>	
            <param name="materialsOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When this method returns, this parameter is filled with an array of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures, containing information saved in the DirectX file.</para></param>	
            <param name="effectInstancesOut"><para>Pointer to a buffer containing an array of effect instances, one per attribute group in the returned mesh. An effect instance is a particular instance of state information used to initialize an effect. See <see cref="T:SharpDX.Direct3D9.EffectInstance"/>. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <param name="numMaterialsRef"><para>Pointer to the number of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures in the ppMaterials array, when the method returns.</para></param>	
            <param name="meshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the loaded mesh.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            See FindResource to find out more about the Module, Name and Type parameters.All the meshes in the file will be collapsed into one output mesh. If the file contains a frame hierarchy, all the transformations will be applied to the mesh.For mesh files that do not contain effect instance information, default effect instances will be generated from the material information in the .x file. A default effect instance will have default values that correspond to the members of the <see cref="T:SharpDX.Direct3D9.Material"/> structure.The default texture name is also filled in, but is handled differently. The name will be Texture0@Name, which corresponds to an effect variable by the name of "Texture0" with an annotation called "Name." This will contain the string file name for the texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadMeshFromXResource']/*"/>	
            <unmanaged>HRESULT D3DXLoadMeshFromXResource([In] HINSTANCE Module,[In] const char* Name,[In] const char* Type,[In] unsigned int Options,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXBuffer** ppAdjacency,[In] ID3DXBuffer** ppMaterials,[In] ID3DXBuffer** ppEffectInstances,[In] unsigned int* pNumMaterials,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.OptimizeVertices(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Int32[])">
            <summary>	
            Generates an optimized vertex remapping for a triangle list. This function is commonly used after applying the face remapping generated by <see cref="M:SharpDX.Direct3D9.D3DX9.OptimizeFaces(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Int32[])"/>.	
            </summary>	
            <param name="bIndicesRef">No documentation.</param>	
            <param name="cFaces">No documentation.</param>	
            <param name="cVertices">No documentation.</param>	
            <param name="b32BitIndices">No documentation.</param>	
            <param name="vertexRemapRef">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            By default, a mesh uses 16 bit indices when it is created unless the application specifies otherwise. To check whether an existing mesh uses 16-bit or 32-bit indices, call <see cref="M:SharpDX.Direct3D9.BaseMesh.GetOptions"/> and check for the <see cref="F:SharpDX.Direct3D9.MeshFlags.Use32Bit"/> flag.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXOptimizeVertices']/*"/>	
            <unmanaged>HRESULT D3DXOptimizeVertices([In] const void* pbIndices,[In] unsigned int cFaces,[In] unsigned int cVertices,[In] BOOL b32BitIndices,[In, Buffer] int* pVertexRemap)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadPatchMeshFromXof(SharpDX.Direct3D9.XFileData,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.PatchMesh@)">
            <summary>	
            Loads a patch mesh from an <see cref="T:SharpDX.Direct3D9.XFileData"/> object.	
            </summary>	
            <param name="xofObjMeshRef">No documentation.</param>	
            <param name="options">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="materialsOut">No documentation.</param>	
            <param name="effectInstancesOut">No documentation.</param>	
            <param name="numMaterialsRef">No documentation.</param>	
            <param name="meshOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            For mesh files that do not contain effect instance information, default effect instances will be generated from the material information in the .x file. A default effect instance will have default values that correspond to the members of the <see cref="T:SharpDX.Direct3D9.Material"/> structure.The default texture name is also filled in, but is handled differently. The name will be Texture0@Name, which corresponds to an effect variable by the name of "Texture0" with an annotation called "Name." This will contain the string file name for the texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadPatchMeshFromXof']/*"/>	
            <unmanaged>HRESULT D3DXLoadPatchMeshFromXof([In] ID3DXFileData* pXofObjMesh,[In] unsigned int Options,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXBuffer** ppMaterials,[In] ID3DXBuffer** ppEffectInstances,[In] unsigned int* pNumMaterials,[In] ID3DXPatchMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateNPatchMesh(SharpDX.Direct3D9.Mesh,SharpDX.Direct3D9.PatchMesh@)">
            <summary>	
            Creates an N-patch mesh from a triangle mesh.	
            </summary>	
            <param name="meshSysMemRef"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface that represents the triangle mesh object.</para></param>	
            <param name="patchMeshRef"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.PatchMesh"/> interface that represents the created patch mesh object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateNPatchMesh']/*"/>	
            <unmanaged>HRESULT D3DXCreateNPatchMesh([In] ID3DXMesh* pMeshSysMem,[In] ID3DXPatchMesh** pPatchMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeNormals(SharpDX.Direct3D9.BaseMesh,System.Int32)">
            <summary>	
            Computes unit normals for each vertex in a mesh. Provided to support legacy applications. Use <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrameEx(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)"/> for better results.	
            </summary>	
            <param name="meshRef">No documentation.</param>	
            <param name="adjacencyRef">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The input mesh must have the <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> flag specified in its flexible vertex format (FVF).A normal for a vertex is generated by averaging the normals of all faces that share that vertex.If adjacency is provided, replicated vertices are ignored and "smoothed" over. If adjacency is not provided, replicated vertices will have normals averaged in from only the faces explicitly referencing them.This function simply calls <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrameEx(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)"/> with the following input parameters:<code>	
             <see cref="M:SharpDX.Direct3D9.D3DX9.ComputeTangentFrameEx(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)"/>( pMesh, D3DX_DEFAULT, 0, D3DX_DEFAULT, 0, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Normal"/>, 0, <see cref="F:SharpDX.Direct3D9.TangentOptions.GenerateInPlace"/> | <see cref="F:SharpDX.Direct3D9.TangentOptions.CalculateNormals"/>, pAdjacency, -1.01f, -0.01f, -1.01f, <c>null</c>, <c>null</c>);	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeNormals']/*"/>	
            <unmanaged>HRESULT D3DXComputeNormals([In] ID3DXBaseMesh* pMesh,[In] const unsigned int* pAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateSkinInfo(System.Int32,SharpDX.Direct3D9.VertexElement,System.Int32,SharpDX.Direct3D9.SkinInfo@)">
            <summary>	
            Creates an empty skin mesh object using a declarator.	
            </summary>	
            <param name="numVertices"><para>Number of vertices for the skin mesh.</para></param>	
            <param name="declarationRef"><para>Array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements, describing the vertex format for the returned mesh.</para></param>	
            <param name="numBones"><para>Number of bones for the skin mesh.</para></param>	
            <param name="skinInfoOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.SkinInfo"/> interface, representing the created skin mesh object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be: E_OUTOFMEMORY.</returns>	
            <remarks>	
            Use SetBoneInfluence to populate the empty skin mesh object returned by this method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateSkinInfo']/*"/>	
            <unmanaged>HRESULT D3DXCreateSkinInfo([In] unsigned int NumVertices,[In] const D3DVERTEXELEMENT9* pDeclaration,[In] unsigned int NumBones,[In] ID3DXSkinInfo** ppSkinInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreatePatchMesh(SharpDX.Direct3D9.PatchInfo,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.VertexElement[],SharpDX.Direct3D9.Device,SharpDX.Direct3D9.PatchMesh@)">
            <summary>	
            Creates a mesh from a control-patch mesh.	
            </summary>	
            <param name="infoRef"><para>Patch information structure. For more information, see <see cref="T:SharpDX.Direct3D9.PatchInfo"/>.</para></param>	
            <param name="dwNumPatches"><para>Number of patches.</para></param>	
            <param name="dwNumVertices"><para>Number of control vertices in the patch.</para></param>	
            <param name="dwOptions"><para>Unused. Reserved for later use.</para></param>	
            <param name="declRef"><para>Array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements, describing the vertex format for the returned mesh.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer the device that creates the patch mesh. See <see cref="T:SharpDX.Direct3D9.Device"/>.</para></param>	
            <param name="patchMeshRef"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.PatchMesh"/> object that is created.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This method takes an input patch mesh and converts it to a tessellated mesh. Patch meshes use 16-bit index buffers. Therefore, indices to LockIndexBuffer are 16 bits.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreatePatchMesh']/*"/>	
            <unmanaged>HRESULT D3DXCreatePatchMesh([In] const D3DXPATCHINFO* pInfo,[In] unsigned int dwNumPatches,[In] unsigned int dwNumVertices,[In] unsigned int dwOptions,[In, Buffer] const D3DVERTEXELEMENT9* pDecl,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXPatchMesh** pPatchMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ConcatenateMeshes(SharpDX.Direct3D9.Mesh@,System.Int32,System.Int32,SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Direct3D9.VertexElement[],SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Concatenates a group of meshes into one common mesh. This method can optionally apply a matrix transformation to each input mesh and its texture coordinates.	
            </summary>	
            <param name="meshesOut"><para>Array of input mesh references (see <see cref="T:SharpDX.Direct3D9.Mesh"/>). The number of elements in the array is NumMeshes.</para></param>	
            <param name="numMeshes"><para>Number of input meshes to concatenate.</para></param>	
            <param name="options"><para>Mesh creation options; this is a combination of one or more D3DXMESH flags. The mesh creation options are equivalent to the options parameter required by <see cref="M:SharpDX.Direct3D9.D3DX9.CreateMesh(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Mesh@)"/>.</para></param>	
            <param name="geomXFormsRef"><para>Optional array of geometry transforms. The number of elements in the array is NumMeshes; each element is a transformation matrix (see <see cref="T:SharpDX.Matrix"/>). May be <c>null</c>.</para></param>	
            <param name="textureXFormsRef"><para>Optional array of texture transforms. The number of elements in the array is NumMeshes; each element is a transformation matrix (see <see cref="T:SharpDX.Matrix"/>). This parameter may be <c>null</c>.</para></param>	
            <param name="declRef"><para>Optional reference to a vertex declaration (see <see cref="T:SharpDX.Direct3D9.VertexElement"/>). This parameter may be <c>null</c>.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Device"/> device that is used to create the new mesh.</para></param>	
            <param name="meshOutOut"><para>Address of a reference to the mesh created (see <see cref="T:SharpDX.Direct3D9.Mesh"/>).</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of these: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If no vertex declaration is given as part of the Options mesh creation parameter, the method will generate a union of all of the vertex declarations of the submeshes, promoting channels and types if necessary. The method will create an attribute table from attribute tables of the input meshes. To ensure creation of an attribute table, call Optimize with Flags set to <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.Compact"/> and <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.AttributeSort"/> (see D3DXMESHOPT).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXConcatenateMeshes']/*"/>	
            <unmanaged>HRESULT D3DXConcatenateMeshes([In] ID3DXMesh** ppMeshes,[In] unsigned int NumMeshes,[In] unsigned int Options,[In] const D3DXMATRIX* pGeomXForms,[In] const D3DXMATRIX* pTextureXForms,[In, Buffer] const D3DVERTEXELEMENT9* pDecl,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXMesh** ppMeshOut)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SphereBoundProbe(SharpDX.Vector3,System.Single,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>	
            Determines if a ray intersects the volume of a sphere's bounding box.	
            </summary>	
            <param name="centerRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the center coordinate of the sphere.</para></param>	
            <param name="radius"><para>Radius of the sphere.</para></param>	
            <param name="rayPositionRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the origin coordinate of the ray.</para></param>	
            <param name="rayDirectionRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the direction of the ray. This vector should not be (0,0,0) but does not need to be normalized.</para></param>	
            <returns>Returns TRUE if the ray intersects the volume of the sphere's bounding box. Otherwise, returns <see cref="F:SharpDX.Result.False"/>.</returns>	
            <remarks>	
            D3DXSphereBoundProbe determines if the ray intersects the volume of the sphere's bounding box, not just the surface of the sphere.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSphereBoundProbe']/*"/>	
            <unmanaged>BOOL D3DXSphereBoundProbe([In] const D3DXVECTOR3* pCenter,[In] float Radius,[In] const D3DXVECTOR3* pRayPosition,[In] const D3DXVECTOR3* pRayDirection)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateMesh(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Creates a mesh object using a declarator.	
            </summary>	
            <param name="numFaces"><para>Number of faces for the mesh. The valid range for this number is greater than 0, and one less than the maximum DWORD (typically 65534), because the last index is reserved.</para></param>	
            <param name="numVertices"><para>Number of vertices for the mesh. This parameter must be greater than 0.</para></param>	
            <param name="options"><para>Combination of one or more flags from the  D3DXMESH enumeration, specifying options for the mesh. </para></param>	
            <param name="declarationRef"><para>Array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements, describing the vertex format for the returned mesh. This parameter must map directly to a flexible vertex format (FVF).</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device object to be associated with the mesh.</para></param>	
            <param name="meshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the created mesh object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateMesh']/*"/>	
            <unmanaged>HRESULT D3DXCreateMesh([In] unsigned int NumFaces,[In] unsigned int NumVertices,[In] unsigned int Options,[In] const D3DVERTEXELEMENT9* pDeclaration,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.TriPatchSize(System.Single,System.Int32@,System.Int32@)">
            <summary>	
            Gets the size of the triangle patch.	
            </summary>	
            <param name="fNumSegsRef"><para>Number of segments per edge to tessellate.</para></param>	
            <param name="dwTrianglesRef"><para>Pointer to a DWORD that contains the number of triangles in the patch.</para></param>	
            <param name="dwVerticesRef"><para>Pointer to a DWORD that contains the number of vertices in the triangle patch.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTriPatchSize']/*"/>	
            <unmanaged>HRESULT D3DXTriPatchSize([In] const float* pfNumSegs,[Out] unsigned int* pdwTriangles,[Out] unsigned int* pdwVertices)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetFVFVertexSize(SharpDX.Direct3D9.VertexFormat)">
            <summary>	
            Returns the size of a vertex for a flexible vertex format (FVF).	
            </summary>	
            <param name="fvf"><para>FVF to be queried. A combination of <see cref="T:SharpDX.Direct3D9.VertexFormat"/>.</para></param>	
            <returns>The FVF vertex size, in bytes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetFVFVertexSize']/*"/>	
            <unmanaged>unsigned int D3DXGetFVFVertexSize([In] D3DFVF FVF)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetDeclLength(SharpDX.Direct3D9.VertexElement[])">
            <summary>	
            Returns the number of elements in the vertex declaration.	
            </summary>	
            <param name="declRef"><para>A reference to the vertex declaration. See <see cref="T:SharpDX.Direct3D9.VertexElement"/>.</para></param>	
            <returns>The number of elements in the vertex declaration.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetDeclLength']/*"/>	
            <unmanaged>unsigned int D3DXGetDeclLength([In, Buffer] const D3DVERTEXELEMENT9* pDecl)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.TessellateTriPatch(SharpDX.Direct3D9.VertexBuffer,System.Single,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.TrianglePatchInfo,SharpDX.Direct3D9.Mesh)">
            <summary>	
            Tessellates a triangular higher-order surface patch into a triangle mesh.	
            </summary>	
            <param name="vBRef"><para>Vertex buffer containing the patch data.</para></param>	
            <param name="numSegsRef"><para>Pointer to an array of three floating-point values that identify the number of segments into which each edge of the triangle patch should be divided when tessellated. See <see cref="T:SharpDX.Direct3D9.TrianglePatchInfo"/>.</para></param>	
            <param name="inDeclRef"><para>Vertex declaration structure that defines the vertex data. See <see cref="T:SharpDX.Direct3D9.VertexElement"/>.</para></param>	
            <param name="triPatchInfoRef"><para>Describes a triangle patch. See <see cref="T:SharpDX.Direct3D9.TrianglePatchInfo"/>.</para></param>	
            <param name="meshRef"><para>Pointer to the created mesh. See <see cref="T:SharpDX.Direct3D9.Mesh"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Use <see cref="M:SharpDX.Direct3D9.D3DX9.TriPatchSize(System.Single,System.Int32@,System.Int32@)"/> to get the number of output vertices and indices that the tessellation function needs.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTessellateTriPatch']/*"/>	
            <unmanaged>HRESULT D3DXTessellateTriPatch([In] IDirect3DVertexBuffer9* pVB,[In] const float* pNumSegs,[In] const D3DVERTEXELEMENT9* pInDecl,[In] const D3DTRIPATCH_INFO* pTriPatchInfo,[In] ID3DXMesh* pMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ConvertMeshSubsetToStrips(SharpDX.Direct3D9.BaseMesh,System.Int32,System.Int32,SharpDX.Direct3D9.IndexBuffer@,System.Int32,SharpDX.Direct3D.Blob@,System.Int32)">
            <summary>	
            Convert the specified mesh subset into a series of strips.	
            </summary>	
            <param name="meshIn"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.BaseMesh"/> interface, representing the mesh to convert to a strip.</para></param>	
            <param name="attribId"><para>Attribute ID of the mesh subset to convert to strips.</para></param>	
            <param name="iBOptions"><para>Combination of one or more flags from the D3DXMESH enumeration, specifying options for creating the index buffer. Cannot be <see cref="F:SharpDX.Direct3D9.MeshFlags.Use32Bit"/>. The index buffer will be created with 32-bit or 16-bit indices depending on the format of the index buffer of the mesh specified by the MeshIn parameter.</para></param>	
            <param name="indexBufferOut"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface, representing index buffer containing the strip.</para></param>	
            <param name="numIndicesRef"><para>Number of indices in the buffer returned in the ppIndexBuffer parameter.</para></param>	
            <param name="stripLengthsOut"><para>Buffer containing an array of one DWORD per strip, which specifies the number of triangles in the that strip.</para></param>	
            <param name="numStripsRef"><para>Number of individual strips in the index buffer and corresponding strip length array.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Before running this function, call Optimize or <see cref="M:SharpDX.Direct3D9.D3DX9.OptimizeFaces(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Int32[])"/>, with the <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.AttributeSort"/> flag set.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXConvertMeshSubsetToStrips']/*"/>	
            <unmanaged>HRESULT D3DXConvertMeshSubsetToStrips([In] ID3DXBaseMesh* MeshIn,[In] unsigned int AttribId,[In] unsigned int IBOptions,[In] IDirect3DIndexBuffer9** ppIndexBuffer,[In] unsigned int* pNumIndices,[In] ID3DXBuffer** ppStripLengths,[In] unsigned int* pNumStrips)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.IntersectTri(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single,System.Single)">
            <summary>	
            Computes the intersection of a ray and a triangle.	
            </summary>	
            <param name="arg0Ref"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, describing the first triangle vertex position.</para></param>	
            <param name="arg1Ref"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, describing the second triangle vertex position.</para></param>	
            <param name="arg2Ref"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, describing the third triangle vertex position.</para></param>	
            <param name="rayPosRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the point where the ray begins.</para></param>	
            <param name="rayDirRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> structure, specifying the direction of the ray.</para></param>	
            <param name="uRef"><para>Barycentric hit coordinates, U.</para></param>	
            <param name="vRef"><para>Barycentric hit coordinates, V.</para></param>	
            <param name="distRef"><para>Ray-intersection parameter distance.</para></param>	
            <returns>Returns TRUE if the ray intersects the area of the triangle. Otherwise, returns <see cref="F:SharpDX.Result.False"/>.</returns>	
            <remarks>	
            The <see cref="M:SharpDX.Direct3D9.D3DX9.Intersect(SharpDX.Direct3D9.BaseMesh,SharpDX.Vector3,SharpDX.Vector3,System.Boolean,System.Int32,System.Single,System.Single,System.Single,SharpDX.Direct3D.Blob@,System.Int32)"/> function provides a way to understand points in and around a triangle, independent of where the triangle is actually located. This function returns the resulting point by using the following equation: V1 + U(V2 - V1) + V(V3 - V1).Any point in the plane V1V2V3 can be represented by the barycentric coordinate (U,V). The parameter U controls how much V2 gets weighted into the result, and the parameter V controls how much V3 gets weighted into the result. Lastly, the value of [1 - (U + V)] controls how much V1 gets weighted into the result.Barycentric coordinates are a form of general coordinates. In this context, using barycentric coordinates represents a change in coordinate systems. What holds true for Cartesian coordinates holds true for barycentric coordinates.Barycentric coordinates define a point inside a triangle in terms of the triangle's vertices.  For a more in-depth description of barycentric coordinates, see Mathworld's Barycentric Coordinates Description.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIntersectTri']/*"/>	
            <unmanaged>BOOL D3DXIntersectTri([In] const D3DXVECTOR3* p0,[In] const D3DXVECTOR3* p1,[In] const D3DXVECTOR3* p2,[In] const D3DXVECTOR3* pRayPos,[In] const D3DXVECTOR3* pRayDir,[In] float* pU,[In] float* pV,[In] float* pDist)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ConvertMeshSubsetToSingleStrip(SharpDX.Direct3D9.BaseMesh,System.Int32,System.Int32,SharpDX.Direct3D9.IndexBuffer@,System.Int32)">
            <summary>	
            Converts the specified mesh subset into a single triangle strip.	
            </summary>	
            <param name="meshIn"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.BaseMesh"/> interface, representing the mesh to convert to a strip.</para></param>	
            <param name="attribId"><para>Attribute ID of the mesh subset to convert to strips.</para></param>	
            <param name="iBOptions"><para>Combination of one or more flags from the D3DXMESH enumeration, specifying options for creating the index buffer. Cannot be <see cref="F:SharpDX.Direct3D9.MeshFlags.Use32Bit"/>. The index buffer will be created with 32-bit or 16-bit indices, depending on the format of the index buffer of the mesh specified by the MeshIn parameter.</para></param>	
            <param name="indexBufferOut"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface, representing the index buffer containing the strip.</para></param>	
            <param name="numIndicesRef"><para>Number of indices in the buffer returned in the ppIndexBuffer parameter.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Before running this function, call Optimize or <see cref="M:SharpDX.Direct3D9.D3DX9.OptimizeFaces(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Int32[])"/>, with the <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.AttributeSort"/> flag set.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXConvertMeshSubsetToSingleStrip']/*"/>	
            <unmanaged>HRESULT D3DXConvertMeshSubsetToSingleStrip([In] ID3DXBaseMesh* MeshIn,[In] unsigned int AttribId,[In] unsigned int IBOptions,[In] IDirect3DIndexBuffer9** ppIndexBuffer,[In] unsigned int* pNumIndices)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeIMTFromPerVertexSignal(SharpDX.Direct3D9.Mesh,System.Single,System.Int32,System.Int32,System.Int32,SharpDX.FunctionCallback,System.IntPtr,SharpDX.Direct3D.Blob@)">
            <summary>	
            Calculate per-triangle IMT's from from per-vertex data. This function allows you to calculate the IMT based off of any value in a mesh (color, normal, etc).	
            </summary>	
            <param name="meshRef"><para>A reference to an input mesh (see <see cref="T:SharpDX.Direct3D9.Mesh"/>) which contains the object geometry for calculating the IMT.</para></param>	
            <param name="fVertexSignalRef"><para>A reference to an array of per-vertex data from which IMT will be computed. The array size is  uSignalStride * v, where v is the number of vertices in the mesh.</para></param>	
            <param name="uSignalDimension"><para>The number of floats per vertex.</para></param>	
            <param name="uSignalStride"><para>The number of bytes per vertex in the array. This must be a multiple of sizeof(float)</para></param>	
            <param name="dwOptions"><para>Texture wrap options. This is a combination of one or more <see cref="T:SharpDX.Direct3D9.UVAtlasQuality"/> FLAGS.</para></param>	
            <param name="statusCallbackRef"><para>A reference to a callback function to monitor IMT computation progress.</para></param>	
            <param name="userContextRef"><para>A reference to a user-defined variable which is passed to the status callback function. Typically used by an application to pass a reference to a data structure that provides context information for the callback function.</para></param>	
            <param name="iMTDataOut"><para>A reference to the buffer (see <see cref="T:SharpDX.Direct3D.Blob"/>) containing the returned IMT array. This array can be provided as input to the D3DX UVAtlas Functions to prioritize texture-space allocation in the texture parameterization.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>; otherwise, the value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeIMTFromPerVertexSignal']/*"/>	
            <unmanaged>HRESULT D3DXComputeIMTFromPerVertexSignal([In] ID3DXMesh* pMesh,[In] const float* pfVertexSignal,[In] unsigned int uSignalDimension,[In] unsigned int uSignalStride,[In] unsigned int dwOptions,[In] __function__stdcall* pStatusCallback,[In] void* pUserContext,[In] ID3DXBuffer** ppIMTData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Loads a mesh from a DirectX .x file.	
            </summary>	
            <param name="filenameRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="options"><para>Combination of one or more flags from the D3DXMESH enumeration, which specifies creation options for the mesh.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device object associated with the mesh.</para></param>	
            <param name="adjacencyOut"><para>Pointer to a buffer that contains adjacency data.  The adjacency data contains an array of three DWORDs per face that specify the three neighbors for each face in the mesh. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <param name="materialsOut"><para>Pointer to a buffer containing materials data. The buffer contains an array of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures, containing information from the DirectX file. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <param name="effectInstancesOut"><para>Pointer to a buffer containing an array of effect instances, one per attribute group in the returned mesh. An effect instance is a particular instance of state information used to initialize an effect. See <see cref="T:SharpDX.Direct3D9.EffectInstance"/>. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <param name="numMaterialsRef"><para>Pointer to the number of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures in the  ppMaterials array, when the method returns.</para></param>	
            <param name="meshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the loaded mesh.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXA(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)"/> because ANSI strings are being used.All the meshes in the file will be collapsed into one output mesh. If the file contains a frame hierarchy, all the transformations will be applied to the mesh.For mesh files that do not contain effect instance information, default effect instances will be generated from the material information in the .x file. A default effect instance will have default values that correspond to the members of the <see cref="T:SharpDX.Direct3D9.Material"/> structure.The default texture name is also filled in, but is handled differently. The name will be Texture0@Name, which corresponds to an effect variable by the name of "Texture0" with an annotation called "Name." This will contain the string file name for the texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadMeshFromXW']/*"/>	
            <unmanaged>HRESULT D3DXLoadMeshFromXW([In] const wchar_t* pFilename,[In] unsigned int Options,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXBuffer** ppAdjacency,[In] ID3DXBuffer** ppMaterials,[In] ID3DXBuffer** ppEffectInstances,[In] unsigned int* pNumMaterials,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateSkinInfoFromBlendedMesh(SharpDX.Direct3D9.BaseMesh,System.Int32,SharpDX.Direct3D9.BoneCombination,SharpDX.Direct3D9.SkinInfo@)">
            <summary>	
            Creates a skin mesh from another mesh.	
            </summary>	
            <param name="meshRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.BaseMesh"/> object, the mesh from which to create the skin mesh.</para></param>	
            <param name="numBones"><para>The length of the array attached to the BoneId. See <see cref="T:SharpDX.Direct3D9.BoneCombination"/>.</para></param>	
            <param name="boneCombinationTableRef"><para>Pointer to an array of bone combinations. See <see cref="T:SharpDX.Direct3D9.BoneCombination"/>.</para></param>	
            <param name="skinInfoOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.SkinInfo"/> interface representing the created skin mesh object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following: E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateSkinInfoFromBlendedMesh']/*"/>	
            <unmanaged>HRESULT D3DXCreateSkinInfoFromBlendedMesh([In] ID3DXBaseMesh* pMesh,[In] unsigned int NumBones,[In] const D3DXBONECOMBINATION* pBoneCombinationTable,[In] ID3DXSkinInfo** ppSkinInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXInMemory(System.IntPtr,System.Int32,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Loads a mesh from memory.	
            </summary>	
            <param name="memory"><para>Pointer to the memory buffer which contains the mesh data.</para></param>	
            <param name="sizeOfMemory"><para>Size of the file in memory, in bytes.</para></param>	
            <param name="options"><para>Combination of one or more flags from the D3DXMESH enumeration, specifying creation options for the mesh.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, the device object associated with the mesh.</para></param>	
            <param name="adjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When the method returns, this parameter is filled with an array of three DWORDs per face that specify the three neighbors for each face in the mesh.</para></param>	
            <param name="materialsOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When this method returns, this parameter is filled with an array of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures, containing information saved in the DirectX file.</para></param>	
            <param name="effectInstancesOut"><para>Pointer to a buffer containing an array of effect instances, one per attribute group in the returned mesh. An effect instance is a particular instance of state information used to initialize an effect. See <see cref="T:SharpDX.Direct3D9.EffectInstance"/>. For more information about accessing the buffer, see <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <param name="numMaterialsRef"><para>Pointer to the number of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures in the ppMaterials array, when the method returns.</para></param>	
            <param name="meshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the loaded mesh.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            All the meshes in the file will be collapsed into one output mesh. If the file contains a frame hierarchy, all the transformations will be applied to the mesh.For mesh files that do not contain effect instance information, default effect instances will be generated from the material information in the .x file. A default effect instance will have default values that correspond to the members of the <see cref="T:SharpDX.Direct3D9.Material"/> structure.The default texture name is also filled in, but is handled differently. The name will be Texture0@Name, which corresponds to an effect variable by the name of "Texture0" with an annotation called "Name." This will contain the string file name for the texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadMeshFromXInMemory']/*"/>	
            <unmanaged>HRESULT D3DXLoadMeshFromXInMemory([In] const void* Memory,[In] unsigned int SizeOfMemory,[In] unsigned int Options,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXBuffer** ppAdjacency,[In] ID3DXBuffer** ppMaterials,[In] ID3DXBuffer** ppEffectInstances,[In] unsigned int* pNumMaterials,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.OptimizeFaces(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Int32[])">
            <summary>	
            Generates an optimized face remapping for a triangle list.	
            </summary>	
            <param name="bIndicesRef"><para>Pointer to triangle list indices to use for ordering vertices.</para></param>	
            <param name="cFaces"><para>Number of faces in the triangle list. For 16-bit meshes, this is limited to 2^16 - 1 (65535) or fewer faces.</para></param>	
            <param name="cVertices"><para>Number of vertices referenced by the triangle list.</para></param>	
            <param name="b32BitIndices"><para>Flag indicating index type: TRUE if indices are 32-bit (more than 65535 indices), <see cref="F:SharpDX.Result.False"/> if indices are 16-bit (65535 or fewer indices).</para></param>	
            <param name="faceRemapRef"><para>Pointer to the original mesh face that was split to generate the current face.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function's optimization procedure is functionally equivalent to calling <see cref="M:SharpDX.Direct3D9.Mesh.Optimize(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)"/> with the <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.DeviceIndependent"/> flag, but this function makes more efficient use of vertex caches.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXOptimizeFaces']/*"/>	
            <unmanaged>HRESULT D3DXOptimizeFaces([In] const void* pbIndices,[In] unsigned int cFaces,[In] unsigned int cVertices,[In] BOOL b32BitIndices,[In, Buffer] int* pFaceRemap)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetDeclVertexSize(SharpDX.Direct3D9.VertexElement[],System.Int32)">
            <summary>	
            Returns the size of a vertex from the vertex declaration.	
            </summary>	
            <param name="declRef"><para>A reference to the vertex declaration. See <see cref="T:SharpDX.Direct3D9.VertexElement"/>.</para></param>	
            <param name="stream"><para>The zero-based stream index.</para></param>	
            <returns>The vertex declaration size, in bytes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetDeclVertexSize']/*"/>	
            <unmanaged>unsigned int D3DXGetDeclVertexSize([In, Buffer] const D3DVERTEXELEMENT9* pDecl,[In] unsigned int Stream)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.TessellateNPatches(SharpDX.Direct3D9.Mesh,System.Int32,System.Single,System.Boolean,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Tessellates the given mesh using the N-patch tessellation scheme.	
            </summary>	
            <param name="meshInRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the mesh to tessellate.</para></param>	
            <param name="adjacencyInRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the source mesh. This parameter may be <c>null</c>.</para></param>	
            <param name="numSegs"><para>Number of segments per edge to tessellate.</para></param>	
            <param name="quadraticInterpNormals"><para>Set to TRUE to use quadratic interpolation for normals; set to <see cref="F:SharpDX.Result.False"/> for linear interpolation.</para></param>	
            <param name="meshOutOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the returned tessellated mesh.</para></param>	
            <param name="adjacencyOutOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. If the value of this parameter is not set to <c>null</c>, this buffer will contain an array of three DWORDs per face that specify the three neighbors for each face in the output mesh. This parameter may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function tessellates by using the N-patch algorithm.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTessellateNPatches']/*"/>	
            <unmanaged>HRESULT D3DXTessellateNPatches([In] ID3DXMesh* pMeshIn,[In] const unsigned int* pAdjacencyIn,[In] float NumSegs,[In] BOOL QuadraticInterpNormals,[In] ID3DXMesh** ppMeshOut,[In] ID3DXBuffer** ppAdjacencyOut)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CleanMesh(SharpDX.Direct3D9.CleanType,SharpDX.Direct3D9.Mesh,System.Int32,SharpDX.Direct3D9.Mesh@,System.Int32,SharpDX.Direct3D.Blob@)">
            <summary>	
            Cleans a mesh, preparing it for simplification.	
            </summary>	
            <param name="cleanType"><para>Vertex operations to perform in preparation for mesh cleaning. See <see cref="T:SharpDX.Direct3D9.CleanType"/>.</para></param>	
            <param name="meshInRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the mesh to be cleaned.</para></param>	
            <param name="adjacencyInRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the mesh to be cleaned.</para></param>	
            <param name="meshOutOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the returned cleaned mesh. The same mesh is returned that was passed in if no cleaning was necessary.</para></param>	
            <param name="adjacencyOutRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the output mesh.</para></param>	
            <param name="errorsAndWarningsOut"><para>Returns a buffer containing a string of errors and warnings, which explain the problems found in the mesh.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function cleans a mesh using the cleaning method and options specified in the CleanType parameter. See the <see cref="T:SharpDX.Direct3D9.CleanType"/> enumeration for a description of the available options.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCleanMesh']/*"/>	
            <unmanaged>HRESULT D3DXCleanMesh([In] D3DXCLEANTYPE CleanType,[In] ID3DXMesh* pMeshIn,[In] const unsigned int* pAdjacencyIn,[In] ID3DXMesh** ppMeshOut,[In] unsigned int* pAdjacencyOut,[In] ID3DXBuffer** ppErrorsAndWarnings)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetShaderInputSemantics(System.IntPtr,SharpDX.Direct3D9.ShaderSemantic[],System.Int32@)">
            <summary>	
            Gets the semantics for the shader inputs. Use this method to determine the input vertex format.	
            </summary>	
            <param name="functionRef"><para>Pointer to the shader function DWORD stream.</para></param>	
            <param name="semanticsRef"><para>Pointer to an array of <see cref="T:SharpDX.Direct3D9.ShaderSemantic"/> structures.  The function will fill this array with the semantics for each input element referenced by the shader. This array is assumed to contain at least MAXD3DDECLLENGTH elements. However, calling <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderInputSemantics(System.IntPtr,SharpDX.Direct3D9.ShaderSemantic[],System.Int32@)"/> with pSemantics = <c>null</c> will return the number of elements  needed for pCount.</para></param>	
            <param name="countRef"><para>Returns the number of elements in pSemantics.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Use <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderInputSemantics(System.IntPtr,SharpDX.Direct3D9.ShaderSemantic[],System.Int32@)"/> to return a list of input semantics required by the shader. This is the way to find out what the input vertex format is for a high-level shader language (HLSL) shader. If the shader has additional inputs that your vertex declaration is missing, you could create an extra vertex stream that has a stride of 0 that has the missing components with default values. For instance, this technique could be used to provide default vertex color for models that do not specify it.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetShaderInputSemantics']/*"/>	
            <unmanaged>HRESULT D3DXGetShaderInputSemantics([In] const void* pFunction,[In, Out, Buffer] D3DXSEMANTIC* pSemantics,[InOut] unsigned int* pCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTable(System.IntPtr)">
            <summary>	
            Gets the shader-constant table embedded inside a shader.	
            </summary>	
            <param name="functionRef"><para>Pointer to the function DWORD stream.</para></param>	
            <returns><para>Returns the constant table interface (see <see cref="T:SharpDX.Direct3D9.ConstantTable"/>) that manages the constant table.</para></returns>	
            <remarks>	
            A constant table is generated by <see cref="M:SharpDX.Direct3D9.D3DX9.CompileShader(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)"/> and embedded in the shader body. If you need additional virtual address space, see <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetShaderConstantTable']/*"/>	
            <unmanaged>HRESULT D3DXGetShaderConstantTable([In] const void* pFunction,[Out] ID3DXConstantTable** ppConstantTable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromFileW(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Assemble a shader.	
            </summary>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.  </para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode. This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromFileW(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromFileA(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXAssembleShaderFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXAssembleShaderFromFileW([In] const wchar_t* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FindShaderComment(System.IntPtr,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>	
            Searches through a shader for a particular comment. The comment is identified by a four-character code (FOURCC) in the first DWORD of the comment.	
            </summary>	
            <param name="functionRef"><para>Pointer to the shader function DWORD stream.</para></param>	
            <param name="fourCC"><para>FOURCC code that identifies the comment block. See FourCC Formats.</para></param>	
            <param name="dataOut"><para>Returns a reference to the comment data (not including the comment token and FOURCC code). This value can be <c>null</c>.</para></param>	
            <param name="sizeInBytesRef"><para>Returns the size of the comment data in bytes. This value can be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the comment is not found, and no other error has occurred, S_FALSE is returned.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFindShaderComment']/*"/>	
            <unmanaged>HRESULT D3DXFindShaderComment([In] const void* pFunction,[In] unsigned int FourCC,[Out] const void** ppData,[Out] unsigned int* pSizeInBytes)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.PreprocessShaderFromFileA(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Preprocesses a shader file without performing compilation. This resolves all #defines and #includes, providing a self-contained shader for subsequent compilation.	
            </summary>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename of the shader.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="shaderTextOut"><para>Returns a buffer containing a single large string that represents the resulting formatted token stream.</para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode.  This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPreprocessShaderFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXPreprocessShaderFromFileA([In] const char* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)">
            <summary>	
            Gets the shader-constant table embedded inside a shader.	
            </summary>	
            <param name="functionRef"><para>Pointer to the function DWORD stream.</para></param>	
            <param name="flags"><para>Use the D3DXCONSTTABLE_LARGEADDRESSAWARE flag to access up to 4 GB of virtual address space (instead of the default of 2 GB). If you do not need the additional virtual address space, use <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTable(System.IntPtr)"/>.</para></param>	
            <param name="constantTableOut"><para>Returns the constant table interface (see <see cref="T:SharpDX.Direct3D9.ConstantTable"/>) that manages the constant table.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            A constant table is generated by <see cref="M:SharpDX.Direct3D9.D3DX9.CompileShader(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)"/> and embedded in the shader body.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetShaderConstantTableEx']/*"/>	
            <unmanaged>HRESULT D3DXGetShaderConstantTableEx([In] const void* pFunction,[In] unsigned int Flags,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CompileShaderFromFileA(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)">
            <summary>	
            Compile a shader file.	
            </summary>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="functionNameRef"><para>Pointer to the shader entry point function where execution begins.</para></param>	
            <param name="profileRef"><para>Pointer to a shader profile which determines the shader instruction set. See <see cref="M:SharpDX.Direct3D9.D3DX9.GetVertexShaderProfile(SharpDX.Direct3D9.Device)"/> or <see cref="M:SharpDX.Direct3D9.D3DX9.GetPixelShaderProfile(SharpDX.Direct3D9.Device)"/> for a list of the profiles available.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.  </para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode. This value may be <c>null</c>.</para></param>	
            <param name="constantTableOut"><para>Returns an <see cref="T:SharpDX.Direct3D9.ConstantTable"/> interface, which can be used to access shader constants. This value can be <c>null</c>. If you compile your application as large address aware (that is, you use the /LARGEADDRESSAWARE linker option to handle addresses larger than 2 GB), you cannot use this parameter and must set it to <c>null</c>. Instead, you must use the <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> function to retrieve the shader-constant table that is embedded inside the shader. In this <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> call, you must pass the D3DXCONSTTABLE_LARGEADDRESSAWARE flag to the Flags parameter to specify to access up to 4 GB of virtual address space.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCompileShaderFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXCompileShaderFromFileA([In] const char* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureShader(System.Int32,SharpDX.Direct3D9.TextureShader@)">
            <summary>	
            Creates a texture shader object from the compiled shader.	
            </summary>	
            <param name="functionRef"><para>Pointer to the function DWORD stream.</para></param>	
            <param name="textureShaderOut"><para>Returns an <see cref="T:SharpDX.Direct3D9.TextureShader"/> object which can be used to procedurally fill the contents of a texture using the <see cref="M:SharpDX.Direct3D9.D3DX9.FillTextureTX(SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.TextureShader)"/> functions.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureShader']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureShader([In] const unsigned int* pFunction,[In] ID3DXTextureShader** ppTextureShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetVertexShaderProfile(SharpDX.Direct3D9.Device)">
            <summary>	
            Returns the name of the highest high-level shader language (HLSL) profile supported by a given device.	
            </summary>	
            <param name="deviceRef"><para>Pointer to the device. See <see cref="T:SharpDX.Direct3D9.Device"/>.</para></param>	
            <returns>The HLSL profile name.If the device does not support vertex shaders then the function returns <c>null</c>.</returns>	
            <remarks>	
            A shader profile specifies the assembly shader version to use and the capabilities available to the HLSL compiler when compiling a shader.  The following table lists the vertex shader profiles that are supported.Shader ProfileDescription vs_1_1Compile to vs_1_1 version. vs_2_0Compile to vs_2_0 version. vs_2_aSame as the vs_2_0 profile, with the following additional capabilities available for the compiler to target:  Number of Temporary Registers (r#) is greater than or equal to 13. Dynamic flow control instruction. Predication.   vs_3_0Compile to vs_3_0 version.?For more information about the differences between shader versions, see Vertex Shader Differences.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetVertexShaderProfile']/*"/>	
            <unmanaged>const char* D3DXGetVertexShaderProfile([In] IDirect3DDevice9* pDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CompileShaderFromResourceW(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)">
            <summary>	
            Compile a shader file.	
            </summary>	
            <param name="hSrcModule"><para>Handle to a module containing the effect description. If this parameter is <c>null</c>, the current module will be used.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file, or will error when compiled from a resource or memory.</para></param>	
            <param name="functionNameRef"><para>Pointer to the shader entry point function where execution begins.</para></param>	
            <param name="profileRef"><para>Pointer to a shader profile which determines the shader instruction set. See <see cref="M:SharpDX.Direct3D9.D3DX9.GetVertexShaderProfile(SharpDX.Direct3D9.Device)"/> or <see cref="M:SharpDX.Direct3D9.D3DX9.GetPixelShaderProfile(SharpDX.Direct3D9.Device)"/> for a list of the profiles available.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.  </para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode. This value may be <c>null</c>.</para></param>	
            <param name="constantTableOut"><para>Returns an <see cref="T:SharpDX.Direct3D9.ConstantTable"/> interface, which can be used to access shader constants. This value can be <c>null</c>. If you compile your application as large address aware (that is, you use the /LARGEADDRESSAWARE linker option to handle addresses larger than 2 GB), you cannot use this parameter and must set it to <c>null</c>. Instead, you must use the <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> function to retrieve the shader-constant table that is embedded inside the shader. In this <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> call, you must pass the D3DXCONSTTABLE_LARGEADDRESSAWARE flag to the Flags parameter to specify to access up to 4 GB of virtual address space.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCompileShaderFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXCompileShaderFromResourceW([In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.PreprocessShaderFromResourceA(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Preprocesses a shader resource without performing compilation. This resolves all #defines and #includes, providing a self-contained shader for subsequent compilation.	
            </summary>	
            <param name="hSrcModule"><para>Handle to the module that holds the shader resource. If this value is <c>null</c>, the current module will be used.</para></param>	
            <param name="srcResourceRef"><para>String that represents the name of the resource in the module.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="shaderTextOut"><para>Returns a buffer containing a single large string that represents the resulting formatted token stream.</para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode.  This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPreprocessShaderFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXPreprocessShaderFromResourceA([In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.PreprocessShaderFromResourceW(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Preprocesses a shader resource without performing compilation. This resolves all #defines and #includes, providing a self-contained shader for subsequent compilation.	
            </summary>	
            <param name="hSrcModule"><para>Handle to the module that holds the shader resource. If this value is <c>null</c>, the current module will be used.</para></param>	
            <param name="srcResourceRef"><para>String that represents the name of the resource in the module.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="shaderTextOut"><para>Returns a buffer containing a single large string that represents the resulting formatted token stream.</para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode.  This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPreprocessShaderFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXPreprocessShaderFromResourceW([In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromResourceA(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Assemble a shader.	
            </summary>	
            <param name="hSrcModule"><para>Handle to a module containing the effect description. If this parameter is <c>null</c>, the current module will be used.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.  </para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode. This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromResourceW(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromResourceA(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXAssembleShaderFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXAssembleShaderFromResourceA([In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetShaderOutputSemantics(System.IntPtr,SharpDX.Direct3D9.ShaderSemantic[],System.Int32@)">
            <summary>	
            Get the semantics for all shader output elements.	
            </summary>	
            <param name="functionRef"><para>Pointer to the shader function DWORD stream.</para></param>	
            <param name="semanticsRef"><para>Pointer to an array of <see cref="T:SharpDX.Direct3D9.ShaderSemantic"/> structures.  The function will fill this array with the semantics for each output element referenced by the shader.  This array is assumed to contain at least MAXD3DDECLLENGTH elements. However, calling <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderOutputSemantics(System.IntPtr,SharpDX.Direct3D9.ShaderSemantic[],System.Int32@)"/> with pSemantics = <c>null</c> will return the number of elements  needed for pCount.</para></param>	
            <param name="countRef"><para>Returns the number of elements in pSemantics.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetShaderOutputSemantics']/*"/>	
            <unmanaged>HRESULT D3DXGetShaderOutputSemantics([In] const void* pFunction,[In, Out, Buffer] D3DXSEMANTIC* pSemantics,[InOut] unsigned int* pCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CompileShaderFromResourceA(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)">
            <summary>	
            Compile a shader file.	
            </summary>	
            <param name="hSrcModule"><para>Handle to a module containing the effect description. If this parameter is <c>null</c>, the current module will be used.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file, or will error when compiled from a resource or memory.</para></param>	
            <param name="functionNameRef"><para>Pointer to the shader entry point function where execution begins.</para></param>	
            <param name="profileRef"><para>Pointer to a shader profile which determines the shader instruction set. See <see cref="M:SharpDX.Direct3D9.D3DX9.GetVertexShaderProfile(SharpDX.Direct3D9.Device)"/> or <see cref="M:SharpDX.Direct3D9.D3DX9.GetPixelShaderProfile(SharpDX.Direct3D9.Device)"/> for a list of the profiles available.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.  </para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode. This value may be <c>null</c>.</para></param>	
            <param name="constantTableOut"><para>Returns an <see cref="T:SharpDX.Direct3D9.ConstantTable"/> interface, which can be used to access shader constants. This value can be <c>null</c>. If you compile your application as large address aware (that is, you use the /LARGEADDRESSAWARE linker option to handle addresses larger than 2 GB), you cannot use this parameter and must set it to <c>null</c>. Instead, you must use the <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> function to retrieve the shader-constant table that is embedded inside the shader. In this <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> call, you must pass the D3DXCONSTTABLE_LARGEADDRESSAWARE flag to the Flags parameter to specify to access up to 4 GB of virtual address space.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCompileShaderFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXCompileShaderFromResourceA([In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromResourceW(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Assemble a shader.	
            </summary>	
            <param name="hSrcModule"><para>Handle to a module containing the effect description. If this parameter is <c>null</c>, the current module will be used.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.  </para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode. This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromResourceW(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromResourceA(System.IntPtr,System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXAssembleShaderFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXAssembleShaderFromResourceW([In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.AssembleShader(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Assemble a shader.	
            </summary>	
            <param name="srcDataRef"><para>Pointer to a memory buffer that contains the shader data.</para></param>	
            <param name="srcDataLen"><para>Length of the effect data, in bytes.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.</para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode. This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXAssembleShader']/*"/>	
            <unmanaged>HRESULT D3DXAssembleShader([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.DisassembleShader(System.IntPtr,System.Boolean,System.String,SharpDX.Direct3D.Blob@)">
            <summary>	
            Disassemble a shader.	
            </summary>	
            <param name="shaderRef"><para>Pointer to a memory buffer that contains the shader data.</para></param>	
            <param name="enableColorCode"><para>Enable color code to make it easier to read the disassembly.</para></param>	
            <param name="commentsRef"><para>An optional <c>null</c>-terminated comment string. This value may be <c>null</c>.</para></param>	
            <param name="disassemblyOut"><para>Returns a buffer containing the disassembled shader. See <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXDisassembleShader']/*"/>	
            <unmanaged>HRESULT D3DXDisassembleShader([In] const void* pShader,[In] BOOL EnableColorCode,[In] const char* pComments,[In] ID3DXBuffer** ppDisassembly)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.PreprocessShaderFromFileW(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Preprocesses a shader file without performing compilation. This resolves all #defines and #includes, providing a self-contained shader for subsequent compilation.	
            </summary>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename of the shader.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="shaderTextOut"><para>Returns a buffer containing a single large string that represents the resulting formatted token stream.</para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode.  This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPreprocessShaderFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXPreprocessShaderFromFileW([In] const wchar_t* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CompileShaderFromFileW(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)">
            <summary>	
            Compile a shader file.	
            </summary>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="functionNameRef"><para>Pointer to the shader entry point function where execution begins.</para></param>	
            <param name="profileRef"><para>Pointer to a shader profile which determines the shader instruction set. See <see cref="M:SharpDX.Direct3D9.D3DX9.GetVertexShaderProfile(SharpDX.Direct3D9.Device)"/> or <see cref="M:SharpDX.Direct3D9.D3DX9.GetPixelShaderProfile(SharpDX.Direct3D9.Device)"/> for a list of the profiles available.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.  </para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode. This value may be <c>null</c>.</para></param>	
            <param name="constantTableOut"><para>Returns an <see cref="T:SharpDX.Direct3D9.ConstantTable"/> interface, which can be used to access shader constants. This value can be <c>null</c>. If you compile your application as large address aware (that is, you use the /LARGEADDRESSAWARE linker option to handle addresses larger than 2 GB), you cannot use this parameter and must set it to <c>null</c>. Instead, you must use the <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> function to retrieve the shader-constant table that is embedded inside the shader. In this <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> call, you must pass the D3DXCONSTTABLE_LARGEADDRESSAWARE flag to the Flags parameter to specify to access up to 4 GB of virtual address space.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCompileShaderFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXCompileShaderFromFileW([In] const wchar_t* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CompileShader(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,System.String,System.String,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ConstantTable@)">
            <summary>	
            Compile a shader file.	
            </summary>	
            <param name="srcDataRef"><para>Pointer to a string that contains the shader.</para></param>	
            <param name="srcDataLen"><para>Length of the data in bytes.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="functionNameRef"><para>Pointer to a string that contains the name of the shader entry point function where execution begins.</para></param>	
            <param name="profileRef"><para>Pointer to a shader profile which determines the shader instruction set. See <see cref="M:SharpDX.Direct3D9.D3DX9.GetVertexShaderProfile(SharpDX.Direct3D9.Device)"/> or <see cref="M:SharpDX.Direct3D9.D3DX9.GetPixelShaderProfile(SharpDX.Direct3D9.Device)"/> for a list of the profiles available.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.  </para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode.  This value may be <c>null</c>.</para></param>	
            <param name="constantTableOut"><para>Returns an <see cref="T:SharpDX.Direct3D9.ConstantTable"/> interface, which can be used to access shader constants. This value can be <c>null</c>. If you compile your application as large address aware (that is, you use the /LARGEADDRESSAWARE linker option to handle addresses larger than 2 GB), you cannot use this parameter and must set it to <c>null</c>. Instead, you must use the <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> function to retrieve the shader-constant table that is embedded inside the shader. In this <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderConstantTableEx(System.IntPtr,System.Int32,SharpDX.Direct3D9.ConstantTable@)"/> call, you must pass the D3DXCONSTTABLE_LARGEADDRESSAWARE flag to the Flags parameter to specify to access up to 4 GB of virtual address space.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCompileShader']/*"/>	
            <unmanaged>HRESULT D3DXCompileShader([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetShaderVersion(System.IntPtr)">
            <summary>	
            Returns the shader version of the compiled shader.	
            </summary>	
            <param name="functionRef"><para>Pointer to the function DWORD stream.</para></param>	
            <returns>Returns the shader version of the given shader, or zero if the shader  function is <c>null</c>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetShaderVersion']/*"/>	
            <unmanaged>unsigned int D3DXGetShaderVersion([In] const void* pFunction)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromFileA(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Assemble a shader.	
            </summary>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="flags"><para>Compile options identified by various flags. The Direct3D 10 HLSL compiler is now the default. See <see cref="T:SharpDX.Direct3D9.ShaderFlags"/> Flags for details.</para></param>	
            <param name="shaderOut"><para>Returns a buffer containing the created shader.  This buffer contains the compiled shader code, as well as any embedded debug and symbol table information.  </para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode. This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromFileW(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.AssembleShaderFromFileA(System.String,SharpDX.Direct3D9.Macro[],System.IntPtr,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXAssembleShaderFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXAssembleShaderFromFileA([In] const char* pSrcFile,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetShaderSize(System.IntPtr)">
            <summary>	
            Returns the size of the shader byte code, in bytes.	
            </summary>	
            <param name="functionRef"><para>Pointer to the function DWORD stream.</para></param>	
            <returns>Returns the size of the shader byte code, in bytes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetShaderSize']/*"/>	
            <unmanaged>unsigned int D3DXGetShaderSize([In] const void* pFunction)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetPixelShaderProfile(SharpDX.Direct3D9.Device)">
            <summary>	
            Returns the name of the highest high-level shader language (HLSL) profile supported by a given device.	
            </summary>	
            <param name="deviceRef"><para>Pointer to the device. See <see cref="T:SharpDX.Direct3D9.Device"/>.</para></param>	
            <returns>The HLSL profile name.If the device does not support pixel shaders then the function returns <c>null</c>.</returns>	
            <remarks>	
            A shader profile specifies the assembly shader version to use and the capabilities available to the HLSL compiler when compiling a shader.  The following table lists the pixel shader profiles that are supported.Shader ProfileDescription ps_1_1Compile to ps_1_1 version. ps_1_2Compile to ps_1_2 version. ps_1_3Compile to ps_1_3 version. ps_1_4Compile to ps_1_4 version. ps_2_0Compile to ps_2_0 version. ps_2_aSame as the ps_2_0 profile, with the following additional capabilities available for the compiler to target:  Number of Temporary Registers (r#) is greater than or equal to 22. Arbitrary source swizzle. Gradient instructions: dsx, dsy. Predication. No dependent texture read limit. No limit for the number of texture instructions.   ps_2_bSame as the ps_2_0 profile, with the following additional capabilities available for the compiler to target:  Number of Temporary Registers (r#) is greater than or equal to 32. No limit for the number of texture instructions.   ps_3_0Compile to ps_3_0 version.?For more information about the differences between shader versions, see Pixel Shader Differences.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetPixelShaderProfile']/*"/>	
            <unmanaged>const char* D3DXGetPixelShaderProfile([In] IDirect3DDevice9* pDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetShaderSamplers(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>	
            Get the sampler names referenced in a shader.	
            </summary>	
            <param name="functionRef"><para>Pointer to the shader function DWORD stream.</para></param>	
            <param name="samplersRef"><para>Pointer to an array of LPCSTRs. The function will fill this array with references to the sampler names contained within pFunction. The maximum array size is the maximum number of sampler registers (16 for vs_3_0 and ps_3_0).</para> <para>To find the number of samplers used, check pCount after calling <see cref="M:SharpDX.Direct3D9.D3DX9.GetShaderSamplers(System.IntPtr,System.IntPtr,System.Int32@)"/> with pSamplers = <c>null</c>.</para></param>	
            <param name="countRef"><para>Returns the number of samplers referenced by the shader.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetShaderSamplers']/*"/>	
            <unmanaged>HRESULT D3DXGetShaderSamplers([In] const void* pFunction,[In, Out, Buffer] const void** pSamplers,[InOut] unsigned int* pCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.PreprocessShader(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],System.IntPtr,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Preprocesses a shader without performing compilation. This resolves all #defines and #includes, providing a self-contained shader for subsequent compilation.	
            </summary>	
            <param name="srcDataRef"><para>Pointer to a string that contains the shader.</para></param>	
            <param name="srcDataSize"><para>Length of the data in bytes.</para></param>	
            <param name="definesRef"><para>An optional <c>null</c> terminated array of <see cref="T:SharpDX.Direct3D9.Macro"/> structures. This value may be <c>null</c>.</para></param>	
            <param name="includeRef"><para>Optional interface reference, <see cref="T:SharpDX.Direct3D9.Include"/>, to use for handling #include directives. If this value is <c>null</c>, #includes will either be honored when compiling from a file or will cause an error when compiled from a resource or memory.</para></param>	
            <param name="shaderTextOut"><para>Returns a buffer containing a single large string that represents the resulting formatted token stream.</para></param>	
            <param name="errorMsgsOut"><para>Returns a buffer containing a listing of errors and warnings that were encountered during the compile.  These are the same messages the debugger displays when running in debug mode.  This value may be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPreprocessShader']/*"/>	
            <unmanaged>HRESULT D3DXPreprocessShader([In] const void* pSrcData,[In] unsigned int SrcDataSize,[In, Buffer, Optional] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateBox(SharpDX.Direct3D9.Device,System.Single,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Uses a left-handed coordinate system to create a mesh containing an axis-aligned box.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the created box mesh.</para></param>	
            <param name="width"><para>Width of the box, along the x-axis.</para></param>	
            <param name="height"><para>Height of the box, along the y-axis.</para></param>	
            <param name="depth"><para>Depth of the box, along the z-axis.</para></param>	
            <param name="meshOut"><para>Address of a reference to the output shape, an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface.</para></param>	
            <param name="adjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When the method returns, this parameter is filled with an array of three DWORDs per face that specify the three neighbors for each face in the mesh. <c>null</c> can be specified.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The created box is centered at the origin.This function creates a mesh with the <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/> creation option and <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> flexible vertex format (FVF).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateBox']/*"/>	
            <unmanaged>HRESULT D3DXCreateBox([In] IDirect3DDevice9* pDevice,[In] float Width,[In] float Height,[In] float Depth,[In] ID3DXMesh** ppMesh,[In] ID3DXBuffer** ppAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreatePolygon(SharpDX.Direct3D9.Device,System.Single,System.Int32,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Uses a left-handed coordinate system to create a mesh containing an 	
            n-sided polygon.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the created polygon mesh.</para></param>	
            <param name="length"><para>Length of each side.</para></param>	
            <param name="sides"><para>Number of sides for the polygon. Value must be greater than or equal to 3.</para></param>	
            <param name="meshOut"><para>Address of a reference to the output shape, an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface.</para></param>	
            <param name="adjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When the method returns, this parameter is filled with an array of three  DWORDs per face that specify the three neighbors for each face in the mesh. <c>null</c> can be specified.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The created polygon is centered at the origin.This function creates a mesh with the <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/> creation option and <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> flexible vertex format (FVF).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreatePolygon']/*"/>	
            <unmanaged>HRESULT D3DXCreatePolygon([In] IDirect3DDevice9* pDevice,[In] float Length,[In] unsigned int Sides,[In] ID3DXMesh** ppMesh,[In] ID3DXBuffer** ppAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTeapot(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Uses a left-handed coordinate system to create a mesh containing a teapot.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the created teapot mesh.</para></param>	
            <param name="meshOut"><para>Address of a reference to the output shape, an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface.</para></param>	
            <param name="adjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When the method returns, this parameter is filled with an array of three  DWORDs per face that specify the three neighbors for each face in the mesh. <c>null</c> can be specified.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function creates a mesh with the <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/> creation option and <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> flexible vertex format (FVF).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTeapot']/*"/>	
            <unmanaged>HRESULT D3DXCreateTeapot([In] IDirect3DDevice9* pDevice,[In] ID3DXMesh** ppMesh,[In] ID3DXBuffer** ppAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTorus(SharpDX.Direct3D9.Device,System.Single,System.Single,System.Int32,System.Int32,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Uses a left-handed coordinate system to create a mesh containing a torus.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the created torus mesh.</para></param>	
            <param name="innerRadius"><para>Inner-radius of the torus. Value should be greater than or equal to 0.0f.</para></param>	
            <param name="outerRadius"><para>Outer-radius of the torus. Value should be greater than or equal to 0.0f.</para></param>	
            <param name="sides"><para>Number of sides in a cross-section. Value must be greater than or equal to 3.</para></param>	
            <param name="rings"><para>Number of rings making up the torus. Value must be greater than or equal to 3.</para></param>	
            <param name="meshOut"><para>Address of a reference to the output shape, an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface.</para></param>	
            <param name="adjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When the method returns, this parameter is filled with an array of three  DWORDs per face that specify the three neighbors for each face in the mesh. <c>null</c> can be specified.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The created torus is centered at the origin, and its axis is aligned with the z-axis. The inner radius of the torus is the radius of the cross-section (the minor radius), and the outer radius of the torus is the radius of the central hole.This function returns a mesh that can be used later for drawing or manipulation by the application.This function creates a mesh with the <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/> creation option and <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> flexible vertex format (FVF).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTorus']/*"/>	
            <unmanaged>HRESULT D3DXCreateTorus([In] IDirect3DDevice9* pDevice,[In] float InnerRadius,[In] float OuterRadius,[In] unsigned int Sides,[In] unsigned int Rings,[In] ID3DXMesh** ppMesh,[In] ID3DXBuffer** ppAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateSphere(SharpDX.Direct3D9.Device,System.Single,System.Int32,System.Int32,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Uses a left-handed coordinate system to create a mesh containing a sphere.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the created sphere mesh.</para></param>	
            <param name="radius"><para>Radius of the sphere. This value should be greater than or equal to 0.0f.</para></param>	
            <param name="slices"><para>Number of slices about the main axis.</para></param>	
            <param name="stacks"><para>Number of stacks along the main axis.</para></param>	
            <param name="meshOut"><para>Address of a reference to the output shape, an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface.</para></param>	
            <param name="adjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When the method returns, this parameter is filled with an array of three  DWORDs per face that specify the three neighbors for each face in the mesh. <c>null</c> can be specified.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The created sphere is centered at the origin, and its axis is aligned with the z-axis.This function creates a mesh with the <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/> creation option and <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> flexible vertex format (FVF).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateSphere']/*"/>	
            <unmanaged>HRESULT D3DXCreateSphere([In] IDirect3DDevice9* pDevice,[In] float Radius,[In] unsigned int Slices,[In] unsigned int Stacks,[In] ID3DXMesh** ppMesh,[In] ID3DXBuffer** ppAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,System.IntPtr)">
            <summary>	
            Creates a mesh containing the specified text, using the font associated with the device context.	
            </summary>	
            <param name="deviceRef"><para>Pointer to the device that created the mesh.</para></param>	
            <param name="hDC"><para>Device context, containing the font for output. The font selected by the device context must be a TrueType font.</para></param>	
            <param name="textRef"><para>Pointer to a string that specifies the text to generate. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="deviation"><para>Maximum chordal deviation from TrueType font outlines.</para></param>	
            <param name="extrusion"><para>Amount to extrude text in the negative z-direction.</para></param>	
            <param name="meshOut"><para>Pointer to the returned mesh.</para></param>	
            <param name="adjacencyOut"><para>Pointer to a buffer containing adjacency information. May be <c>null</c>.</para></param>	
            <param name="pGlyphMetrics"><para>Pointer to an array of GLYPHMETRICSFLOAT structures that contain the glyph metric data. Each element contains information about the position and orientation of the corresponding glyph in the string. The number of elements in the array should be equal to the number of characters in the string. Note that the origin in each structure is not relative to the entire string, but rather is relative to that character cell. To compute the entire bounding box, add the increment for each glyph while traversing the string. If you are not concerned with the glyph sizes, set this parameter to <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,System.IntPtr)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,System.IntPtr)"/> because ANSI strings are being used.This function creates a mesh with the <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/> creation option and <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> flexible vertex format (FVF).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextA']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextA([In] IDirect3DDevice9* pDevice,[In] HDC hDC,[In] const char* pText,[In] float Deviation,[In] float Extrusion,[In] ID3DXMesh** ppMesh,[In] ID3DXBuffer** ppAdjacency,[In] LPGLYPHMETRICSFLOAT pGlyphMetrics)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,System.IntPtr)">
            <summary>	
            Creates a mesh containing the specified text, using the font associated with the device context.	
            </summary>	
            <param name="deviceRef"><para>Pointer to the device that created the mesh.</para></param>	
            <param name="hDC"><para>Device context, containing the font for output. The font selected by the device context must be a TrueType font.</para></param>	
            <param name="textRef"><para>Pointer to a string that specifies the text to generate. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="deviation"><para>Maximum chordal deviation from TrueType font outlines.</para></param>	
            <param name="extrusion"><para>Amount to extrude text in the negative z-direction.</para></param>	
            <param name="meshOut"><para>Pointer to the returned mesh.</para></param>	
            <param name="adjacencyOut"><para>Pointer to a buffer containing adjacency information. May be <c>null</c>.</para></param>	
            <param name="pGlyphMetrics"><para>Pointer to an array of GLYPHMETRICSFLOAT structures that contain the glyph metric data. Each element contains information about the position and orientation of the corresponding glyph in the string. The number of elements in the array should be equal to the number of characters in the string. Note that the origin in each structure is not relative to the entire string, but rather is relative to that character cell. To compute the entire bounding box, add the increment for each glyph while traversing the string. If you are not concerned with the glyph sizes, set this parameter to <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,System.IntPtr)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Single,System.Single,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@,System.IntPtr)"/> because ANSI strings are being used.This function creates a mesh with the <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/> creation option and <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> flexible vertex format (FVF).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextW']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextW([In] IDirect3DDevice9* pDevice,[In] HDC hDC,[In] const wchar_t* pText,[In] float Deviation,[In] float Extrusion,[In] ID3DXMesh** ppMesh,[In] ID3DXBuffer** ppAdjacency,[In] LPGLYPHMETRICSFLOAT pGlyphMetrics)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCylinder(SharpDX.Direct3D9.Device,System.Single,System.Single,System.Single,System.Int32,System.Int32,SharpDX.Direct3D9.Mesh@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Uses a left-handed coordinate system to create a mesh containing a cylinder.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device associated with the created cylinder mesh.</para></param>	
            <param name="radius1"><para>Radius at the negative Z end. Value should be greater than or equal to 0.0f.</para></param>	
            <param name="radius2"><para>Radius at the positive Z end. Value should be greater than or equal to 0.0f.</para></param>	
            <param name="length"><para>Length of the cylinder along the z-axis.</para></param>	
            <param name="slices"><para>Number of slices about the main axis.</para></param>	
            <param name="stacks"><para>Number of stacks along the main axis.</para></param>	
            <param name="meshOut"><para>Address of a reference to the output shape, an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface.</para></param>	
            <param name="adjacencyOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface. When the method returns, this parameter is filled with an array of three  DWORDs per face that specify the three neighbors for each face in the mesh. <c>null</c> can be specified.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The created cylinder is centered at the origin, and its axis is aligned with the z-axis.This function creates a mesh with the <see cref="F:SharpDX.Direct3D9.MeshFlags.Managed"/> creation option and <see cref="F:SharpDX.Direct3D9.VertexFormat.Position"/> | <see cref="F:SharpDX.Direct3D9.VertexFormat.Normal"/> flexible vertex format (FVF).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCylinder']/*"/>	
            <unmanaged>HRESULT D3DXCreateCylinder([In] IDirect3DDevice9* pDevice,[In] float Radius1,[In] float Radius2,[In] float Length,[In] unsigned int Slices,[In] unsigned int Stacks,[In] ID3DXMesh** ppMesh,[In] ID3DXBuffer** ppAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetImageInfoFromResourceW(System.IntPtr,System.String)">
            <summary>	
            Retrieves information about a given image in a resource.	
            </summary>	
            <param name="hSrcModule"><para>Module where the resource is loaded. Set this parameter to <c>null</c> to specify the module associated with the image that the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with the description of the data in the source file.</para></returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.GetImageInfoFromResourceW(System.IntPtr,System.String)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.GetImageInfoFromResourceA(System.IntPtr,System.String)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetImageInfoFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXGetImageInfoFromResourceW([In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[Out] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FillVolumeTextureTX(SharpDX.Direct3D9.VolumeTexture,SharpDX.Direct3D9.TextureShader)">
            <summary>	
            Uses a compiled high-level shader language (HLSL) function to fill each texel of each mipmap level of a texture.	
            </summary>	
            <param name="volumeTextureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> object, representing the texture to be filled.</para></param>	
            <param name="textureShaderRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.TextureShader"/> texture shader object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following:D3DERR_NOTAVAILABLE, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The texture target must be an HLSL function that takes contains the following semantics:One input parameter must use a POSITION semantic. One input parameter must use a PSIZE semantic. The function must return a parameter that uses the COLOR semantic.The input parameters can be in any order. For an example, see <see cref="M:SharpDX.Direct3D9.D3DX9.FillTextureTX(SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.TextureShader)"/>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFillVolumeTextureTX']/*"/>	
            <unmanaged>HRESULT D3DXFillVolumeTextureTX([In] IDirect3DVolumeTexture9* pVolumeTexture,[In] ID3DXTextureShader* pTextureShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a resource specified by a string. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.VolumeTexture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="width">No documentation.</param>	
            <param name="height">No documentation.</param>	
            <param name="depth">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="volumeTextureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)"/> because ANSI strings are being used.The resource being loaded must be an application-defined resource (RT_RCDATA).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromResourceExA']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromResourceExA([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Depth,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo,[In] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a resource specified by a string. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.VolumeTexture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="width">No documentation.</param>	
            <param name="height">No documentation.</param>	
            <param name="depth">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="volumeTextureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)"/> because ANSI strings are being used.The resource being loaded must be an application-defined resource (RT_RCDATA).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromResourceExW']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromResourceExW([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Depth,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo,[In] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTexture(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates an empty cube texture, adjusting the calling parameters as needed.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the texture.</para></param>	
            <param name="size"><para>Width and height of the cube texture, in pixels. For example, if the cube texture is an 8-pixel by 8-pixel cube, the value for this parameter should be 8.</para></param>	
            <param name="mipLevels"><para>Number of mip levels requested. If this value is zero or D3DX_DEFAULT, a complete mipmap chain is created.</para></param>	
            <param name="usage"><para>0, <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/>, or <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/>. Setting this flag to <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> indicates that the surface is to be used as a render target. The resource can then be passed to the pNewRenderTarget parameter of the SetRenderTarget method. If <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> is specified, the application should check that the device supports this operation by calling CheckDeviceFormat. For more information about using dynamic textures, see Using Dynamic Textures.</para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the requested pixel format for the cube texture. The returned cube texture might have a different format from that specified by  Format. Applications should check the format of the returned cube texture.</para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the cube texture should be placed.</para></param>	
            <param name="cubeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface, representing the created cube texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Cube textures differ from other surfaces in that they are collections of surfaces.Internally, <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTexture(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.CubeTexture@)"/> uses <see cref="M:SharpDX.Direct3D9.D3DX9.CheckCubeTextureRequirements(SharpDX.Direct3D9.Device,System.Int32@,System.Int32@,System.Int32,SharpDX.Direct3D9.Format@,SharpDX.Direct3D9.Pool)"/> to adjust the calling parameters. Therefore, calls to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTexture(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.CubeTexture@)"/> will often succeed where calls to CreateCubeTexture would fail.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTexture']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTexture([In] IDirect3DDevice9* pDevice,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveSurfaceToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)">
            <summary>	
            Saves a surface to a file.	
            </summary>	
            <param name="destFileRef"><para>Pointer to a string that specifies the file name of the destination image. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="destFormat"><para> <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> specifying the file format to use when saving. This function supports saving to all <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</para></param>	
            <param name="srcSurfaceRef"><para>Pointer to <see cref="T:SharpDX.Direct3D9.Surface"/> interface, containing the image to be saved.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure containing a palette of 256 colors. This parameter can be <c>null</c>.</para></param>	
            <param name="srcRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the source rectangle. Set this parameter to <c>null</c> to specify the entire image.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveSurfaceToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveSurfaceToFileA(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveSurfaceToFileW']/*"/>	
            <unmanaged>HRESULT D3DXSaveSurfaceToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileExA(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a file. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.CubeTexture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcFileRef">No documentation.</param>	
            <param name="size">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="cubeTextureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.CubeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileExA(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)"/> because ANSI strings are being used.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Cube textures differ from other surfaces in that they are collections of surfaces. To call SetRenderTarget with a cube texture, you must select an individual face using GetCubeMapSurface and pass the resulting surface to SetRenderTarget.D3DXCreateCubeTextureFromFileEx uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file format.When skipping mipmap levels while loading a .dds file, use the D3DX_SKIP_DDS_MIP_LEVELS macro to generate the MipFilter value. This macro takes the number of levels to skip and the filter type and returns the filter value, which would then be passed into the MipFilter parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromFileExA']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileExA([In] IDirect3DDevice9* pDevice,[In] const char* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo,[In] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a file. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.CubeTexture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcFileRef">No documentation.</param>	
            <param name="size">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="cubeTextureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.CubeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileExA(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)"/> because ANSI strings are being used.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Cube textures differ from other surfaces in that they are collections of surfaces. To call SetRenderTarget with a cube texture, you must select an individual face using GetCubeMapSurface and pass the resulting surface to SetRenderTarget.D3DXCreateCubeTextureFromFileEx uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file format.When skipping mipmap levels while loading a .dds file, use the D3DX_SKIP_DDS_MIP_LEVELS macro to generate the MipFilter value. This macro takes the number of levels to skip and the filter type and returns the filter value, which would then be passed into the MipFilter parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromFileExW']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileInMemoryEx(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a file. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileInMemory(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.VolumeTexture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcDataRef">No documentation.</param>	
            <param name="srcDataSize">No documentation.</param>	
            <param name="width">No documentation.</param>	
            <param name="height">No documentation.</param>	
            <param name="depth">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="volumeTextureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.When skipping mipmap levels while loading a .dds file, use the D3DX_SKIP_DDS_MIP_LEVELS macro to generate the MipFilter value. This macro takes the number of levels to skip and the filter type and returns the filter value, which would then be passed into the MipFilter parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromFileInMemoryEx']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Depth,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a resource.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the texture.</para></param>	
            <param name="hSrcModule"><para>Handle to the module where the resource is located, or <c>null</c> for module associated with the image the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="textureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface, representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Texture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Texture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)"/>(pDevice, hSrcModule, pSrcResource, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppTexture).The resource being loaded must be of type RT_BITMAP or RT_RCDATA. Resource type RT_RCDATA is used to load formats other than bitmaps (such as .tga, .jpg, and .dds).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromResourceA([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FillTextureTX(SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.TextureShader)">
            <summary>	
            Uses a compiled high-level shader language (HLSL) function to fill each texel of each mipmap level of a texture.	
            </summary>	
            <param name="textureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> object, representing the texture to be filled.</para></param>	
            <param name="textureShaderRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.TextureShader"/> texture shader object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The texture target must be an HLSL function that takes contains the following semantics:One input parameter must use a POSITION semantic. One input parameter must use a PSIZE semantic. The function must return a parameter that uses the COLOR semantic.The following is an example of such an HLSL function:<code>	
             float4 TextureGradientFill( float2 vTexCoord : POSITION,  float2 vTexelSize : PSIZE) : COLOR  { float r,g, b, xSq,ySq, a; xSq = 2.f*vTexCoord.x-1.f; xSq *= xSq; ySq = 2.f*vTexCoord.y-1.f; ySq *= ySq; a = sqrt(xSq+ySq); if (a &gt; 1.0f) { a = 1.0f-(a-1.0f); } else if (a &lt; 0.2f) { a = 0.2f; } r = 1-vTexCoord.x; g = 1-vTexCoord.y; b = vTexCoord.x; return float4(r, g, b, a); };	
            	
            </code>Note that the input parameters can be in any order, but both input semantics must be represented.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFillTextureTX']/*"/>	
            <unmanaged>HRESULT D3DXFillTextureTX([In] IDirect3DTexture9* pTexture,[In] ID3DXTextureShader* pTextureShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileA(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>	
            Saves a texture to a file.	
            </summary>	
            <param name="destFileRef"><para>Pointer to a string that specifies the file name of the destination image. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="destFormat"><para> <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> specifying the file format to use when saving. This function supports saving to all <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</para></param>	
            <param name="srcTextureRef"><para>Pointer to <see cref="T:SharpDX.Direct3D9.BaseTexture"/> interface, containing the texture to be saved.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure containing a palette of 256 colors. This parameter can be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileA(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats.If the volume is nondynamic (because of a usage parameter set to 0 at the creation) and located in video memory (the memory pool set to <see cref="F:SharpDX.Direct3D9.Pool.Default"/>), <see cref="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])"/> will fail because D3DX cannot lock nondynamic volumes located in video memory.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveTextureToFileA']/*"/>	
            <unmanaged>HRESULT D3DXSaveTextureToFileA([In] const char* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DBaseTexture9* pSrcTexture,[In, Buffer] const PALETTEENTRY* pSrcPalette)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromResourceA(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="destSurfaceRef">No documentation.</param>	
            <param name="destPaletteRef">No documentation.</param>	
            <param name="destRectRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="srcRectRef">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadSurfaceFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXLoadSurfaceFromResourceA([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromResourceW(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="destSurfaceRef">No documentation.</param>	
            <param name="destPaletteRef">No documentation.</param>	
            <param name="destRectRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="srcRectRef">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadSurfaceFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXLoadSurfaceFromResourceW([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a resource.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the cube texture.</para></param>	
            <param name="hSrcModule"><para>Handle to the module where the resource is located, or <c>null</c> for the module associated with the image the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="cubeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface, representing the created cube texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.CubeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.CubeTexture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)"/>(pDevice, hSrcModule, pSrcResource, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppCubeTexture).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.D3DXCreateCubeTextureFromResource uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file format.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromResourceA([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a resource.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the cube texture.</para></param>	
            <param name="hSrcModule"><para>Handle to the module where the resource is located, or <c>null</c> for the module associated with the image the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="cubeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface, representing the created cube texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.CubeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.CubeTexture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)"/>(pDevice, hSrcModule, pSrcResource, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppCubeTexture).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.D3DXCreateCubeTextureFromResource uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file format.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromResourceW([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileA(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            Loads a volume from a file.	
            </summary>	
            <param name="destVolumeRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Volume"/> interface. Specifies the destination volume.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the destination box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="srcBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the source box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="filter"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/>, controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <param name="srcInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with a description of the data in the source image file, or <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileW(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileA(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats and supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Writing to a non-level-zero surface of the volume texture will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileW(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> is called and the texture was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call <see cref="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(System.IntPtr)"/> on the volume texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadVolumeFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXLoadVolumeFromFileA([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const char* pSrcFile,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetImageInfoFromResourceA(System.IntPtr,System.String)">
            <summary>	
            Retrieves information about a given image in a resource.	
            </summary>	
            <param name="hSrcModule"><para>Module where the resource is loaded. Set this parameter to <c>null</c> to specify the module associated with the image that the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with the description of the data in the source file.</para></returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.GetImageInfoFromResourceW(System.IntPtr,System.String)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.GetImageInfoFromResourceA(System.IntPtr,System.String)"/> because ANSI strings are being used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetImageInfoFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXGetImageInfoFromResourceA([In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[Out] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a file.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the texture.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="textureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface, representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Texture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Texture@)"/> because ANSI strings are being used.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.Texture@)"/>(pDevice, pSrcFile, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppTexture).Mipmapped textures automatically have each level filled with the loaded texture.When loading images into mipmapped textures, some devices are unable to go to a 1x1 image and this function will fail. If this happens, the images need to be loaded manually.Note that a resource created with this function will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.For the best performance when using D3DXCreateTextureFromFile:Doing image scaling and format conversion at load time can be slow. Store images in the format and resolution they will be used. If the target hardware requires power of two dimensions, create and store images using power of two dimensions. Consider using DirectDraw surface (DDS) files. Because DDS files can be used to represent any Direct3D 9 texture format, they are very easy for D3DX to read. Also, they can store mipmaps, so any mipmap-generation algorithms can be used to author the images.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromFileA([In] IDirect3DDevice9* pDevice,[In] const char* pSrcFile,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a file.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the texture.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="textureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface, representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Texture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Texture@)"/> because ANSI strings are being used.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.Texture@)"/>(pDevice, pSrcFile, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppTexture).Mipmapped textures automatically have each level filled with the loaded texture.When loading images into mipmapped textures, some devices are unable to go to a 1x1 image and this function will fail. If this happens, the images need to be loaded manually.Note that a resource created with this function will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.For the best performance when using D3DXCreateTextureFromFile:Doing image scaling and format conversion at load time can be slow. Store images in the format and resolution they will be used. If the target hardware requires power of two dimensions, create and store images using power of two dimensions. Consider using DirectDraw surface (DDS) files. Because DDS files can be used to represent any Direct3D 9 texture format, they are very easy for D3DX to read. Also, they can store mipmaps, so any mipmap-generation algorithms can be used to author the images.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromFileW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CheckVolumeTextureRequirements(SharpDX.Direct3D9.Device,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32,SharpDX.Direct3D9.Format@,SharpDX.Direct3D9.Pool)">
            <summary>	
            Checks volume-texture-creation parameters.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the volume texture.</para></param>	
            <param name="widthRef"><para>Pointer to the requested width in pixels, or <c>null</c>. Returns the corrected size.</para></param>	
            <param name="heightRef"><para>Pointer to the requested height in pixels, or <c>null</c>. Returns the corrected size.</para></param>	
            <param name="depthRef"><para>Pointer to the requested depth in pixels, or <c>null</c>. Returns the corrected size.</para></param>	
            <param name="numMipLevelsRef"><para>Pointer to the number of requested mipmap levels, or <c>null</c>. Returns the corrected number of mipmap levels.</para></param>	
            <param name="usage"><para>Currently not used, set to 0.</para></param>	
            <param name="formatRef"><para>Pointer to a member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type. Specifies the desired pixel format, or <c>null</c>. Returns the corrected format.</para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the volume texture should be placed.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If parameters to this function are invalid, this function returns corrected parameters.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCheckVolumeTextureRequirements']/*"/>	
            <unmanaged>HRESULT D3DXCheckVolumeTextureRequirements([In] IDirect3DDevice9* pDevice,[InOut] unsigned int* pWidth,[InOut] unsigned int* pHeight,[InOut] unsigned int* pDepth,[InOut] unsigned int* pNumMipLevels,[In] unsigned int Usage,[InOut] D3DFORMAT* pFormat,[In] D3DPOOL Pool)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FillCubeTexture(SharpDX.Direct3D9.CubeTexture,SharpDX.FunctionCallback,System.IntPtr)">
            <summary>	
            Uses a user-provided function to fill each texel of each mip level of a given cube texture.	
            </summary>	
            <param name="cubeTextureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface, representing the filled texture.</para></param>	
            <param name="functionRef"><para>Pointer to a user-provided evaluator function, which will be used to compute the value of each texel. The function follows the prototype of LPD3DXFILL3D.</para></param>	
            <param name="dataRef"><para>Pointer to an arbitrary block of user-defined data. This reference will be passed to the function provided in pFunction.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Here is an example that creates a function called ColorCubeFill, which relies on <see cref="M:SharpDX.Direct3D9.D3DX9.FillCubeTexture(SharpDX.Direct3D9.CubeTexture,SharpDX.FunctionCallback,System.IntPtr)"/>.<code>	
             // Define a function that matches the prototype of LPD3DXFILL3D	
            VOID WINAPI ColorCubeFill (<see cref="T:SharpDX.Vector4"/>* pOut, const <see cref="T:SharpDX.Vector3"/>* pTexCoord, 	
            const <see cref="T:SharpDX.Vector3"/>* pTexelSize, LPVOID pData)	
            { *pOut = <see cref="T:SharpDX.Vector4"/>(pTexCoord-&gt;x, pTexCoord-&gt;y, pTexCoord-&gt;z, 0.0f);	
            } // Fill the texture using <see cref="M:SharpDX.Direct3D9.D3DX9.FillCubeTexture(SharpDX.Direct3D9.CubeTexture,SharpDX.FunctionCallback,System.IntPtr)"/>	
            if (FAILED (hr = <see cref="M:SharpDX.Direct3D9.D3DX9.FillCubeTexture(SharpDX.Direct3D9.CubeTexture,SharpDX.FunctionCallback,System.IntPtr)"/> (m_pTexture, ColorCubeFill, <c>null</c>)))	
            { return hr;	
            }	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFillCubeTexture']/*"/>	
            <unmanaged>HRESULT D3DXFillCubeTexture([In] IDirect3DCubeTexture9* pCubeTexture,[In] __function__stdcall* pFunction,[In] void* pData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromFileW(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            Loads a surface from a file.	
            </summary>	
            <param name="destSurfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Specifies the destination surface, which receives the image.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a  <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the destination rectangle. Set this parameter to <c>null</c> to specify the entire surface.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="srcRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the source rectangle. Set this parameter to <c>null</c> to specify the entire image.</para></param>	
            <param name="filter"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <param name="srcInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with a description of the data in the source image file, or <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromFileW(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromFileA(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats and supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Writing to a non-level-zero surface will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromFileW(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> is called and the surface was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call AddDirtyRect on the surface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadSurfaceFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileW([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const wchar_t* pSrcFile,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CheckCubeTextureRequirements(SharpDX.Direct3D9.Device,System.Int32@,System.Int32@,System.Int32,SharpDX.Direct3D9.Format@,SharpDX.Direct3D9.Pool)">
            <summary>	
            Checks cube-texture-creation parameters.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the cube texture.</para></param>	
            <param name="sizeRef"><para>Pointer to the requested width and height in pixels, or <c>null</c>. Returns the corrected size.</para></param>	
            <param name="numMipLevelsRef"><para>Pointer to the number of requested mipmap levels, or <c>null</c>. Returns the corrected number of mipmap levels.</para></param>	
            <param name="usage"><para>0 or <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/>. Setting this flag to <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> indicates that the surface is to be used as a render target. The resource can then be passed to the pNewRenderTarget parameter of the SetRenderTarget method. If <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> is specified, the application should check that the device supports this operation by calling CheckDeviceFormat.</para></param>	
            <param name="formatRef"><para>Pointer to a member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type. Specifies the desired pixel format, or <c>null</c>. Returns the corrected format.</para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the texture should be placed.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If parameters to this function are invalid, this function returns corrected parameters.Cube textures differ from other surfaces in that they are collections of surfaces. To call SetRenderTarget with a cube texture, you must select an individual face using GetCubeMapSurface and pass the resulting surface to SetRenderTarget.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCheckCubeTextureRequirements']/*"/>	
            <unmanaged>HRESULT D3DXCheckCubeTextureRequirements([In] IDirect3DDevice9* pDevice,[InOut] unsigned int* pSize,[InOut] unsigned int* pNumMipLevels,[In] unsigned int Usage,[InOut] D3DFORMAT* pFormat,[In] D3DPOOL Pool)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromFileInMemory(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="destSurfaceRef">No documentation.</param>	
            <param name="destPaletteRef">No documentation.</param>	
            <param name="destRectRef">No documentation.</param>	
            <param name="srcDataRef">No documentation.</param>	
            <param name="srcDataSize">No documentation.</param>	
            <param name="srcRectRef">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadSurfaceFromFileInMemory']/*"/>	
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a resource.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the volume texture.</para></param>	
            <param name="hSrcModule"><para>Handle to the module where the resource is located, or <c>null</c> for the module associated with the image the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="volumeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.VolumeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.VolumeTexture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)"/>(pDevice, hSrcModule, pSrcResource, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppVolumeTexture).The resource being loaded must be an application-defined resource (RT_RCDATA).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromResourceW([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveSurfaceToFileA(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)">
            <summary>	
            Saves a surface to a file.	
            </summary>	
            <param name="destFileRef"><para>Pointer to a string that specifies the file name of the destination image. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="destFormat"><para> <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> specifying the file format to use when saving. This function supports saving to all <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</para></param>	
            <param name="srcSurfaceRef"><para>Pointer to <see cref="T:SharpDX.Direct3D9.Surface"/> interface, containing the image to be saved.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure containing a palette of 256 colors. This parameter can be <c>null</c>.</para></param>	
            <param name="srcRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the source rectangle. Set this parameter to <c>null</c> to specify the entire image.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveSurfaceToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveSurfaceToFileA(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveSurfaceToFileA']/*"/>	
            <unmanaged>HRESULT D3DXSaveSurfaceToFileA([In] const char* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a file.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the volume texture.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the file name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="volumeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.VolumeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.VolumeTexture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.VolumeTexture@)"/>(pDevice, pSrcFile, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppVolumeTexture).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Mipmapped textures automatically have each level filled with the loaded texture.When loading images into mipmapped textures, some devices are unable to go to a 1x1 image and this function will fail. If this happens, then the images need to be loaded manually.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetImageInfoFromFileA(System.String)">
            <summary>	
            Retrieves information about a given image file.	
            </summary>	
            <param name="srcFileRef"><para>File name of image to retrieve information about. If UNICODE or _UNICODE are defined, this parameter type is LPCWSTR, otherwise, the type is LPCSTR.</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with the description of the data in the source file.</para></returns>	
            <remarks>	
            This function supports both Unicode and ANSI strings.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetImageInfoFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXGetImageInfoFromFileA([In] const char* pSrcFile,[Out] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetImageInfoFromFileW(System.String)">
            <summary>	
            Retrieves information about a given image file.	
            </summary>	
            <param name="srcFileRef"><para>File name of image to retrieve information about. If UNICODE or _UNICODE are defined, this parameter type is LPCWSTR, otherwise, the type is LPCSTR.</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with the description of the data in the source file.</para></returns>	
            <remarks>	
            This function supports both Unicode and ANSI strings.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetImageInfoFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXGetImageInfoFromFileW([In] const wchar_t* pSrcFile,[Out] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.GetImageInfoFromFileInMemory(System.IntPtr,System.Int32)">
            <summary>	
            Retrieves information about a given image file in memory.	
            </summary>	
            <param name="srcDataRef"><para>VOID reference to the source file in memory.</para></param>	
            <param name="srcDataSize"><para>Size of file in memory, in bytes. .</para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with the description of the data in the source file.</para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXGetImageInfoFromFileInMemory']/*"/>	
            <unmanaged>HRESULT D3DXGetImageInfoFromFileInMemory([In] const void* pSrcData,[In] unsigned int SrcDataSize,[Out] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileW(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            Loads a volume from a file.	
            </summary>	
            <param name="destVolumeRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Volume"/> interface. Specifies the destination volume.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the destination box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="srcBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the source box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="filter"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/>, controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <param name="srcInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with a description of the data in the source image file, or <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileW(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileA(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats and supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Writing to a non-level-zero surface of the volume texture will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileW(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> is called and the texture was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call <see cref="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(System.IntPtr)"/> on the volume texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadVolumeFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXLoadVolumeFromFileW([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const wchar_t* pSrcFile,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileInMemory(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a file in memory.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the cube texture.</para></param>	
            <param name="srcDataRef"><para>Pointer to the file in memory from which to create the cubemap. See Remarks.</para></param>	
            <param name="srcDataSize"><para>Size of the file in memory, in bytes.</para></param>	
            <param name="cubeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface, representing the created cube texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileInMemoryEx(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.CubeTexture@)"/>(pDevice, pSrcData, SrcDataSize, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppCubeTexture).Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.This method is designed to be used for loading image files stored as RT_RCDATA, which is an application-defined resource (raw data). Otherwise this method will fail.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.D3DXCreateCubeTextureFromFileInMemory uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file format.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromFileInMemory']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemory([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FillCubeTextureTX(SharpDX.Direct3D9.CubeTexture,SharpDX.Direct3D9.TextureShader)">
            <summary>	
            Uses a compiled high-level shader language (HLSL) function to fill each texel of each mipmap level of a texture.	
            </summary>	
            <param name="cubeTextureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> object, representing the texture to be filled.</para></param>	
            <param name="textureShaderRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.TextureShader"/> texture shader object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The texture target must be an HLSL function that takes contains the following semantics:One input parameter must use a POSITION semantic. One input parameter must use a PSIZE semantic. The function must return a parameter that uses the COLOR semantic.The input parameters can be in any order. For an example, see <see cref="M:SharpDX.Direct3D9.D3DX9.FillTextureTX(SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.TextureShader)"/>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFillCubeTextureTX']/*"/>	
            <unmanaged>HRESULT D3DXFillCubeTextureTX([In] IDirect3DCubeTexture9* pCubeTexture,[In] ID3DXTextureShader* pTextureShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a resource specified by a string. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.CubeTexture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="size">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="cubeTextureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)"/> because ANSI strings are being used.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Cube textures differ from other surfaces in that they are collections of surfaces. To call SetRenderTarget with a cube texture, you must select an individual face using GetCubeMapSurface and pass the resulting surface to  SetRenderTarget.D3DXCreateCubeTextureFromResourceEx uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file format.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromResourceExA']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromResourceExA([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo,[In] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a file.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the volume texture.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the file name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="volumeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.VolumeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.VolumeTexture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.VolumeTexture@)"/>(pDevice, pSrcFile, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppVolumeTexture).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Mipmapped textures automatically have each level filled with the loaded texture.When loading images into mipmapped textures, some devices are unable to go to a 1x1 image and this function will fail. If this happens, then the images need to be loaded manually.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileA([In] IDirect3DDevice9* pDevice,[In] const char* pSrcFile,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a resource.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the texture.</para></param>	
            <param name="hSrcModule"><para>Handle to the module where the resource is located, or <c>null</c> for module associated with the image the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="textureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface, representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Texture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Texture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)"/>(pDevice, hSrcModule, pSrcResource, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppTexture).The resource being loaded must be of type RT_BITMAP or RT_RCDATA. Resource type RT_RCDATA is used to load formats other than bitmaps (such as .tga, .jpg, and .dds).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromResourceW([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.ComputeNormalMap(SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.PaletteEntry[],System.Int32,System.Int32,System.Single)">
            <summary>	
            Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.	
            </summary>	
            <param name="textureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface, representing the destination texture.</para></param>	
            <param name="srcTextureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface, representing the source height-map texture.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> type that contains the source palette of 256 colors or <c>null</c>.</para></param>	
            <param name="flags"><para>One or more <see cref="T:SharpDX.Direct3D9.NormalMapFlags"/> flags that control generation of normal maps.</para></param>	
            <param name="channel"><para>One <see cref="T:SharpDX.Direct3D9.Channel"/> flag specifying the source of height information.</para></param>	
            <param name="amplitude"><para>Constant value multiplier that increases (or decreases) the values in the normal map. Higher values usually make bumps more visible, lower values usually make bumps less visible.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following value: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method computes the normal by using the central difference with a kernel size of 3x3. The central differencing denominator used is 2.0. RGB channels in the destination contain biased (x,y,z) components of the normal.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXComputeNormalMap']/*"/>	
            <unmanaged>HRESULT D3DXComputeNormalMap([In] IDirect3DTexture9* pTexture,[In] IDirect3DTexture9* pSrcTexture,[Out, Buffer] const PALETTEENTRY* pSrcPalette,[In] unsigned int Flags,[In] unsigned int Channel,[In] float Amplitude)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTexture(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates an empty volume texture, adjusting the calling parameters as needed.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the volume texture.</para></param>	
            <param name="width"><para>Width in pixels. This value must be nonzero. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="height"><para>Height in pixels. This value must be nonzero. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="depth"><para>Depth in pixels. This value must be nonzero. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="mipLevels"><para>Number of mip levels requested. If this value is zero or D3DX_DEFAULT, a complete mipmap chain is created.</para></param>	
            <param name="usage"><para>0 or <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/>. For more information about using dynamic textures, see Using Dynamic Textures.</para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the requested pixel format for the volume texture. The returned volume texture might have a different format from that specified by Format. Applications should check the format of the returned volume texture.</para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the volume texture should be placed.</para></param>	
            <param name="volumeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface, representing the created volume texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY .</returns>	
            <remarks>	
            Internally, <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTexture(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.VolumeTexture@)"/> uses <see cref="M:SharpDX.Direct3D9.D3DX9.CheckVolumeTextureRequirements(SharpDX.Direct3D9.Device,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32,SharpDX.Direct3D9.Format@,SharpDX.Direct3D9.Pool)"/> to adjust the calling parameters. Therefore, calls to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTexture(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.VolumeTexture@)"/> will often succeed where calls to CreateVolumeTexture would fail.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTexture']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTexture([In] IDirect3DDevice9* pDevice,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Depth,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CheckTextureRequirements(SharpDX.Direct3D9.Device,System.Int32@,System.Int32@,System.Int32@,System.Int32,SharpDX.Direct3D9.Format@,SharpDX.Direct3D9.Pool)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="widthRef">No documentation.</param>	
            <param name="heightRef">No documentation.</param>	
            <param name="numMipLevelsRef">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="formatRef">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCheckTextureRequirements']/*"/>	
            <unmanaged>HRESULT D3DXCheckTextureRequirements([In] IDirect3DDevice9* pDevice,[InOut] unsigned int* pWidth,[InOut] unsigned int* pHeight,[InOut] unsigned int* pNumMipLevels,[In] unsigned int Usage,[InOut] D3DFORMAT* pFormat,[In] D3DPOOL Pool)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a resource. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Texture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="width">No documentation.</param>	
            <param name="height">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="textureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)"/> because ANSI strings are being used.The resource being loaded must be of type RT_BITMAP or RT_RCDATA. Resource type RT_RCDATA is used to load formats other than bitmaps (such as .tga, .jpg, and .dds).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromResourceExA']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromResourceExA([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo,[In] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a file.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the texture.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="width"><para>Width in pixels. If this value is zero or D3DX_DEFAULT, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="height"><para>Height, in pixels. If this value is zero or D3DX_DEFAULT, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="depth"><para>Depth, in pixels. If this value is zero or D3DX_DEFAULT, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="mipLevels"><para>Number of mip levels requested. If this value is zero or D3DX_DEFAULT, a complete mipmap chain is created.</para></param>	
            <param name="usage"><para>0, <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/>, or <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/>. Setting this flag to <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> indicates that the surface is to be used as a render target. The resource can then be passed to the  pNewRenderTarget parameter of the SetRenderTarget method. If either <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> or <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> is specified,  Pool must be set to <see cref="F:SharpDX.Direct3D9.Pool.Default"/>, and the application should check that the device supports this operation by calling CheckDeviceFormat. <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> indicates that the surface should be handled dynamically. For more information about using dynamic textures, see Using Dynamic Textures.</para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the requested pixel format for the texture. The returned texture might have a different format from that specified by Format. Applications should check the format of the returned texture. If <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, the format is taken from the file. If D3DFMT_FROM_FILE, the format is taken exactly as it is in the file, and the call will fail if this violates device capabilities.</para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the texture should be placed.</para></param>	
            <param name="filter"><para>A combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="mipFilter"><para>A combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Box"/>. In addition, use bits 27-31 to specify the number of mip levels to be skipped (from the top of the mipmap chain) when a .dds texture is loaded into memory; this allows you to skip up to 32 levels.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <param name="srcInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled in with a description of the data in the source image file, or <c>null</c>.</para></param>	
            <param name="paletteRef"><para>Pointer to a  <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, representing a 256-color palette to fill in, or <c>null</c>.</para></param>	
            <param name="volumeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface, representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.VolumeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileExA(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)"/> because ANSI strings are being used.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Mipmapped textures automatically have each level filled with the loaded volume texture. When loading images into mipmapped textures, some devices are unable to go to a 1x1 image and this function will fail. If this happens, then the images need to be loaded manually.When skipping mipmap levels while loading a .dds file, use the D3DX_SKIP_DDS_MIP_LEVELS macro to generate the MipFilter value. This macro takes the number of levels to skip and the filter type and returns the filter value, which would then be passed into the MipFilter parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromFileExW']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Depth,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileInMemory(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a file in memory.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the volume texture.</para></param>	
            <param name="srcDataRef"><para>Pointer to the file in memory from which to create the volume texture.</para></param>	
            <param name="srcDataSize"><para>Size of the file in memory, in bytes.</para></param>	
            <param name="volumeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface, representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileInMemoryEx(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.VolumeTexture@)"/>(pDevice, pSrcFile, SrcData, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppVolumeTexture).Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromFileInMemory']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemory([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveSurfaceToFileInMemory(SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)">
            <summary>	
            Saves a surface to an image file.	
            </summary>	
            <param name="destBufOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that will store the image.</para></param>	
            <param name="destFormat"><para> <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> specifying the file format to use when saving. This function supports saving to all <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</para></param>	
            <param name="srcSurfaceRef"><para>Pointer to <see cref="T:SharpDX.Direct3D9.Surface"/> interface containing the image to be saved.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure containing a palette of 256 colors. This parameter can be <c>null</c>.</para></param>	
            <param name="srcRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the source rectangle. Set this parameter to <c>null</c> to specify the entire image.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This function handles conversion to and from compressed texture formats.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveSurfaceToFileInMemory']/*"/>	
            <unmanaged>HRESULT D3DXSaveSurfaceToFileInMemory([In] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FillTexture(SharpDX.Direct3D9.Texture,SharpDX.FunctionCallback,System.IntPtr)">
            <summary>	
            Uses a user-provided function to fill each texel of each mip level of a given texture.	
            </summary>	
            <param name="textureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface, representing the filled texture.</para></param>	
            <param name="functionRef"><para>Pointer to a user-provided evaluator function, which will be used to compute the value of each texel. The function follows the prototype of LPD3DXFILL2D.</para></param>	
            <param name="dataRef"><para>Pointer to an arbitrary block of user-defined data. This reference will be passed to the function provided in pFunction.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Here is an example that creates a function called ColorFill, which relies on <see cref="M:SharpDX.Direct3D9.D3DX9.FillTexture(SharpDX.Direct3D9.Texture,SharpDX.FunctionCallback,System.IntPtr)"/>.<code>	
             // Define a function that matches the prototype of LPD3DXFILL3D	
            VOID WINAPI ColorFill (<see cref="T:SharpDX.Vector4"/>* pOut, const <see cref="T:SharpDX.Vector2"/>* pTexCoord, 	
            const <see cref="T:SharpDX.Vector2"/>* pTexelSize, LPVOID pData)	
            { *pOut = <see cref="T:SharpDX.Vector4"/>(pTexCoord-&gt;x, pTexCoord-&gt;y, 0.0f, 0.0f);	
            } // Fill the texture using <see cref="M:SharpDX.Direct3D9.D3DX9.FillTexture(SharpDX.Direct3D9.Texture,SharpDX.FunctionCallback,System.IntPtr)"/>	
            if (FAILED (hr = <see cref="M:SharpDX.Direct3D9.D3DX9.FillTexture(SharpDX.Direct3D9.Texture,SharpDX.FunctionCallback,System.IntPtr)"/> (m_pTexture, ColorFill, <c>null</c>)))	
            { return hr;	
            }	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFillTexture']/*"/>	
            <unmanaged>HRESULT D3DXFillTexture([In] IDirect3DTexture9* pTexture,[In] __function__stdcall* pFunction,[In] void* pData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromVolume(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>	
            Loads a volume from another volume.	
            </summary>	
            <param name="destVolumeRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Volume"/> interface. Specifies the destination volume, which receives the image.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the destination box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="srcVolumeRef"><para>A Pointer to an <see cref="T:SharpDX.Direct3D9.Volume"/> interface. Specifies the source volume.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the source palette of 256 colors or <c>null</c>.</para></param>	
            <param name="srcBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the source box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="filter"><para>A combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/>, controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            Writing to a non-level-zero surface of the volume texture will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromVolume(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32)"/> is called and the surface was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call <see cref="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(System.IntPtr)"/> on the surface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadVolumeFromVolume']/*"/>	
            <unmanaged>HRESULT D3DXLoadVolumeFromVolume([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] IDirect3DVolume9* pSrcVolume,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>	
            Saves a texture to a file.	
            </summary>	
            <param name="destFileRef"><para>Pointer to a string that specifies the file name of the destination image. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="destFormat"><para> <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> specifying the file format to use when saving. This function supports saving to all <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</para></param>	
            <param name="srcTextureRef"><para>Pointer to <see cref="T:SharpDX.Direct3D9.BaseTexture"/> interface, containing the texture to be saved.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure containing a palette of 256 colors. This parameter can be <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileA(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats.If the volume is nondynamic (because of a usage parameter set to 0 at the creation) and located in video memory (the memory pool set to <see cref="F:SharpDX.Direct3D9.Pool.Default"/>), <see cref="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])"/> will fail because D3DX cannot lock nondynamic volumes located in video memory.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveTextureToFileW']/*"/>	
            <unmanaged>HRESULT D3DXSaveTextureToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DBaseTexture9* pSrcTexture,[In, Buffer] const PALETTEENTRY* pSrcPalette)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTexture(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates an empty texture, adjusting the calling parameters as needed.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the texture.</para></param>	
            <param name="width"><para>Width in pixels. If this value is 0, a value of 1 is used. See Remarks.</para></param>	
            <param name="height"><para>Height in pixels. If this value is 0, a value of 1 is used. See Remarks.</para></param>	
            <param name="mipLevels"><para>Number of mip levels requested. If this value is zero or D3DX_DEFAULT, a complete mipmap chain is created.</para></param>	
            <param name="usage"><para>0, <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/>, or <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/>. Setting this flag to <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> indicates that the surface is to be used as a render target by calling the SetRenderTarget method. If either <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> or <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> is specified, the application should check that the device supports this operation by calling CheckDeviceFormat. For more information about using dynamic textures, see Using Dynamic Textures.</para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the requested pixel format for the texture. The returned texture may be of a different format from that specified, if the device does not support the requested format. Applications should check the format of the returned texture to see if it matches the format requested.</para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the texture should be placed.</para></param>	
            <param name="textureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface, representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Internally, <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTexture(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Texture@)"/> uses <see cref="M:SharpDX.Direct3D9.D3DX9.CheckTextureRequirements(SharpDX.Direct3D9.Device,System.Int32@,System.Int32@,System.Int32@,System.Int32,SharpDX.Direct3D9.Format@,SharpDX.Direct3D9.Pool)"/> to adjust the calling parameters. Therefore, calls to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTexture(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Texture@)"/> will often succeed where calls to CreateTexture would fail.If both Height and Width are set to D3DX_DEFAULT, a value of 256 is used for both parameters. If either Height or Width is set to D3DX_DEFAULT And the other parameter is set to a numeric value, the texture will be square with both the height and width equal to the numeric value.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTexture']/*"/>	
            <unmanaged>HRESULT D3DXCreateTexture([In] IDirect3DDevice9* pDevice,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a file.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the cube texture.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="cubeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface, representing the created cube texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.CubeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.CubeTexture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.CubeTexture@)"/>(pDevice, pSrcFile, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppCubeTexture).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.D3DXCreateCubeTextureFromFile uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file format.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromFileW']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileExA(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a file.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the texture.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="width"><para>Width in pixels. If this value is zero or D3DX_DEFAULT, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="height"><para>Height, in pixels. If this value is zero or D3DX_DEFAULT, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="depth"><para>Depth, in pixels. If this value is zero or D3DX_DEFAULT, the dimensions are taken from the file. The maximum dimension that a driver supports (for width, height, and depth) can be found in MaxVolumeExtent in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</para></param>	
            <param name="mipLevels"><para>Number of mip levels requested. If this value is zero or D3DX_DEFAULT, a complete mipmap chain is created.</para></param>	
            <param name="usage"><para>0, <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/>, or <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/>. Setting this flag to <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> indicates that the surface is to be used as a render target. The resource can then be passed to the  pNewRenderTarget parameter of the SetRenderTarget method. If either <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> or <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> is specified,  Pool must be set to <see cref="F:SharpDX.Direct3D9.Pool.Default"/>, and the application should check that the device supports this operation by calling CheckDeviceFormat. <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> indicates that the surface should be handled dynamically. For more information about using dynamic textures, see Using Dynamic Textures.</para></param>	
            <param name="format"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the requested pixel format for the texture. The returned texture might have a different format from that specified by Format. Applications should check the format of the returned texture. If <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, the format is taken from the file. If D3DFMT_FROM_FILE, the format is taken exactly as it is in the file, and the call will fail if this violates device capabilities.</para></param>	
            <param name="pool"><para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, describing the memory class into which the texture should be placed.</para></param>	
            <param name="filter"><para>A combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="mipFilter"><para>A combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Box"/>. In addition, use bits 27-31 to specify the number of mip levels to be skipped (from the top of the mipmap chain) when a .dds texture is loaded into memory; this allows you to skip up to 32 levels.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <param name="srcInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled in with a description of the data in the source image file, or <c>null</c>.</para></param>	
            <param name="paletteRef"><para>Pointer to a  <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, representing a 256-color palette to fill in, or <c>null</c>.</para></param>	
            <param name="volumeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface, representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.VolumeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromFileExA(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)"/> because ANSI strings are being used.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Mipmapped textures automatically have each level filled with the loaded volume texture. When loading images into mipmapped textures, some devices are unable to go to a 1x1 image and this function will fail. If this happens, then the images need to be loaded manually.When skipping mipmap levels while loading a .dds file, use the D3DX_SKIP_DDS_MIP_LEVELS macro to generate the MipFilter value. This macro takes the number of levels to skip and the filter type and returns the filter value, which would then be passed into the MipFilter parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromFileExA']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileExA([In] IDirect3DDevice9* pDevice,[In] const char* pSrcFile,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Depth,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo,[In] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileInMemoryEx(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a file in memory. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileInMemory(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.Texture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcDataRef">No documentation.</param>	
            <param name="srcDataSize">No documentation.</param>	
            <param name="width">No documentation.</param>	
            <param name="height">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="textureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.For details about  <see cref="T:SharpDX.Direct3D9.PaletteEntry"/>, see the Platform SDK. Note that as of DirectX 8.0, the peFlags member of the <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure does not function as documented in the Platform SDK. The peFlags member is now the alpha channel for 8-bit palettized formats.When skipping mipmap levels while loading a .dds file, use the D3DX_SKIP_DDS_MIP_LEVELS macro to generate the MipFilter value. This macro takes the number of levels to skip and the filter type and returns the filter value, which would then be passed into the MipFilter parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromFileInMemoryEx']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileInMemoryEx(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a file in memory. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileInMemory(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.CubeTexture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcDataRef">No documentation.</param>	
            <param name="srcDataSize">No documentation.</param>	
            <param name="size">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="cubeTextureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Cube textures differ from other surfaces in that they are collections of surfaces. To call SetRenderTarget with a cube texture, you must select an individual face using GetCubeMapSurface and pass the resulting surface to SetRenderTarget .This method is designed to be used for loading image files stored as RT_RCDATA, which is an application-defined resource (raw data). Otherwise this method will fail.For details on <see cref="T:SharpDX.Direct3D9.PaletteEntry"/>, see the Platform SDK.  Note that as of DirectX 8.0, the peFlags member of the <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure does not function as documented in the Platform SDK. The peFlags  member is now the alpha channel for 8-bit palettized formats.D3DXCreateCubeTextureFromFileInMemoryEx uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file formatWhen skipping mipmap levels while loading a .dds file, use the D3DX_SKIP_DDS_MIP_LEVELS macro to generate the MipFilter value. This macro takes the number of levels to skip and the filter type and returns the filter value, which would then be passed into the MipFilter parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromFileInMemoryEx']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveVolumeToFileInMemory(SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)">
            <summary>	
            Saves a volume to a buffer. The method creates an <see cref="T:SharpDX.Direct3D.Blob"/> buffer to store the data, and returns that object.	
            </summary>	
            <param name="destBufOut">No documentation.</param>	
            <param name="destFormat">No documentation.</param>	
            <param name="srcVolumeRef">No documentation.</param>	
            <param name="srcPaletteRef">No documentation.</param>	
            <param name="srcBoxRef">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveVolumeToFileInMemory']/*"/>	
            <unmanaged>HRESULT D3DXSaveVolumeToFileInMemory([In] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DVolume9* pSrcVolume,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcBox)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.VolumeTexture@)">
            <summary>	
            Creates a volume texture from a resource.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the volume texture.</para></param>	
            <param name="hSrcModule"><para>Handle to the module where the resource is located, or <c>null</c> for the module associated with the image the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the resource name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="volumeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.VolumeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.VolumeTexture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateVolumeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.VolumeTexture@)"/>(pDevice, hSrcModule, pSrcResource, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppVolumeTexture).The resource being loaded must be an application-defined resource (RT_RCDATA).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateVolumeTextureFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromResourceA([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromMemory(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>	
            Loads a surface from memory.	
            </summary>	
            <param name="destSurfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Specifies the destination surface, which receives the image.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the destination rectangle. Set this parameter to <c>null</c> to specify the entire surface.</para></param>	
            <param name="srcMemoryRef"><para>Pointer to the upper left corner of the source image in memory.</para></param>	
            <param name="srcFormat"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, the pixel format of the source image.</para></param>	
            <param name="srcPitch"><para>Pitch of source image, in bytes. For DXT formats, this number should represent the width of one row of cells, in bytes.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the source palette of 256 colors or <c>null</c>.</para></param>	
            <param name="srcRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the dimensions of the source image in memory. This value cannot be <c>null</c>.</para></param>	
            <param name="filter"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            This function handles conversion to and from compressed texture formats.Writing to a non-level-zero surface will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromMemory(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32)"/> is called and the surface was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call AddDirtyRect on the surface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadSurfaceFromMemory']/*"/>	
            <unmanaged>HRESULT D3DXLoadSurfaceFromMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcPitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromFileA(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            Loads a surface from a file.	
            </summary>	
            <param name="destSurfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Specifies the destination surface, which receives the image.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a  <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the destination rectangle. Set this parameter to <c>null</c> to specify the entire surface.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="srcRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the source rectangle. Set this parameter to <c>null</c> to specify the entire image.</para></param>	
            <param name="filter"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <param name="srcInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with a description of the data in the source image file, or <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromFileW(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromFileA(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats and supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Writing to a non-level-zero surface will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromFileW(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> is called and the surface was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call AddDirtyRect on the surface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadSurfaceFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileA([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const char* pSrcFile,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a resource. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.Texture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="width">No documentation.</param>	
            <param name="height">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="textureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)"/> because ANSI strings are being used.The resource being loaded must be of type RT_BITMAP or RT_RCDATA. Resource type RT_RCDATA is used to load formats other than bitmaps (such as .tga, .jpg, and .dds).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromResourceExW']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromResourceExW([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo,[In] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FillVolumeTexture(SharpDX.Direct3D9.VolumeTexture,SharpDX.FunctionCallback,System.IntPtr)">
            <summary>	
            Uses a user-provided function to fill each texel of each mip level of a given volume texture.	
            </summary>	
            <param name="volumeTextureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface, representing the filled texture.</para></param>	
            <param name="functionRef"><para>Pointer to a user-provided evaluator function, which will be used to compute the value of each texel. The function follows the prototype of LPD3DXFILL3D.</para></param>	
            <param name="dataRef"><para>Pointer to an arbitrary block of user-defined data. This reference will be passed to the function provided in pFunction.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If the volume is non-dynamic (because usage is set to 0 when it is  created), and located in video memory (the memory pool set to <see cref="F:SharpDX.Direct3D9.Pool.Default"/>), <see cref="M:SharpDX.Direct3D9.D3DX9.FillVolumeTexture(SharpDX.Direct3D9.VolumeTexture,SharpDX.FunctionCallback,System.IntPtr)"/> will fail because the volume cannot be locked.This example creates a function called ColorVolumeFill, which relies on <see cref="M:SharpDX.Direct3D9.D3DX9.FillVolumeTexture(SharpDX.Direct3D9.VolumeTexture,SharpDX.FunctionCallback,System.IntPtr)"/>.<code>	
             // Define a function that matches the prototype of LPD3DXFILL3D	
            VOID WINAPI ColorVolumeFill (<see cref="T:SharpDX.Vector4"/>* pOut, const <see cref="T:SharpDX.Vector3"/>* pTexCoord, 	
            const <see cref="T:SharpDX.Vector3"/>* pTexelSize, LPVOID pData)	
            { *pOut = <see cref="T:SharpDX.Vector4"/>(pTexCoord-&gt;x, pTexCoord-&gt;y, pTexCoord-&gt;z, 0.0f);	
            } // Fill volume texture	
            if (FAILED (hr = <see cref="M:SharpDX.Direct3D9.D3DX9.FillVolumeTexture(SharpDX.Direct3D9.VolumeTexture,SharpDX.FunctionCallback,System.IntPtr)"/> (m_pTexture, ColorVolumeFill, <c>null</c>)))	
            { return hr;	
            }	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFillVolumeTexture']/*"/>	
            <unmanaged>HRESULT D3DXFillVolumeTexture([In] IDirect3DVolumeTexture9* pVolumeTexture,[In] __function__stdcall* pFunction,[In] void* pData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a file.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device to be associated with the cube texture.</para></param>	
            <param name="srcFileRef"><para>Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="cubeTextureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface, representing the created cube texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.CubeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileA(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.CubeTexture@)"/> because ANSI strings are being used.The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.CubeTexture@)"/>(pDevice, pSrcFile, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppCubeTexture).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.D3DXCreateCubeTextureFromFile uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file format.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromFileA']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromFileA([In] IDirect3DDevice9* pDevice,[In] const char* pSrcFile,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromMemory(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,SharpDX.Direct3D9.Format,System.Int32,System.Int32,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>	
            Loads a volume from memory.	
            </summary>	
            <param name="destVolumeRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Volume"/> interface. Specifies the destination volume, which receives the image.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a  <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the destination box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="srcMemoryRef"><para>Pointer to the top-left corner of the source volume in memory.</para></param>	
            <param name="srcFormat"><para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, the pixel format of the source volume.</para></param>	
            <param name="srcRowPitch"><para>Pitch of source image, in bytes. For DXT formats (compressed texture formats), this number should represent the size of one row of cells, in bytes.</para></param>	
            <param name="srcSlicePitch"><para>Pitch of source image, in bytes. For DXT formats (compressed texture formats), this number should represent the size of one slice of cells, in bytes.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the source palette of 256 colors or <c>null</c>.</para></param>	
            <param name="srcBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the source box. <c>null</c> is not a valid value for this parameter.</para></param>	
            <param name="filter"><para>A combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            Writing to a non-level-zero surface of the volume texture will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromMemory(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,SharpDX.Direct3D9.Format,System.Int32,System.Int32,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32)"/> is called and the texture was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call <see cref="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(System.IntPtr)"/> on the volume texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadVolumeFromMemory']/*"/>	
            <unmanaged>HRESULT D3DXLoadVolumeFromMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcRowPitch,[In] unsigned int SrcSlicePitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileInMemory(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a file in memory.	
            </summary>	
            <param name="deviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface representing the device to be associated with the texture.</para></param>	
            <param name="srcDataRef"><para>Pointer to the file in memory from which to create the texture.</para></param>	
            <param name="srcDataSize"><para>Size in bytes of the file in memory.</para></param>	
            <param name="textureOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface representing the created texture object.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The function is equivalent to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileInMemoryEx(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.Texture@)"/>(pDevice, pSrcData, SrcDataSize, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/>, <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>, D3DX_DEFAULT, D3DX_DEFAULT, 0, <c>null</c>, <c>null</c>, ppTexture).This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Note that a resource created with this function when called from a <see cref="T:SharpDX.Direct3D9.Device"/> object will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Managed"/>.  When this method is called from a <see cref="T:SharpDX.Direct3D9.DeviceEx"/> object the resource will be placed in the memory class denoted by <see cref="F:SharpDX.Direct3D9.Pool.Default"/>.Filtering is automatically applied to a texture created using this method. The filtering is equivalent to <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/> in <see cref="T:SharpDX.Direct3D9.Filter"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromFileInMemory']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemory([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FilterTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[],System.Int32,SharpDX.Direct3D9.Filter)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="baseTextureRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="srcLevel">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFilterTexture']/*"/>	
            <unmanaged>HRESULT D3DXFilterTexture([In] IDirect3DBaseTexture9* pBaseTexture,[In, Buffer] const PALETTEENTRY* pPalette,[In] unsigned int SrcLevel,[In] D3DX_FILTER Filter)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>	
            Loads a surface from another surface with color conversion.	
            </summary>	
            <param name="destSurfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Specifies the destination surface, which receives the image.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the destination rectangle. Set this parameter to <c>null</c> to specify the entire surface.</para></param>	
            <param name="srcSurfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the source surface.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the source palette of 256 colors or <c>null</c>.</para></param>	
            <param name="srcRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure. Specifies the source rectangle. Set this parameter to <c>null</c> to specify the entire surface.</para></param>	
            <param name="filter"><para>A combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/>, controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            This function handles conversion to and from compressed texture formats.Writing to a non-level-zero surface will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadSurfaceFromSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32)"/> is called and the surface was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call AddDirtyRect on the surface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadSurfaceFromSurface']/*"/>	
            <unmanaged>HRESULT D3DXLoadSurfaceFromSurface([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveVolumeToFileA(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)">
            <summary>	
            Saves a volume to a file on disk.	
            </summary>	
            <param name="destFileRef"><para>Pointer to a string that specifies the file name of the destination image. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="destFormat"><para> <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> specifying the file format to use when saving. This function supports saving to all <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</para></param>	
            <param name="srcVolumeRef"><para>Pointer to <see cref="T:SharpDX.Direct3D9.Volume"/> interface containing the image to be saved.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure containing a palette of 256 colors. This parameter can be <c>null</c>.</para></param>	
            <param name="srcBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the source box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveVolumeToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)"/>. Otherwise, the function call resolves to &gt;<see cref="M:SharpDX.Direct3D9.D3DX9.SaveVolumeToFileA(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats.If the volume is nondynamic (because of a usage parameter set to 0 at the creation) and located in video memory (the memory pool set to <see cref="F:SharpDX.Direct3D9.Pool.Default"/>), <see cref="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])"/> will fail because D3DX cannot lock nondynamic volumes located in video memory.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveVolumeToFileA']/*"/>	
            <unmanaged>HRESULT D3DXSaveVolumeToFileA([In] const char* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DVolume9* pSrcVolume,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcBox)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileInMemory(SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>	
            Saves a texture to an image file.	
            </summary>	
            <param name="destFormat"><para> <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> specifying the file format to use when saving. This function supports saving to all <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</para></param>	
            <param name="srcTextureRef"><para>Pointer to <see cref="T:SharpDX.Direct3D9.BaseTexture"/> interface containing the image to be saved.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure containing a palette of 256 colors. This parameter can be <c>null</c>.</para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> that will store the image.</para></returns>	
            <remarks>	
            This function handles conversion to and from compressed texture formats.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveTextureToFileInMemory']/*"/>	
            <unmanaged>HRESULT D3DXSaveTextureToFileInMemory([Out] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DBaseTexture9* pSrcTexture,[In, Buffer] const PALETTEENTRY* pSrcPalette)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileInMemory(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            Loads a volume from a file in memory.	
            </summary>	
            <param name="destVolumeRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Volume"/> interface. Specifies the destination volume.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the destination box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="srcDataRef"><para>Pointer to the file in memory from which to load the volume.</para></param>	
            <param name="srcDataSize"><para>Size in bytes of the file in memory.</para></param>	
            <param name="srcBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the source box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="filter"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/>, controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <param name="srcInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with a description of the data in the source image file, or <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            This function handles conversion to and from compressed texture formats and supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Writing to a non-level-zero surface of the volume texture will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileInMemory(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> is called and the texture was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call <see cref="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(System.IntPtr)"/> on the volume texture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadVolumeFromFileInMemory']/*"/>	
            <unmanaged>HRESULT D3DXLoadVolumeFromFileInMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileExA(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a file. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Texture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcFileRef">No documentation.</param>	
            <param name="width">No documentation.</param>	
            <param name="height">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="textureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.Texture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileExA(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)"/> because ANSI strings are being used.Use <see cref="M:SharpDX.Direct3D9.D3DX9.CheckTextureRequirements(SharpDX.Direct3D9.Device,System.Int32@,System.Int32@,System.Int32@,System.Int32,SharpDX.Direct3D9.Format@,SharpDX.Direct3D9.Pool)"/> to determine if your device can support the texture given the current state.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Mipmapped textures automatically have each level filled with the loaded texture. When loading images into mipmapped textures, some devices are unable to go to a 1x1 image and this function will fail. If this happens, then the images need to be loaded manually.For the best performance when using D3DXCreateTextureFromFileEx:Doing image scaling and format conversion at load time can be slow. Store images in the format and resolution they will be used. If the target hardware requires power of 2 dimensions, then create and store images using power of 2 dimensions. For mipmap image creation at load time, filter using <see cref="F:SharpDX.Direct3D9.Filter.Box"/>. A box filter is much faster than other filter types such as <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/>. Consider using DDS files. Since DDS files can be used to represent any Direct3D 9 texture format, they are very easy for D3DX to read. Also, they can store mipmaps, so any mipmap-generation algorithms can be used to author the images.When skipping mipmap levels while loading a .dds file, use the D3DX_SKIP_DDS_MIP_LEVELS macro to generate the MipFilter value. This macro takes the number of levels to skip and the filter type and returns the filter value, which would then be passed into the MipFilter parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromFileExA']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromFileExA([In] IDirect3DDevice9* pDevice,[In] const char* pSrcFile,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo,[In] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.Texture@)">
            <summary>	
            Creates a texture from a file. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileW(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Texture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="srcFileRef">No documentation.</param>	
            <param name="width">No documentation.</param>	
            <param name="height">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="textureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileExW(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.Texture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateTextureFromFileExA(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.Texture@)"/> because ANSI strings are being used.Use <see cref="M:SharpDX.Direct3D9.D3DX9.CheckTextureRequirements(SharpDX.Direct3D9.Device,System.Int32@,System.Int32@,System.Int32@,System.Int32,SharpDX.Direct3D9.Format@,SharpDX.Direct3D9.Pool)"/> to determine if your device can support the texture given the current state.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Mipmapped textures automatically have each level filled with the loaded texture. When loading images into mipmapped textures, some devices are unable to go to a 1x1 image and this function will fail. If this happens, then the images need to be loaded manually.For the best performance when using D3DXCreateTextureFromFileEx:Doing image scaling and format conversion at load time can be slow. Store images in the format and resolution they will be used. If the target hardware requires power of 2 dimensions, then create and store images using power of 2 dimensions. For mipmap image creation at load time, filter using <see cref="F:SharpDX.Direct3D9.Filter.Box"/>. A box filter is much faster than other filter types such as <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/>. Consider using DDS files. Since DDS files can be used to represent any Direct3D 9 texture format, they are very easy for D3DX to read. Also, they can store mipmaps, so any mipmap-generation algorithms can be used to author the images.When skipping mipmap levels while loading a .dds file, use the D3DX_SKIP_DDS_MIP_LEVELS macro to generate the MipFilter value. This macro takes the number of levels to skip and the filter type and returns the filter value, which would then be passed into the MipFilter parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateTextureFromFileExW']/*"/>	
            <unmanaged>HRESULT D3DXCreateTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Width,[In] unsigned int Height,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.SaveVolumeToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)">
            <summary>	
            Saves a volume to a file on disk.	
            </summary>	
            <param name="destFileRef"><para>Pointer to a string that specifies the file name of the destination image. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the string data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="destFormat"><para> <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> specifying the file format to use when saving. This function supports saving to all <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/> formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).</para></param>	
            <param name="srcVolumeRef"><para>Pointer to <see cref="T:SharpDX.Direct3D9.Volume"/> interface containing the image to be saved.</para></param>	
            <param name="srcPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure containing a palette of 256 colors. This parameter can be <c>null</c>.</para></param>	
            <param name="srcBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the source box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            The compiler setting also determines  the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveVolumeToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)"/>. Otherwise, the function call resolves to &gt;<see cref="M:SharpDX.Direct3D9.D3DX9.SaveVolumeToFileA(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)"/> because ANSI strings are being used.This function handles conversion to and from compressed texture formats.If the volume is nondynamic (because of a usage parameter set to 0 at the creation) and located in video memory (the memory pool set to <see cref="F:SharpDX.Direct3D9.Pool.Default"/>), <see cref="M:SharpDX.Direct3D9.D3DX9.SaveTextureToFileW(System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.PaletteEntry[])"/> will fail because D3DX cannot lock nondynamic volumes located in video memory.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSaveVolumeToFileW']/*"/>	
            <unmanaged>HRESULT D3DXSaveVolumeToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DVolume9* pSrcVolume,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcBox)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromResourceA(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            Loads a volume from a resource.	
            </summary>	
            <param name="destVolumeRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Volume"/> interface. Specifies the destination volume.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the destination box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="hSrcModule"><para>Handle to the module where the resource is located, or <c>null</c> for module associated with the image the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the file name of the source image.  If UNICODE or _UNICODE are defined, this parameter type is LPCWSTR, otherwise, the type is LPCSTR.</para></param>	
            <param name="srcBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the source box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="filter"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/>, controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <param name="srcInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with a description of the data in the source image file, or <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The resource being loaded must be a bitmap resource(RT_BITMAP).This function handles conversion to and from compressed texture formats.Writing to a non-level-zero surface of the volume texture will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileW(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> is called and the texture was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call <see cref="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(System.IntPtr)"/> on the volume texture.This function supports both Unicode and ANSI strings.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadVolumeFromResourceA']/*"/>	
            <unmanaged>HRESULT D3DXLoadVolumeFromResourceA([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] HINSTANCE hSrcModule,[In] const char* pSrcResource,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromResourceW(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)">
            <summary>	
            Loads a volume from a resource.	
            </summary>	
            <param name="destVolumeRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Volume"/> interface. Specifies the destination volume.</para></param>	
            <param name="destPaletteRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.PaletteEntry"/> structure, the destination palette of 256 colors or <c>null</c>.</para></param>	
            <param name="destBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the destination box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="hSrcModule"><para>Handle to the module where the resource is located, or <c>null</c> for module associated with the image the operating system used to create the current process.</para></param>	
            <param name="srcResourceRef"><para>Pointer to a string that specifies the file name of the source image.  If UNICODE or _UNICODE are defined, this parameter type is LPCWSTR, otherwise, the type is LPCSTR.</para></param>	
            <param name="srcBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifies the source box. Set this parameter to <c>null</c> to specify the entire volume.</para></param>	
            <param name="filter"><para>Combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/>, controlling how the image is filtered. Specifying D3DX_DEFAULT for this parameter is the equivalent of specifying <see cref="F:SharpDX.Direct3D9.Filter.Triangle"/> | <see cref="F:SharpDX.Direct3D9.Filter.Dither"/>.</para></param>	
            <param name="colorKey"><para> <see cref="T:SharpDX.Color4"/> value to replace with transparent black, or 0 to disable the colorkey. This is always a 32-bit ARGB color, independent of the source image format. Alpha is significant and should usually be set to FF for opaque color keys. Thus, for opaque black, the value would be equal to 0xFF000000.</para></param>	
            <param name="srcInfoRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure to be filled with a description of the data in the source image file, or <c>null</c>.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The resource being loaded must be a bitmap resource(RT_BITMAP).This function handles conversion to and from compressed texture formats.Writing to a non-level-zero surface of the volume texture will not cause the dirty rectangle to be updated. If <see cref="M:SharpDX.Direct3D9.D3DX9.LoadVolumeFromFileW(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr,System.String,System.IntPtr,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr)"/> is called and the texture was not already dirty (this is unlikely under normal usage scenarios), the application needs to explicitly call <see cref="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(System.IntPtr)"/> on the volume texture.This function supports both Unicode and ANSI strings.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXLoadVolumeFromResourceW']/*"/>	
            <unmanaged>HRESULT D3DXLoadVolumeFromResourceW([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)">
            <summary>	
            Creates a cube texture from a resource specified by a string. This is a more advanced function than <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,SharpDX.Direct3D9.CubeTexture@)"/>.	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSrcModule">No documentation.</param>	
            <param name="srcResourceRef">No documentation.</param>	
            <param name="size">No documentation.</param>	
            <param name="mipLevels">No documentation.</param>	
            <param name="usage">No documentation.</param>	
            <param name="format">No documentation.</param>	
            <param name="pool">No documentation.</param>	
            <param name="filter">No documentation.</param>	
            <param name="mipFilter">No documentation.</param>	
            <param name="colorKey">No documentation.</param>	
            <param name="srcInfoRef">No documentation.</param>	
            <param name="paletteRef">No documentation.</param>	
            <param name="cubeTextureOut">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotAvailable"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The compiler setting determines the function version. If Unicode is defined, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceExW(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)"/>. Otherwise, the function call resolves to <see cref="M:SharpDX.Direct3D9.D3DX9.CreateCubeTextureFromResourceExA(SharpDX.Direct3D9.Device,System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.Int32,System.Int32,SharpDX.Color4,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry,SharpDX.Direct3D9.CubeTexture@)"/> because ANSI strings are being used.This function supports the following file formats: .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga. See <see cref="T:SharpDX.Direct3D9.ImageFileFormat"/>.Cube textures differ from other surfaces in that they are collections of surfaces. To call SetRenderTarget with a cube texture, you must select an individual face using GetCubeMapSurface and pass the resulting surface to  SetRenderTarget.D3DXCreateCubeTextureFromResourceEx uses the DirectDraw surface (DDS) file format. The DirectX Texture Editor (Dxtex.exe) enables you to generate a cube map from other file formats and save it in the DDS file format.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCreateCubeTextureFromResourceExW']/*"/>	
            <unmanaged>HRESULT D3DXCreateCubeTextureFromResourceExW([In] IDirect3DDevice9* pDevice,[In] HINSTANCE hSrcModule,[In] const wchar_t* pSrcResource,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo,[In] PALETTEENTRY* pPalette,[In] IDirect3DCubeTexture9** ppCubeTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.D3DX9.FileCreate(SharpDX.Direct3D9.XFile@)">
            <summary>	
            Creates an instance of an <see cref="T:SharpDX.Direct3D9.XFile"/> object.	
            </summary>	
            <param name="lplpDirectXFile">No documentation.</param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the function fails, the return value can be one of the following: E_POINTER, E_OUTOFMEMORY.</returns>	
            <remarks>	
            After using this function, use RegisterTemplates or RegisterEnumTemplates to register  templates, CreateEnumObject to create an enumerator object, or CreateSaveObject to create a save object.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFileCreate']/*"/>	
            <unmanaged>HRESULT D3DXFileCreate([In] ID3DXFile** lplpDirectXFile)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ResultCode">
            <summary>	
            Functions	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.Direct3D9.ResultCode']/*"/>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.ConflictingRenderState">
            <summary>Constant ConflictingRenderState.</summary>
            <unmanaged>D3DERR_CONFLICTINGRENDERSTATE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.ConflictingTextureFilter">
            <summary>Constant ConflictingTextureFilter.</summary>
            <unmanaged>D3DERR_CONFLICTINGTEXTUREFILTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.ConflictingTexturePalette">
            <summary>Constant ConflictingTexturePalette.</summary>
            <unmanaged>D3DERR_CONFLICTINGTEXTUREPALETTE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.DeviceHung">
            <summary>Constant DeviceHung.</summary>
            <unmanaged>D3DERR_DEVICEHUNG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.DeviceLost">
            <summary>Constant DeviceLost.</summary>
            <unmanaged>D3DERR_DEVICELOST</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.DeviceNotReset">
            <summary>Constant DeviceNotReset.</summary>
            <unmanaged>D3DERR_DEVICENOTRESET</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.DeviceRemoved">
            <summary>Constant DeviceRemoved.</summary>
            <unmanaged>D3DERR_DEVICEREMOVED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.DriverInternalError">
            <summary>Constant DriverInternalError.</summary>
            <unmanaged>D3DERR_DRIVERINTERNALERROR</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.InvalidCall">
            <summary>Constant InvalidCall.</summary>
            <unmanaged>D3DERR_INVALIDCALL</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.InvalidDevice">
            <summary>Constant InvalidDevice.</summary>
            <unmanaged>D3DERR_INVALIDDEVICE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.MoreData">
            <summary>Constant MoreData.</summary>
            <unmanaged>D3DERR_MOREDATA</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.NoAutomaticGeneration">
            <summary>Constant NoAutomaticGeneration.</summary>
            <unmanaged>D3DOK_NOAUTOGEN</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.NotAvailable">
            <summary>Constant NotAvailable.</summary>
            <unmanaged>D3DERR_NOTAVAILABLE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.NotFound">
            <summary>Constant NotFound.</summary>
            <unmanaged>D3DERR_NOTFOUND</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory">
            <summary>Constant OutOfVideoMemory.</summary>
            <unmanaged>D3DERR_OUTOFVIDEOMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.PresentModeChanged">
            <summary>Constant PresentModeChanged.</summary>
            <unmanaged>S_PRESENT_MODE_CHANGED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.PresentOccluded">
            <summary>Constant PresentOccluded.</summary>
            <unmanaged>S_PRESENT_OCCLUDED</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.ResidentInSharedMemory">
            <summary>Constant ResidentInSharedMemory.</summary>
            <unmanaged>S_RESIDENT_IN_SHARED_MEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.Success">
            <summary>Constant Success.</summary>
            <unmanaged>D3D_OK</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.TooManyOperations">
            <summary>Constant TooManyOperations.</summary>
            <unmanaged>D3DERR_TOOMANYOPERATIONS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.UnsupportedAlphaArgument">
            <summary>Constant UnsupportedAlphaArgument.</summary>
            <unmanaged>D3DERR_UNSUPPORTEDALPHAARG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.UnsupportedAlphaOperation">
            <summary>Constant UnsupportedAlphaOperation.</summary>
            <unmanaged>D3DERR_UNSUPPORTEDALPHAOPERATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.UnsupportedColorArgument">
            <summary>Constant UnsupportedColorArgument.</summary>
            <unmanaged>D3DERR_UNSUPPORTEDCOLORARG</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.UnsupportedColorOperation">
            <summary>Constant UnsupportedColorOperation.</summary>
            <unmanaged>D3DERR_UNSUPPORTEDCOLOROPERATION</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.UnsupportedFactorValue">
            <summary>Constant UnsupportedFactorValue.</summary>
            <unmanaged>D3DERR_UNSUPPORTEDFACTORVALUE</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.UnsupportedTextureFilter">
            <summary>Constant UnsupportedTextureFilter.</summary>
            <unmanaged>D3DERR_UNSUPPORTEDTEXTUREFILTER</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.WasStillDrawing">
            <summary>Constant WasStillDrawing.</summary>
            <unmanaged>D3DERR_WASSTILLDRAWING</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.ResultCode.WrongTextureFormat">
            <summary>Constant WrongTextureFormat.</summary>
            <unmanaged>D3DERR_WRONGTEXTUREFORMAT</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.AnimationCallbackHandler">
            <summary>	
            An application implements this interface to handle callbacks in animation sets generated by calls to <see cref="M:SharpDX.Direct3D9.AnimationController.AdvanceTime(System.Double,SharpDX.Direct3D9.AnimationCallbackHandler)"/>.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationCallbackHandler']/*"/>	
            <unmanaged>ID3DXAnimationCallbackHandler</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationCallbackHandler.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.AnimationCallbackHandler"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationCallbackHandler.HandleCallback(System.Int32,System.IntPtr)">
            <summary>	
            The application implements this method. This method is called when a callback occurs for an animation set in one of the tracks during a  call to <see cref="M:SharpDX.Direct3D9.AnimationController.AdvanceTime(System.Double,SharpDX.Direct3D9.AnimationCallbackHandler)"/>.	
            </summary>	
            <param name="track">No documentation.</param>	
            <param name="callbackDataRef">No documentation.</param>	
            <returns>The return values of this method are implemented by an application programmer. In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message  from D3DERR or D3DXERR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationCallbackHandler::HandleCallback']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationCallbackHandler::HandleCallback([In] unsigned int Track,[In] void* pCallbackData)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.AnimationController">
            <summary>	
            This interface is used to control animation functionality, connecting animation sets with the transformation frames that are being animated. The interface has methods to mix multiple animations and to modify blending parameters over time to enable smooth transitions and other effects.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController']/*"/>	
            <unmanaged>ID3DXAnimationController</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.AnimationController"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetMaxNumAnimationOutputs">
            <summary>	
            Get the maximum number of animation outputs the animation controller can support.	
            </summary>	
            <returns>The maximum number of animation outputs the controller can manage.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetMaxNumAnimationOutputs']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::GetMaxNumAnimationOutputs()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetMaxNumAnimationSets">
            <summary>	
            Gets the maximum number of animation sets the animation controller can support.	
            </summary>	
            <returns>The maximum number of animation sets the controller can manage.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetMaxNumAnimationSets']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::GetMaxNumAnimationSets()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetMaxNumTracks">
            <summary>	
            Gets the maximum number of tracks in the animation controller.	
            </summary>	
            <returns>Number of tracks.</returns>	
            <remarks>	
            The maximum number of tracks the controller can manage.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetMaxNumTracks']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::GetMaxNumTracks()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetMaxNumEvents">
            <summary>	
            Gets the maximum number of events the animation controller can support.	
            </summary>	
            <returns>The maximum number of events the controller can manage.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetMaxNumEvents']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::GetMaxNumEvents()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.RegisterAnimationOutput(System.String,SharpDX.Matrix@,SharpDX.Vector3,SharpDX.Quaternion,SharpDX.Vector3)">
            <summary>	
            Adds an animation output to the animation controller and registers references for scale, rotate, and translate (SRT) transformations.	
            </summary>	
            <param name="nameRef"><para>Name of the animation output.</para></param>	
            <param name="matrixRef"><para>Pointer to a <see cref="T:SharpDX.Matrix"/> structure containing SRT transformation data. Can be <c>null</c>.</para></param>	
            <param name="scaleRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> vector that describes the scale of the animation set. Can be <c>null</c>.</para></param>	
            <param name="rotationRef"><para>Pointer to a <see cref="T:SharpDX.Quaternion"/> quaternion that describes the rotation of the animation set. Can be <c>null</c>.</para></param>	
            <param name="translationRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> vector that describes the translation of the animation set. Can be <c>null</c>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If the animation output is already registered, pMatrix will be filled with the input transformation data.Animation sets created with <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> automatically register all loaded animation sets.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::RegisterAnimationOutput']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::RegisterAnimationOutput([In] const char* pName,[In] D3DXMATRIX* pMatrix,[In] D3DXVECTOR3* pScale,[In] D3DXQUATERNION* pRotation,[In] D3DXVECTOR3* pTranslation)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.RegisterAnimationSet(SharpDX.Direct3D9.AnimationSet)">
            <summary>	
            Adds an animation set to the animation controller.	
            </summary>	
            <param name="animSetRef"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.AnimationSet"/> animation set to add.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::RegisterAnimationSet']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::RegisterAnimationSet([In] ID3DXAnimationSet* pAnimSet)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.UnregisterAnimationSet(SharpDX.Direct3D9.AnimationSet)">
            <summary>	
            Removes an animation set from the animation controller.	
            </summary>	
            <param name="animSetRef"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.AnimationSet"/> animation set to remove.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotFound"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::UnregisterAnimationSet']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::UnregisterAnimationSet([In] ID3DXAnimationSet* pAnimSet)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetNumAnimationSets">
            <summary>	
            Returns the number of animation sets currently registered in the animation controller.	
            </summary>	
            <returns>Number of animation sets.</returns>	
            <remarks>	
            The controller contains any number of animations sets and tracks. Animation sets can be registered with  RegisterAnimationOutput.  An animation controller created by a call  to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> will automatically register loaded animation sets.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetNumAnimationSets']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::GetNumAnimationSets()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetAnimationSet(System.Int32,SharpDX.Direct3D9.AnimationSet@)">
            <summary>	
            Gets an animation set.	
            </summary>	
            <param name="index"><para>Index of the animation set.</para></param>	
            <param name="animationSetOut"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.AnimationSet"/> animation set.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The animation controller contains an array of animation sets. This method returns one of them at the given index.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetAnimationSet']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::GetAnimationSet([In] unsigned int Index,[Out] ID3DXAnimationSet** ppAnimationSet)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetAnimationSetByName(System.String,SharpDX.Direct3D9.AnimationSet@)">
            <summary>	
            Gets an animation set, given its name.	
            </summary>	
            <param name="szName"><para>String containing the name of the animation set.</para></param>	
            <param name="animationSetOut"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.AnimationSet"/> animation set.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The animation controller contains an array of animation sets. This method returns an animation set that has the given name.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetAnimationSetByName']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::GetAnimationSetByName([In] const char* szName,[In] ID3DXAnimationSet** ppAnimationSet)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.AdvanceTime(System.Double,SharpDX.Direct3D9.AnimationCallbackHandler)">
            <summary>	
            Animates the mesh and advances the global animation time by a specified amount.	
            </summary>	
            <param name="timeDelta"><para>Amount, in seconds, by which to advance the global animation time. TimeDelta value must be non-negative or zero.</para></param>	
            <param name="callbackHandlerRef"><para>Pointer to a user-defined animation callback handler interface, <see cref="T:SharpDX.Direct3D9.AnimationCallbackHandler"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::AdvanceTime']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::AdvanceTime([In] double TimeDelta,[In] ID3DXAnimationCallbackHandler* pCallbackHandler)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.ResetTime">
            <summary>	
            Resets the global animation time to zero. Any pending events will retain their original schedules, but in the new timeframe.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method is typically used when the global animation time value is nearing the maximum precision of DOUBLE storage, or 264 - 1.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::ResetTime']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::ResetTime()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetTime">
            <summary>	
            Gets the global animation time.	
            </summary>	
            <returns>Returns the global animation time.</returns>	
            <remarks>	
            Animations are designed using a local animation time and mixed into global time with AdvanceTime.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetTime']/*"/>	
            <unmanaged>double ID3DXAnimationController::GetTime()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.SetTrackAnimationSet(System.Int32,SharpDX.Direct3D9.AnimationSet)">
            <summary>	
            Applies the animation set to the specified track.	
            </summary>	
            <param name="track"><para>Identifier of the track to which the animation set is applied.</para></param>	
            <param name="animSetRef"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.AnimationSet"/> animation set to be added to the track.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This method sets the animation set to the specified track for mixing.  The animation set for each track is blended according to the  track weight and speed when AdvanceTime is called.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::SetTrackAnimationSet']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::SetTrackAnimationSet([In] unsigned int Track,[In] ID3DXAnimationSet* pAnimSet)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetTrackAnimationSet(System.Int32,SharpDX.Direct3D9.AnimationSet@)">
            <summary>	
            Gets the animation set for the given track.	
            </summary>	
            <param name="track"><para>Track identifier.</para></param>	
            <param name="animSetOut"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.AnimationSet"/> animation set for the given track.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetTrackAnimationSet']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::GetTrackAnimationSet([In] unsigned int Track,[Out] ID3DXAnimationSet** ppAnimSet)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.SetTrackPriority(System.Int32,SharpDX.Direct3D9.TrackPriority)">
            <summary>	
            Sets the priority blending weight for the specified animation track.	
            </summary>	
            <param name="track"><para>Track identifier.</para></param>	
            <param name="priority"><para>Track priority. This parameter should be set to one of the constants from <see cref="T:SharpDX.Direct3D9.TrackPriority"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::SetTrackPriority']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::SetTrackPriority([In] unsigned int Track,[In] D3DXPRIORITY_TYPE Priority)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.SetTrackSpeed(System.Int32,System.Single)">
            <summary>	
            Sets the track speed. The track speed is similar to a multiplier that is used to speed up or slow down the playback of the track.	
            </summary>	
            <param name="track"><para>Identifier of the track to set the speed on.</para></param>	
            <param name="speed"><para>New speed.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::SetTrackSpeed']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::SetTrackSpeed([In] unsigned int Track,[In] float Speed)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.SetTrackWeight(System.Int32,System.Single)">
            <summary>	
            Sets the track weight. The weight is used to determine how to blend multiple tracks together.	
            </summary>	
            <param name="track"><para>Identifier of the track to set the weight on.</para></param>	
            <param name="weight"><para>Weight value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::SetTrackWeight']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::SetTrackWeight([In] unsigned int Track,[In] float Weight)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.SetTrackPosition(System.Int32,System.Double)">
            <summary>	
            Sets the track to the specified local animation time.	
            </summary>	
            <param name="track"><para>Track identifier.</para></param>	
            <param name="position"><para>Local animation time value to assign to the track.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::SetTrackPosition']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::SetTrackPosition([In] unsigned int Track,[In] double Position)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.SetTrackEnable(System.Int32,System.Boolean)">
            <summary>	
            Enables or disables a track in the animation controller.	
            </summary>	
            <param name="track"><para>Identifier of the track to be mixed.</para></param>	
            <param name="enable"><para>Enable value. Set to TRUE to enable this track in the controller, or to <see cref="F:SharpDX.Result.False"/> to prevent it from being mixed.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            To mix a track with other tracks, the Enable flag must be set to TRUE. Conversely, setting the flag to <see cref="F:SharpDX.Result.False"/> will prevent the track from being  mixed with other tracks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::SetTrackEnable']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::SetTrackEnable([In] unsigned int Track,[In] BOOL Enable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.SetTrackDescription(System.Int32,SharpDX.Direct3D9.TrackDescription@)">
            <summary>	
            Sets the track description.	
            </summary>	
            <param name="track"><para>Identifier of the track to modify.</para></param>	
            <param name="descRef"><para>Description of the track.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::SetTrackDesc']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::SetTrackDesc([In] unsigned int Track,[In] D3DXTRACK_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetTrackDescription(System.Int32,SharpDX.Direct3D9.TrackDescription@)">
            <summary>	
            Gets the track description.	
            </summary>	
            <param name="track"><para>Track identifier.</para></param>	
            <param name="descRef"><para>Pointer to the track description. See <see cref="T:SharpDX.Direct3D9.TrackDescription"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetTrackDesc']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::GetTrackDesc([In] unsigned int Track,[In] D3DXTRACK_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.SetPriorityBlend(System.Single)">
            <summary>	
            Sets the priority blending weight used by the animation controller.	
            </summary>	
            <param name="blendWeight"><para>Priority blending weight used by the animation controller.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The blend weight is used to blend high and low priority tracks together.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::SetPriorityBlend']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::SetPriorityBlend([In] float BlendWeight)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetPriorityBlend">
            <summary>	
            Gets the current priority blending weight used by the animation controller.	
            </summary>	
            <returns>Returns the current priority blending weight.</returns>	
            <remarks>	
            The priority blending weight is used to blend high and low priority tracks together.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetPriorityBlend']/*"/>	
            <unmanaged>float ID3DXAnimationController::GetPriorityBlend()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.KeyTrackSpeed(System.Int32,System.Single,System.Double,System.Double,SharpDX.Direct3D9.TransitionType)">
            <summary>	
            Sets an event key that changes the rate of play of an animation track.	
            </summary>	
            <param name="track"><para>Identifier of the track to modify.</para></param>	
            <param name="newSpeed"><para>New speed of the animation track.</para></param>	
            <param name="startTime"><para>Global time key. Specifies the global time when the change will take place.</para></param>	
            <param name="duration"><para>Transition time, which specifies how long the smooth transition will take to complete.</para></param>	
            <param name="transition"><para>Specifies the transition type used for transitioning between speeds. See <see cref="T:SharpDX.Direct3D9.TransitionType"/>.</para></param>	
            <returns>Event handle to the priority blend event. <c>null</c> is returned if one or more of the input parameters is invalid, or no free event is available.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::KeyTrackSpeed']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::KeyTrackSpeed([In] unsigned int Track,[In] float NewSpeed,[In] double StartTime,[In] double Duration,[In] D3DXTRANSITION_TYPE Transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.KeyTrackWeight(System.Int32,System.Single,System.Double,System.Double,SharpDX.Direct3D9.TransitionType)">
            <summary>	
            Sets an event key that changes the weight of an animation track. The weight is used as a multiplier when combining multiple tracks together.	
            </summary>	
            <param name="track"><para>Identifier of the track to modify.</para></param>	
            <param name="newWeight"><para>New weight of the track.</para></param>	
            <param name="startTime"><para>Global time key. Specifies the global time when the change will take place.</para></param>	
            <param name="duration"><para>Transition time, which specifies how long the smooth transition will take to complete.</para></param>	
            <param name="transition"><para>Specifies the transition type used for transitioning between weights. See <see cref="T:SharpDX.Direct3D9.TransitionType"/>.</para></param>	
            <returns>Event handle to the priority blend event. <c>null</c> is returned if one or more of the input parameters is invalid, or no free event is available.</returns>	
            <remarks>	
            The weight is used like a multiplier to determine how much of this track to blend together with other tracks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::KeyTrackWeight']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::KeyTrackWeight([In] unsigned int Track,[In] float NewWeight,[In] double StartTime,[In] double Duration,[In] D3DXTRANSITION_TYPE Transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.KeyTrackPosition(System.Int32,System.Double,System.Double)">
            <summary>	
            Sets an event key that changes the local time of an animation track.	
            </summary>	
            <param name="track"><para>Identifier of the track to modify.</para></param>	
            <param name="newPosition"><para>New local time of the animation track.</para></param>	
            <param name="startTime"><para>Global time key. Specifies the global time when the change will take place.</para></param>	
            <returns>Event handle to the priority blend event. <c>null</c> is returned if Track is invalid, or if no free event is available.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::KeyTrackPosition']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::KeyTrackPosition([In] unsigned int Track,[In] double NewPosition,[In] double StartTime)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.KeyTrackEnable(System.Int32,System.Boolean,System.Double)">
            <summary>	
            Sets an event key that enables or disables an animation track.	
            </summary>	
            <param name="track"><para>Identifier of the animation track to modify.</para></param>	
            <param name="newEnable"><para>Enable flag. Set this to TRUE to enable the animation track, or to <see cref="F:SharpDX.Result.False"/> to disable the track.</para></param>	
            <param name="startTime"><para>Global time key. Specifies the global time when the change will take place.</para></param>	
            <returns>Event handle to the priority blend event. <c>null</c> is returned if Track is invalid.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::KeyTrackEnable']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::KeyTrackEnable([In] unsigned int Track,[In] BOOL NewEnable,[In] double StartTime)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.KeyPriorityBlend(System.Single,System.Double,System.Double,SharpDX.Direct3D9.TransitionType)">
            <summary>	
            Sets blending event keys for the specified animation track.	
            </summary>	
            <param name="newBlendWeight"><para>Number between 0 and 1 that is used to blend tracks together.</para></param>	
            <param name="startTime"><para>Global time to start the blend.</para></param>	
            <param name="duration"><para>Global time duration of the blend.</para></param>	
            <param name="transition"><para>Specifies the transition type used for the duration of the blend. See <see cref="T:SharpDX.Direct3D9.TransitionType"/>.</para></param>	
            <returns>Event handle to the priority blend event. <c>null</c> is returned if one or more of the input parameters is invalid, or no free event is available.</returns>	
            <remarks>	
            The animation controller blends in three phases: low priority tracks are blended first, high priority tracks are blended second, and  then the results of both are blended.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::KeyPriorityBlend']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::KeyPriorityBlend([In] float NewBlendWeight,[In] double StartTime,[In] double Duration,[In] D3DXTRANSITION_TYPE Transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.UnkeyEvent(System.Int32)">
            <summary>	
            Removes a specified event from an animation track, preventing the execution of the event.	
            </summary>	
            <param name="hEvent"><para>Event handle to the event to be removed from the animation track.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::UnkeyEvent']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::UnkeyEvent([In] unsigned int hEvent)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.UnkeyAllTrackEvents(System.Int32)">
            <summary>	
            Removes all events from a specified animation track.	
            </summary>	
            <param name="track"><para>Identifier of the track on which all events should be removed.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method prevents the execution of all events previously scheduled on the track, and discards all data associated with those events.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::UnkeyAllTrackEvents']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::UnkeyAllTrackEvents([In] unsigned int Track)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.UnkeyAllPriorityBlends">
            <summary>	
            Removes all scheduled priority blend events from the animation controller.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::UnkeyAllPriorityBlends']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::UnkeyAllPriorityBlends()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetCurrentTrackEvent(System.Int32,SharpDX.Direct3D9.EventType)">
            <summary>	
            Returns an event handle to the event currently running on the specified animation track.	
            </summary>	
            <param name="track"><para>Track identifier.</para></param>	
            <param name="eventType"><para>Type of event to query.</para></param>	
            <returns>Event handle to the event currently running on the specified track. <c>null</c> is returned if no event is running on the specified track.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetCurrentTrackEvent']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::GetCurrentTrackEvent([In] unsigned int Track,[In] D3DXEVENT_TYPE EventType)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetCurrentPriorityBlend">
            <summary>	
            Returns an event handle to a priority blend event that is currently running.	
            </summary>	
            <returns>Event handle to the currently running priority blend event. <c>null</c> is returned if no priority blend event is currently running.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetCurrentPriorityBlend']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::GetCurrentPriorityBlend()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetUpcomingTrackEvent(System.Int32,System.Int32)">
            <summary>	
            Returns an event handle to the next event scheduled to occur after a specified event on an animation track.	
            </summary>	
            <param name="track"><para>Track identifier.</para></param>	
            <param name="hEvent"><para>Event handle to a specified event after which to search for a following event. If set to <c>null</c>, then the method will return the next scheduled event.</para></param>	
            <returns>Event handle to the next event scheduled to run on the specified track. <c>null</c> is returned if no new event is scheduled.</returns>	
            <remarks>	
            This method can be used iteratively to locate a desired event by repeatedly passing in <c>null</c> for hEvent.Note??Do not iterate further after the method has returned <c>null</c>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetUpcomingTrackEvent']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::GetUpcomingTrackEvent([In] unsigned int Track,[In] unsigned int hEvent)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetUpcomingPriorityBlend(System.Int32)">
            <summary>	
            Returns an event handle to the next priority blend event scheduled to occur after a specified event.	
            </summary>	
            <param name="hEvent"><para>Event handle to a specified event after which to search for a following priority blend event. If set to <c>null</c>, then the method will  return the next scheduled priority blend event.</para></param>	
            <returns>Event handle to the next scheduled priority blend event. <c>null</c> is returned if no new priority blend event is scheduled.</returns>	
            <remarks>	
            This method can be used iteratively to locate a desired priority blend event by repeatedly passing in <c>null</c> for hEvent.Note??Do not iterate further after the method has returned <c>null</c>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetUpcomingPriorityBlend']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationController::GetUpcomingPriorityBlend([In] unsigned int hEvent)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.ValidateEvent(System.Int32)">
            <summary>	
            Checks whether a specified event handle is valid and the animation event has not yet completed.	
            </summary>	
            <param name="hEvent"><para>Event handle to an animation event.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if the event handle is valid and the event has not yet completed.Returns E_FAIL if the event handle is invalid and/or the event has completed.</returns>	
            <remarks>	
            The method will indicate that an event handle is valid even if the event is running but has not yet completed.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::ValidateEvent']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::ValidateEvent([In] unsigned int hEvent)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.GetEventDescription(System.Int32,SharpDX.Direct3D9.EventDescription@)">
            <summary>	
            Gets a description of a specified animation event.	
            </summary>	
            <param name="hEvent"><para>Event handle to an animation event to describe.</para></param>	
            <param name="descRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.EventDescription"/> structure that contains a description of the animation event.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetEventDesc']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::GetEventDesc([In] unsigned int hEvent,[In] D3DXEVENT_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationController.CloneAnimationController(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.AnimationController@)">
            <summary>	
            Clones, or copies, an animation controller.	
            </summary>	
            <param name="maxNumAnimationOutputs"><para>Maximum number of animation outputs the controller can support.</para></param>	
            <param name="maxNumAnimationSets"><para>Maximum number of animation sets the controller can support.</para></param>	
            <param name="maxNumTracks"><para>Maximum number of tracks the controller can support.</para></param>	
            <param name="maxNumEvents"><para>Maximum number of events the controller can support.</para></param>	
            <param name="animControllerOut"><para>Address of a reference to the cloned <see cref="T:SharpDX.Direct3D9.AnimationController"/> animation controller.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following  values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::CloneAnimationController']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationController::CloneAnimationController([In] unsigned int MaxNumAnimationOutputs,[In] unsigned int MaxNumAnimationSets,[In] unsigned int MaxNumTracks,[In] unsigned int MaxNumEvents,[In] ID3DXAnimationController** ppAnimController)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationController.MaxNumAnimationOutputs">
            <summary>	
            Get the maximum number of animation outputs the animation controller can support.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetMaxNumAnimationOutputs']/*"/>	
            <unmanaged>GetMaxNumAnimationOutputs</unmanaged>	
            <unmanaged>unsigned int ID3DXAnimationController::GetMaxNumAnimationOutputs()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationController.MaxNumAnimationSets">
            <summary>	
            Gets the maximum number of animation sets the animation controller can support.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetMaxNumAnimationSets']/*"/>	
            <unmanaged>GetMaxNumAnimationSets</unmanaged>	
            <unmanaged>unsigned int ID3DXAnimationController::GetMaxNumAnimationSets()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationController.MaxNumTracks">
            <summary>	
            Gets the maximum number of tracks in the animation controller.	
            </summary>	
            <remarks>	
            The maximum number of tracks the controller can manage.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetMaxNumTracks']/*"/>	
            <unmanaged>GetMaxNumTracks</unmanaged>	
            <unmanaged>unsigned int ID3DXAnimationController::GetMaxNumTracks()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationController.MaxNumEvents">
            <summary>	
            Gets the maximum number of events the animation controller can support.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetMaxNumEvents']/*"/>	
            <unmanaged>GetMaxNumEvents</unmanaged>	
            <unmanaged>unsigned int ID3DXAnimationController::GetMaxNumEvents()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationController.NumAnimationSets">
            <summary>	
            Returns the number of animation sets currently registered in the animation controller.	
            </summary>	
            <remarks>	
            The controller contains any number of animations sets and tracks. Animation sets can be registered with  RegisterAnimationOutput.  An animation controller created by a call  to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> will automatically register loaded animation sets.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetNumAnimationSets']/*"/>	
            <unmanaged>GetNumAnimationSets</unmanaged>	
            <unmanaged>unsigned int ID3DXAnimationController::GetNumAnimationSets()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationController.Time">
            <summary>	
            Gets the global animation time.	
            </summary>	
            <remarks>	
            Animations are designed using a local animation time and mixed into global time with AdvanceTime.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetTime']/*"/>	
            <unmanaged>GetTime</unmanaged>	
            <unmanaged>double ID3DXAnimationController::GetTime()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationController.PriorityBlend">
            <summary>	
            Gets the current priority blending weight used by the animation controller.	
            </summary>	
            <remarks>	
            The priority blending weight is used to blend high and low priority tracks together.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetPriorityBlend']/*"/>	
            <unmanaged>GetPriorityBlend</unmanaged>	
            <unmanaged>float ID3DXAnimationController::GetPriorityBlend()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationController.CurrentPriorityBlend">
            <summary>	
            Returns an event handle to a priority blend event that is currently running.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationController::GetCurrentPriorityBlend']/*"/>	
            <unmanaged>GetCurrentPriorityBlend</unmanaged>	
            <unmanaged>unsigned int ID3DXAnimationController::GetCurrentPriorityBlend()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.AnimationSet">
            <summary>	
            This interface encapsulates the minimum functionality required of an animation set by an animation controller. Advanced users might want to implement this interface themselves to suit their specialized needs; for most users, however, the derived <see cref="T:SharpDX.Direct3D9.CompressedAnimationSet"/> and <see cref="T:SharpDX.Direct3D9.KeyframedAnimationSet"/> interfaces should suffice.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet']/*"/>	
            <unmanaged>ID3DXAnimationSet</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationSet.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.AnimationSet"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationSet.GetName">
            <summary>	
            Gets the animation set name.	
            </summary>	
            <returns>Name of the animation set.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetName']/*"/>	
            <unmanaged>const char* ID3DXAnimationSet::GetName()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationSet.GetPeriod">
            <summary>	
            Gets the period of the animation set.	
            </summary>	
            <returns>Period of the animation set.</returns>	
            <remarks>	
            The period is the range of time that the animation key frames are valid. For looping animations, this is the period of the loop. The time units that the key frames are specified in (for example, seconds) is determined by the application.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetPeriod']/*"/>	
            <unmanaged>double ID3DXAnimationSet::GetPeriod()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationSet.GetPeriodicPosition(System.Double)">
            <summary>	
            Returns time position in the local timeframe of an animation set.	
            </summary>	
            <param name="position"><para>Local time of the animation set.</para></param>	
            <returns>Time position as measured in the timeframe of the animation set. This value will be bounded by the period of the animation set.</returns>	
            <remarks>	
            The time position returned by this method can be used as the PeriodicPosition parameter of <see cref="M:SharpDX.Direct3D9.AnimationSet.GetSRT(System.Double,System.Int32,SharpDX.Vector3@,SharpDX.Quaternion@,SharpDX.Vector3@)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetPeriodicPosition']/*"/>	
            <unmanaged>double ID3DXAnimationSet::GetPeriodicPosition([In] double Position)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationSet.GetNumAnimations">
            <summary>	
            Gets the number of animations in the animation set.	
            </summary>	
            <returns>Number of animations in the animation set.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetNumAnimations']/*"/>	
            <unmanaged>unsigned int ID3DXAnimationSet::GetNumAnimations()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationSet.GetAnimationNameByIndex(System.Int32,System.String)">
            <summary>	
            Gets the name of an animation, given its index.	
            </summary>	
            <param name="index"><para>Index of the animation.</para></param>	
            <param name="nameOut"><para>Address of a reference to a string that receives the animation name.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetAnimationNameByIndex']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationSet::GetAnimationNameByIndex([In] unsigned int Index,[In] const char** ppName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationSet.GetAnimationIndexByName(System.String,System.Int32)">
            <summary>	
            Gets the index of an animation, given its name.	
            </summary>	
            <param name="nameRef"><para>Name of the animation.</para></param>	
            <param name="indexRef"><para>Pointer to the animation index.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetAnimationIndexByName']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationSet::GetAnimationIndexByName([In] const char* pName,[In] unsigned int* pIndex)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationSet.GetSRT(System.Double,System.Int32,SharpDX.Vector3@,SharpDX.Quaternion@,SharpDX.Vector3@)">
            <summary>	
            Gets the scale, rotation, and translation values of the animation set.	
            </summary>	
            <param name="periodicPosition"><para>Position of the animation set. The position can be obtained by calling <see cref="M:SharpDX.Direct3D9.AnimationSet.GetPeriodicPosition(System.Double)"/>.</para></param>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="scaleRef"><para>Pointer to the <see cref="T:SharpDX.Vector3"/> vector that describes the scale of the animation set.</para></param>	
            <param name="rotationRef"><para>Pointer to the <see cref="T:SharpDX.Quaternion"/> quaternion that describes the rotation of the animation set.</para></param>	
            <param name="translationRef"><para>Pointer to the <see cref="T:SharpDX.Vector3"/> vector that describes the translation of the animation set.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetSRT']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationSet::GetSRT([In] double PeriodicPosition,[In] unsigned int Animation,[Out] D3DXVECTOR3* pScale,[Out] D3DXQUATERNION* pRotation,[Out] D3DXVECTOR3* pTranslation)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.AnimationSet.GetCallback(System.Double,System.Int32,System.Double@,System.IntPtr)">
            <summary>	
            Gets information about a specific callback in the animation set.	
            </summary>	
            <param name="position"><para>Position from which to find callbacks.</para></param>	
            <param name="flags"><para>Callback search flags. This parameter can be set to a combination of one or more flags from <see cref="T:SharpDX.Direct3D9.CallbackSearchFlags"/>.</para></param>	
            <param name="callbackPositionRef"><para>Pointer to the position of the callback.</para></param>	
            <param name="callbackDataOut"><para>Address of the callback data reference.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetCallback']/*"/>	
            <unmanaged>HRESULT ID3DXAnimationSet::GetCallback([In] double Position,[In] unsigned int Flags,[Out] double* pCallbackPosition,[In] void** ppCallbackData)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationSet.Name">
            <summary>	
            Gets the animation set name.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetName']/*"/>	
            <unmanaged>GetName</unmanaged>	
            <unmanaged>const char* ID3DXAnimationSet::GetName()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationSet.Period">
            <summary>	
            Gets the period of the animation set.	
            </summary>	
            <remarks>	
            The period is the range of time that the animation key frames are valid. For looping animations, this is the period of the loop. The time units that the key frames are specified in (for example, seconds) is determined by the application.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetPeriod']/*"/>	
            <unmanaged>GetPeriod</unmanaged>	
            <unmanaged>double ID3DXAnimationSet::GetPeriod()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.AnimationSet.NumAnimations">
            <summary>	
            Gets the number of animations in the animation set.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAnimationSet::GetNumAnimations']/*"/>	
            <unmanaged>GetNumAnimations</unmanaged>	
            <unmanaged>unsigned int ID3DXAnimationSet::GetNumAnimations()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.BaseMesh">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.BaseMesh"/> interface to manipulate and query mesh and progressive mesh objects.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh']/*"/>	
            <unmanaged>ID3DXBaseMesh</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.BaseMesh"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.DrawSubset(System.Int32)">
            <summary>	
            Draws a subset of a mesh.	
            </summary>	
            <param name="attribId"><para> DWORD that specifies which subset of the mesh to draw. This value is used to differentiate faces in a mesh as belonging to one or more attribute groups.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The subset that is specified by AttribId will be rendered by the <see cref="M:SharpDX.Direct3D9.Device.DrawIndexedPrimitive(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> method, using the <see cref="F:SharpDX.Direct3D9.PrimitiveType.TriangleList"/> primitive type, so an index buffer must be properly initialized.An attribute table is used to identify areas of the mesh that need to be drawn with different textures, render states, materials, and so on. In addition, the application can use the attribute table to hide portions of a mesh by not drawing a given attribute identifier (AttribId) when drawing the frame.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::DrawSubset']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::DrawSubset([In] unsigned int AttribId)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetNumFaces">
            <summary>	
            Retrieves the number of faces in the mesh.	
            </summary>	
            <returns>Returns the number of faces in the mesh.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetNumFaces']/*"/>	
            <unmanaged>unsigned int ID3DXBaseMesh::GetNumFaces()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetNumVertices">
            <summary>	
            Retrieves the number of vertices in the mesh.	
            </summary>	
            <returns>Returns the number of vertices in the mesh.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetNumVertices']/*"/>	
            <unmanaged>unsigned int ID3DXBaseMesh::GetNumVertices()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetFVF">
            <summary>	
            Gets the fixed function vertex value.	
            </summary>	
            <returns>Returns the flexible vertex format (FVF) codes.</returns>	
            <remarks>	
            This method can return 0 if the vertex format cannot be mapped directly to an FVF code.  This will occur for a mesh created from a vertex declaration that doesn't have the same order and elements supported by the FVF codes.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetFVF']/*"/>	
            <unmanaged>unsigned int ID3DXBaseMesh::GetFVF()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetDeclaration(SharpDX.Direct3D9.VertexElement)">
            <summary>	
            Retrieves a declaration describing the vertices in the mesh.	
            </summary>	
            <param name="declaration"><para>Array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements describing the vertex format of the mesh vertices. The upper limit of this declarator array is <see cref="F:SharpDX.Direct3D9.VertexFormatDeclaratorCount.Max"/>. The vertex element array ends with the D3DDECL_END macro. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The array of elements includes the D3DDECL_END macro, which ends the declaration.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetDeclaration']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::GetDeclaration([In] D3DVERTEXELEMENT9* Declaration)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetNumBytesPerVertex">
            <summary>	
            Gets the number of bytes per vertex.	
            </summary>	
            <returns>Returns the number of bytes per vertex.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetNumBytesPerVertex']/*"/>	
            <unmanaged>unsigned int ID3DXBaseMesh::GetNumBytesPerVertex()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetOptions">
            <summary>	
            Retrieves the mesh options enabled for this mesh at creation time.	
            </summary>	
            <returns>Returns a combination of one or more of the following flags, indicating the options enabled for this mesh at creation time.ValueDescription D3DXMESH_32BITUse 32-bit indices. D3DXMESH_DONOTCLIPUse the <see cref="F:SharpDX.Direct3D9.Usage.DoNotClip"/> usage flag for vertex and index buffers. D3DXMESH_DYNAMICEquivalent to specifying both <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferDynamic"/> and <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferDynamic"/>. D3DXMESH_RTPATCHESUse the <see cref="F:SharpDX.Direct3D9.Usage.RTPatches"/> usage flag for vertex and index buffers. D3DXMESH_NPATCHESSpecifying this flag causes the vertex and index buffer of the mesh to be created with <see cref="F:SharpDX.Direct3D9.Usage.NPatches"/> flag. This is required if the mesh object is to be rendered using N-Patch enhancement. D3DXMESH_MANAGEDEquivalent to specifying both <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferManaged"/> and <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferManaged"/>. D3DXMESH_POINTSUse the <see cref="F:SharpDX.Direct3D9.Usage.Points"/> usage flag for vertex and index buffers. D3DXMESH_IB_DYNAMICUse the <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> usage flag for index buffers. D3DXMESH_IB_MANAGEDUse the <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> memory class for index buffers. D3DXMESH_IB_SYSTEMMEMUse the <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/> memory class for index buffers. D3DXMESH_IB_WRITEONLYUse the <see cref="F:SharpDX.Direct3D9.Usage.WriteOnly"/> usage flag for index buffers. D3DXMESH_SYSTEMMEMEquivalent to specifying both <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferSystemMemory"/> and <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferSystemMemory"/>. D3DXMESH_VB_DYNAMICUse the <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/> usage flag for vertex buffers. D3DXMESH_VB_MANAGEDUse the <see cref="F:SharpDX.Direct3D9.Pool.Managed"/> memory class for vertex buffers. D3DXMESH_VB_SYSTEMMEMUse the <see cref="F:SharpDX.Direct3D9.Pool.SystemMemory"/> memory class for vertex buffers. D3DXMESH_VB_WRITEONLYUse the <see cref="F:SharpDX.Direct3D9.Usage.WriteOnly"/> usage flag for vertex buffers. D3DXMESH_WRITEONLYEquivalent to specifying both <see cref="F:SharpDX.Direct3D9.MeshFlags.VertexBufferWriteOnly"/> and <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferWriteOnly"/>.?</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetOptions']/*"/>	
            <unmanaged>unsigned int ID3DXBaseMesh::GetOptions()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the device associated with the mesh.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the Direct3D device object associated with the mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Be sure to call <see cref="T:SharpDX.ComObject"/> when you are done using this <see cref="T:SharpDX.Direct3D9.Device"/> interface or you will have a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.CloneMeshFVF(System.Int32,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Clones a mesh using a flexible vertex format (FVF) code.	
            </summary>	
            <param name="options"><para>A combination of one or more D3DXMESH flags specifying creation options for the mesh.</para></param>	
            <param name="fvf"><para>Combination of FVF codes, which specifies the vertex format for the vertices in the output mesh. For the values of the codes, see <see cref="T:SharpDX.Direct3D9.VertexFormat"/>.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface representing the device object associated with the mesh.</para></param>	
            <param name="cloneMeshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the cloned mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            ID3DXBaseMesh::CloneMeshFVF is used to reformat and change the vertex data layout. This is done by creating a new mesh object. For example, use it to to add space for normals, texture coordinates, colors, weights, etc. that were not present before.<see cref="M:SharpDX.Direct3D9.BaseMesh.UpdateSemantics(SharpDX.Direct3D9.VertexElement)"/> updates the vertex declaration with different semantic information without changing the layout of the vertex buffer. This method does not modify the contents of the vertex buffer. For example, use it to relabel a 3D texture coordinate as a binormal or tangent or vice versa.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::CloneMeshFVF']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::CloneMeshFVF([In] unsigned int Options,[In] unsigned int FVF,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXMesh** ppCloneMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.CloneMesh(System.Int32,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Clones a mesh using a declarator.	
            </summary>	
            <param name="options"><para>A combination of one or more D3DXMESH flags specifying creation options for the mesh.</para></param>	
            <param name="declarationRef"><para>An array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements, which specify the vertex format for the vertices in the output mesh.</para></param>	
            <param name="d3DDeviceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the device object associated with the mesh.</para></param>	
            <param name="cloneMeshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the cloned mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            ID3DXBaseMesh::CloneMesh is used to reformat and change the vertex data layout. This is done by creating a new mesh object. For example, use it to add space for normals, texture coordinates, colors, weights, etc. that were not present before.<see cref="M:SharpDX.Direct3D9.BaseMesh.UpdateSemantics(SharpDX.Direct3D9.VertexElement)"/> updates the vertex declaration with different semantic information without changing the layout of the vertex buffer. This method does not modify the contents of the vertex buffer. For example, use it to relabel a 3D texture coordinate as a binormal or tangent or vice versa.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::CloneMesh']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::CloneMesh([In] unsigned int Options,[In] const D3DVERTEXELEMENT9* pDeclaration,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXMesh** ppCloneMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetVertexBuffer(SharpDX.Direct3D9.VertexBuffer@)">
            <summary>	
            Retrieves the vertex buffer associated with the mesh.	
            </summary>	
            <param name="vBOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> interface, representing the vertex buffer object associated with the mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetVertexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::GetVertexBuffer([Out] IDirect3DVertexBuffer9** ppVB)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetIndexBuffer(SharpDX.Direct3D9.IndexBuffer@)">
            <summary>	
            Retrieves the data in an index buffer.	
            </summary>	
            <param name="iBOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface, representing the index buffer object associated with the mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetIndexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::GetIndexBuffer([Out] IDirect3DIndexBuffer9** ppIB)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.LockVertexBuffer(System.Int32,System.IntPtr)">
            <summary>	
            Locks a vertex buffer and obtains a reference to the vertex buffer memory.	
            </summary>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoOverwrite"/>  <para>For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>.</para></param>	
            <param name="dataOut"><para>VOID* reference to a buffer containing the vertex data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            When working with vertex buffers, you are allowed to make multiple lock calls; however, you must ensure that the number of lock calls match the number of unlock calls. DrawPrimitive calls will not succeed with any outstanding lock count on any currently set vertex buffer.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::LockVertexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::LockVertexBuffer([In] unsigned int Flags,[In] void** ppData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.UnlockVertexBuffer">
            <summary>	
            Unlocks a vertex buffer.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::UnlockVertexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::UnlockVertexBuffer()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.LockIndexBuffer(System.Int32,System.IntPtr)">
            <summary>	
            Locks an index buffer and obtains a reference to the index buffer memory.	
            </summary>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are: </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>  <para>For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>.</para></param>	
            <param name="dataOut"><para>VOID* reference to a buffer containing the index data. The count of indices in this buffer will be equal to <see cref="M:SharpDX.Direct3D9.BaseMesh.GetNumFaces"/> * 3.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            When working with index buffers, you are allowed to make multiple lock calls. However, you must ensure that the number of lock calls match the number of unlock calls. DrawPrimitive calls will not succeed with any outstanding lock count on any currently set index buffer.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::LockIndexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::LockIndexBuffer([In] unsigned int Flags,[In] void** ppData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.UnlockIndexBuffer">
            <summary>	
            Unlocks an index buffer.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::UnlockIndexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::UnlockIndexBuffer()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GetAttributeTable(SharpDX.Direct3D9.AttributeRange@,System.Int32@)">
            <summary>	
            Retrieves either an attribute table for a mesh, or the number of entries stored in an attribute table for a mesh.	
            </summary>	
            <param name="attribTableRef"><para>Pointer to an array of <see cref="T:SharpDX.Direct3D9.AttributeRange"/> structures, representing the entries in the mesh's attribute table. Specify <c>null</c> to retrieve the value for pAttribTableSize.</para></param>	
            <param name="attribTableSizeRef"><para>Pointer to either the number of entries stored in pAttribTable or a value to be filled in with the number of entries stored in the attribute table for the mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            An attribute table is created by <see cref="M:SharpDX.Direct3D9.Mesh.Optimize(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)"/> and passing <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.AttributeSort"/> for the Flags parameter.An attribute table is used to identify areas of the mesh that need to be drawn with different textures, render states, materials, and so on. In addition, the application can use the attribute table to hide portions of a mesh by not drawing a given attribute identifier when drawing the frame.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetAttributeTable']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::GetAttributeTable([Out] D3DXATTRIBUTERANGE* pAttribTable,[Out] unsigned int* pAttribTableSize)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.ConvertPointRepsToAdjacency(System.Int32,System.Int32)">
            <summary>	
            Converts point representative data to mesh adjacency information.	
            </summary>	
            <param name="pRepRef"><para>Pointer to an array of one DWORD per vertex of the mesh that contains point representative data. This parameter is optional. Supplying a <c>null</c> value will cause this parameter to be interpreted as an "identity" array.</para></param>	
            <param name="adjacencyRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the mesh. The number of bytes in this array must be at least 3 * <see cref="M:SharpDX.Direct3D9.BaseMesh.GetNumFaces"/> * sizeof(DWORD).</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::ConvertPointRepsToAdjacency']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::ConvertPointRepsToAdjacency([In] const unsigned int* pPRep,[In] unsigned int* pAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.ConvertAdjacencyToPointReps(System.Int32,System.Int32)">
            <summary>	
            Converts mesh adjacency information to an array of point representatives.	
            </summary>	
            <param name="adjacencyRef"><para>Pointer to an array of three DWORDs per face that specify the three neighbors for each face in the mesh. The number of bytes in this array must be at least 3 * <see cref="M:SharpDX.Direct3D9.BaseMesh.GetNumFaces"/> * sizeof(DWORD).</para></param>	
            <param name="pRepRef"><para>Pointer to an array of one DWORD per vertex of the mesh that will be filled with point representative data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::ConvertAdjacencyToPointReps']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::ConvertAdjacencyToPointReps([In] const unsigned int* pAdjacency,[In] unsigned int* pPRep)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.GenerateAdjacency(System.Single,System.Int32)">
            <summary>	
            Generate a list of mesh edges, as well as a list of faces that share each edge.	
            </summary>	
            <param name="epsilon"><para>Specifies that vertices that differ in position by less than epsilon should be treated as coincident.</para></param>	
            <param name="adjacencyRef"><para>Pointer to an array of three DWORDs per face to be filled with the indices of adjacent faces. The number of bytes in this array must be at least 3 * <see cref="M:SharpDX.Direct3D9.BaseMesh.GetNumFaces"/> * sizeof(DWORD).</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            After an application generates adjacency information for a mesh, the mesh data can be optimized for better drawing performance.The order of the entries in the adjacency buffer is determined by the order of the vertex indices in the index buffer. The adjacent triangle 0 always corresponds to the edge between the indices of the corners 0 and 1. The adjacent triangle 1 always corresponds to the edge between the indices of the corners 1 and 2 while the adjacent triangle 2 corresponds to the edge between the indices of the corners 2 and 0.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GenerateAdjacency']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::GenerateAdjacency([In] float Epsilon,[In] unsigned int* pAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.BaseMesh.UpdateSemantics(SharpDX.Direct3D9.VertexElement)">
            <summary>	
            This method allows the user to change the mesh declaration without changing the data layout of the vertex buffer. The call is valid only if the old and new declaration formats have the same vertex size.	
            </summary>	
            <param name="declaration"><para>An array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements, describing the vertex format of the mesh vertices. The upper limit of this declarator array is <see cref="F:SharpDX.Direct3D9.VertexFormatDeclaratorCount.Max"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            <see cref="M:SharpDX.Direct3D9.BaseMesh.CloneMesh(System.Int32,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Mesh@)"/> is used to reformat and change the vertex data layout. For example, use it to to add space for normals, texture coordinates, colors, weights, etc. that were not present before.ID3DXBaseMesh::UpdateSemantics is a method for updating the vertex declaration with different semantic information, without changing the layout of the vertex buffer. For example, use it to relabel a 3D texture coordinate as a binormal or tangent, or vice versa.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::UpdateSemantics']/*"/>	
            <unmanaged>HRESULT ID3DXBaseMesh::UpdateSemantics([In] D3DVERTEXELEMENT9* Declaration)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.BaseMesh.FVF">
            <summary>	
            Gets the fixed function vertex value.	
            </summary>	
            <remarks>	
            This method can return 0 if the vertex format cannot be mapped directly to an FVF code.  This will occur for a mesh created from a vertex declaration that doesn't have the same order and elements supported by the FVF codes.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetFVF']/*"/>	
            <unmanaged>GetFVF</unmanaged>	
            <unmanaged>unsigned int ID3DXBaseMesh::GetFVF()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.BaseMesh.NumBytesPerVertex">
            <summary>	
            Gets the number of bytes per vertex.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetNumBytesPerVertex']/*"/>	
            <unmanaged>GetNumBytesPerVertex</unmanaged>	
            <unmanaged>unsigned int ID3DXBaseMesh::GetNumBytesPerVertex()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.BaseMesh.Options">
            <summary>	
            Retrieves the mesh options enabled for this mesh at creation time.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetOptions']/*"/>	
            <unmanaged>GetOptions</unmanaged>	
            <unmanaged>unsigned int ID3DXBaseMesh::GetOptions()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.BaseMesh.Device">
            <summary>	
            Retrieves the device associated with the mesh.	
            </summary>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Be sure to call <see cref="T:SharpDX.ComObject"/> when you are done using this <see cref="T:SharpDX.Direct3D9.Device"/> interface or you will have a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT ID3DXBaseMesh::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.BaseMesh.VertexBuffer">
            <summary>	
            Retrieves the vertex buffer associated with the mesh.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetVertexBuffer']/*"/>	
            <unmanaged>GetVertexBuffer</unmanaged>	
            <unmanaged>HRESULT ID3DXBaseMesh::GetVertexBuffer([Out] IDirect3DVertexBuffer9** ppVB)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.BaseMesh.IndexBuffer">
            <summary>	
            Retrieves the data in an index buffer.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXBaseMesh::GetIndexBuffer']/*"/>	
            <unmanaged>GetIndexBuffer</unmanaged>	
            <unmanaged>HRESULT ID3DXBaseMesh::GetIndexBuffer([Out] IDirect3DIndexBuffer9** ppIB)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.CompressedAnimationSet">
            <summary>	
            An application uses the methods of this interface to implement a key frame animation set stored in a compressed data format.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet']/*"/>	
            <unmanaged>ID3DXCompressedAnimationSet</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CompressedAnimationSet.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.CompressedAnimationSet"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.CompressedAnimationSet.GetPlaybackType">
            <summary>	
            Gets the type of the animation set playback loop.	
            </summary>	
            <returns>Type of the animation set playback loop. See <see cref="T:SharpDX.Direct3D9.PlaybackType"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet::GetPlaybackType']/*"/>	
            <unmanaged>D3DXPLAYBACK_TYPE ID3DXCompressedAnimationSet::GetPlaybackType()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CompressedAnimationSet.GetSourceTicksPerSecond">
            <summary>	
            Gets the number of animation key frame ticks that occur per second.	
            </summary>	
            <returns>Number of animation key frame ticks that occur per second.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet::GetSourceTicksPerSecond']/*"/>	
            <unmanaged>double ID3DXCompressedAnimationSet::GetSourceTicksPerSecond()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CompressedAnimationSet.GetCompressedData(SharpDX.Direct3D.Blob@)">
            <summary>	
            Gets the data buffer that stores compressed key frame animation data.	
            </summary>	
            <param name="compressedDataOut"><para>Address of a reference to the <see cref="T:SharpDX.Direct3D.Blob"/> data buffer that receives compressed key frame animation data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet::GetCompressedData']/*"/>	
            <unmanaged>HRESULT ID3DXCompressedAnimationSet::GetCompressedData([Out] ID3DXBuffer** ppCompressedData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CompressedAnimationSet.GetNumCallbackKeys">
            <summary>	
            Gets the number of callback keys in the animation set.	
            </summary>	
            <returns>Number of callback keys in the animation set.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet::GetNumCallbackKeys']/*"/>	
            <unmanaged>unsigned int ID3DXCompressedAnimationSet::GetNumCallbackKeys()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.CompressedAnimationSet.GetCallbackKeys(SharpDX.Direct3D9.CallbackKey)">
            <summary>	
            Fills an array with callback key data used for key frame animation.	
            </summary>	
            <param name="callbackKeysRef"><para>Pointer to a user-allocated array of <see cref="T:SharpDX.Direct3D9.CallbackKey"/> structures that the method is to fill with callback data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet::GetCallbackKeys']/*"/>	
            <unmanaged>HRESULT ID3DXCompressedAnimationSet::GetCallbackKeys([In] D3DXKEY_CALLBACK* pCallbackKeys)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.CompressedAnimationSet.PlaybackType">
            <summary>	
            Gets the type of the animation set playback loop.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet::GetPlaybackType']/*"/>	
            <unmanaged>GetPlaybackType</unmanaged>	
            <unmanaged>D3DXPLAYBACK_TYPE ID3DXCompressedAnimationSet::GetPlaybackType()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.CompressedAnimationSet.SourceTicksPerSecond">
            <summary>	
            Gets the number of animation key frame ticks that occur per second.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet::GetSourceTicksPerSecond']/*"/>	
            <unmanaged>GetSourceTicksPerSecond</unmanaged>	
            <unmanaged>double ID3DXCompressedAnimationSet::GetSourceTicksPerSecond()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.CompressedAnimationSet.CompressedData">
            <summary>	
            Gets the data buffer that stores compressed key frame animation data.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet::GetCompressedData']/*"/>	
            <unmanaged>GetCompressedData</unmanaged>	
            <unmanaged>HRESULT ID3DXCompressedAnimationSet::GetCompressedData([Out] ID3DXBuffer** ppCompressedData)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.CompressedAnimationSet.NumCallbackKeys">
            <summary>	
            Gets the number of callback keys in the animation set.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXCompressedAnimationSet::GetNumCallbackKeys']/*"/>	
            <unmanaged>GetNumCallbackKeys</unmanaged>	
            <unmanaged>unsigned int ID3DXCompressedAnimationSet::GetNumCallbackKeys()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.EffectStateManager">
            <summary>	
            This is a user-implemented interface that allows a user to set the device state from an effect. Each of the methods in this interface must be implemented by the user and will then be used as callbacks to the application when either of the following occur:	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager']/*"/>	
            <unmanaged>ID3DXEffectStateManager</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.EffectStateManager"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetTransform(SharpDX.Direct3D9.TransformState,SharpDX.Matrix@)">
            <summary>	
            A callback function that must be implemented by a user to set a transform.	
            </summary>	
            <param name="state"><para>The type of transform to apply the matrix to. See <see cref="T:SharpDX.Direct3D9.TransformState"/>.</para></param>	
            <param name="matrixRef"><para>A transformation matrix. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetTransform_(System.Int32,SharpDX.Matrix@)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetTransform']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetTransform([In] D3DTRANSFORMSTATETYPE State,[In] const D3DMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetMaterial(SharpDX.Direct3D9.Material@)">
            <summary>	
            A callback function that must be implemented by a user to set material state.	
            </summary>	
            <param name="materialRef"><para>A reference to the material state. See <see cref="T:SharpDX.Direct3D9.Material"/>.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetMaterial(SharpDX.Direct3D9.Material@)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetMaterial']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetMaterial([In] const D3DMATERIAL9* pMaterial)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetLight(System.Int32,SharpDX.Direct3D9.Light@)">
            <summary>	
            A callback function that must be implemented by a user to set a light.	
            </summary>	
            <param name="index"><para>The zero-based index of the light. This is the same index  in <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/>.</para></param>	
            <param name="lightRef"><para>The light object. See <see cref="T:SharpDX.Direct3D9.Light"/>.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetLight']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetLight([In] unsigned int Index,[In] const D3DLIGHT9* pLight)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.LightEnable(System.Int32,System.Boolean)">
            <summary>	
            A callback function that must be implemented by a user to enable/disable a light.	
            </summary>	
            <param name="index"><para>The zero-based index of the light. This is the same index in <see cref="M:SharpDX.Direct3D9.Device.SetLight(System.Int32,SharpDX.Direct3D9.Light@)"/>.</para></param>	
            <param name="enable"><para>True to enable the light, false otherwise.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.EnableLight(System.Int32,System.Boolean)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::LightEnable']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::LightEnable([In] unsigned int Index,[In] BOOL Enable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetRenderState(SharpDX.Direct3D9.RenderState,System.Int32)">
            <summary>	
            A callback function that must be implemented by a user to set render state.	
            </summary>	
            <param name="state"><para>The render state to set. <see cref="T:SharpDX.Direct3D9.RenderState"/> </para></param>	
            <param name="value"><para>The render state value. See Effect States (Direct3D 9).</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetRenderState(SharpDX.Direct3D9.RenderState,System.Boolean)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetRenderState']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetRenderState([In] D3DRENDERSTATETYPE State,[In] unsigned int Value)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetTexture(System.Int32,SharpDX.Direct3D9.BaseTexture)">
            <summary>	
            A callback function that must be implemented by a user to set a texture.	
            </summary>	
            <param name="stage"><para>The stage to which the texture is assigned. This is the index value in <see cref="M:SharpDX.Direct3D9.Device.SetTexture(System.Int32,SharpDX.Direct3D9.BaseTexture)"/> or <see cref="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,SharpDX.Direct3D9.TextureArgument)"/>. </para></param>	
            <param name="textureRef"><para>A reference to the texture object. This can be any of the Direct3D texture types (cube, volume, etc.). See <see cref="T:SharpDX.Direct3D9.BaseTexture"/>.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetTexture(System.Int32,SharpDX.Direct3D9.BaseTexture)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetTexture']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetTexture([In] unsigned int Stage,[In] IDirect3DBaseTexture9* pTexture)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,System.Int32)">
            <summary>	
            A callback function that must be implemented by a user to set the texture stage state.	
            </summary>	
            <param name="stage"><para>The stage that the texture is assigned to. This is the index value in <see cref="M:SharpDX.Direct3D9.Device.SetTexture(System.Int32,SharpDX.Direct3D9.BaseTexture)"/> or <see cref="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,SharpDX.Direct3D9.TextureArgument)"/>. </para></param>	
            <param name="type"><para>Defines the type of operation that a texture stage will perform. See  <see cref="T:SharpDX.Direct3D9.TextureStage"/>. </para></param>	
            <param name="value"><para>Can be either an operation (<see cref="T:SharpDX.Direct3D9.TextureOperation"/>) or an argument value (<see cref="T:SharpDX.Direct3D9.TextureArgument"/>), depending on what is chosen for Type.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetTextureStageState(System.Int32,SharpDX.Direct3D9.TextureStage,SharpDX.Direct3D9.TextureArgument)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetTextureStageState']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetTextureStageState([In] unsigned int Stage,[In] D3DTEXTURESTAGESTATETYPE Type,[In] unsigned int Value)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,System.Int32)">
            <summary>	
            A callback function that must be implemented by a user to set a sampler.	
            </summary>	
            <param name="sampler"><para>The zero-based sampler number. </para></param>	
            <param name="type"><para>Identifies sampler state, which can specify the filtering, addressing, or the border color. See <see cref="T:SharpDX.Direct3D9.SamplerState"/>.</para></param>	
            <param name="value"><para>A value from one of the sampler state types in Type. </para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetSamplerState(System.Int32,SharpDX.Direct3D9.SamplerState,SharpDX.Direct3D9.TextureFilter)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetSamplerState']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetSamplerState([In] unsigned int Sampler,[In] D3DSAMPLERSTATETYPE Type,[In] unsigned int Value)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetNPatchMode(System.Single)">
            <summary>	
            A callback function that must be implemented by a user to set the number of subdivision segments for N-patches.	
            </summary>	
            <param name="numSegments"><para>Break the surface into this number of subdivisions. This is the same as the number used by <see cref="M:SharpDX.Direct3D9.Device.SetNPatchMode(System.Single)"/>.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetNPatchMode(System.Single)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetNPatchMode']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetNPatchMode([In] float NumSegments)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetVertexFormat(SharpDX.Direct3D9.VertexFormat)">
            <summary>	
            A callback function that must be implemented by a user to set a FVF code.	
            </summary>	
            <param name="vertexFormat"><para>The FVF constant, that determines how to interpret vertex data. See <see cref="T:SharpDX.Direct3D9.VertexFormat"/>.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetVertexFormat(SharpDX.Direct3D9.VertexFormat)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetFVF']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetFVF([In] D3DFVF FVF)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetVertexShader(SharpDX.Direct3D9.VertexShader)">
            <summary>	
            A callback function that must be implemented by a user to set a vertex shader.	
            </summary>	
            <param name="shaderRef"><para>A reference to a vertex shader object. See <see cref="T:SharpDX.Direct3D9.VertexShader"/>. </para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetVertexShader(SharpDX.Direct3D9.VertexShader)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetVertexShader']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetVertexShader([In] IDirect3DVertexShader9* pShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetVertexShaderConstantF(System.Int32,System.Single,System.Int32)">
            <summary>	
            A callback function that must be implemented by a user to set an array of vertex shader floating-point constants.	
            </summary>	
            <param name="registerIndex"><para>The zero-based index of the first constant register.</para></param>	
            <param name="constantDataRef"><para>An array of floating-point constants.</para></param>	
            <param name="registerCount"><para>The number of registers in pConstantData.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetVertexShaderConstantF(System.Int32,System.IntPtr,System.Int32)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetVertexShaderConstantF']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetVertexShaderConstantF([In] unsigned int RegisterIndex,[In] const float* pConstantData,[In] unsigned int RegisterCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetVertexShaderConstantI(System.Int32,System.Int32,System.Int32)">
            <summary>	
            A callback function that must be implemented by a user to set an array of vertex shader integer constants.	
            </summary>	
            <param name="registerIndex"><para>The zero-based index of the first constant register.</para></param>	
            <param name="constantDataRef"><para>An array of integer constants.</para></param>	
            <param name="registerCount"><para>The number of registers in pConstantData.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetVertexShaderConstantI(System.Int32,System.IntPtr,System.Int32)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetVertexShaderConstantI']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetVertexShaderConstantI([In] unsigned int RegisterIndex,[In] const int* pConstantData,[In] unsigned int RegisterCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetVertexShaderConstantB(System.Int32,System.Boolean,System.Int32)">
            <summary>	
            A callback function that must be implemented by a user to set an array of vertex shader Boolean constants.	
            </summary>	
            <param name="registerIndex"><para>The zero-based index of the first constant register.</para></param>	
            <param name="constantDataRef"><para>An array of Boolean constants.</para></param>	
            <param name="registerCount"><para>The number of registers in pConstantData.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetVertexShaderConstantB(System.Int32,System.IntPtr,System.Int32)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetVertexShaderConstantB']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetVertexShaderConstantB([In] unsigned int RegisterIndex,[In] const BOOL* pConstantData,[In] unsigned int RegisterCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetPixelShader(SharpDX.Direct3D9.PixelShader)">
            <summary>	
            A callback function that must be implemented by a user to set a pixel shader.	
            </summary>	
            <param name="shaderRef"><para>A reference to a pixel shader object. See <see cref="T:SharpDX.Direct3D9.PixelShader"/>. </para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetPixelShader(SharpDX.Direct3D9.PixelShader)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetPixelShader']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetPixelShader([In] IDirect3DPixelShader9* pShader)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetPixelShaderConstantF(System.Int32,System.Single,System.Int32)">
            <summary>	
            A callback function that must be implemented by a user to set an array of vertex shader floating-point constants.	
            </summary>	
            <param name="registerIndex"><para>The zero-based index of the first constant register.</para></param>	
            <param name="constantDataRef"><para>An array of floating-point constants.</para></param>	
            <param name="registerCount"><para>The number of registers in pConstantData.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetPixelShaderConstantF(System.Int32,System.IntPtr,System.Int32)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetPixelShaderConstantF']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetPixelShaderConstantF([In] unsigned int RegisterIndex,[In] const float* pConstantData,[In] unsigned int RegisterCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetPixelShaderConstantI(System.Int32,System.Int32,System.Int32)">
            <summary>	
            A callback function that must be implemented by a user to set an array of vertex shader integer constants.	
            </summary>	
            <param name="registerIndex"><para>The zero-based index of the first constant register.</para></param>	
            <param name="constantDataRef"><para>An array of integer constants.</para></param>	
            <param name="registerCount"><para>The number of registers in pConstantData.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetPixelShaderConstantI(System.Int32,System.IntPtr,System.Int32)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetPixelShaderConstantI']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetPixelShaderConstantI([In] unsigned int RegisterIndex,[In] const int* pConstantData,[In] unsigned int RegisterCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.EffectStateManager.SetPixelShaderConstantB(System.Int32,System.Boolean,System.Int32)">
            <summary>	
            A callback function that must be implemented by a user to set an array of vertex shader Boolean constants.	
            </summary>	
            <param name="registerIndex"><para>The zero-based index of the first constant register.</para></param>	
            <param name="constantDataRef"><para>An array of Boolean constants.</para></param>	
            <param name="registerCount"><para>The number of registers in pConstantData.</para></param>	
            <returns>The user-implemented method should return <see cref="F:SharpDX.Result.Ok"/>. If the callback fails when setting the device state, either of the following will occur:The effect will fail during <see cref="M:SharpDX.Direct3D9.Effect.BeginPass(System.Int32)"/>. The dynamic effect state call (such as <see cref="M:SharpDX.Direct3D9.Device.SetPixelShaderConstantB(System.Int32,System.IntPtr,System.Int32)"/>) will fail.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetPixelShaderConstantB']/*"/>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetPixelShaderConstantB([In] unsigned int RegisterIndex,[In] const BOOL* pConstantData,[In] unsigned int RegisterCount)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.EffectStateManager.Material">
            <summary>	
            A callback function that must be implemented by a user to set material state.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetMaterial']/*"/>	
            <unmanaged>SetMaterial</unmanaged>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetMaterial([In] const D3DMATERIAL9* pMaterial)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.EffectStateManager.NPatchMode">
            <summary>	
            A callback function that must be implemented by a user to set the number of subdivision segments for N-patches.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetNPatchMode']/*"/>	
            <unmanaged>SetNPatchMode</unmanaged>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetNPatchMode([In] float NumSegments)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.EffectStateManager.VertexFormat">
            <summary>	
            A callback function that must be implemented by a user to set a FVF code.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetFVF']/*"/>	
            <unmanaged>SetFVF</unmanaged>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetFVF([In] D3DFVF FVF)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.EffectStateManager.VertexShader">
            <summary>	
            A callback function that must be implemented by a user to set a vertex shader.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetVertexShader']/*"/>	
            <unmanaged>SetVertexShader</unmanaged>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetVertexShader([In] IDirect3DVertexShader9* pShader)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.EffectStateManager.PixelShader">
            <summary>	
            A callback function that must be implemented by a user to set a pixel shader.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXEffectStateManager::SetPixelShader']/*"/>	
            <unmanaged>SetPixelShader</unmanaged>	
            <unmanaged>HRESULT ID3DXEffectStateManager::SetPixelShader([In] IDirect3DPixelShader9* pShader)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Font">
            <summary>	
            The <see cref="T:SharpDX.Direct3D9.Font"/> interface encapsulates the textures and resources needed to render a specific font on a specific device.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont']/*"/>	
            <unmanaged>ID3DXFont</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Font"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the Direct3D device associated with the font object.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the Direct3D device object associated with the font object.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            Note??Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Be sure to call <see cref="T:SharpDX.ComObject"/> when you are done using this <see cref="T:SharpDX.Direct3D9.Device"/> interface or you will have a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::GetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXFont::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.GetDescription(SharpDX.Direct3D9.FontDescription@)">
            <summary>	
            Gets a description of the current font object. GetDescW and GetDescA are identical to this method, except that a reference is returned to a <see cref="T:SharpDX.Direct3D9.FontDescription"/> or D3DXFONT_DESCA structure, respectively.	
            </summary>	
            <param name="descRef">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method describes Unicode font objects if UNICODE is defined. Otherwise GetDescA is called, which returns a reference to the D3DXFONT_DESCA structure.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::GetDescW']/*"/>	
            <unmanaged>HRESULT ID3DXFont::GetDescW([Out] D3DXFONT_DESCW* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.GetTextMetricsA(SharpDX.Win32Native.TextMetricA@)">
            <summary>	
            Retrieves font characteristics that are identified in a <see cref="T:SharpDX.Win32Native.TextMetric"/> structure. This method supports ANSI and Unicode compiler settings.	
            </summary>	
            <param name="textMetricsRef">No documentation.</param>	
            <returns>Nonzero if the function is successful; otherwise 0.</returns>	
            <remarks>	
            The compiler setting also determines the structure type. If Unicode is defined, the function returns a <see cref="T:SharpDX.Win32Native.TextMetric"/> structure. Otherwise, the function call returns a <see cref="T:SharpDX.Win32Native.TextMetricA"/> structure.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::GetTextMetricsA']/*"/>	
            <unmanaged>BOOL ID3DXFont::GetTextMetricsA([Out] TEXTMETRICA* pTextMetrics)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.GetTextMetrics(SharpDX.Win32Native.TextMetric@)">
            <summary>	
            Retrieves font characteristics that are identified in a <see cref="T:SharpDX.Win32Native.TextMetric"/> structure. This method supports ANSI and Unicode compiler settings.	
            </summary>	
            <param name="textMetricsRef">No documentation.</param>	
            <returns>Nonzero if the function is successful; otherwise 0.</returns>	
            <remarks>	
            The compiler setting also determines the structure type. If Unicode is defined, the function returns a <see cref="T:SharpDX.Win32Native.TextMetric"/> structure. Otherwise, the function call returns a <see cref="T:SharpDX.Win32Native.TextMetricA"/> structure.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::GetTextMetricsW']/*"/>	
            <unmanaged>BOOL ID3DXFont::GetTextMetricsW([Out] TEXTMETRICW* pTextMetrics)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.GetDC">
            <summary>	
            Returns a handle to a display device context (DC) that has the font set.	
            </summary>	
            <returns>Handle to a display DC.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::GetDC']/*"/>	
            <unmanaged>HDC ID3DXFont::GetDC()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.GetGlyphData(System.Int32,SharpDX.Direct3D9.Texture@,SharpDX.Rectangle@,System.Drawing.Point@)">
            <summary>	
            Returns information about the placement and orientation of a glyph in a character cell.	
            </summary>	
            <param name="glyph"><para>Glyph identifier.</para></param>	
            <param name="textureOut"><para>Address of a reference to a <see cref="T:SharpDX.Direct3D9.Texture"/> object that contains the glyph.</para></param>	
            <param name="blackBoxRef"><para>Pointer to the smallest rectangle object that completely encloses the glyph.</para></param>	
            <param name="cellIncRef"><para>Pointer to the two-dimensional vector that connects the origin of the current character cell to the origin of the next character cell. See <see cref="T:System.Drawing.Point"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::GetGlyphData']/*"/>	
            <unmanaged>HRESULT ID3DXFont::GetGlyphData([In] unsigned int Glyph,[Out] IDirect3DTexture9** ppTexture,[Out] RECT* pBlackBox,[Out] POINT* pCellInc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.PreloadCharacters(System.Int32,System.Int32)">
            <summary>	
            Loads a series of characters into video memory to improve the efficiency of rendering to the device.	
            </summary>	
            <param name="first"><para>ID of the first character to be loaded into video memory.</para></param>	
            <param name="last"><para>ID of the last character to be loaded into video memory.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            This method generates textures containing glyphs that represent the input characters. The glyphs are drawn as a series of triangles.Characters will not be rendered to the device; DrawText must still be called to render the characters. However, by pre-loading characters into video memory, DrawText will use substantially fewer CPU resources.This method internally converts characters to glyphs using the GDI function GetCharacterPlacement.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::PreloadCharacters']/*"/>	
            <unmanaged>HRESULT ID3DXFont::PreloadCharacters([In] unsigned int First,[In] unsigned int Last)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.PreloadGlyphs(System.Int32,System.Int32)">
            <summary>	
            Loads a series of glyphs into video memory to improve the efficiency of rendering to the device.	
            </summary>	
            <param name="first"><para>ID of the first glyph to be loaded into video memory.</para></param>	
            <param name="last"><para>ID of the last glyph to be loaded into video memory.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            This method generates textures that contain the input glyphs. The glyphs are drawn as a series of triangles.Glyphs will not be rendered to the device; DrawText must still be called to render the glyphs. However, by pre-loading glyphs into video memory, DrawText will use substantially fewer CPU resources.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::PreloadGlyphs']/*"/>	
            <unmanaged>HRESULT ID3DXFont::PreloadGlyphs([In] unsigned int First,[In] unsigned int Last)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.PreloadTextA(System.String,System.Int32)">
            <summary>	
            Loads formatted text into video memory to improve the efficiency of rendering to the device. This method supports ANSI and Unicode strings.	
            </summary>	
            <param name="stringRef"><para>Pointer to a string of characters to be loaded into video memory. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR; otherwise, the data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="count"><para>Number of characters in the text string.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to PreloadTextW. Otherwise, the function call resolves to PreloadTextA because ANSI strings are being used.This method generates textures that contain glyphs that represent the input text. The glyphs are drawn as a series of triangles.Text will not be rendered to the device; DrawText must still be called to render the text. However, by preloading text into video memory, DrawText will use substantially fewer CPU resources.This method internally converts characters to glyphs using the GDI function GetCharacterPlacement.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::PreloadTextA']/*"/>	
            <unmanaged>HRESULT ID3DXFont::PreloadTextA([In] const char* pString,[In] int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.PreloadText(System.String,System.Int32)">
            <summary>	
            Loads formatted text into video memory to improve the efficiency of rendering to the device. This method supports ANSI and Unicode strings.	
            </summary>	
            <param name="stringRef"><para>Pointer to a string of characters to be loaded into video memory. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR; otherwise, the data type resolves to LPCSTR. See Remarks.</para></param>	
            <param name="count"><para>Number of characters in the text string.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            The compiler setting also determines the function version. If Unicode is defined, the function call resolves to PreloadTextW. Otherwise, the function call resolves to PreloadTextA because ANSI strings are being used.This method generates textures that contain glyphs that represent the input text. The glyphs are drawn as a series of triangles.Text will not be rendered to the device; DrawText must still be called to render the text. However, by preloading text into video memory, DrawText will use substantially fewer CPU resources.This method internally converts characters to glyphs using the GDI function GetCharacterPlacement.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::PreloadTextW']/*"/>	
            <unmanaged>HRESULT ID3DXFont::PreloadTextW([In] const wchar_t* pString,[In] int Count)</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Direct3D9.Font.DrawTextA(SharpDX.Direct3D9.Sprite,System.String,System.Int32,SharpDX.Rectangle,System.Int32,SharpDX.Color4)" -->
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Direct3D9.Font.DrawText(SharpDX.Direct3D9.Sprite,System.String,System.Int32,SharpDX.Rectangle,System.Int32,SharpDX.Color4)" -->
        <member name="M:SharpDX.Direct3D9.Font.OnLostDevice">
            <summary>	
            Use this method to release all references to video memory resources and delete all stateblocks. This method should be called whenever a device is lost, or before resetting a device.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method should be called whenever the device is lost or before the user calls Reset. Even if the device was not actually lost, OnLostDevice is responsible for freeing stateblocks and other resources that may need to be released before resetting the device. As a result, the font object cannot be used again before calling Reset and then OnResetDevice.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::OnLostDevice']/*"/>	
            <unmanaged>HRESULT ID3DXFont::OnLostDevice()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Font.OnResetDevice">
            <summary>	
            Use this method to re-acquire resources and save initial state.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            OnResetDevice should be called each time the device is reset (using Reset), before any other methods are called. This is a good place to re-acquire video-memory resources and capture state blocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::OnResetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXFont::OnResetDevice()</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Font.Device">
            <summary>	
            Retrieves the Direct3D device associated with the font object.	
            </summary>	
            <remarks>	
            Note??Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Be sure to call <see cref="T:SharpDX.ComObject"/> when you are done using this <see cref="T:SharpDX.Direct3D9.Device"/> interface or you will have a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT ID3DXFont::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Font.Description">
            <summary>	
            Gets a description of the current font object. GetDescW and GetDescA are identical to this method, except that a reference is returned to a <see cref="T:SharpDX.Direct3D9.FontDescription"/> or D3DXFONT_DESCA structure, respectively.	
            </summary>	
            <remarks>	
            This method describes Unicode font objects if UNICODE is defined. Otherwise GetDescA is called, which returns a reference to the D3DXFONT_DESCA structure.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::GetDescW']/*"/>	
            <unmanaged>GetDescW</unmanaged>	
            <unmanaged>HRESULT ID3DXFont::GetDescW([Out] D3DXFONT_DESCW* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Font.DC">
            <summary>	
            Returns a handle to a display device context (DC) that has the font set.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFont::GetDC']/*"/>	
            <unmanaged>GetDC</unmanaged>	
            <unmanaged>HDC ID3DXFont::GetDC()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.IAllocateHierarchy">
            <summary>	
            This interface is implemented by the application to allocate or free frame and mesh container objects. Methods on this are called during loading and destroying frame hierarchies.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAllocateHierarchy']/*"/>	
            <unmanaged>ID3DXAllocateHierarchy</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.IAllocateHierarchy.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.IAllocateHierarchy"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.IAllocateHierarchy.CreateFrame(System.String,SharpDX.Direct3D9.Frame@)">
            <summary>	
            Requests allocation of a frame object.	
            </summary>	
            <param name="name"><para>Name of the frame to be created.</para></param>	
            <param name="newFrameOut"><para>Returns the created frame object.</para></param>	
            <returns>The return values of this method are implemented by an application programmer. In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR,  as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAllocateHierarchy::CreateFrame']/*"/>	
            <unmanaged>HRESULT ID3DXAllocateHierarchy::CreateFrame([In] const char* Name,[In] D3DXFRAME** ppNewFrame)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.IAllocateHierarchy.CreateMeshContainer(System.String,SharpDX.Direct3D9.MeshData,SharpDX.Direct3D9.ExtendedMaterial@,SharpDX.Direct3D9.EffectInstance,System.Int32,System.Int32,SharpDX.Direct3D9.SkinInfo,SharpDX.Direct3D9.MeshContainer@)">
            <summary>	
            Requests allocation of a mesh container object.	
            </summary>	
            <param name="name"><para>Name of the mesh.</para></param>	
            <param name="meshDataRef"><para>Pointer to the mesh data structure. See <see cref="T:SharpDX.Direct3D9.MeshData"/>.</para></param>	
            <param name="materialsRef"><para>Array of materials used in the mesh.</para></param>	
            <param name="effectInstancesRef"><para>Array of effect instances used in the mesh. See <see cref="T:SharpDX.Direct3D9.EffectInstance"/>.</para></param>	
            <param name="numMaterials"><para>Number of materials in the materials array.</para></param>	
            <param name="adjacencyRef"><para>Adjacency array for the mesh.</para></param>	
            <param name="skinInfoRef"><para>Pointer to the skin mesh object if skin data is found. See <see cref="T:SharpDX.Direct3D9.SkinInfo"/>.</para></param>	
            <param name="newMeshContainerOut"><para>Returns the created mesh container. See <see cref="T:SharpDX.Direct3D9.MeshContainer"/>.</para></param>	
            <returns>The return values of this method are implemented by an application programmer. In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message  from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAllocateHierarchy::CreateMeshContainer']/*"/>	
            <unmanaged>HRESULT ID3DXAllocateHierarchy::CreateMeshContainer([In] const char* Name,[In] const D3DXMESHDATA* pMeshData,[In] const D3DXMATERIAL* pMaterials,[In] const D3DXEFFECTINSTANCE* pEffectInstances,[In] unsigned int NumMaterials,[In] const unsigned int* pAdjacency,[In] ID3DXSkinInfo* pSkinInfo,[In] D3DXMESHCONTAINER** ppNewMeshContainer)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.IAllocateHierarchy.DestroyFrame(SharpDX.Direct3D9.Frame@)">
            <summary>	
            Requests deallocation of a frame object.	
            </summary>	
            <param name="frameToFreeRef"><para>Pointer to the frame to be deallocated.</para></param>	
            <returns>The return values of this method are implemented by an application programmer. In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message  from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAllocateHierarchy::DestroyFrame']/*"/>	
            <unmanaged>HRESULT ID3DXAllocateHierarchy::DestroyFrame([In] D3DXFRAME* pFrameToFree)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.IAllocateHierarchy.DestroyMeshContainer(SharpDX.Direct3D9.MeshContainer@)">
            <summary>	
            Requests deallocation of a mesh container object.	
            </summary>	
            <param name="meshContainerToFreeRef"><para>Pointer to the mesh container object to be deallocated.</para></param>	
            <returns>The return values of this method are implemented by an application programmer. In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message  from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXAllocateHierarchy::DestroyMeshContainer']/*"/>	
            <unmanaged>HRESULT ID3DXAllocateHierarchy::DestroyMeshContainer([In] D3DXMESHCONTAINER* pMeshContainerToFree)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ILoadUserData">
            <summary>	
            This interface is implemented by the application to save any additional user data embedded in .x files. An instance of this interface is passed to <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/>, and D3DX calls the appropriate method on this interface every time the appropriate data is encountered. For example, for each frame object in the .x file, <see cref="M:SharpDX.Direct3D9.ILoadUserData.LoadFrameChildData(SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.XFileData)"/> is called and passed the child data.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLoadUserData']/*"/>	
            <unmanaged>ID3DXLoadUserData</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ILoadUserData.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.ILoadUserData"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.ILoadUserData.LoadTopLevelData(SharpDX.Direct3D9.XFileData)">
            <summary>	
            Load top level data from a .x file.	
            </summary>	
            <param name="xofChildDataRef"><para>Pointer to a .x file data structure. This is defined in Dxfile.h.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLoadUserData::LoadTopLevelData']/*"/>	
            <unmanaged>HRESULT ID3DXLoadUserData::LoadTopLevelData([In] ID3DXFileData* pXofChildData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ILoadUserData.LoadFrameChildData(SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.XFileData)">
            <summary>	
            Load frame child data from a .x file.	
            </summary>	
            <param name="frameRef"><para>Pointer to a mesh container. See <see cref="T:SharpDX.Direct3D9.Frame"/>.</para></param>	
            <param name="xofChildDataRef"><para>Pointer to a .x file data structure. This is defined in Dxfile.h.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLoadUserData::LoadFrameChildData']/*"/>	
            <unmanaged>HRESULT ID3DXLoadUserData::LoadFrameChildData([In] D3DXFRAME* pFrame,[In] ID3DXFileData* pXofChildData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ILoadUserData.LoadMeshChildData(SharpDX.Direct3D9.MeshContainer@,SharpDX.Direct3D9.XFileData)">
            <summary>	
            Load mesh child data from a .x file.	
            </summary>	
            <param name="meshContainerRef"><para>Pointer to a mesh container. See <see cref="T:SharpDX.Direct3D9.MeshContainer"/>.</para></param>	
            <param name="xofChildDataRef"><para>Pointer to a .x file data structure. This is defined in Dxfile.h.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLoadUserData::LoadMeshChildData']/*"/>	
            <unmanaged>HRESULT ID3DXLoadUserData::LoadMeshChildData([In] D3DXMESHCONTAINER* pMeshContainer,[In] ID3DXFileData* pXofChildData)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Include">
            <summary>	
            ID3DXInclude is a user-implemented interface to provide callbacks for #include directives during shader compilation. Each of the methods in this interface must be implemented by the user which will then be used as callbacks to the application when one of the following occurs:	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXInclude']/*"/>	
            <unmanaged>ID3DXInclude</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Include.Open(SharpDX.Direct3D9.IncludeType,System.String,System.IO.Stream)">
            <summary>
            A user-implemented method for opening and reading the contents of a shader #include file.
            </summary>
            <param name="type">A <see cref="!:SharpDX.D3DCompiler.IncludeType"/>-typed value that indicates the location of the #include file.</param>
            <param name="fileName">Name of the #include file.</param>
            <param name="parentStream">Pointer to the container that includes the #include file.</param>
            <returns>Stream that is associated with fileName to be read. This reference remains valid until <see cref="!:SharpDX.D3DCompiler.Include.Close"/> is called.</returns>
            <unmanaged>HRESULT Open([None] D3D_INCLUDE_TYPE IncludeType,[None] const char* pFileName,[None] LPCVOID pParentData,[None] LPCVOID* ppData,[None] UINT* pBytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Include.Close(System.IO.Stream)">
            <summary>	
            A user-implemented method for closing a shader #include file.	
            </summary>	
            <remarks>	
            If <see cref="!:SharpDX.D3DCompiler.Include.Open"/> was successful, Close is guaranteed to be called before the API using the <see cref="!:SharpDX.D3DCompiler.Include"/> interface returns.	
            </remarks>	
            <param name="stream">This is a reference that was returned by the corresponding <see cref="!:SharpDX.D3DCompiler.Include.Open"/> call.</param>
            <unmanaged>HRESULT Close([None] LPCVOID pData)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.IndexBuffer">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> interface to manipulate an index buffer resource.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DIndexBuffer9']/*"/>	
            <unmanaged>IDirect3DIndexBuffer9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.IndexBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.IndexBuffer.Lock(System.Int32,System.Int32,System.IntPtr@,SharpDX.Direct3D9.LockFlags)">
            <summary>	
            Locks a range of index data and obtains a reference to the index buffer memory.	
            </summary>	
            <param name="offsetToLock"><para>Offset into the index data to lock, in bytes. Lock the entire index buffer by specifying 0 for both parameters, SizeToLock and OffsetToLock. </para></param>	
            <param name="sizeToLock"><para>Size of the index data to lock, in bytes. Lock the entire index buffer by specifying 0 for both parameters, SizeToLock and OffsetToLock.</para></param>	
            <param name="bDataOut"><para>VOID* reference to a memory buffer containing the returned index data. </para></param>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoOverwrite"/>  <para> For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            As a general rule, do not hold a lock across more than one frame. When working with index buffers, you are allowed to make multiple lock calls. However, you must ensure that the number of lock calls match the number of unlock calls. <see cref="M:SharpDX.Direct3D9.Device.DrawIndexedPrimitive(SharpDX.Direct3D9.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> calls will not succeed with any outstanding lock count on any currently set index buffer.The <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> and <see cref="F:SharpDX.Direct3D9.LockFlags.NoOverwrite"/> flags are valid only on buffers created with <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/>.See Programming Tips (Direct3D 9) for information about using <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.NoOverwrite"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DIndexBuffer9::Lock']/*"/>	
            <unmanaged>HRESULT IDirect3DIndexBuffer9::Lock([In] unsigned int OffsetToLock,[In] unsigned int SizeToLock,[Out] void** ppbData,[In] D3DLOCK Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.IndexBuffer.Unlock">
            <summary>	
            Unlocks index data.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DIndexBuffer9::Unlock']/*"/>	
            <unmanaged>HRESULT IDirect3DIndexBuffer9::Unlock()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.IndexBuffer.GetDescription(SharpDX.Direct3D9.IndexBufferDescription@)">
            <summary>	
            Retrieves a description of the index buffer resource.	
            </summary>	
            <param name="descRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.IndexBufferDescription"/> structure, describing the returned index buffer. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if the argument is invalid.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DIndexBuffer9::GetDesc']/*"/>	
            <unmanaged>HRESULT IDirect3DIndexBuffer9::GetDesc([Out] D3DINDEXBUFFER_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.IndexBuffer.#ctor(SharpDX.Direct3D9.Device,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="sizeInBytes">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <param name="sixteenBit">if set to <c>true</c> use 16bit index buffer, otherwise, use 32bit index buffer.</param>
            <unmanaged>HRESULT IDirect3DDevice9::CreateIndexBuffer([In] unsigned int Length,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DIndexBuffer9** ppIndexBuffer,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.IndexBuffer.#ctor(SharpDX.Direct3D9.Device,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool,System.Boolean,System.IntPtr@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.IndexBuffer"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="sizeInBytes">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <param name="sixteenBit">if set to <c>true</c> use 16bit index buffer, otherwise, use 32bit index buffer.</param>
            <param name="sharedHandle">The shared handle.</param>
            <unmanaged>HRESULT IDirect3DDevice9::CreateIndexBuffer([In] unsigned int Length,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DIndexBuffer9** ppIndexBuffer,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.IndexBuffer.Lock(System.Int32,System.Int32,SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks the specified index buffer.
            </summary>
            <param name="offsetToLock">The offset in the buffer.</param>
            <param name="sizeToLock">The size of the buffer to lock.</param>
            <param name="lockFlags">The lock flags.</param>
            <returns>A <see cref="T:SharpDX.DataStream"/> containing the locked index buffer.</returns>
            <unmanaged>HRESULT IDirect3DIndexBuffer9::Lock([In] unsigned int OffsetToLock,[In] unsigned int SizeToLock,[In] void** ppbData,[In] unsigned int Flags)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.IndexBuffer.Description">
            <summary>	
            Retrieves a description of the index buffer resource.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DIndexBuffer9::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT IDirect3DIndexBuffer9::GetDesc([Out] D3DINDEXBUFFER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.ISaveUserData">
            <summary>	
            This interface is implemented by the application to save any additional user data embedded in .x files. An instance of this interface is passed to <see cref="M:SharpDX.Direct3D9.D3DX9.SaveMeshHierarchyToFileW(System.String,System.Int32,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController,SharpDX.Direct3D9.ISaveUserData)"/>, and D3DX calls the appropriate method on this interface every time the appropriate data is encountered. For example, for each frame object in the .x file, <see cref="M:SharpDX.Direct3D9.ISaveUserData.AddFrameChildData(SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.XFileSaveObject,SharpDX.Direct3D9.XFileSaveData)"/> is called and passed the child data.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSaveUserData']/*"/>	
            <unmanaged>ID3DXSaveUserData</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ISaveUserData.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.ISaveUserData"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.ISaveUserData.AddFrameChildData(SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.XFileSaveObject,SharpDX.Direct3D9.XFileSaveData)">
            <summary>	
            Add child data to the frame.	
            </summary>	
            <param name="frameRef"><para>Pointer to a mesh container. See <see cref="T:SharpDX.Direct3D9.Frame"/>.</para></param>	
            <param name="xofSaveRef"><para>Pointer to a .x file save object. Use the reference to call <see cref="M:SharpDX.Direct3D9.XFileSaveObject.AddDataObject(System.Guid,System.String,System.Guid,SharpDX.PointerSize,System.IntPtr,SharpDX.Direct3D9.XFileSaveData@)"/> to add a child data object. Do not save the data with <see cref="M:SharpDX.Direct3D9.XFileSaveObject.Save"/>.</para></param>	
            <param name="xofFrameDataRef"><para>Pointer to a .x file data node. Use the reference to call <see cref="M:SharpDX.Direct3D9.XFileSaveData.AddDataObject(System.Guid,System.String,System.Guid,SharpDX.PointerSize,System.IntPtr,SharpDX.Direct3D9.XFileSaveData@)"/> to add a child data object.</para></param>	
            <returns>The return values of this method are implemented by an application programmer. In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <remarks>	
            <see cref="M:SharpDX.Direct3D9.ISaveUserData.RegisterTemplates(SharpDX.Direct3D9.XFile)"/> and <see cref="M:SharpDX.Direct3D9.ISaveUserData.SaveTemplates(SharpDX.Direct3D9.XFileSaveObject)"/> provide a mechanism for adding a template to a .x file for saving user data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSaveUserData::AddFrameChildData']/*"/>	
            <unmanaged>HRESULT ID3DXSaveUserData::AddFrameChildData([In] const D3DXFRAME* pFrame,[In] ID3DXFileSaveObject* pXofSave,[In] ID3DXFileSaveData* pXofFrameData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ISaveUserData.AddMeshChildData(SharpDX.Direct3D9.MeshContainer@,SharpDX.Direct3D9.XFileSaveObject,SharpDX.Direct3D9.XFileSaveData)">
            <summary>	
            Add child data to the mesh.	
            </summary>	
            <param name="meshContainerRef"><para>Pointer to a mesh container. See <see cref="T:SharpDX.Direct3D9.MeshContainer"/>.</para></param>	
            <param name="xofSaveRef"><para>Pointer to a .x file save object. Use the reference to call <see cref="M:SharpDX.Direct3D9.XFileSaveObject.AddDataObject(System.Guid,System.String,System.Guid,SharpDX.PointerSize,System.IntPtr,SharpDX.Direct3D9.XFileSaveData@)"/> to add a child data object. Do not save the data with <see cref="M:SharpDX.Direct3D9.XFileSaveObject.Save"/>.</para></param>	
            <param name="xofMeshDataRef"><para>Pointer to a .x file data node. Use the reference to call <see cref="M:SharpDX.Direct3D9.XFileSaveData.AddDataObject(System.Guid,System.String,System.Guid,SharpDX.PointerSize,System.IntPtr,SharpDX.Direct3D9.XFileSaveData@)"/> to add a child data object.</para></param>	
            <returns>The return values of this method are implemented by an application programmer. In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSaveUserData::AddMeshChildData']/*"/>	
            <unmanaged>HRESULT ID3DXSaveUserData::AddMeshChildData([In] const D3DXMESHCONTAINER* pMeshContainer,[In] ID3DXFileSaveObject* pXofSave,[In] ID3DXFileSaveData* pXofMeshData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ISaveUserData.AddTopLevelDataObjectsPre(SharpDX.Direct3D9.XFileSaveObject)">
            <summary>	
            Add a top level object before the frame hierarchy.	
            </summary>	
            <param name="xofSaveRef"><para>Pointer to a .x file save object. Use this reference to call IDirectXFileSaveObject::CreateDataObject to create the data object to be saved. Then call IDirectXFileSaveObject::SaveData to save the data.</para></param>	
            <returns>The return values of this method are implemented by an application programmer. In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSaveUserData::AddTopLevelDataObjectsPre']/*"/>	
            <unmanaged>HRESULT ID3DXSaveUserData::AddTopLevelDataObjectsPre([In] ID3DXFileSaveObject* pXofSave)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ISaveUserData.AddTopLevelDataObjectsPost(SharpDX.Direct3D9.XFileSaveObject)">
            <summary>	
            Add a top level object after the frame hierarchy.	
            </summary>	
            <param name="xofSaveRef"><para>Pointer to a .x file save object. Use this reference to call IDirectXFileSaveObject::CreateDataObject to create the data object to be saved. Then call IDirectXFileSaveObject::SaveData to save the data.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSaveUserData::AddTopLevelDataObjectsPost']/*"/>	
            <unmanaged>HRESULT ID3DXSaveUserData::AddTopLevelDataObjectsPost([In] ID3DXFileSaveObject* pXofSave)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ISaveUserData.RegisterTemplates(SharpDX.Direct3D9.XFile)">
            <summary>	
            A callback for the user to register a .x file template.	
            </summary>	
            <param name="xFileApiRef"><para>Use this reference to register user-defined .x file templates. See <see cref="T:SharpDX.Direct3D9.XFile"/>. Do not use this parameter to add data objects.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <remarks>	
            ID3DXSaveUserData::RegisterTemplates and <see cref="M:SharpDX.Direct3D9.ISaveUserData.SaveTemplates(SharpDX.Direct3D9.XFileSaveObject)"/> provide a mechanism for adding a template to a .x file for saving user data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSaveUserData::RegisterTemplates']/*"/>	
            <unmanaged>HRESULT ID3DXSaveUserData::RegisterTemplates([In] ID3DXFile* pXFileApi)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ISaveUserData.SaveTemplates(SharpDX.Direct3D9.XFileSaveObject)">
            <summary>	
            A callback for the user to save a .x file template.	
            </summary>	
            <param name="xofSaveRef"><para>Pointer to a .x file save object. Do not use this parameter to add data objects. See <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/>.</para></param>	
            <returns>The return values of this method are implemented by an application programmer.In general, if no error occurs, program the method to return <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. Otherwise, program the method to return an appropriate error message from D3DERR or D3DXERR, as this will cause <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshHierarchyFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.IAllocateHierarchy,SharpDX.Direct3D9.ILoadUserData,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D9.AnimationController@)"/> to fail also, and return the error.</returns>	
            <remarks>	
            <see cref="M:SharpDX.Direct3D9.ISaveUserData.RegisterTemplates(SharpDX.Direct3D9.XFile)"/> and <see cref="M:SharpDX.Direct3D9.ISaveUserData.SaveTemplates(SharpDX.Direct3D9.XFileSaveObject)"/> provide a mechanism for adding a template to a .x file for saving user data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSaveUserData::SaveTemplates']/*"/>	
            <unmanaged>HRESULT ID3DXSaveUserData::SaveTemplates([In] ID3DXFileSaveObject* pXofSave)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.KeyframedAnimationSet">
            <summary>	
            An application uses the methods of this interface to implement a key frame animation set.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet']/*"/>	
            <unmanaged>ID3DXKeyframedAnimationSet</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.KeyframedAnimationSet"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetPlaybackType">
            <summary>	
            Gets the type of the animation set playback loop.	
            </summary>	
            <returns>Type of the animation set playback loop. See <see cref="T:SharpDX.Direct3D9.PlaybackType"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetPlaybackType']/*"/>	
            <unmanaged>D3DXPLAYBACK_TYPE ID3DXKeyframedAnimationSet::GetPlaybackType()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetSourceTicksPerSecond">
            <summary>	
            Gets the number of animation key frame ticks that occur per second.	
            </summary>	
            <returns>Number of animation key frame ticks that occur per second.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetSourceTicksPerSecond']/*"/>	
            <unmanaged>double ID3DXKeyframedAnimationSet::GetSourceTicksPerSecond()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetNumScaleKeys(System.Int32)">
            <summary>	
            Gets the number of scale keys in the specified key frame animation.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <returns>Number of scale keys in the specified key frame animation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetNumScaleKeys']/*"/>	
            <unmanaged>unsigned int ID3DXKeyframedAnimationSet::GetNumScaleKeys([In] unsigned int Animation)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetScaleKeys(System.Int32,SharpDX.Direct3D9.ScaleKey)">
            <summary>	
            Fills an array with scale key data used for key frame animation.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="scaleKeysRef"><para>Pointer to a user-allocated array of <see cref="T:SharpDX.Direct3D9.ScaleKey"/> vectors that the method is to fill with animation scale data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetScaleKeys']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::GetScaleKeys([In] unsigned int Animation,[In] D3DXKEY_VECTOR3* pScaleKeys)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetScaleKey(System.Int32,System.Int32,SharpDX.Direct3D9.ScaleKey)">
            <summary>	
            Get scale information for a specific key frame in the animation set.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="key"><para>Key frame.</para></param>	
            <param name="scaleKeyRef"><para>Pointer to the scale data. See  <see cref="T:SharpDX.Direct3D9.ScaleKey"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetScaleKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::GetScaleKey([In] unsigned int Animation,[In] unsigned int Key,[In] D3DXKEY_VECTOR3* pScaleKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.SetScaleKey(System.Int32,System.Int32,SharpDX.Direct3D9.ScaleKey)">
            <summary>	
            Set scale information for a specific key frame in the animation set.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="key"><para>Key frame.</para></param>	
            <param name="scaleKeyRef"><para>Pointer to the scale data. See <see cref="T:SharpDX.Direct3D9.ScaleKey"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::SetScaleKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::SetScaleKey([In] unsigned int Animation,[In] unsigned int Key,[In] D3DXKEY_VECTOR3* pScaleKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetNumRotationKeys(System.Int32)">
            <summary>	
            Gets the number of rotation keys in the specified key frame animation.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <returns>Number of rotation keys in the specified key frame animation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetNumRotationKeys']/*"/>	
            <unmanaged>unsigned int ID3DXKeyframedAnimationSet::GetNumRotationKeys([In] unsigned int Animation)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetRotationKeys(System.Int32,SharpDX.Direct3D9.RotationKey@)">
            <summary>	
            Fills an array with rotational key data used for key frame animation.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="rotationKeysRef"><para>Pointer to a user-allocated array of <see cref="T:SharpDX.Direct3D9.RotationKey"/> quaternions that the method is to fill with animation rotation data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetRotationKeys']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::GetRotationKeys([In] unsigned int Animation,[In] D3DXKEY_QUATERNION* pRotationKeys)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetRotationKey(System.Int32,System.Int32,SharpDX.Direct3D9.RotationKey@)">
            <summary>	
            Get rotation information for a specific key frame in the animation set.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="key"><para>Key frame.</para></param>	
            <param name="rotationKeyRef"><para>Pointer to the rotation data. See  <see cref="T:SharpDX.Direct3D9.RotationKey"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetRotationKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::GetRotationKey([In] unsigned int Animation,[In] unsigned int Key,[In] D3DXKEY_QUATERNION* pRotationKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.SetRotationKey(System.Int32,System.Int32,SharpDX.Direct3D9.RotationKey@)">
            <summary>	
            Set rotation information for a specific key frame in the animation set.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="key"><para>Key frame.</para></param>	
            <param name="rotationKeyRef"><para>Pointer to the rotation data. See <see cref="T:SharpDX.Direct3D9.ScaleKey"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::SetRotationKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::SetRotationKey([In] unsigned int Animation,[In] unsigned int Key,[In] D3DXKEY_QUATERNION* pRotationKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetNumTranslationKeys(System.Int32)">
            <summary>	
            Gets the number of translation keys in the specified key frame animation.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <returns>Number of translation keys in the specified key frame animation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetNumTranslationKeys']/*"/>	
            <unmanaged>unsigned int ID3DXKeyframedAnimationSet::GetNumTranslationKeys([In] unsigned int Animation)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetTranslationKeys(System.Int32,SharpDX.Direct3D9.ScaleKey)">
            <summary>	
            Fills an array with translational key data used for key frame animation.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="translationKeysRef"><para>Pointer to a user-allocated array of <see cref="T:SharpDX.Direct3D9.ScaleKey"/> vectors that the method is to fill with animation translation data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetTranslationKeys']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::GetTranslationKeys([In] unsigned int Animation,[In] D3DXKEY_VECTOR3* pTranslationKeys)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetTranslationKey(System.Int32,System.Int32,SharpDX.Direct3D9.ScaleKey)">
            <summary>	
            Get translation information for a specific key frame in the animation set.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="key"><para>Key Frame.</para></param>	
            <param name="translationKeyRef"><para>Pointer to the rotation information. See <see cref="T:SharpDX.Direct3D9.ScaleKey"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetTranslationKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::GetTranslationKey([In] unsigned int Animation,[In] unsigned int Key,[In] D3DXKEY_VECTOR3* pTranslationKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.SetTranslationKey(System.Int32,System.Int32,SharpDX.Direct3D9.ScaleKey)">
            <summary>	
            Set translation information for a specific key frame in the animation set.	
            </summary>	
            <param name="animation"><para>Animation index.</para></param>	
            <param name="key"><para>Key Frame.</para></param>	
            <param name="translationKeyRef"><para>Pointer to the translation data. See <see cref="T:SharpDX.Direct3D9.ScaleKey"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::SetTranslationKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::SetTranslationKey([In] unsigned int Animation,[In] unsigned int Key,[In] D3DXKEY_VECTOR3* pTranslationKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetNumCallbackKeys">
            <summary>	
            Gets the number of callback keys in the animation set.	
            </summary>	
            <returns>Number of callback keys in the animation set.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetNumCallbackKeys']/*"/>	
            <unmanaged>unsigned int ID3DXKeyframedAnimationSet::GetNumCallbackKeys()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetCallbackKeys(SharpDX.Direct3D9.CallbackKey)">
            <summary>	
            Fills an array with callback key data used for key frame animation.	
            </summary>	
            <param name="callbackKeysRef"><para>Pointer to a user-allocated array of <see cref="T:SharpDX.Direct3D9.CallbackKey"/> structures that the method is to fill with callback data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetCallbackKeys']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::GetCallbackKeys([In] D3DXKEY_CALLBACK* pCallbackKeys)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.GetCallbackKey(System.Int32,SharpDX.Direct3D9.CallbackKey)">
            <summary>	
            Gets information about a specific callback in the animation set.	
            </summary>	
            <param name="key"><para>Animation index.</para></param>	
            <param name="callbackKeyRef"><para>Pointer to the callback function.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetCallbackKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::GetCallbackKey([In] unsigned int Key,[In] D3DXKEY_CALLBACK* pCallbackKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.SetCallbackKey(System.Int32,SharpDX.Direct3D9.CallbackKey)">
            <summary>	
            Sets information about a specific callback in the animation set.	
            </summary>	
            <param name="key"><para>Animation index.</para></param>	
            <param name="callbackKeyRef"><para>Pointer to the callback function.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::SetCallbackKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::SetCallbackKey([In] unsigned int Key,[In] D3DXKEY_CALLBACK* pCallbackKey)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.UnregisterScaleKey(System.Int32,System.Int32)">
            <summary>	
            Removes the scale data at the specified key frame.	
            </summary>	
            <param name="animation"><para>Animation identifier.</para></param>	
            <param name="key"><para>Key frame.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method is slow and should not be used after an animation has begun to play.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::UnregisterScaleKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::UnregisterScaleKey([In] unsigned int Animation,[In] unsigned int Key)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.UnregisterRotationKey(System.Int32,System.Int32)">
            <summary>	
            Removes the rotation data at the specified key frame.	
            </summary>	
            <param name="animation"><para>Animation identifier.</para></param>	
            <param name="key"><para>Key frame.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method is slow and should not be used after an animation has begun to play.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::UnregisterRotationKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::UnregisterRotationKey([In] unsigned int Animation,[In] unsigned int Key)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.UnregisterTranslationKey(System.Int32,System.Int32)">
            <summary>	
            Removes the translation data at the specified key frame.	
            </summary>	
            <param name="animation"><para>Animation identifier.</para></param>	
            <param name="key"><para>Key frame.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method is slow and should not be used after an animation has begun to play.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::UnregisterTranslationKey']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::UnregisterTranslationKey([In] unsigned int Animation,[In] unsigned int Key)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.RegisterAnimationSRTKeys(System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.ScaleKey,SharpDX.Direct3D9.RotationKey@,SharpDX.Direct3D9.ScaleKey,System.Int32)">
            <summary>	
            Register the scale, rotate, and translate (SRT) key frame data for an animation.	
            </summary>	
            <param name="nameRef"><para>Pointer to the animation name.</para></param>	
            <param name="numScaleKeys"><para>Number of scale keys.</para></param>	
            <param name="numRotationKeys"><para>Number of rotation keys.</para></param>	
            <param name="numTranslationKeys"><para>Number of translation keys.</para></param>	
            <param name="scaleKeysRef"><para>Address of a reference to a user-allocated array of <see cref="T:SharpDX.Direct3D9.ScaleKey"/> vectors that the method fills with scale data.</para></param>	
            <param name="rotationKeysRef"><para>Address of a reference to a user-allocated array of <see cref="T:SharpDX.Direct3D9.RotationKey"/> quaternions that the method fills with rotation data.</para></param>	
            <param name="translationKeysRef"><para>Address of a reference to a user-allocated array of <see cref="T:SharpDX.Direct3D9.ScaleKey"/> vectors that the method fills with translation data.</para></param>	
            <param name="animationIndexRef"><para>Returns the animation index.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::RegisterAnimationSRTKeys']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::RegisterAnimationSRTKeys([In] const char* pName,[In] unsigned int NumScaleKeys,[In] unsigned int NumRotationKeys,[In] unsigned int NumTranslationKeys,[In] const D3DXKEY_VECTOR3* pScaleKeys,[In] const D3DXKEY_QUATERNION* pRotationKeys,[In] const D3DXKEY_VECTOR3* pTranslationKeys,[In] unsigned int* pAnimationIndex)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.Compress(System.Int32,System.Single,SharpDX.Direct3D9.Frame@,SharpDX.Direct3D.Blob@)">
            <summary>	
            Transforms animations in an animation set into a compressed format and returns a reference to the buffer that stores the compressed data.	
            </summary>	
            <param name="flags"><para>One of the <see cref="T:SharpDX.Direct3D9.CompressionFlags"/> values that define the compression mode used for storing compressed animation set data. <see cref="F:SharpDX.Direct3D9.CompressionFlags.Default"/> is the only value currently supported.</para></param>	
            <param name="lossiness"><para>Desired compression loss ratio, in the range from 0 to 1.</para></param>	
            <param name="hierarchyRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Frame"/> transformation frame hierarchy. Can be <c>null</c>.</para></param>	
            <param name="compressedDataOut"><para>Address of a reference to the <see cref="T:SharpDX.Direct3D.Blob"/> compressed animation set.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following values: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::Compress']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::Compress([In] unsigned int Flags,[In] float Lossiness,[In] D3DXFRAME* pHierarchy,[In] ID3DXBuffer** ppCompressedData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.KeyframedAnimationSet.UnregisterAnimation(System.Int32)">
            <summary>	
            Remove the animation data from the animation set.	
            </summary>	
            <param name="index"><para>The animation index.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::UnregisterAnimation']/*"/>	
            <unmanaged>HRESULT ID3DXKeyframedAnimationSet::UnregisterAnimation([In] unsigned int Index)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.KeyframedAnimationSet.PlaybackType">
            <summary>	
            Gets the type of the animation set playback loop.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetPlaybackType']/*"/>	
            <unmanaged>GetPlaybackType</unmanaged>	
            <unmanaged>D3DXPLAYBACK_TYPE ID3DXKeyframedAnimationSet::GetPlaybackType()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.KeyframedAnimationSet.SourceTicksPerSecond">
            <summary>	
            Gets the number of animation key frame ticks that occur per second.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetSourceTicksPerSecond']/*"/>	
            <unmanaged>GetSourceTicksPerSecond</unmanaged>	
            <unmanaged>double ID3DXKeyframedAnimationSet::GetSourceTicksPerSecond()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.KeyframedAnimationSet.NumCallbackKeys">
            <summary>	
            Gets the number of callback keys in the animation set.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXKeyframedAnimationSet::GetNumCallbackKeys']/*"/>	
            <unmanaged>GetNumCallbackKeys</unmanaged>	
            <unmanaged>unsigned int ID3DXKeyframedAnimationSet::GetNumCallbackKeys()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Line">
            <summary>	
            The <see cref="T:SharpDX.Direct3D9.Line"/> interface implements line drawing using textured triangles.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine']/*"/>	
            <unmanaged>ID3DXLine</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Line"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the Direct3D device associated with the line object.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the Direct3D device object associated with the line object.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXLine::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.Begin">
            <summary>	
            Prepares a device for drawing lines.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            Calling <see cref="M:SharpDX.Direct3D9.Line.Begin"/> is optional. If called outside of a <see cref="M:SharpDX.Direct3D9.Line.Begin"/>/<see cref="M:SharpDX.Direct3D9.Line.End"/> sequence, the draw functions will internally call <see cref="M:SharpDX.Direct3D9.Line.Begin"/> and <see cref="M:SharpDX.Direct3D9.Line.End"/>. To avoid extra overhead, this method should be used if more than one draw function will be called successively.This method must be called from inside an <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> and <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> sequence.ID3DXLine::Begin cannot be used as a substitute for either <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> or <see cref="M:SharpDX.Direct3D9.RenderToSurface.BeginScene(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Viewport@)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::Begin']/*"/>	
            <unmanaged>HRESULT ID3DXLine::Begin()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.Draw(SharpDX.Vector2,System.Int32,SharpDX.Color4)">
            <summary>	
            Draws a line strip in screen space. Input is in the form of an array that defines points (of <see cref="T:SharpDX.Vector2"/>) on the line strip.	
            </summary>	
            <param name="vertexListRef">No documentation.</param>	
            <param name="dwVertexListCount">No documentation.</param>	
            <param name="color">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::Draw']/*"/>	
            <unmanaged>HRESULT ID3DXLine::Draw([In] const D3DXVECTOR2* pVertexList,[In] unsigned int dwVertexListCount,[In] D3DCOLOR Color)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.DrawTransform(SharpDX.Vector3,System.Int32,SharpDX.Matrix@,SharpDX.Color4)">
            <summary>	
            Draws a line strip in screen space with a specified input transformation matrix.	
            </summary>	
            <param name="vertexListRef"><para>Array of vertices that make up the line. See <see cref="T:SharpDX.Vector3"/>.</para></param>	
            <param name="dwVertexListCount"><para>Number of vertices in the vertex list.</para></param>	
            <param name="transformRef"><para>A scale, rotate, and translate (SRT) matrix for transforming the points. See <see cref="T:SharpDX.Matrix"/>. If this matrix is a projection matrix, any stippled lines will be drawn with a perspective-correct stippling pattern. Or, you can transform the vertices and use <see cref="M:SharpDX.Direct3D9.Line.Draw(SharpDX.Vector2,System.Int32,SharpDX.Color4)"/> to draw the line with a nonperspective-correct stipple pattern.</para></param>	
            <param name="color"><para>Color of the line. See <see cref="T:SharpDX.Color4"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::DrawTransform']/*"/>	
            <unmanaged>HRESULT ID3DXLine::DrawTransform([In] const D3DXVECTOR3* pVertexList,[In] unsigned int dwVertexListCount,[In] const D3DXMATRIX* pTransform,[In] D3DCOLOR Color)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.SetPattern(System.Int32)">
            <summary>	
            Applies a stipple pattern to the line.	
            </summary>	
            <param name="dwPattern"><para>Describes the stipple pattern: 1 is opaque, 0 is transparent.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::SetPattern']/*"/>	
            <unmanaged>HRESULT ID3DXLine::SetPattern([In] unsigned int dwPattern)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.GetPattern">
            <summary>	
            Gets the line stipple pattern.	
            </summary>	
            <returns>Returns the line stipple pattern: 1 is opaque, 0 is transparent.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetPattern']/*"/>	
            <unmanaged>unsigned int ID3DXLine::GetPattern()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.SetPatternScale(System.Single)">
            <summary>	
            Stretches the stipple pattern along the line direction.	
            </summary>	
            <param name="fPatternScale"><para>Stipple pattern scaling value. 1.0f is the default value and represents no scaling. A value less than 1.0f shrinks the pattern, and a value greater than 1.0 stretches the pattern.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::SetPatternScale']/*"/>	
            <unmanaged>HRESULT ID3DXLine::SetPatternScale([In] float fPatternScale)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.GetPatternScale">
            <summary>	
            Gets the stipple-pattern scale value.	
            </summary>	
            <returns>Returns the value used to scale the stipple-pattern. 1.0f is the default value and represents no scaling. A value less than 1.0f shrinks the pattern, and a value greater than 1.0 stretches the pattern.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetPatternScale']/*"/>	
            <unmanaged>float ID3DXLine::GetPatternScale()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.SetWidth(System.Single)">
            <summary>	
            Specifies the thickness of the line.	
            </summary>	
            <param name="fWidth"><para>Describes the line width.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::SetWidth']/*"/>	
            <unmanaged>HRESULT ID3DXLine::SetWidth([In] float fWidth)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.GetWidth">
            <summary>	
            Gets the thickness of the line.	
            </summary>	
            <returns>The line thickness.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetWidth']/*"/>	
            <unmanaged>float ID3DXLine::GetWidth()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.SetAntialias(System.Boolean)">
            <summary>	
            Toggles line antialiasing.	
            </summary>	
            <param name="bAntialias"><para>Toggles antialiasing on and off. TRUE turns antialiasing on, and <see cref="F:SharpDX.Result.False"/> turns antialiasing off.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::SetAntialias']/*"/>	
            <unmanaged>HRESULT ID3DXLine::SetAntialias([In] BOOL bAntialias)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.GetAntialias">
            <summary>	
            Gets the line antialiasing state.	
            </summary>	
            <returns>Returns the antialiasing switch value. TRUE means antialiasing is on, and <see cref="F:SharpDX.Result.False"/> means antialiasing is off.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetAntialias']/*"/>	
            <unmanaged>BOOL ID3DXLine::GetAntialias()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.SetGLLines(System.Boolean)">
            <summary>	
            Toggles the mode to draw OpenGL-style lines.	
            </summary>	
            <param name="bGLLines"><para>Toggles OpenGL-style line drawing. TRUE enables OpenGL-style lines, and <see cref="F:SharpDX.Result.False"/> enables Direct3D-style lines.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::SetGLLines']/*"/>	
            <unmanaged>HRESULT ID3DXLine::SetGLLines([In] BOOL bGLLines)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.GetGLLines">
            <summary>	
            Gets the OpenGL-style line-drawing mode.	
            </summary>	
            <returns>Returns TRUE if OpenGL-style lines are enabled, and <see cref="F:SharpDX.Result.False"/> if Direct3D-style lines are enabled.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetGLLines']/*"/>	
            <unmanaged>BOOL ID3DXLine::GetGLLines()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.End">
            <summary>	
            Restores the device state to how it was when <see cref="M:SharpDX.Direct3D9.Line.Begin"/> was called.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            ID3DXLine::End cannot be used as a substitute for either <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> or <see cref="M:SharpDX.Direct3D9.RenderToSurface.EndScene(System.Int32)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::End']/*"/>	
            <unmanaged>HRESULT ID3DXLine::End()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.OnLostDevice">
            <summary>	
            Use this method to release all references to video memory resources and delete all stateblocks. This method should be called whenever a device is lost, or before resetting a device.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method should be called whenever the device is lost or before the user calls <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>. Even if the device was not actually lost, <see cref="M:SharpDX.Direct3D9.Line.OnLostDevice"/> is responsible for freeing stateblocks and other resources that may need to be released before resetting the device. As a result, the font object cannot be used again before calling <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> and then <see cref="M:SharpDX.Direct3D9.Line.OnResetDevice"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::OnLostDevice']/*"/>	
            <unmanaged>HRESULT ID3DXLine::OnLostDevice()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Line.OnResetDevice">
            <summary>	
            Use this method to re-acquire resources and save initial state.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            ID3DXLine::OnResetDevice should be called each time the device is reset (using <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>), before any other methods are called. This is a good place to re-acquire video-memory resources and capture state blocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::OnResetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXLine::OnResetDevice()</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Line.Device">
            <summary>	
            Retrieves the Direct3D device associated with the line object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT ID3DXLine::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Line.Pattern">
            <summary>	
            Gets the line stipple pattern.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetPattern']/*"/>	
            <unmanaged>GetPattern</unmanaged>	
            <unmanaged>unsigned int ID3DXLine::GetPattern()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Line.PatternScale">
            <summary>	
            Gets the stipple-pattern scale value.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetPatternScale']/*"/>	
            <unmanaged>GetPatternScale</unmanaged>	
            <unmanaged>float ID3DXLine::GetPatternScale()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Line.Width">
            <summary>	
            Gets the thickness of the line.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetWidth']/*"/>	
            <unmanaged>GetWidth</unmanaged>	
            <unmanaged>float ID3DXLine::GetWidth()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Line.Antialias">
            <summary>	
            Gets the line antialiasing state.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetAntialias']/*"/>	
            <unmanaged>GetAntialias</unmanaged>	
            <unmanaged>BOOL ID3DXLine::GetAntialias()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Line.GLLines">
            <summary>	
            Gets the OpenGL-style line-drawing mode.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXLine::GetGLLines']/*"/>	
            <unmanaged>GetGLLines</unmanaged>	
            <unmanaged>BOOL ID3DXLine::GetGLLines()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Mesh">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.Mesh"/> interface to manipulate mesh objects.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXMesh']/*"/>	
            <unmanaged>ID3DXMesh</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Mesh.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Mesh"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Mesh.LockAttributeBuffer(System.Int32,System.Int32)">
            <summary>	
            Locks the mesh buffer that contains the mesh attribute data, and returns a reference to it.	
            </summary>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>  <para>For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>.</para></param>	
            <param name="dataOut"><para>Address of a reference to a buffer containing a DWORD for each face in the mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If <see cref="M:SharpDX.Direct3D9.Mesh.Optimize(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)"/> has been called, the mesh will also have an attribute table that can be accessed using the <see cref="M:SharpDX.Direct3D9.BaseMesh.GetAttributeTable(SharpDX.Direct3D9.AttributeRange@,System.Int32@)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXMesh::LockAttributeBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXMesh::LockAttributeBuffer([In] unsigned int Flags,[In] unsigned int** ppData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Mesh.UnlockAttributeBuffer">
            <summary>	
            Unlocks an attribute buffer.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXMesh::UnlockAttributeBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXMesh::UnlockAttributeBuffer()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Mesh.Optimize(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Generates a new mesh with reordered faces and vertices to optimize drawing performance.	
            </summary>	
            <param name="flags"><para>Specifies the type of optimization to perform. This parameter can be set to a combination of one or more flags from D3DXMESHOPT and D3DXMESH (except <see cref="F:SharpDX.Direct3D9.MeshFlags.Use32Bit"/>, <see cref="F:SharpDX.Direct3D9.MeshFlags.IndexBufferWriteOnly"/>, and <see cref="F:SharpDX.Direct3D9.MeshFlags.WriteOnly"/>).</para></param>	
            <param name="adjacencyInRef"><para>Pointer to an array of three DWORDs per face that specifies the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0xffffffff. See Remarks.</para></param>	
            <param name="adjacencyOutRef"><para>Pointer to an array of three DWORDs per face that specifies the three neighbors for each face in the optimized mesh. If the edge has no adjacent faces, the value is 0xffffffff.</para></param>	
            <param name="faceRemapRef"><para>An array of DWORDs, one per face, that identifies the original mesh face that corresponds to each face in the optimized mesh. If the value supplied for this argument is <c>null</c>, face remap data is not returned.</para></param>	
            <param name="vertexRemapOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface, which contains a DWORD for each vertex that specifies how the new vertices map to the old vertices. This remap is useful if you need to alter external data based on the new vertex mapping.</para></param>	
            <param name="optMeshOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Mesh"/> interface, representing the optimized mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This method generates a new mesh. Before running Optimize, an application must generate an adjacency buffer by calling <see cref="M:SharpDX.Direct3D9.BaseMesh.GenerateAdjacency(System.Single,System.Int32)"/>. The adjacency buffer contains adjacency data, such as a list of edges and the faces that are adjacent to each other.This method is very similar to the <see cref="M:SharpDX.Direct3D9.BaseMesh.CloneMesh(System.Int32,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.Mesh@)"/> method, except that it can perform optimization while generating the new clone of the mesh. The output mesh inherits all of the creation parameters of the input mesh.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXMesh::Optimize']/*"/>	
            <unmanaged>HRESULT ID3DXMesh::Optimize([In] unsigned int Flags,[In] const unsigned int* pAdjacencyIn,[In] unsigned int* pAdjacencyOut,[In] unsigned int* pFaceRemap,[In] ID3DXBuffer** ppVertexRemap,[In] ID3DXMesh** ppOptMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Mesh.OptimizeInplace(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@)">
            <summary>	
            Generates a mesh with reordered faces and vertices to optimize drawing performance. This method reorders the existing mesh.	
            </summary>	
            <param name="flags"><para>Combination of one or more D3DXMESHOPT flags, specifying the type of optimization to perform.</para></param>	
            <param name="adjacencyInRef"><para>Pointer to an array of three DWORDs per face that specifies the three neighbors for each face in the source mesh. If the edge has no adjacent faces, the value is 0xffffffff.</para></param>	
            <param name="adjacencyOutRef"><para>Pointer to an array of three DWORDs per face that specifies the three neighbors for each face in the optimized mesh. If the edge has no adjacent faces, the value is 0xffffffff. If the value supplied for this argument is <c>null</c>, adjacency data is not returned.</para></param>	
            <param name="faceRemapRef"><para>An array of DWORDs, one per face, that identifies the original mesh face that corresponds to each face in the optimized mesh. If the value supplied for this argument is <c>null</c>, face remap data is not returned.</para></param>	
            <param name="vertexRemapOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface, which contains a DWORD for each vertex that specifies how the new vertices map to the old vertices. This remap is useful if you need to alter external data based on the new vertex mapping. If the value supplied for this argument is <c>null</c>, vertex remap data is not returned.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_CANNOTATTRSORT, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Before running <see cref="M:SharpDX.Direct3D9.Mesh.OptimizeInplace(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@)"/>, an application must generate an adjacency buffer by calling <see cref="M:SharpDX.Direct3D9.BaseMesh.GenerateAdjacency(System.Single,System.Int32)"/>. The adjacency buffer contains adjacency data, such as a list of edges and the faces that are adjacent to each other.Note??This method will fail if the mesh is sharing its vertex buffer with another mesh, unless the <see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.IgnoreVertices"/> is set in Flags.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXMesh::OptimizeInplace']/*"/>	
            <unmanaged>HRESULT ID3DXMesh::OptimizeInplace([In] unsigned int Flags,[In] const unsigned int* pAdjacencyIn,[In] unsigned int* pAdjacencyOut,[In] unsigned int* pFaceRemap,[In] ID3DXBuffer** ppVertexRemap)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Mesh.SetAttributeTable(SharpDX.Direct3D9.AttributeRange@,System.Int32)">
            <summary>	
            Sets the attribute table for a mesh and the number of entries stored in the table.	
            </summary>	
            <param name="attribTableRef"><para>Pointer to an array of <see cref="T:SharpDX.Direct3D9.AttributeRange"/> structures, representing the entries in the mesh attribute table.</para></param>	
            <param name="cAttribTableSize"><para>Number of attributes in the mesh attribute table.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If an application keeps track of the information in an attribute table, and rearranges the table as a result of changes to attributes or faces, this method allows the application to update the attribute tables instead of calling <see cref="M:SharpDX.Direct3D9.Mesh.Optimize(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)"/> again.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXMesh::SetAttributeTable']/*"/>	
            <unmanaged>HRESULT ID3DXMesh::SetAttributeTable([In] const D3DXATTRIBUTERANGE* pAttribTable,[In] unsigned int cAttribTableSize)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PatchMesh">
            <summary>	
            This interface encapsulates patch mesh functionality.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh']/*"/>	
            <unmanaged>ID3DXPatchMesh</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.PatchMesh"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetNumPatches">
            <summary>	
            Gets the number of patches in the mesh.	
            </summary>	
            <returns>The number of patches.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetNumPatches']/*"/>	
            <unmanaged>unsigned int ID3DXPatchMesh::GetNumPatches()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetNumVertices">
            <summary>	
            Gets the number of vertices in the mesh.	
            </summary>	
            <returns>The number of vertices.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetNumVertices']/*"/>	
            <unmanaged>unsigned int ID3DXPatchMesh::GetNumVertices()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetDeclaration(SharpDX.Direct3D9.VertexElement)">
            <summary>	
            Gets the vertex declaration.	
            </summary>	
            <param name="declaration"><para>Array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements describing the vertex format of the mesh vertices. The dimension of this declarator array is <see cref="F:SharpDX.Direct3D9.VertexFormatDeclaratorCount.Max"/>. The vertex element array ends with the D3DDECL_END macro.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The array of elements includes the D3DDECL_END macro, which ends the declaration.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetDeclaration']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetDeclaration([In] D3DVERTEXELEMENT9* Declaration)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetControlVerticesPerPatch">
            <summary>	
            Gets the number of control vertices per patch.	
            </summary>	
            <returns>The number of control vertices per patch.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetControlVerticesPerPatch']/*"/>	
            <unmanaged>unsigned int ID3DXPatchMesh::GetControlVerticesPerPatch()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetOptions">
            <summary>	
            Gets the type of patch.	
            </summary>	
            <returns>The patch type.</returns>	
            <remarks>	
            For more information about patch types, see <see cref="T:SharpDX.Direct3D9.PatchMeshType"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetOptions']/*"/>	
            <unmanaged>unsigned int ID3DXPatchMesh::GetOptions()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Gets the device that created the mesh.	
            </summary>	
            <param name="deviceOut"><para>Pointer to the device.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetPatchInfo(SharpDX.Direct3D9.PatchInfo)">
            <summary>	
            Gets the attributes of the patch.	
            </summary>	
            <param name="patchInfo"><para>Pointer to the structures containing the patch attributes. For more information about patch attributes, see <see cref="T:SharpDX.Direct3D9.PatchInfo"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetPatchInfo']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetPatchInfo([In] D3DXPATCHINFO* PatchInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetVertexBuffer(SharpDX.Direct3D9.VertexBuffer@)">
            <summary>	
            Gets the mesh vertex buffer.	
            </summary>	
            <param name="vBOut"><para>Pointer to the vertex buffer.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This method assumes uniform tessellation.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetVertexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetVertexBuffer([Out] IDirect3DVertexBuffer9** ppVB)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetIndexBuffer(SharpDX.Direct3D9.IndexBuffer@)">
            <summary>	
            Gets the mesh index buffer.	
            </summary>	
            <param name="iBOut"><para>Pointer to the index buffer.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The index buffer contains the vertex ordering in the vertex buffer. The index buffer is used to access the vertex buffer when the mesh is rendered.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetIndexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetIndexBuffer([Out] IDirect3DIndexBuffer9** ppIB)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.LockVertexBuffer(System.Int32,System.IntPtr)">
            <summary>	
            Lock the vertex buffer.	
            </summary>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are: </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoOverwrite"/>  <para> For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>.</para></param>	
            <param name="dataOut"><para>VOID* reference to a memory buffer containing the returned vertex data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The vertex buffer is usually locked, written to, and then unlocked for reading.Patch meshes use 16-bit index buffers.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::LockVertexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::LockVertexBuffer([In] unsigned int flags,[In] void** ppData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.UnlockVertexBuffer">
            <summary>	
            Unlock the vertex buffer.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The vertex buffer is usually locked, written to, and then unlocked for reading.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::UnlockVertexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::UnlockVertexBuffer()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.LockIndexBuffer(System.Int32,System.IntPtr)">
            <summary>	
            Lock the index buffer.	
            </summary>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>  <para> For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>.</para></param>	
            <param name="dataOut"><para>VOID* reference to a memory buffer containing the returned index data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The index buffer is usually locked, written to, and then unlocked for reading. Patch mesh index buffers are 16-bit buffers.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::LockIndexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::LockIndexBuffer([In] unsigned int flags,[In] void** ppData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.UnlockIndexBuffer">
            <summary>	
            Unlock the index buffer.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The index buffer is usually locked, written to, and then unlocked for reading.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::UnlockIndexBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::UnlockIndexBuffer()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.LockAttributeBuffer(System.Int32,System.Int32)">
            <summary>	
            Locks the attribute buffer.	
            </summary>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>  <para> For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>.</para></param>	
            <param name="dataOut"><para>Address of a reference to a buffer containing a DWORD for each face in the mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The attribute buffer is usually locked, written to, and then unlocked for reading.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::LockAttributeBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::LockAttributeBuffer([In] unsigned int flags,[In] unsigned int** ppData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.UnlockAttributeBuffer">
            <summary>	
            Unlock the attribute buffer.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The attribute buffer is usually locked, written to, and then unlocked for reading.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::UnlockAttributeBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::UnlockAttributeBuffer()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetTessSize(System.Single,System.Int32,System.Int32@,System.Int32@)">
            <summary>	
            Gets the size of the tessellated mesh, given a tessellation level.	
            </summary>	
            <param name="fTessLevel"><para>Tessellation level.</para></param>	
            <param name="adaptive"><para>Adaptive tessellation. For adaptive tessellation, set this value to TRUE and set fTessLevel to the maximum tessellation value. This will result in the maximum mesh size necessary for adaptive tessellation.</para></param>	
            <param name="numTriangles"><para>Pointer to the number of triangles generated by the tessellated mesh.</para></param>	
            <param name="numVertices"><para>Pointer to the number of vertices generated by the tessellated mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This method assumes uniform tessellation.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetTessSize']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetTessSize([In] float fTessLevel,[In] unsigned int Adaptive,[Out] unsigned int* NumTriangles,[Out] unsigned int* NumVertices)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GenerateAdjacency(System.Single)">
            <summary>	
            Generate a list of mesh edges and the patches that share each edge.	
            </summary>	
            <param name="tolerance"><para>Specifies that vertices that differ in position by less than the tolerance should be treated as coincident.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            After an application generates adjacency information for a mesh, the mesh data can be optimized for better drawing performance. This method determines which patches are adjacent (within the provided tolerance). This information is used internally to optimize tessellation.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GenerateAdjacency']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::GenerateAdjacency([In] float Tolerance)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.CloneMesh(System.Int32,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.PatchMesh@)">
            <summary>	
            Creates a new patch mesh with the specified vertex declaration.	
            </summary>	
            <param name="options"><para>Combination of one or more D3DXMESH flags that specify creation options for the mesh.</para></param>	
            <param name="declRef"><para>Array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements that specify the vertex format for the vertices in the output mesh.</para></param>	
            <param name="meshRef"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.PatchMesh"/> interface that represents the cloned mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            CloneMesh converts the vertex buffer to the new vertex declaration. Entries in the vertex declaration that are new to the original mesh are set to 0. If the current mesh has adjacency, the new mesh will also have adjacency.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::CloneMesh']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::CloneMesh([In] unsigned int Options,[In] const D3DVERTEXELEMENT9* pDecl,[In] ID3DXPatchMesh** pMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.Optimize(System.Int32)">
            <summary>	
            Optimizes the patch mesh for efficient tessellation.	
            </summary>	
            <param name="flags"><para>Currently unused.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_CANNOTATTRSORT.</returns>	
            <remarks>	
            After an application generates adjacency information for a mesh, the mesh data can be optimized (reordered) for better drawing performance. This method determines which patches are adjacent (within the provided tolerance).Adjacency information is also used to optimize tessellation. Generate adjacency information once and tessellate repeatedly by calling <see cref="M:SharpDX.Direct3D9.PatchMesh.Tessellate(System.Single,SharpDX.Direct3D9.Mesh)"/>. The optimization performed is independent of the actual tessellation level used. However, if the mesh vertices are changed, you must regenerate the adjacency information.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::Optimize']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::Optimize([In] unsigned int flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.SetDisplaceParam(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.TextureFilter,SharpDX.Direct3D9.TextureFilter,SharpDX.Direct3D9.TextureFilter,SharpDX.Direct3D9.TextureAddress,System.Int32)">
            <summary>	
            Sets mesh geometry displacement parameters.	
            </summary>	
            <param name="texture"><para>Texture containing the displacement data.</para></param>	
            <param name="minFilter"><para>Minification level. For more information, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.</para></param>	
            <param name="magFilter"><para>Magnification level. For more information, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.</para></param>	
            <param name="mipFilter"><para>Mip filter level. For more information, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.</para></param>	
            <param name="wrap"><para>Texture address wrap mode. For more information, see <see cref="T:SharpDX.Direct3D9.TextureAddress"/> </para></param>	
            <param name="dwLODBias"><para>Level of detail bias value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Displacement maps can only be 2D textures. Mipmapping is ignored for nonadaptive tessellation.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::SetDisplaceParam']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::SetDisplaceParam([In] IDirect3DBaseTexture9* Texture,[In] D3DTEXTUREFILTERTYPE MinFilter,[In] D3DTEXTUREFILTERTYPE MagFilter,[In] D3DTEXTUREFILTERTYPE MipFilter,[In] D3DTEXTUREADDRESS Wrap,[In] unsigned int dwLODBias)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.GetDisplaceParam(SharpDX.Direct3D9.BaseTexture@,SharpDX.Direct3D9.TextureFilter@,SharpDX.Direct3D9.TextureFilter@,SharpDX.Direct3D9.TextureFilter@,SharpDX.Direct3D9.TextureAddress@,System.Int32@)">
            <summary>	
            Gets mesh geometry displacement parameters.	
            </summary>	
            <param name="texture"><para>Texture containing the displacement data.</para></param>	
            <param name="minFilter"><para>Minification level. For more information, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.</para></param>	
            <param name="magFilter"><para>Magnification level. For more information, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.</para></param>	
            <param name="mipFilter"><para>Mip filter level. For more information, see <see cref="T:SharpDX.Direct3D9.TextureFilter"/>.</para></param>	
            <param name="wrap"><para>Texture address wrap mode. For more information, see <see cref="T:SharpDX.Direct3D9.TextureAddress"/>.</para></param>	
            <param name="dwLODBias"><para>Level of detail bias value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Displacement maps can only be 2D textures. Mipmapping is ignored for nonadaptive tessellation.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetDisplaceParam']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetDisplaceParam([Out] IDirect3DBaseTexture9** Texture,[Out] D3DTEXTUREFILTERTYPE* MinFilter,[Out] D3DTEXTUREFILTERTYPE* MagFilter,[Out] D3DTEXTUREFILTERTYPE* MipFilter,[Out] D3DTEXTUREADDRESS* Wrap,[Out] unsigned int* dwLODBias)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.Tessellate(System.Single,SharpDX.Direct3D9.Mesh)">
            <summary>	
            Performs uniform tessellation based on the tessellation level.	
            </summary>	
            <param name="fTessLevel"><para>Tessellation level. This is the number of vertices introduced between existing vertices. The range of this float parameter is 0 &lt; fTessLevel &lt;= 32.</para></param>	
            <param name="meshRef"><para>Resulting tessellated mesh. See <see cref="T:SharpDX.Direct3D9.Mesh"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function will perform more efficiently if the patch mesh has been optimized using <see cref="M:SharpDX.Direct3D9.PatchMesh.Optimize(System.Int32)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::Tessellate']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::Tessellate([In] float fTessLevel,[In] ID3DXMesh* pMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PatchMesh.TessellateAdaptive(SharpDX.Vector4,System.Int32,System.Int32,SharpDX.Direct3D9.Mesh)">
            <summary>	
            Performs adaptive tessellation based on the z-based adaptive tessellation criterion.	
            </summary>	
            <param name="transRef"><para>Specifies a 4D vector that is dotted with the vertices to get the per-vertex adaptive tessellation amount. Each edge is tessellated to the average value of the tessellation levels for the two vertices it connects.</para></param>	
            <param name="dwMaxTessLevel"><para>Maximum limit for adaptive tessellation. This is the number of vertices introduced between existing vertices. This integer value can range from 1 to 32, inclusive.</para></param>	
            <param name="dwMinTessLevel"><para>Minimum limit for adaptive tessellation. This is the number of vertices introduced between existing vertices. This integer value can range from 1 to 32, inclusive.</para></param>	
            <param name="meshRef"><para>Resulting tessellated mesh. See <see cref="T:SharpDX.Direct3D9.Mesh"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This function will perform more efficiently if the patch mesh has been optimized using <see cref="M:SharpDX.Direct3D9.PatchMesh.Optimize(System.Int32)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::TessellateAdaptive']/*"/>	
            <unmanaged>HRESULT ID3DXPatchMesh::TessellateAdaptive([In] const D3DXVECTOR4* pTrans,[In] unsigned int dwMaxTessLevel,[In] unsigned int dwMinTessLevel,[In] ID3DXMesh* pMesh)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.PatchMesh.NumPatches">
            <summary>	
            Gets the number of patches in the mesh.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetNumPatches']/*"/>	
            <unmanaged>GetNumPatches</unmanaged>	
            <unmanaged>unsigned int ID3DXPatchMesh::GetNumPatches()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.PatchMesh.NumVertices">
            <summary>	
            Gets the number of vertices in the mesh.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetNumVertices']/*"/>	
            <unmanaged>GetNumVertices</unmanaged>	
            <unmanaged>unsigned int ID3DXPatchMesh::GetNumVertices()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.PatchMesh.ControlVerticesPerPatch">
            <summary>	
            Gets the number of control vertices per patch.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetControlVerticesPerPatch']/*"/>	
            <unmanaged>GetControlVerticesPerPatch</unmanaged>	
            <unmanaged>unsigned int ID3DXPatchMesh::GetControlVerticesPerPatch()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.PatchMesh.Options">
            <summary>	
            Gets the type of patch.	
            </summary>	
            <remarks>	
            For more information about patch types, see <see cref="T:SharpDX.Direct3D9.PatchMeshType"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetOptions']/*"/>	
            <unmanaged>GetOptions</unmanaged>	
            <unmanaged>unsigned int ID3DXPatchMesh::GetOptions()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.PatchMesh.Device">
            <summary>	
            Gets the device that created the mesh.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.PatchMesh.VertexBuffer">
            <summary>	
            Gets the mesh vertex buffer.	
            </summary>	
            <remarks>	
            This method assumes uniform tessellation.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetVertexBuffer']/*"/>	
            <unmanaged>GetVertexBuffer</unmanaged>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetVertexBuffer([Out] IDirect3DVertexBuffer9** ppVB)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.PatchMesh.IndexBuffer">
            <summary>	
            Gets the mesh index buffer.	
            </summary>	
            <remarks>	
            The index buffer contains the vertex ordering in the vertex buffer. The index buffer is used to access the vertex buffer when the mesh is rendered.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPatchMesh::GetIndexBuffer']/*"/>	
            <unmanaged>GetIndexBuffer</unmanaged>	
            <unmanaged>HRESULT ID3DXPatchMesh::GetIndexBuffer([Out] IDirect3DIndexBuffer9** ppIB)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.PixelShader">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.PixelShader"/> interface to encapsulate the functionality of a pixel shader.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DPixelShader9']/*"/>	
            <unmanaged>IDirect3DPixelShader9</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader.MaxDynamicFlowControlDepth">
            <summary>Constant MaxDynamicFlowControlDepth.</summary>
            <unmanaged>D3DPS20_MAX_DYNAMICFLOWCONTROLDEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader.MinDynamicFlowControlDepth">
            <summary>Constant MinDynamicFlowControlDepth.</summary>
            <unmanaged>D3DPS20_MIN_DYNAMICFLOWCONTROLDEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader.MaxTemps">
            <summary>Constant MaxTemps.</summary>
            <unmanaged>D3DPS20_MAX_NUMTEMPS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader.MinTemps">
            <summary>Constant MinTemps.</summary>
            <unmanaged>D3DPS20_MIN_NUMTEMPS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader.MaxStaticFlowControlDepth">
            <summary>Constant MaxStaticFlowControlDepth.</summary>
            <unmanaged>D3DPS20_MAX_STATICFLOWCONTROLDEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader.MinStaticFlowControlDepth">
            <summary>Constant MinStaticFlowControlDepth.</summary>
            <unmanaged>D3DPS20_MIN_STATICFLOWCONTROLDEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader.MaxInstructionSlots">
            <summary>Constant MaxInstructionSlots.</summary>
            <unmanaged>D3DPS20_MAX_NUMINSTRUCTIONSLOTS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader.MinInstructionSlots">
            <summary>Constant MinInstructionSlots.</summary>
            <unmanaged>D3DPS20_MIN_NUMINSTRUCTIONSLOTS</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.PixelShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.PixelShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.PixelShader.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Gets the device.	
            </summary>	
            <param name="deviceOut"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.Device"/> interface that is returned.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DPixelShader9::GetDevice']/*"/>	
            <unmanaged>HRESULT IDirect3DPixelShader9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PixelShader.GetFunction(System.IntPtr,System.Int32@)">
            <summary>	
            Gets a reference to the shader data.	
            </summary>	
            <param name="arg0"><para>Pointer to a buffer that contains the shader data. The application needs to allocate enough room for this. </para></param>	
            <param name="sizeOfDataRef"><para>Size of the data, in bytes. To get the buffer size that is needed to retrieve the data, set pData = <c>null</c> when calling GetFunction. Then call GetFunction with the returned size, to get the buffer data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DPixelShader9::GetFunction']/*"/>	
            <unmanaged>HRESULT IDirect3DPixelShader9::GetFunction([In] void* arg0,[InOut] unsigned int* pSizeOfData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PixelShader.#ctor(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.ShaderBytecode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.PixelShader"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="function">The function.</param>
            <unmanaged>HRESULT IDirect3DDevice9::CreatePixelShader([In] const void* pFunction,[Out, Fast] IDirect3DPixelShader9** ppShader)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.PixelShader.Device">
            <summary>	
            Gets the device.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DPixelShader9::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT IDirect3DPixelShader9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.PixelShader.Function">
            <summary>
            Gets the bytecode associated to this shader..
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.ProgressiveMesh">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh']/*"/>	
            <unmanaged>ID3DXPMesh</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.ProgressiveMesh"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.ClonePMeshFVF(System.Int32,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.ProgressiveMesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="options">No documentation.</param>	
            <param name="fvf">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="cloneMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::ClonePMeshFVF']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::ClonePMeshFVF([In] unsigned int Options,[In] unsigned int FVF,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXPMesh** ppCloneMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.ClonePMesh(System.Int32,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.Device,SharpDX.Direct3D9.ProgressiveMesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="options">No documentation.</param>	
            <param name="declarationRef">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="cloneMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::ClonePMesh']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::ClonePMesh([In] unsigned int Options,[In] const D3DVERTEXELEMENT9* pDeclaration,[In] IDirect3DDevice9* pD3DDevice,[In] ID3DXPMesh** ppCloneMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.SetNumFaces(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="faces">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::SetNumFaces']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::SetNumFaces([In] unsigned int Faces)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.SetNumVertices(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="vertices">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::SetNumVertices']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::SetNumVertices([In] unsigned int Vertices)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.GetMaxFaces">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetMaxFaces']/*"/>	
            <unmanaged>unsigned int ID3DXPMesh::GetMaxFaces()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.GetMinFaces">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetMinFaces']/*"/>	
            <unmanaged>unsigned int ID3DXPMesh::GetMinFaces()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.GetMaxVertices">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetMaxVertices']/*"/>	
            <unmanaged>unsigned int ID3DXPMesh::GetMaxVertices()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.GetMinVertices">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetMinVertices']/*"/>	
            <unmanaged>unsigned int ID3DXPMesh::GetMinVertices()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.Save_(System.IntPtr,SharpDX.Direct3D9.ExtendedMaterial@,SharpDX.Direct3D9.EffectInstance,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="streamRef">No documentation.</param>	
            <param name="materialsRef">No documentation.</param>	
            <param name="effectInstancesRef">No documentation.</param>	
            <param name="numMaterials">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::Save']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::Save([In] IStream* pStream,[In] const D3DXMATERIAL* pMaterials,[In] const D3DXEFFECTINSTANCE* pEffectInstances,[In] unsigned int NumMaterials)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.Optimize(System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="flags">No documentation.</param>	
            <param name="adjacencyOutRef">No documentation.</param>	
            <param name="faceRemapRef">No documentation.</param>	
            <param name="vertexRemapOut">No documentation.</param>	
            <param name="optMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::Optimize']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::Optimize([In] unsigned int Flags,[In] unsigned int* pAdjacencyOut,[In] unsigned int* pFaceRemap,[In] ID3DXBuffer** ppVertexRemap,[In] ID3DXMesh** ppOptMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.OptimizeBaseLOD(System.Int32,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="flags">No documentation.</param>	
            <param name="faceRemapRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::OptimizeBaseLOD']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::OptimizeBaseLOD([In] unsigned int Flags,[In] unsigned int* pFaceRemap)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.TrimByFaces(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="newFacesMin">No documentation.</param>	
            <param name="newFacesMax">No documentation.</param>	
            <param name="rgiFaceRemap">No documentation.</param>	
            <param name="rgiVertRemap">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::TrimByFaces']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::TrimByFaces([In] unsigned int NewFacesMin,[In] unsigned int NewFacesMax,[In] unsigned int* rgiFaceRemap,[In] unsigned int* rgiVertRemap)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.TrimByVertices(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="newVerticesMin">No documentation.</param>	
            <param name="newVerticesMax">No documentation.</param>	
            <param name="rgiFaceRemap">No documentation.</param>	
            <param name="rgiVertRemap">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::TrimByVertices']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::TrimByVertices([In] unsigned int NewVerticesMin,[In] unsigned int NewVerticesMax,[In] unsigned int* rgiFaceRemap,[In] unsigned int* rgiVertRemap)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.GetAdjacency(System.Int32@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="adjacencyRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetAdjacency']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::GetAdjacency([Out] unsigned int* pAdjacency)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ProgressiveMesh.GenerateVertexHistory(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="vertexHistoryRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GenerateVertexHistory']/*"/>	
            <unmanaged>HRESULT ID3DXPMesh::GenerateVertexHistory([In] unsigned int* pVertexHistory)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.ProgressiveMesh.MaxFaces">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetMaxFaces']/*"/>	
            <unmanaged>GetMaxFaces</unmanaged>	
            <unmanaged>unsigned int ID3DXPMesh::GetMaxFaces()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.ProgressiveMesh.MinFaces">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetMinFaces']/*"/>	
            <unmanaged>GetMinFaces</unmanaged>	
            <unmanaged>unsigned int ID3DXPMesh::GetMinFaces()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.ProgressiveMesh.MaxVertices">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetMaxVertices']/*"/>	
            <unmanaged>GetMaxVertices</unmanaged>	
            <unmanaged>unsigned int ID3DXPMesh::GetMaxVertices()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.ProgressiveMesh.MinVertices">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetMinVertices']/*"/>	
            <unmanaged>GetMinVertices</unmanaged>	
            <unmanaged>unsigned int ID3DXPMesh::GetMinVertices()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.ProgressiveMesh.Adjacency">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXPMesh::GetAdjacency']/*"/>	
            <unmanaged>GetAdjacency</unmanaged>	
            <unmanaged>HRESULT ID3DXPMesh::GetAdjacency([Out] unsigned int* pAdjacency)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Query">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.Query"/> interface to perform asynchronous queries on a driver.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DQuery9']/*"/>	
            <unmanaged>IDirect3DQuery9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Query.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Query"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Query.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Gets the device that is being queried.	
            </summary>	
            <param name="deviceOut"><para>Pointer to the device being queried. See <see cref="T:SharpDX.Direct3D9.Device"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DQuery9::GetDevice']/*"/>	
            <unmanaged>HRESULT IDirect3DQuery9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Query.GetTypeInfo">
            <summary>	
            Gets the query type.	
            </summary>	
            <returns>Returns the query type. See <see cref="T:SharpDX.Direct3D9.QueryType"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DQuery9::GetType']/*"/>	
            <unmanaged>D3DQUERYTYPE IDirect3DQuery9::GetType()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Query.GetDataSize">
            <summary>	
            Gets the number of bytes in the query data.	
            </summary>	
            <returns>Returns the number of bytes of query data.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DQuery9::GetDataSize']/*"/>	
            <unmanaged>unsigned int IDirect3DQuery9::GetDataSize()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Query.Issue(SharpDX.Direct3D9.Issue)">
            <summary>	
            Issue a query.	
            </summary>	
            <param name="dwIssueFlags"><para>Query flags specify the type of state change for the query. See <see cref="F:SharpDX.Direct3D9.Issue.Begin"/> and <see cref="F:SharpDX.Direct3D9.Issue.End"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A signaled query means the query has completed, the data is available, and <see cref="M:SharpDX.Direct3D9.Query.GetData(System.IntPtr,System.Int32,System.Int32)"/> will return <see cref="F:SharpDX.Result.Ok"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DQuery9::Issue']/*"/>	
            <unmanaged>HRESULT IDirect3DQuery9::Issue([In] D3DISSUE dwIssueFlags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Query.GetData(System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Polls a queried resource to get the query state or a query result. For more information about queries, see Queries (Direct3D 9).	
            </summary>	
            <param name="dataRef">No documentation.</param>	
            <param name="dwSize">No documentation.</param>	
            <param name="dwGetDataFlags">No documentation.</param>	
            <returns>The return type identifies the query state (see Queries (Direct3D 9)). The method returns <see cref="F:SharpDX.Result.Ok"/> if the query data is available and S_FALSE if it is not.  These are considered successful return values. If the method fails when D3DGETDATA_FLUSH is used, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>.</returns>	
            <remarks>	
            It is possible to lose the device while polling for query status. When D3DGETDATA_FLUSH is specified, this method will return <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/> in response to a lost device. This allows an application to prevent threads from endlessly polling due to a lost device (which cannot respond to the query).An application must never write code that only invokes GetData ( ... , 0 ), expecting that GetData will eventually return <see cref="F:SharpDX.Result.Ok"/> by itself over time. This is true, even if the application has used the FLUSH flag with GetData in the past. For example:<code>	
            // Enables an infinite loop:	
            while( pQuery-&gt;GetData( ... , 0 ) == S_FALSE ) ; // Still enables an infinite loop:	
            pQuery-&gt;GetData( ... , D3DGETDATA_FLUSH );	
            while( pQuery-&gt;GetData( ... , 0 ) == S_FALSE ) ; // Does not enable an infinite loop because eventually the command	
            // buffer will fill up and that will cause a flush to occur.	
            while( pQuery-&gt;GetData( ..., 0 ) == S_FALSE ) { pDevice-&gt;SetTexture(...); pDevice-&gt;Draw(...);	
            }	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DQuery9::GetData']/*"/>	
            <unmanaged>HRESULT IDirect3DQuery9::GetData([In] void* pData,[In] unsigned int dwSize,[In] unsigned int dwGetDataFlags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Query.#ctor(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.QueryType)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Query"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.Query.GetData``1(System.Boolean)">
            <summary>
            Polls a queried resource to get the query state or a query result.
            </summary>
            <typeparam name="T">Type of the object to query</typeparam>
            <param name="flush">if set to <c>true</c> [flush].</param>
            <returns>The value of the query</returns>
        </member>
        <member name="P:SharpDX.Direct3D9.Query.Device">
            <summary>	
            Gets the device that is being queried.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DQuery9::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT IDirect3DQuery9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Query.DataSize">
            <summary>	
            Gets the number of bytes in the query data.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DQuery9::GetDataSize']/*"/>	
            <unmanaged>GetDataSize</unmanaged>	
            <unmanaged>unsigned int IDirect3DQuery9::GetDataSize()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Query.Type">
            <summary>
            Gets the type.
            </summary>
            <unmanaged>D3DQUERYTYPE IDirect3DQuery9::GetType()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.RenderToEnvironmentMap">
            <summary>	
            The <see cref="T:SharpDX.Direct3D9.RenderToEnvironmentMap"/> interface is used to generalize the process of rendering to environment maps.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap']/*"/>	
            <unmanaged>ID3DXRenderToEnvMap</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.RenderToEnvironmentMap"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the Direct3D device associated with the environment map.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface that represents the Direct3D device object associated with the environment map.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. Calling this method increases the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Be sure to call <see cref="T:SharpDX.ComObject"/> when you are done using this <see cref="T:SharpDX.Direct3D9.Device"/> interface or you will have a memory leak.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::GetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.GetDescription(SharpDX.Direct3D9.RenderToEnvironmentMapDescription@)">
            <summary>	
            Retrieves the description of the render surface.	
            </summary>	
            <param name="descRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.RenderToEnvironmentMapDescription"/> structure that describes the rendering surface.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::GetDesc']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::GetDesc([Out] D3DXRTE_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.BeginCube(SharpDX.Direct3D9.CubeTexture)">
            <summary>	
            Initiate the rendering of a cubic environment map.	
            </summary>	
            <param name="cubeTexRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.CubeTexture"/> interface that represents the cube texture to which to render.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            See <see cref="M:SharpDX.Direct3D9.RenderToEnvironmentMap.Face(SharpDX.Direct3D9.CubeMapFace,System.Int32)"/> to draw each of the 6 faces.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::BeginCube']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::BeginCube([In] IDirect3DCubeTexture9* pCubeTex)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.BeginSphere(SharpDX.Direct3D9.Texture)">
            <summary>	
            Initiate the rendering of a spherical environment map.	
            </summary>	
            <param name="texRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface that represents the texture to which to render.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.E_FAIL</returns>	
            <remarks>	
            See <see cref="M:SharpDX.Direct3D9.RenderToEnvironmentMap.Face(SharpDX.Direct3D9.CubeMapFace,System.Int32)"/> to draw the face.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::BeginSphere']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::BeginSphere([In] IDirect3DTexture9* pTex)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.BeginHemisphere(SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.Texture)">
            <summary>	
            Initiate the rendering of a hemispheric environment map.	
            </summary>	
            <param name="texZPosRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface that represents the positive texture render surface.</para></param>	
            <param name="texZNegRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface that represents the negative texture render surface.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.E_FAIL</returns>	
            <remarks>	
            See <see cref="M:SharpDX.Direct3D9.RenderToEnvironmentMap.Face(SharpDX.Direct3D9.CubeMapFace,System.Int32)"/> to draw the face.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::BeginHemisphere']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::BeginHemisphere([In] IDirect3DTexture9* pTexZPos,[In] IDirect3DTexture9* pTexZNeg)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.BeginParabolic(SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.Texture)">
            <summary>	
            Initiate the rendering of a parabolic environment map.	
            </summary>	
            <param name="texZPosRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface that represents the positive render texture.</para></param>	
            <param name="texZNegRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface that represents the negative render texture.</para></param>	
            <returns>If the function succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the function fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.E_FAIL</returns>	
            <remarks>	
            See <see cref="M:SharpDX.Direct3D9.RenderToEnvironmentMap.Face(SharpDX.Direct3D9.CubeMapFace,System.Int32)"/> to draw the faces.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::BeginParabolic']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::BeginParabolic([In] IDirect3DTexture9* pTexZPos,[In] IDirect3DTexture9* pTexZNeg)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.Face(SharpDX.Direct3D9.CubeMapFace,System.Int32)">
            <summary>	
            Initiate the drawing of each face of an environment map.	
            </summary>	
            <param name="face"><para>The first face of the environmental cube map. See <see cref="T:SharpDX.Direct3D9.CubeMapFace"/>.</para></param>	
            <param name="mipFilter"><para>A valid combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> flags.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method must be called once for each type of environment map. The only exception is a cubic environment map which requires this method to be called six times, once for each face in <see cref="T:SharpDX.Direct3D9.CubeMapFace"/>. For more information, see Environment Mapping (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::Face']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::Face([In] D3DCUBEMAP_FACES Face,[In] unsigned int MipFilter)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.End(System.Int32)">
            <summary>	
            Restore all render targets and, if needed, compose all the rendered faces into the environment map surface.	
            </summary>	
            <param name="mipFilter"><para>A valid combination of one or more <see cref="T:SharpDX.Direct3D9.Filter"/> flags.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::End']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::End([In] unsigned int MipFilter)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.OnLostDevice">
            <summary>	
            Use this method to release all references to video memory resources and delete all stateblocks. This method should be called whenever a device is lost, or before resetting a device.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method should be called whenever the device is lost or before the user calls <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>. Even if the device was not actually lost, <see cref="M:SharpDX.Direct3D9.RenderToEnvironmentMap.OnLostDevice"/> is responsible for freeing stateblocks and other resources that may need to be released before resetting the device. As a result, the font object cannot be used again before calling <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> and then <see cref="M:SharpDX.Direct3D9.RenderToEnvironmentMap.OnResetDevice"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::OnLostDevice']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::OnLostDevice()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToEnvironmentMap.OnResetDevice">
            <summary>	
            Use this method to re-acquire resources and save initial state.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            ID3DXRenderToEnvMap::OnResetDevice should be called each time the device is reset (using <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>), before any other methods are called. This is a good place to re-acquire video-memory resources and capture state blocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::OnResetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::OnResetDevice()</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.RenderToEnvironmentMap.Device">
            <summary>	
            Retrieves the Direct3D device associated with the environment map.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.RenderToEnvironmentMap.Description">
            <summary>	
            Retrieves the description of the render surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToEnvMap::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT ID3DXRenderToEnvMap::GetDesc([Out] D3DXRTE_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.RenderToSurface">
            <summary>	
            The <see cref="T:SharpDX.Direct3D9.RenderToSurface"/> interface is used to generalize the process of rendering to surfaces.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToSurface']/*"/>	
            <unmanaged>ID3DXRenderToSurface</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToSurface.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.RenderToSurface"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToSurface.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the Direct3D device associated with the render surface.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the Direct3D device object associated with the render surface.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Be sure to call <see cref="T:SharpDX.ComObject"/> when you are done using this <see cref="T:SharpDX.Direct3D9.Device"/> interface or you will have a memory leak.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToSurface::GetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToSurface::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToSurface.GetDescription(SharpDX.Direct3D9.RenderToSurfaceDescription@)">
            <summary>	
            Retrieves the parameters of the render surface.	
            </summary>	
            <param name="descRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.RenderToSurfaceDescription"/> structure, describing the parameters of the render surface.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToSurface::GetDesc']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToSurface::GetDesc([Out] D3DXRTS_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToSurface.BeginScene(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Viewport@)">
            <summary>	
            Begins a scene.	
            </summary>	
            <param name="surfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the render surface.</para></param>	
            <param name="viewportRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Viewport"/> structure, describing the viewport for the scene.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.<see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/> D3DXERR_INVALIDDATA E_OUTOFMEMORY</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToSurface::BeginScene']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToSurface::BeginScene([In] IDirect3DSurface9* pSurface,[In] const D3DVIEWPORT9* pViewport)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToSurface.EndScene(System.Int32)">
            <summary>	
            Ends a scene.	
            </summary>	
            <param name="mipFilter"><para>Filter options, enumerated in <see cref="T:SharpDX.Direct3D9.Filter"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToSurface::EndScene']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToSurface::EndScene([In] unsigned int MipFilter)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToSurface.OnLostDevice">
            <summary>	
            Use this method to release all references to video memory resources and delete all stateblocks. This method should be called whenever a device is lost or before resetting a device.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method should be called whenever the device is lost or before the user calls <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>. Even if the device was not actually lost, <see cref="M:SharpDX.Direct3D9.RenderToSurface.OnLostDevice"/> is responsible for freeing stateblocks and other resources that may need to be released before resetting the device. As a result, the font object cannot be used again before calling <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> and then <see cref="M:SharpDX.Direct3D9.RenderToSurface.OnResetDevice"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToSurface::OnLostDevice']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToSurface::OnLostDevice()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.RenderToSurface.OnResetDevice">
            <summary>	
            Use this method to re-acquire resources and save initial state.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            ID3DXRenderToSurface::OnResetDevice should be called each time the device is reset (using <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>), before any other methods are called. This is a good place to re-acquire video-memory resources and capture state blocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToSurface::OnResetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXRenderToSurface::OnResetDevice()</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.RenderToSurface.Device">
            <summary>	
            Retrieves the Direct3D device associated with the render surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToSurface::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT ID3DXRenderToSurface::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.RenderToSurface.Description">
            <summary>	
            Retrieves the parameters of the render surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXRenderToSurface::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT ID3DXRenderToSurface::GetDesc([Out] D3DXRTS_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.SimplificationMesh">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh']/*"/>	
            <unmanaged>ID3DXSPMesh</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.SimplificationMesh"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetNumFaces">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetNumFaces']/*"/>	
            <unmanaged>unsigned int ID3DXSPMesh::GetNumFaces()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetNumVertices">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetNumVertices']/*"/>	
            <unmanaged>unsigned int ID3DXSPMesh::GetNumVertices()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetFVF">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetFVF']/*"/>	
            <unmanaged>unsigned int ID3DXSPMesh::GetFVF()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetDeclaration(SharpDX.Direct3D9.VertexElement)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="declaration">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetDeclaration']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::GetDeclaration([In] D3DVERTEXELEMENT9* Declaration)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetOptions">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetOptions']/*"/>	
            <unmanaged>unsigned int ID3DXSPMesh::GetOptions()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="deviceOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.CloneMeshFVF(System.Int32,System.Int32,SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="options">No documentation.</param>	
            <param name="fvf">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="adjacencyOutRef">No documentation.</param>	
            <param name="vertexRemapOutRef">No documentation.</param>	
            <param name="cloneMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::CloneMeshFVF']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::CloneMeshFVF([In] unsigned int Options,[In] unsigned int FVF,[In] IDirect3DDevice9* pD3DDevice,[In] unsigned int* pAdjacencyOut,[In] unsigned int* pVertexRemapOut,[In] ID3DXMesh** ppCloneMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.CloneMesh(System.Int32,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="options">No documentation.</param>	
            <param name="declarationRef">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="adjacencyOutRef">No documentation.</param>	
            <param name="vertexRemapOutRef">No documentation.</param>	
            <param name="cloneMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::CloneMesh']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::CloneMesh([In] unsigned int Options,[In] const D3DVERTEXELEMENT9* pDeclaration,[In] IDirect3DDevice9* pD3DDevice,[In] unsigned int* pAdjacencyOut,[In] unsigned int* pVertexRemapOut,[In] ID3DXMesh** ppCloneMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.ClonePMeshFVF(System.Int32,System.Int32,SharpDX.Direct3D9.Device,System.Int32,System.Single,SharpDX.Direct3D9.ProgressiveMesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="options">No documentation.</param>	
            <param name="fvf">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="vertexRemapOutRef">No documentation.</param>	
            <param name="errorsByFaceRef">No documentation.</param>	
            <param name="cloneMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::ClonePMeshFVF']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::ClonePMeshFVF([In] unsigned int Options,[In] unsigned int FVF,[In] IDirect3DDevice9* pD3DDevice,[In] unsigned int* pVertexRemapOut,[In] float* pErrorsByFace,[In] ID3DXPMesh** ppCloneMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.ClonePMesh(System.Int32,SharpDX.Direct3D9.VertexElement,SharpDX.Direct3D9.Device,System.Int32,System.Single,SharpDX.Direct3D9.ProgressiveMesh@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="options">No documentation.</param>	
            <param name="declarationRef">No documentation.</param>	
            <param name="d3DDeviceRef">No documentation.</param>	
            <param name="vertexRemapOutRef">No documentation.</param>	
            <param name="errorsbyFaceRef">No documentation.</param>	
            <param name="cloneMeshOut">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::ClonePMesh']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::ClonePMesh([In] unsigned int Options,[In] const D3DVERTEXELEMENT9* pDeclaration,[In] IDirect3DDevice9* pD3DDevice,[In] unsigned int* pVertexRemapOut,[In] float* pErrorsbyFace,[In] ID3DXPMesh** ppCloneMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.ReduceFaces(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="faces">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::ReduceFaces']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::ReduceFaces([In] unsigned int Faces)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.ReduceVertices(System.Int32)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="vertices">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::ReduceVertices']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::ReduceVertices([In] unsigned int Vertices)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetMaxFaces">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetMaxFaces']/*"/>	
            <unmanaged>unsigned int ID3DXSPMesh::GetMaxFaces()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetMaxVertices">
            <summary>	
            No documentation.	
            </summary>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetMaxVertices']/*"/>	
            <unmanaged>unsigned int ID3DXSPMesh::GetMaxVertices()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetVertexAttributeWeights(SharpDX.Direct3D9.AttributeWeights@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="vertexAttributeWeightsRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetVertexAttributeWeights']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::GetVertexAttributeWeights([In] D3DXATTRIBUTEWEIGHTS* pVertexAttributeWeights)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SimplificationMesh.GetVertexWeights(System.Single@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="vertexWeightsRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetVertexWeights']/*"/>	
            <unmanaged>HRESULT ID3DXSPMesh::GetVertexWeights([Out] float* pVertexWeights)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.SimplificationMesh.NumFaces">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetNumFaces']/*"/>	
            <unmanaged>GetNumFaces</unmanaged>	
            <unmanaged>unsigned int ID3DXSPMesh::GetNumFaces()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SimplificationMesh.NumVertices">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetNumVertices']/*"/>	
            <unmanaged>GetNumVertices</unmanaged>	
            <unmanaged>unsigned int ID3DXSPMesh::GetNumVertices()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SimplificationMesh.FVF">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetFVF']/*"/>	
            <unmanaged>GetFVF</unmanaged>	
            <unmanaged>unsigned int ID3DXSPMesh::GetFVF()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SimplificationMesh.Options">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetOptions']/*"/>	
            <unmanaged>GetOptions</unmanaged>	
            <unmanaged>unsigned int ID3DXSPMesh::GetOptions()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SimplificationMesh.Device">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT ID3DXSPMesh::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SimplificationMesh.MaxFaces">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetMaxFaces']/*"/>	
            <unmanaged>GetMaxFaces</unmanaged>	
            <unmanaged>unsigned int ID3DXSPMesh::GetMaxFaces()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SimplificationMesh.MaxVertices">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetMaxVertices']/*"/>	
            <unmanaged>GetMaxVertices</unmanaged>	
            <unmanaged>unsigned int ID3DXSPMesh::GetMaxVertices()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SimplificationMesh.VertexWeights">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSPMesh::GetVertexWeights']/*"/>	
            <unmanaged>GetVertexWeights</unmanaged>	
            <unmanaged>HRESULT ID3DXSPMesh::GetVertexWeights([Out] float* pVertexWeights)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.SkinInfo">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.SkinInfo"/> interface to manipulate bone matrices, which are used to skin vertex data for animation. This interface is no longer strictly tied to <see cref="T:SharpDX.Direct3D9.Mesh"/> and can be used to skin any set of vertex data.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo']/*"/>	
            <unmanaged>ID3DXSkinInfo</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.SkinInfo"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.SetBoneInfluence(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>	
            Sets the influence value for a bone.	
            </summary>	
            <param name="bone"><para>Bone number.</para></param>	
            <param name="numInfluences"><para>Number of influences.</para></param>	
            <param name="vertices"><para>The array of vertices influenced by a bone.</para></param>	
            <param name="weights"><para>The array of weights influenced by a bone.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::SetBoneInfluence']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::SetBoneInfluence([In] unsigned int bone,[In] unsigned int numInfluences,[In] const unsigned int* vertices,[In] const float* weights)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.SetBoneVertexInfluence(System.Int32,System.Int32,System.Single)">
            <summary>	
            Sets an influence value of a bone on a single vertex.	
            </summary>	
            <param name="boneNum"><para>Index of the bone. Must be between 0 and the number of bones.</para></param>	
            <param name="influenceNum"><para>Index of the influence array of the specified bone.</para></param>	
            <param name="weight"><para>Blend factor of the specified bone influence.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::SetBoneVertexInfluence']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::SetBoneVertexInfluence([In] unsigned int boneNum,[In] unsigned int influenceNum,[In] float weight)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetNumBoneInfluences(System.Int32)">
            <summary>	
            Gets the number of influences for a bone.	
            </summary>	
            <param name="bone"><para>Bone number.</para></param>	
            <returns>Returns the number of influences for a bone.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetNumBoneInfluences']/*"/>	
            <unmanaged>unsigned int ID3DXSkinInfo::GetNumBoneInfluences([In] unsigned int bone)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetBoneInfluence(System.Int32,System.Int32@,System.Single@)">
            <summary>	
            Gets the vertices and weights that a bone influences.	
            </summary>	
            <param name="bone"><para>Bone number.</para></param>	
            <param name="vertices"><para>Get the array of vertices influenced by a bone.</para></param>	
            <param name="weights"><para>Get the array of weights influenced by a bone.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Use <see cref="M:SharpDX.Direct3D9.SkinInfo.GetNumBoneInfluences(System.Int32)"/> to find out how many vertices the bone influences.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetBoneInfluence']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::GetBoneInfluence([In] unsigned int bone,[Out] unsigned int* vertices,[Out] float* weights)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetBoneVertexInfluence(System.Int32,System.Int32,System.Single@,System.Int32@)">
            <summary>	
            Retrieves the blend factor and vertex affected by a specified bone influence.	
            </summary>	
            <param name="boneNum"><para>Index of the bone. Must be between 0 and the number of bones.</para></param>	
            <param name="influenceNum"><para>Index of the influence array of the specified bone.</para></param>	
            <param name="weightRef"><para>Pointer to the blend factor influenced by influenceNum.</para></param>	
            <param name="vertexNumRef"><para>Pointer to the vertex influenced by influenceNum.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetBoneVertexInfluence']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::GetBoneVertexInfluence([In] unsigned int boneNum,[In] unsigned int influenceNum,[Out] float* pWeight,[Out] unsigned int* pVertexNum)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetMaxVertexInfluences(System.Int32@)">
            <summary>	
            Gets the maximum number of influences for any vertex in the mesh.	
            </summary>	
            <param name="maxVertexInfluences"><para>Pointer to the maximum vertex influence.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetMaxVertexInfluences']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::GetMaxVertexInfluences([Out] unsigned int* maxVertexInfluences)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetNumBones">
            <summary>	
            Gets the number of bones.	
            </summary>	
            <returns>Returns the number of bones.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetNumBones']/*"/>	
            <unmanaged>unsigned int ID3DXSkinInfo::GetNumBones()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.FindBoneVertexInfluenceIndex(System.Int32,System.Int32,System.Int32)">
            <summary>	
            Retrieves the index of the bone influence affecting a single vertex.	
            </summary>	
            <param name="boneNum"><para>Index of the bone. Must be between 0 and the number of bones.</para></param>	
            <param name="vertexNum"><para>Index of the vertex for which the bone influence is to be found. Must be between 0 and the number of vertices in the mesh.</para></param>	
            <param name="influenceIndexRef"><para>Pointer to the index of the bone influence that affects vertexNum.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the specified bone does not influence the given vertex, S_FALSE is returned. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::FindBoneVertexInfluenceIndex']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::FindBoneVertexInfluenceIndex([In] unsigned int boneNum,[In] unsigned int vertexNum,[In] unsigned int* pInfluenceIndex)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetMaxFaceInfluences(SharpDX.Direct3D9.IndexBuffer,System.Int32,System.Int32@)">
            <summary>	
            Gets the maximum face influences in a triangle mesh with the specified index buffer.	
            </summary>	
            <param name="iBRef"><para>Pointer to the index buffer that contains the mesh index data.</para></param>	
            <param name="numFaces"><para>Number of faces in the mesh.</para></param>	
            <param name="maxFaceInfluences"><para>Pointer to the maximum face influences.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetMaxFaceInfluences']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::GetMaxFaceInfluences([In] IDirect3DIndexBuffer9* pIB,[In] unsigned int NumFaces,[Out] unsigned int* maxFaceInfluences)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.SetMinBoneInfluence(System.Single)">
            <summary>	
            Sets the minimum bone influence. Influence values smaller than this are ignored.	
            </summary>	
            <param name="minInfl"><para>Minimum influence value. Influence values smaller than this are ignored.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::SetMinBoneInfluence']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::SetMinBoneInfluence([In] float MinInfl)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetMinBoneInfluence">
            <summary>	
            Gets the minimum bone influence. Influence values smaller than this are ignored.	
            </summary>	
            <returns>Returns the minimum bone influence value.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetMinBoneInfluence']/*"/>	
            <unmanaged>float ID3DXSkinInfo::GetMinBoneInfluence()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.SetBoneName(System.Int32,System.String)">
            <summary>	
            Sets the bone name.	
            </summary>	
            <param name="bone"><para>Bone number</para></param>	
            <param name="nameRef"><para>Bone name</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Bone names are returned by <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXof(SharpDX.Direct3D9.XFileData,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::SetBoneName']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::SetBoneName([In] unsigned int Bone,[In] const char* pName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetBoneName(System.Int32)">
            <summary>	
            Gets the bone name, from the bone index.	
            </summary>	
            <param name="bone"><para>Bone number.</para></param>	
            <returns>Returns the bone name. Do not free this string.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetBoneName']/*"/>	
            <unmanaged>const char* ID3DXSkinInfo::GetBoneName([In] unsigned int Bone)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.SetBoneOffsetMatrix(System.Int32,SharpDX.Matrix@)">
            <summary>	
            Sets the bone offset matrix.	
            </summary>	
            <param name="bone"><para>Bone number.</para></param>	
            <param name="boneTransformRef"><para>Pointer to the bone offset matrix.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Bone names are returned by <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXof(SharpDX.Direct3D9.XFileData,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::SetBoneOffsetMatrix']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::SetBoneOffsetMatrix([In] unsigned int Bone,[In] const D3DXMATRIX* pBoneTransform)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetBoneOffsetMatrix(System.Int32)">
            <summary>	
            Gets the bone offset matrix.	
            </summary>	
            <param name="bone"><para>Bone number.</para></param>	
            <returns>Returns a reference to the bone offset matrix. Do not free this reference.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetBoneOffsetMatrix']/*"/>	
            <unmanaged>D3DXMATRIX* ID3DXSkinInfo::GetBoneOffsetMatrix([In] unsigned int Bone)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.Clone(SharpDX.Direct3D9.SkinInfo@)">
            <summary>	
            Clones a skin info object.	
            </summary>	
            <param name="skinInfoOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.SkinInfo"/> object, which will contain the cloned object if the method is successful.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::Clone']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::Clone([In] ID3DXSkinInfo** ppSkinInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.Remap(System.Int32,System.Int32)">
            <summary>	
            Updates bone influence information to match vertices after they are reordered. This method should be called if the target vertex buffer has been reordered externally.	
            </summary>	
            <param name="numVertices"><para>Number of vertices to remap.</para></param>	
            <param name="vertexRemapRef"><para>Array of DWORDS whose length is specified by NumVertices.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Each element in pVertexRemap specifies the previous vertex index for that position.  For example, if a vertex was in position 3 but has been remapped to position 5, then the fifth element of pVertexRemap should contain 3.  The vertex remap array returned by <see cref="M:SharpDX.Direct3D9.Mesh.Optimize(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)"/> can be used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::Remap']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::Remap([In] unsigned int NumVertices,[In] unsigned int* pVertexRemap)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.SetFVF(System.Int32)">
            <summary>	
            Sets the flexible vertex format (FVF) type.	
            </summary>	
            <param name="fvf"><para>Flexible vertex format. See <see cref="T:SharpDX.Direct3D9.VertexFormat"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::SetFVF']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::SetFVF([In] unsigned int FVF)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.SetDeclaration(SharpDX.Direct3D9.VertexElement)">
            <summary>	
            Sets the vertex declaration.	
            </summary>	
            <param name="declarationRef"><para>Pointer to an array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::SetDeclaration']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::SetDeclaration([In] const D3DVERTEXELEMENT9* pDeclaration)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetFVF">
            <summary>	
            Gets the fixed function vertex value.	
            </summary>	
            <returns>Returns the flexible vertex format (FVF) codes.</returns>	
            <remarks>	
            This method can return 0 if the vertex format cannot be mapped directly to an FVF code.  This will occur for a mesh created from a vertex declaration that doesn't have the same order and elements supported by the FVF codes.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetFVF']/*"/>	
            <unmanaged>unsigned int ID3DXSkinInfo::GetFVF()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.GetDeclaration(SharpDX.Direct3D9.VertexElement)">
            <summary>	
            Gets the vertex declaration.	
            </summary>	
            <param name="declaration"><para>Array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> elements describing the vertex format of the mesh vertices. The upper limit of this declarator array is <see cref="F:SharpDX.Direct3D9.VertexFormatDeclaratorCount.Max"/>. The vertex element array ends with the D3DDECL_END macro. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The array of elements includes the D3DDECL_END macro, which ends the declaration.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetDeclaration']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::GetDeclaration([In] D3DVERTEXELEMENT9* Declaration)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.UpdateSkinnedMesh(SharpDX.Matrix@,SharpDX.Matrix@,System.IntPtr,System.IntPtr)">
            <summary>	
            Applies software skinning to the target vertices based on the current matrices.	
            </summary>	
            <param name="boneTransformsRef"><para>Bone transform matrix.</para></param>	
            <param name="boneInvTransposeTransformsRef"><para>Inverse transpose of the bone transform matrix.</para></param>	
            <param name="verticesSrcRef"><para>Pointer to the buffer containing the source vertices.</para></param>	
            <param name="verticesDstRef"><para>Pointer to the buffer containing the destination vertices.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            When used to skin vertices with two position elements, this method skins the second position element with the inverse of the bone instead of the bone itself.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::UpdateSkinnedMesh']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::UpdateSkinnedMesh([In] const D3DXMATRIX* pBoneTransforms,[In] const D3DXMATRIX* pBoneInvTransposeTransforms,[In] const void* pVerticesSrc,[In] void* pVerticesDst)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.ConvertToBlendedMesh(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Takes a mesh and returns a new mesh with per-vertex blend weights and a bone combination table. The table describes which bones affect which subsets of the mesh.	
            </summary>	
            <param name="meshRef"><para>Input mesh. See <see cref="T:SharpDX.Direct3D9.Mesh"/>.</para></param>	
            <param name="options"><para>Currently unused.</para></param>	
            <param name="adjacencyInRef"><para>Input mesh adjacency information.</para></param>	
            <param name="adjacencyOutRef"><para>Output mesh adjacency information.</para></param>	
            <param name="faceRemapRef"><para>An array of DWORDs, one per face, that identifies the original mesh face that corresponds to each face in the blended mesh. If the value supplied for this argument is <c>null</c>, face remap data is not returned.</para></param>	
            <param name="vertexRemapOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface, which contains a DWORD for each vertex that specifies how the new vertices map to the old vertices. This remap is useful if you need to alter external data based on the new vertex mapping. This parameter is optional; <c>null</c> may be used.</para></param>	
            <param name="maxFaceInflRef"><para>Pointer to a DWORD that will contain the maximum number of bone influences required per vertex for this skinning method.</para></param>	
            <param name="numBoneCombinationsRef"><para>Pointer to the number of bones in the bone combination table.</para></param>	
            <param name="boneCombinationTableOut"><para>Pointer to the bone combination table. The data is organized in a <see cref="T:SharpDX.Direct3D9.BoneCombination"/> structure.</para></param>	
            <param name="meshOut"><para>Pointer to the new mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Each element in the remap array specifies the previous index for that position. For example, if a vertex was in position 3 but has been remapped to position 5, then the fifth element of pVertexRemap will contain 3.This method does not run on hardware that does not support fixed-function vertex blending.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::ConvertToBlendedMesh']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::ConvertToBlendedMesh([In] ID3DXMesh* pMesh,[In] unsigned int Options,[In] const unsigned int* pAdjacencyIn,[In] unsigned int* pAdjacencyOut,[In] unsigned int* pFaceRemap,[In] ID3DXBuffer** ppVertexRemap,[In] unsigned int* pMaxFaceInfl,[In] unsigned int* pNumBoneCombinations,[In] ID3DXBuffer** ppBoneCombinationTable,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SkinInfo.ConvertToIndexedBlendedMesh(SharpDX.Direct3D9.Mesh,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,System.Int32,System.Int32,SharpDX.Direct3D.Blob@,SharpDX.Direct3D9.Mesh@)">
            <summary>	
            Takes a mesh and returns a new mesh with per-vertex blend weights, indices, and a bone combination table. The table describes which bone palettes affect which subsets of the mesh.	
            </summary>	
            <param name="meshRef"><para>The input mesh. See <see cref="T:SharpDX.Direct3D9.Mesh"/>.</para></param>	
            <param name="options"><para>Currently unused.</para></param>	
            <param name="paletteSize"><para>Number of bone matrices available for matrix palette skinning.</para></param>	
            <param name="adjacencyInRef"><para>Input mesh adjacency information.</para></param>	
            <param name="adjacencyOutRef"><para>Output mesh adjacency information.</para></param>	
            <param name="faceRemapRef"><para>An array of DWORDs, one per face, that identifies the original mesh face that corresponds to each face in the blended mesh. If the value supplied for this argument is <c>null</c>, face remap data is not returned.</para></param>	
            <param name="vertexRemapOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D.Blob"/> interface, which contains a DWORD for each vertex that specifies how the new vertices map to the old vertices. This remap is useful if you need to alter external data based on the new vertex mapping. This parameter is optional; <c>null</c> may be used.</para></param>	
            <param name="maxVertexInflRef"><para>Pointer to a DWORD that will contain the maximum number of bone influences required per vertex for this skinning method.</para></param>	
            <param name="numBoneCombinationsRef"><para>Pointer to the number of bones in the bone combination table.</para></param>	
            <param name="boneCombinationTableOut"><para>Pointer to the bone combination table. The data is organized in a <see cref="T:SharpDX.Direct3D9.BoneCombination"/> structure.</para></param>	
            <param name="meshOut"><para>Pointer to the new mesh.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Each element in the remap arrays specifies the previous index for that position. For example, if a vertex was in position 3 but has been remapped to position 5, then the fifth element of pVertexRemap will contain 3.This method does not run on hardware that does not support fixed-function vertex blending.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::ConvertToIndexedBlendedMesh']/*"/>	
            <unmanaged>HRESULT ID3DXSkinInfo::ConvertToIndexedBlendedMesh([In] ID3DXMesh* pMesh,[In] unsigned int Options,[In] unsigned int paletteSize,[In] const unsigned int* pAdjacencyIn,[In] unsigned int* pAdjacencyOut,[In] unsigned int* pFaceRemap,[In] ID3DXBuffer** ppVertexRemap,[In] unsigned int* pMaxVertexInfl,[In] unsigned int* pNumBoneCombinations,[In] ID3DXBuffer** ppBoneCombinationTable,[In] ID3DXMesh** ppMesh)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.SkinInfo.MaxVertexInfluences">
            <summary>	
            Gets the maximum number of influences for any vertex in the mesh.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetMaxVertexInfluences']/*"/>	
            <unmanaged>GetMaxVertexInfluences</unmanaged>	
            <unmanaged>HRESULT ID3DXSkinInfo::GetMaxVertexInfluences([Out] unsigned int* maxVertexInfluences)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SkinInfo.NumBones">
            <summary>	
            Gets the number of bones.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetNumBones']/*"/>	
            <unmanaged>GetNumBones</unmanaged>	
            <unmanaged>unsigned int ID3DXSkinInfo::GetNumBones()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SkinInfo.MinBoneInfluence">
            <summary>	
            Gets the minimum bone influence. Influence values smaller than this are ignored.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetMinBoneInfluence']/*"/>	
            <unmanaged>GetMinBoneInfluence</unmanaged>	
            <unmanaged>float ID3DXSkinInfo::GetMinBoneInfluence()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SkinInfo.FVF">
            <summary>	
            Gets the fixed function vertex value.	
            </summary>	
            <remarks>	
            This method can return 0 if the vertex format cannot be mapped directly to an FVF code.  This will occur for a mesh created from a vertex declaration that doesn't have the same order and elements supported by the FVF codes.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSkinInfo::GetFVF']/*"/>	
            <unmanaged>GetFVF</unmanaged>	
            <unmanaged>unsigned int ID3DXSkinInfo::GetFVF()</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Sprite">
            <summary>	
            The <see cref="T:SharpDX.Direct3D9.Sprite"/> interface provides a set of methods that simplify the process of drawing sprites using Microsoft Direct3D.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite']/*"/>	
            <unmanaged>ID3DXSprite</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Sprite"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the device associated with the sprite object.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface, representing the Direct3D device object associated with the sprite object.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned.<see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::GetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.GetTransform(SharpDX.Matrix@)">
            <summary>	
            Gets the sprite transform.	
            </summary>	
            <param name="transformRef"><para>Pointer to a <see cref="T:SharpDX.Matrix"/> that contains a transform of the sprite from the original world space.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned.<see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::GetTransform']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::GetTransform([Out] D3DXMATRIX* pTransform)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.SetTransform(SharpDX.Matrix@)">
            <summary>	
            Sets the sprite transform.	
            </summary>	
            <param name="transformRef"><para>Pointer to a <see cref="T:SharpDX.Matrix"/> that contains a transform of the sprite from the original world space. Use this transform to scale, rotate, or transform the sprite.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned.<see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::SetTransform']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::SetTransform([In] const D3DXMATRIX* pTransform)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.SetWorldViewRH(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>	
            Sets the right-handed world-view transform for a sprite. A call to this method is required before billboarding or sorting sprites.	
            </summary>	
            <param name="worldRef"><para>Pointer to a <see cref="T:SharpDX.Matrix"/> that contains a world transform. If <c>null</c>, the identity matrix is used for the world transform.</para></param>	
            <param name="viewRef"><para>Pointer to a <see cref="T:SharpDX.Matrix"/> that contains a view transform. If <c>null</c>, the identity matrix is used for the view transform.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned.<see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            A call to this method (or to <see cref="M:SharpDX.Direct3D9.Sprite.SetWorldViewLH(SharpDX.Matrix@,SharpDX.Matrix@)"/>) is required if the sprite will be rendered with the D3DXSprite__BILLBOARD, D3DXSprite__SORT_DEPTH_FRONTTOBACK, or D3DXSprite__SORT_DEPTH_BACKTOFRONT flag value in <see cref="M:SharpDX.Direct3D9.Sprite.Begin(System.Int32)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::SetWorldViewRH']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::SetWorldViewRH([In] const D3DXMATRIX* pWorld,[In] const D3DXMATRIX* pView)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.SetWorldViewLH(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>	
            Sets the left-handed world-view transform for a sprite. A call to this method is required before billboarding or sorting sprites.	
            </summary>	
            <param name="worldRef"><para>Pointer to a <see cref="T:SharpDX.Matrix"/> that contains a world transform. If <c>null</c>, the identity matrix is used for the world transform.</para></param>	
            <param name="viewRef"><para>Pointer to a <see cref="T:SharpDX.Matrix"/> that contains a view transform. If <c>null</c>, the identity matrix is used for the view transform.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned.<see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            A call to this method (or to <see cref="M:SharpDX.Direct3D9.Sprite.SetWorldViewRH(SharpDX.Matrix@,SharpDX.Matrix@)"/>) is required if the sprite will be rendered with the D3DXSprite__BILLBOARD, D3DXSprite__SORT_DEPTH_FRONTTOBACK, or D3DXSprite__SORT_DEPTH_BACKTOFRONT flag value in <see cref="M:SharpDX.Direct3D9.Sprite.Begin(System.Int32)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::SetWorldViewLH']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::SetWorldViewLH([In] const D3DXMATRIX* pWorld,[In] const D3DXMATRIX* pView)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.Begin(System.Int32)">
            <summary>	
            Prepares a device for drawing sprites.	
            </summary>	
            <param name="flags"><para>Combination of zero or more flags that describe sprite rendering options. For this method, the valid flags are:</para>  <see cref="F:SharpDX.Direct3D9.SpriteFlags.AlphaBlend"/> D3DXSPRITE__BILLBOARD <see cref="F:SharpDX.Direct3D9.SpriteFlags.DoNotModifyRenderState"/> <see cref="F:SharpDX.Direct3D9.SpriteFlags.DoNotSaveState"/> <see cref="F:SharpDX.Direct3D9.SpriteFlags.ObjectSpace"/> D3DXSPRITE__SORT_DEPTH_BACKTOFRONT D3DXSPRITE__SORT_DEPTH_FRONTTOBACK D3DXSPRITE__SORT_TEXTURE  <para> For a description of the flags and for information on how to control device state capture and device view transforms, see <see cref="T:SharpDX.Direct3D9.SpriteFlags"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>	
            <remarks>	
            This method must be called from inside a <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> . . . <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> sequence. <see cref="M:SharpDX.Direct3D9.Sprite.Begin(System.Int32)"/> cannot be used as a substitute for either <see cref="M:SharpDX.Direct3D9.Device.BeginScene"/> or <see cref="M:SharpDX.Direct3D9.RenderToSurface.BeginScene(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Viewport@)"/>.This method will set the following states on the device.Render States:Type (<see cref="T:SharpDX.Direct3D9.RenderState"/>)Value D3DRS_ALPHABLENDENABLETRUE D3DRS_ALPHAFUNCD3DCMP_GREATER D3DRS_ALPHAREF0x00 D3DRS_ALPHATESTENABLEAlphaCmpCaps D3DRS_BLENDOPD3DBLENDOP_ADD D3DRS_CLIPPINGTRUE D3DRS_CLIPPLANEENABLEFALSE D3DRS_COLORWRITEENABLED3DCOLORWRITEENABLE_ALPHA | <see cref="F:SharpDX.Direct3D9.ColorWriteEnable.Blue"/> | <see cref="F:SharpDX.Direct3D9.ColorWriteEnable.Green"/> | <see cref="F:SharpDX.Direct3D9.ColorWriteEnable.Red"/> D3DRS_CULLMODED3DCULL_NONE D3DRS_DESTBLENDD3DBLEND_INVSRCALPHA D3DRS_DIFFUSEMATERIALSOURCED3DMCS_COLOR1 D3DRS_ENABLEADAPTIVETESSELLATIONFALSE D3DRS_FILLMODED3DFILL_SOLID D3DRS_FOGENABLEFALSE D3DRS_INDEXEDVERTEXBLENDENABLEFALSE D3DRS_LIGHTINGFALSE D3DRS_RANGEFOGENABLEFALSE D3DRS_SEPARATEALPHABLENDENABLEFALSE D3DRS_SHADEMODED3DSHADE_GOURAUD D3DRS_SPECULARENABLEFALSE D3DRS_SRCBLENDD3DBLEND_SRCALPHA D3DRS_SRGBWRITEENABLEFALSE D3DRS_STENCILENABLEFALSE D3DRS_VERTEXBLENDFALSE D3DRS_WRAP00?Texture Stage States:Stage IdentifierType (<see cref="T:SharpDX.Direct3D9.TextureStage"/>)Value 0D3DTSS_ALPHAARG1D3DTA_TEXTURE 0D3DTSS_ALPHAARG2D3DTA_DIFFUSE 0D3DTSS_ALPHAOPD3DTOP_MODULATE 0D3DTSS_COLORARG1D3DTA_TEXTURE 0D3DTSS_COLORARG2D3DTA_DIFFUSE 0D3DTSS_COLOROPD3DTOP_MODULATE 0D3DTSS_TEXCOORDINDEX0 0D3DTSS_TEXTURETRANSFORMFLAGSD3DTTFF_DISABLE 1D3DTSS_ALPHAOPD3DTOP_DISABLE 1D3DTSS_COLOROPD3DTOP_DISABLE?Sampler States:Sampler Stage IndexType (<see cref="T:SharpDX.Direct3D9.SamplerState"/>)Value 0D3DSAMP_ADDRESSUD3DTADDRESS_CLAMP 0D3DSAMP_ADDRESSVD3DTADDRESS_CLAMP 0D3DSAMP_MAGFILTERD3DTEXF_ANISOTROPIC if TextureFilterCaps includes <see cref="F:SharpDX.Direct3D9.FilterCaps.MagAnisotropic"/>; otherwise <see cref="F:SharpDX.Direct3D9.TextureFilter.Linear"/> 0D3DSAMP_MAXMIPLEVEL0 0D3DSAMP_MAXANISOTROPYMaxAnisotropy 0D3DSAMP_MINFILTERD3DTEXF_ANISOTROPIC if TextureFilterCaps includes <see cref="F:SharpDX.Direct3D9.FilterCaps.MinAnisotropic"/>; otherwise <see cref="F:SharpDX.Direct3D9.TextureFilter.Linear"/> 0D3DSAMP_MIPFILTERD3DTEXF_LINEAR if TextureFilterCaps includes <see cref="F:SharpDX.Direct3D9.FilterCaps.MipLinear"/>; otherwise <see cref="F:SharpDX.Direct3D9.TextureFilter.Point"/> 0D3DSAMP_MIPMAPLODBIAS0 0D3DSAMP_SRGBTEXTURE0?Note??This method disables N-patches.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::Begin']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::Begin([In] unsigned int Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.Draw(SharpDX.Direct3D9.Texture,SharpDX.Rectangle,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Color4)">
            <summary>	
            Adds a sprite to the list of batched sprites.	
            </summary>	
            <param name="textureRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Texture"/> interface that represents the sprite texture.</para></param>	
            <param name="srcRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure that indicates the portion of the source texture to use for the sprite. If this parameter is <c>null</c>, then the entire source image is used for the sprite.</para></param>	
            <param name="centerRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> vector that identifies the center of the sprite. If this argument is <c>null</c>, the point (0,0,0) is used, which is the upper-left corner.</para></param>	
            <param name="positionRef"><para>Pointer to a <see cref="T:SharpDX.Vector3"/> vector that identifies the position of the sprite. If this argument is <c>null</c>, the point (0,0,0) is used, which is the upper-left corner.</para></param>	
            <param name="color"><para> <see cref="T:SharpDX.Color4"/> type. The color and alpha channels are modulated by this value. A value of 0xFFFFFFFF maintains the original source color and alpha data. Use the D3DCOLOR_RGBA macro to help generate this color.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            To scale, rotate, or translate a sprite, call <see cref="M:SharpDX.Direct3D9.Sprite.SetTransform(SharpDX.Matrix@)"/> with a matrix that contains the scale, rotate, and translate (SRT) values, before calling <see cref="M:SharpDX.Direct3D9.Sprite.Draw(SharpDX.Direct3D9.Texture,SharpDX.Rectangle,SharpDX.Vector3,SharpDX.Vector3,SharpDX.Color4)"/>. For information about setting SRT values in a matrix, see Matrix Transforms.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::Draw']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::Draw([In] IDirect3DTexture9* pTexture,[In] const RECT* pSrcRect,[In] const D3DXVECTOR3* pCenter,[In] const D3DXVECTOR3* pPosition,[In] D3DCOLOR Color)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.Flush">
            <summary>	
            Forces all batched sprites to be submitted to the device. Device states remain as they were after the last call to <see cref="M:SharpDX.Direct3D9.Sprite.Begin(System.Int32)"/>. The list of batched sprites is then cleared.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned.<see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::Flush']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::Flush()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.End">
            <summary>	
            Calls <see cref="M:SharpDX.Direct3D9.Sprite.Flush"/> and restores the device state to how it was before <see cref="M:SharpDX.Direct3D9.Sprite.Begin(System.Int32)"/> was called.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned.<see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/></returns>	
            <remarks>	
            ID3DXSprite::End cannot be used as a substitute for either <see cref="M:SharpDX.Direct3D9.Device.EndScene"/> or <see cref="M:SharpDX.Direct3D9.RenderToSurface.EndScene(System.Int32)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::End']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::End()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.OnLostDevice">
            <summary>	
            Use this method to release all references to video memory resources and delete all stateblocks. This method should be called whenever a device is lost or before resetting a device.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method should be called whenever the device is lost or before the user calls <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>. Even if the device was not actually lost, <see cref="M:SharpDX.Direct3D9.Sprite.OnLostDevice"/> is responsible for freeing stateblocks and other resources that may need to be released before resetting the device. As a result, the font object cannot be used again before calling <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/> and then <see cref="M:SharpDX.Direct3D9.Sprite.OnResetDevice"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::OnLostDevice']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::OnLostDevice()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Sprite.OnResetDevice">
            <summary>	
            Use this method to re-acquire resources and save initial state.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            ID3DXSprite::OnResetDevice should be called each time the device is reset (using <see cref="M:SharpDX.Direct3D9.Device.Reset(SharpDX.Direct3D9.PresentParameters@)"/>), before any other methods are called. This is a good place to re-acquire video-memory resources and capture state blocks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::OnResetDevice']/*"/>	
            <unmanaged>HRESULT ID3DXSprite::OnResetDevice()</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.Sprite.Device">
            <summary>	
            Retrieves the device associated with the sprite object.	
            </summary>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT ID3DXSprite::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Sprite.Transform">
            <summary>	
            Gets the sprite transform.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXSprite::GetTransform']/*"/>	
            <unmanaged>GetTransform</unmanaged>	
            <unmanaged>HRESULT ID3DXSprite::GetTransform([Out] D3DXMATRIX* pTransform)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.StateBlock">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.StateBlock"/> interface to encapsulate render states.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DStateBlock9']/*"/>	
            <unmanaged>IDirect3DStateBlock9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.StateBlock.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.StateBlock"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.StateBlock.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Gets the device.	
            </summary>	
            <param name="deviceOut"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.Device"/> interface that is returned.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DStateBlock9::GetDevice']/*"/>	
            <unmanaged>HRESULT IDirect3DStateBlock9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.StateBlock.Capture">
            <summary>	
            Capture the current value of states that are included in a stateblock.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails because capture cannot be done while in record mode, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The Capture method captures current values for states within an existing state block. It does not capture the entire state of the device. For example:<code>	
             <see cref="T:SharpDX.Direct3D9.StateBlock"/>* pStateBlock = <c>null</c>; pd3dDevice-&gt;BeginStateBlock();	
            // Add the ZENABLE state to the stateblock 	
            pd3dDevice-&gt;SetRenderState ( <see cref="F:SharpDX.Direct3D9.RenderState.ZEnable"/>, <see cref="F:SharpDX.Direct3D9.ZBufferType.UseZBuffer"/> );	
            pd3dDevice-&gt;EndStateBlock ( &amp;pStateBlock ); // Change the current value that is stored in the state block	
            pd3dDevice-&gt;SetRenderState ( <see cref="F:SharpDX.Direct3D9.RenderState.ZEnable"/>, <see cref="F:SharpDX.Direct3D9.ZBufferType.DontUseZBuffer"/> );	
            pStateBlock-&gt;Capture();			 pStateBlock-&gt;Release();	
            	
            </code>Creating an empty stateblock and calling the Capture method does nothing if no states have been set.The Capture method  will not capture information for lights that are explicitly or implicitly created after the stateblock is created.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DStateBlock9::Capture']/*"/>	
            <unmanaged>HRESULT IDirect3DStateBlock9::Capture()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.StateBlock.Apply">
            <summary>	
            Apply the state block to the current device state.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails while in record mode, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DStateBlock9::Apply']/*"/>	
            <unmanaged>HRESULT IDirect3DStateBlock9::Apply()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.StateBlock.#ctor(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.StateBlockType)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.StateBlock"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:SharpDX.Direct3D9.StateBlock.Device">
            <summary>	
            Gets the device.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DStateBlock9::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT IDirect3DStateBlock9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Surface">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.Surface"/> interface to query and prepare surfaces.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSurface9']/*"/>	
            <unmanaged>IDirect3DSurface9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Surface"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.GetContainer(System.Guid,System.IntPtr@)">
            <summary>	
            Provides access to the parent cube texture or texture (mipmap) object, if this surface is a child level of a cube texture or a mipmap. This method can also provide access to the parent swap chain if the surface is a back-buffer child.	
            </summary>	
            <param name="riid"><para>Reference identifier of the container being requested. </para></param>	
            <param name="containerOut"><para>Address of a reference to fill with the container reference if the query succeeds. See Remarks. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If the surface is created using CreateRenderTarget or CreateOffscreenPlainSurface or CreateDepthStencilSurface, the surface is considered stand alone. In this case, GetContainer will return the Direct3D device used to create the surface.If the call succeeds, the reference count of the container is increased by one.Here's an example getting the parent texture of a mip surface.<code>	
             // Assumes pSurface is a valid <see cref="T:SharpDX.Direct3D9.Surface"/> reference	
            void *pContainer = <c>null</c>;	
            <see cref="T:SharpDX.Direct3D9.Texture"/> *pTexture = <c>null</c>;	
            <see cref="T:SharpDX.Result"/> hr = pSurface-&gt;GetContainer(IID_IDirect3DTexture9, &amp;pContainer);	
            if (SUCCEEDED(hr) &amp;&amp; pContainer)	
            { pTexture = (<see cref="T:SharpDX.Direct3D9.Texture"/> *)pContainer;	
            }	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSurface9::GetContainer']/*"/>	
            <unmanaged>HRESULT IDirect3DSurface9::GetContainer([In] const GUID&amp; riid,[Out] void** ppContainer)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.GetDescription(SharpDX.Direct3D9.SurfaceDescription@)">
            <summary>	
            Retrieves a description of the surface.	
            </summary>	
            <param name="descRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.SurfaceDescription"/> structure, describing the surface. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.D3DERR_INVALIDCALL is returned if the argument is invalid.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSurface9::GetDesc']/*"/>	
            <unmanaged>HRESULT IDirect3DSurface9::GetDesc([Out] D3DSURFACE_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.LockRectangle(SharpDX.Direct3D9.LockedRect@,System.IntPtr,SharpDX.Direct3D9.LockFlags)">
            <summary>	
            Locks a rectangle on a surface.	
            </summary>	
            <param name="lockedRectRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.LockedRect"/> structure that describes the locked region. </para></param>	
            <param name="rectRef"><para>Pointer to a rectangle to lock. Specified by a reference to a <see cref="T:SharpDX.Rectangle"/> structure. Specifying <c>null</c> for this parameter expands the dirty region to cover the entire surface. </para></param>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.DoNotWait"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>  <para> You may not specify a subrect when using <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/>. For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>.If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> or <see cref="F:SharpDX.Direct3D9.ResultCode.WasStillDrawing"/>.</returns>	
            <remarks>	
            If the <see cref="F:SharpDX.Direct3D9.LockFlags.DoNotWait"/> flag is specified and the driver cannot lock the surface immediately, <see cref="M:SharpDX.Direct3D9.Surface.LockRectangle(SharpDX.Direct3D9.LockedRect@,System.IntPtr,SharpDX.Direct3D9.LockFlags)"/> will return <see cref="F:SharpDX.Direct3D9.ResultCode.WasStillDrawing"/> so that an application can use the CPU cycles while waiting for the driver to lock the surface.The only lockable format for a depth-stencil surface is <see cref="F:SharpDX.Direct3D9.Format.D16Lockable"/>. See <see cref="T:SharpDX.Direct3D9.Format"/>.For performance reasons, dirty regions are recorded only for level zero of a texture. Dirty regions are automatically recorded when <see cref="M:SharpDX.Direct3D9.Surface.LockRectangle(SharpDX.Direct3D9.LockedRect@,System.IntPtr,SharpDX.Direct3D9.LockFlags)"/> is called without <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>. See <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/> for more information.A multisample back buffer cannot be locked.This method cannot retrieve data from a surface that is is contained by a texture resource created with <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> because such a texture must be assigned to <see cref="F:SharpDX.Direct3D9.Pool.Default"/> memory and is therefore not lockable. In this case, use instead <see cref="M:SharpDX.Direct3D9.Device.GetRenderTargetData(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/> to copy texture data from device memory to system memory.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSurface9::LockRect']/*"/>	
            <unmanaged>HRESULT IDirect3DSurface9::LockRect([Out] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.UnlockRectangle">
            <summary>	
            Unlocks a rectangle on a surface.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSurface9::UnlockRect']/*"/>	
            <unmanaged>HRESULT IDirect3DSurface9::UnlockRect()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.GetDC">
            <summary>	
            Retrieves a device context.	
            </summary>	
            <returns><para>Pointer to the device context for the surface.</para></returns>	
            <remarks>	
            The following restrictions apply.<see cref="M:SharpDX.Direct3D9.Surface.GetDC"/> is valid on the following formats only: <see cref="F:SharpDX.Direct3D9.Format.R5G6B5"/>, <see cref="F:SharpDX.Direct3D9.Format.X1R5G5B5"/>, <see cref="F:SharpDX.Direct3D9.Format.R8G8B8"/>, and <see cref="F:SharpDX.Direct3D9.Format.X8R8G8B8"/>. Formats that contain Alpha are not supported because the GDI implementations don't have a well-defined behavior on the alpha channel. For more information about formats, see <see cref="T:SharpDX.Direct3D9.Format"/>. Only one device context per surface can be returned at a time. <see cref="M:SharpDX.Direct3D9.Surface.GetDC"/> will fail if the surface is already locked. If the surface is a member of a mipmap or cubemap, <see cref="M:SharpDX.Direct3D9.Surface.GetDC"/> fails if any other mipmap or cubemap member is locked. <see cref="M:SharpDX.Direct3D9.Surface.GetDC"/> fails on render targets unless they were created lockable (or, in the case of back buffers, with the <see cref="F:SharpDX.Direct3D9.PresentFlags.LockableBackBuffer"/> flag). For surfaces not created with <see cref="M:SharpDX.Direct3D9.Device.CreateOffscreenPlainSurface(System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.IntPtr)"/>, <see cref="M:SharpDX.Direct3D9.Surface.GetDC"/> will fail on default pool (<see cref="F:SharpDX.Direct3D9.Pool.Default"/>) surfaces unless they are dynamic (<see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/>) or are lockable render targets. <see cref="M:SharpDX.Direct3D9.Surface.GetDC"/> will fail on <see cref="F:SharpDX.Direct3D9.Pool.Scratch"/> surfaces.When a device context is outstanding on a surface, the application may not call these methods:<see cref="T:SharpDX.Direct3D9.CubeTexture"/> <see cref="M:SharpDX.Direct3D9.CubeTexture.LockRectangle(SharpDX.Direct3D9.CubeMapFace,System.Int32,SharpDX.Direct3D9.LockFlags)"/>  <see cref="T:SharpDX.Direct3D9.Device"/> <see cref="M:SharpDX.Direct3D9.Device.ColorFill(SharpDX.Direct3D9.Surface,SharpDX.Color4)"/>   <see cref="M:SharpDX.Direct3D9.Device.StretchRectangle(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.TextureFilter)"/>   <see cref="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/>   <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/>  <see cref="T:SharpDX.Direct3D9.Surface"/> <see cref="M:SharpDX.Direct3D9.Surface.LockRectangle(SharpDX.Direct3D9.LockedRect@,System.IntPtr,SharpDX.Direct3D9.LockFlags)"/>  <see cref="T:SharpDX.Direct3D9.SwapChain"/> <see cref="M:SharpDX.Direct3D9.SwapChain.Present(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)"/> * <see cref="T:SharpDX.Direct3D9.Texture"/> <see cref="M:SharpDX.Direct3D9.Texture.LockRectangle(System.Int32,SharpDX.Direct3D9.LockedRect@,System.IntPtr,SharpDX.Direct3D9.LockFlags)"/>?* (on a swap chain that contains the surface)IDirect3DSurface9::GetDC causes an implicit lock; do not retain the device context for later use. Call <see cref="M:SharpDX.Direct3D9.Surface.ReleaseDC(System.IntPtr)"/> to release it.It is valid to call <see cref="M:SharpDX.Direct3D9.Surface.GetDC"/>/<see cref="M:SharpDX.Direct3D9.Surface.ReleaseDC(System.IntPtr)"/> on levels of a mipmap or cubemap, however, these calls will be slow to all miplevels except the topmost level, and GDI operations to these miplevels will not be accelerated.The hdc provides access to Win32 and GDI functionality.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSurface9::GetDC']/*"/>	
            <unmanaged>HRESULT IDirect3DSurface9::GetDC([Out] HDC* phdc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.ReleaseDC(System.IntPtr)">
            <summary>	
            Release a device context handle.	
            </summary>	
            <param name="hdc"><para>Handle to a device context.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if the argument is invalid.</returns>	
            <remarks>	
            An hdc is a Windows resource. It must be released after use so Windows can return it to the pool of available resources.This method will release only the device context returned by <see cref="M:SharpDX.Direct3D9.Surface.GetDC"/>. Otherwise, this method will fail.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSurface9::ReleaseDC']/*"/>	
            <unmanaged>HRESULT IDirect3DSurface9::ReleaseDC([In] HDC hdc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateDepthStencil(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean)">
            <summary>
            Creates a depth-stencil surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="multisampleQuality">The multisample quality.</param>
            <param name="discard">if set to <c>true</c> [discard].</param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D9.Surface"/>, representing the created depth-stencil surface resource. </returns>
            <unmanaged>HRESULT IDirect3DDevice9::CreateDepthStencilSurface([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Discard,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateDepthStencil(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr@)">
            <summary>
            Creates a depth-stencil surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="multisampleQuality">The multisample quality.</param>
            <param name="discard">if set to <c>true</c> [discard].</param>
            <param name="sharedHandle">The shared handle.</param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D9.Surface"/>, representing the created depth-stencil surface resource. </returns>
            <unmanaged>HRESULT IDirect3DDevice9::CreateDepthStencilSurface([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Discard,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateDepthStencilEx(SharpDX.Direct3D9.DeviceEx,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,SharpDX.Direct3D9.Usage)">
            <summary>
            Creates a depth-stencil surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="multisampleQuality">The multisample quality.</param>
            <param name="discard">if set to <c>true</c> [discard].</param>
            <param name="usage">The usage.</param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D9.Surface"/>, representing the created depth-stencil surface resource. </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::CreateDepthStencilSurfaceEx([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Discard,[Out, Fast] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle,[In] unsigned int Usage)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateDepthStencilEx(SharpDX.Direct3D9.DeviceEx,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,SharpDX.Direct3D9.Usage,System.IntPtr@)">
            <summary>
            Creates a depth-stencil surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="multisampleQuality">The multisample quality.</param>
            <param name="discard">if set to <c>true</c> [discard].</param>
            <param name="usage">The usage.</param>
            <param name="sharedHandle">The shared handle.</param>
            <returns>A reference to a <see cref="T:SharpDX.Direct3D9.Surface"/>, representing the created depth-stencil surface resource. </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::CreateDepthStencilSurfaceEx([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Discard,[Out, Fast] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle,[In] unsigned int Usage)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateOffscreenPlain(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool)">
            <summary>
            Create an off-screen surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.Surface"/> created.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::CreateOffscreenPlainSurface([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateOffscreenPlain(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.IntPtr@)">
            <summary>
            Create an off-screen surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="sharedHandle">The shared handle.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.Surface"/> created.</returns>
            <unmanaged>HRESULT IDirect3DDevice9::CreateOffscreenPlainSurface([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateOffscreenPlainEx(SharpDX.Direct3D9.DeviceEx,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Usage)">
            <summary>
            Create an off-screen surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="usage">The usage.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Surface"/> created.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::CreateOffscreenPlainSurfaceEx([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle,[In] unsigned int Usage)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateOffscreenPlainEx(SharpDX.Direct3D9.DeviceEx,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Usage,System.IntPtr@)">
            <summary>
            Create an off-screen surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="usage">The usage.</param>
            <param name="sharedHandle">The shared handle.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Surface"/> created.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::CreateOffscreenPlainSurfaceEx([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle,[In] unsigned int Usage)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateRenderTarget(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean)">
            <summary>
            Creates a render-target surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="multisampleQuality">The multisample quality.</param>
            <param name="lockable">if set to <c>true</c> [lockable].</param>
            <returns>
            A render-target <see cref="T:SharpDX.Direct3D9.Surface"/>.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::CreateRenderTarget([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Lockable,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateRenderTarget(SharpDX.Direct3D9.Device,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,System.IntPtr@)">
            <summary>
            Creates a render-target surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="multisampleQuality">The multisample quality.</param>
            <param name="lockable">if set to <c>true</c> [lockable].</param>
            <param name="sharedHandle">The shared handle.</param>
            <returns>
            A render-target <see cref="T:SharpDX.Direct3D9.Surface"/>.
            </returns>
            <unmanaged>HRESULT IDirect3DDevice9::CreateRenderTarget([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Lockable,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateRenderTargetEx(SharpDX.Direct3D9.DeviceEx,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,SharpDX.Direct3D9.Usage)">
            <summary>
            Creates a render-target surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="multisampleQuality">The multisample quality.</param>
            <param name="lockable">if set to <c>true</c> [lockable].</param>
            <param name="usage">The usage.</param>
            <returns>A render-target <see cref="T:SharpDX.Direct3D9.Surface"/>.</returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::CreateRenderTargetEx([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Lockable,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle,[In] unsigned int Usage)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateRenderTargetEx(SharpDX.Direct3D9.DeviceEx,System.Int32,System.Int32,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.MultisampleType,System.Int32,System.Boolean,SharpDX.Direct3D9.Usage,System.IntPtr@)">
            <summary>
            Creates a render-target surface.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <param name="multisampleType">Type of the multisample.</param>
            <param name="multisampleQuality">The multisample quality.</param>
            <param name="lockable">if set to <c>true</c> [lockable].</param>
            <param name="usage">The usage.</param>
            <param name="sharedHandle">The shared handle.</param>
            <returns>A render-target <see cref="T:SharpDX.Direct3D9.Surface"/>.</returns>
            <unmanaged>HRESULT IDirect3DDevice9Ex::CreateRenderTargetEx([In] unsigned int Width,[In] unsigned int Height,[In] D3DFORMAT Format,[In] D3DMULTISAMPLE_TYPE MultiSample,[In] unsigned int MultisampleQuality,[In] BOOL Lockable,[Out] IDirect3DSurface9** ppSurface,[In] void** pSharedHandle,[In] unsigned int Usage)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFile(SharpDX.Direct3D9.Surface,System.String,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Loads a surface from a file.
            </summary>
            <param name="surface">The surface.</param>
            <param name="fileName">Name of the file.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileW([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const wchar_t* pSrcFile,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFile(SharpDX.Direct3D9.Surface,System.String,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Loads a surface from a file.
            </summary>
            <param name="surface">The surface.</param>
            <param name="fileName">Name of the file.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileW([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const wchar_t* pSrcFile,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFile(SharpDX.Direct3D9.Surface,System.String,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a surface from a file.
            </summary>
            <param name="surface">The surface.</param>
            <param name="fileName">Name of the file.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="imageInformation">The image information.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileW([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const wchar_t* pSrcFile,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFile(SharpDX.Direct3D9.Surface,System.String,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a surface from a file.
            </summary>
            <param name="surface">The surface.</param>
            <param name="fileName">Name of the file.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="palette">The palette.</param>
            <param name="imageInformation">The image information.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileW([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const wchar_t* pSrcFile,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFileInMemory(SharpDX.Direct3D9.Surface,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Loads a surface from a file in memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="memory">The memory.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFileInMemory(SharpDX.Direct3D9.Surface,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Loads a surface from a file in memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="memory">The memory.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFileInMemory(SharpDX.Direct3D9.Surface,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a surface from a file in memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="memory">The memory.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="imageInformation">The image information.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFileInMemory(SharpDX.Direct3D9.Surface,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a surface from a file in memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="memory">The memory.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="palette">The palette.</param>
            <param name="imageInformation">The image information.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFileInStream(SharpDX.Direct3D9.Surface,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Loads a surface from a file in memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFileInStream(SharpDX.Direct3D9.Surface,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Loads a surface from a file in memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFileInStream(SharpDX.Direct3D9.Surface,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a surface from a file in memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromFileInStream(SharpDX.Direct3D9.Surface,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a surface from a file in memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="palette">The palette.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.CreateFromFileInStream(SharpDX.Direct3D9.Surface,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[],System.IntPtr)">
            <summary>
            Loads a surface from a file in memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="palette">The palette.</param>
            <param name="imageInformation">The image information.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromFileInMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromMemory(SharpDX.Direct3D9.Surface,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Rectangle)">
            <summary>
            Loads a surface from memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="data">The data.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="sourcePitch">The source pitch.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcPitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromMemory(SharpDX.Direct3D9.Surface,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Loads a surface from memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="data">The data.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="sourcePitch">The source pitch.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcPitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromMemory(SharpDX.Direct3D9.Surface,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Loads a surface from memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="data">The data.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="sourcePitch">The source pitch.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="sourcePalette">The source palette.</param>
            <param name="destinationPalette">The destination palette.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcPitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromMemory(SharpDX.Direct3D9.Surface,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Loads a surface from memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="data">The data.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="sourcePitch">The source pitch.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="sourcePalette">The source palette.</param>
            <param name="destinationPalette">The destination palette.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcPitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromStream(SharpDX.Direct3D9.Surface,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Rectangle)">
            <summary>
            Loads a surface from memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="sourcePitch">The source pitch.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcPitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromStream(SharpDX.Direct3D9.Surface,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Loads a surface from memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="sourcePitch">The source pitch.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcPitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromStream(SharpDX.Direct3D9.Surface,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Loads a surface from memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="sourcePitch">The source pitch.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="sourcePalette">The source palette.</param>
            <param name="destinationPalette">The destination palette.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcPitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromStream(SharpDX.Direct3D9.Surface,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Loads a surface from memory.
            </summary>
            <param name="surface">The surface.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceFormat">The source format.</param>
            <param name="sourcePitch">The source pitch.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="sourcePalette">The source palette.</param>
            <param name="destinationPalette">The destination palette.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromMemory([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] const void* pSrcMemory,[In] D3DFORMAT SrcFormat,[In] unsigned int SrcPitch,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Loads a surface from a source surface.
            </summary>
            <param name="destinationSurface">The destination surface.</param>
            <param name="sourceSurface">The source surface.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromSurface([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Loads a surface from a source surface.
            </summary>
            <param name="destinationSurface">The destination surface.</param>
            <param name="sourceSurface">The source surface.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromSurface([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.FromSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Rectangle,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Loads a surface from a source surface.
            </summary>
            <param name="destinationSurface">The destination surface.</param>
            <param name="sourceSurface">The source surface.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="destinationPalette">The destination palette.</param>
            <param name="sourcePalette">The source palette.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadSurfaceFromSurface([In] IDirect3DSurface9* pDestSurface,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestRect,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect,[In] D3DX_FILTER Filter,[In] int ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.GetContainer``1(System.Guid)">
            <summary>
            Gets the parent cube texture or texture (mipmap) object, if this surface is a child level of a cube texture or a mipmap. 
            This method can also provide access to the parent swap chain if the surface is a back-buffer child.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guid">The GUID.</param>
            <returns>The parent container texture.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.LockRectangle(SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a rectangle on a surface.
            </summary>
            <param name="flags">The type of lock to perform.</param>
            <returns>A pointer to the locked region</returns>
            <unmanaged>HRESULT IDirect3DSurface9::LockRect([Out] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.LockRectangle(SharpDX.Rectangle,SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a rectangle on a surface.
            </summary>
            <param name="rect">The rectangle to lock.</param>
            <param name="flags">The type of lock to perform.</param>
            <returns>A pointer to the locked region</returns>
            <unmanaged>HRESULT IDirect3DSurface9::LockRect([Out] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.LockRectangle(SharpDX.Direct3D9.LockFlags,SharpDX.DataStream@)">
            <summary>
            Locks a rectangle on a surface.
            </summary>
            <param name="flags">The type of lock to perform.</param>
            <param name="stream">The stream pointing to the locked region.</param>
            <returns>A pointer to the locked region</returns>
            <unmanaged>HRESULT IDirect3DSurface9::LockRect([Out] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.LockRectangle(SharpDX.Rectangle,SharpDX.Direct3D9.LockFlags,SharpDX.DataStream@)">
            <summary>
            Locks a rectangle on a surface.
            </summary>
            <param name="rect">The rectangle to lock.</param>
            <param name="flags">The type of lock to perform.</param>
            <param name="stream">The stream pointing to the locked region.</param>
            <returns>A pointer to the locked region</returns>
            <unmanaged>HRESULT IDirect3DSurface9::LockRect([Out] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.ToFile(SharpDX.Direct3D9.Surface,System.String,SharpDX.Direct3D9.ImageFileFormat)">
            <summary>
            Saves a surface to a file.
            </summary>
            <param name="surface">The surface.</param>
            <param name="fileName">Name of the file.</param>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveSurfaceToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.ToFile(SharpDX.Direct3D9.Surface,System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Rectangle)">
            <summary>
            Saves a surface to a file.
            </summary>
            <param name="surface">The surface.</param>
            <param name="fileName">Name of the file.</param>
            <param name="format">The format.</param>
            <param name="rectangle">The rectangle.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveSurfaceToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.ToFile(SharpDX.Direct3D9.Surface,System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Saves a surface to a file.
            </summary>
            <param name="surface">The surface.</param>
            <param name="fileName">Name of the file.</param>
            <param name="format">The format.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveSurfaceToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.ToStream(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.ImageFileFormat)">
            <summary>
            Saves a surface to a stream.
            </summary>
            <param name="surface">The surface.</param>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveSurfaceToFileInMemory([In] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.ToStream(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Rectangle)">
            <summary>
            Saves a surface to a stream.
            </summary>
            <param name="surface">The surface.</param>
            <param name="format">The format.</param>
            <param name="rectangle">The rectangle.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveSurfaceToFileInMemory([In] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Surface.ToStream(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Rectangle,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Saves a surface to a stream.
            </summary>
            <param name="surface">The surface.</param>
            <param name="format">The format.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveSurfaceToFileInMemory([In] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DSurface9* pSrcSurface,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcRect)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Surface.Description">
            <summary>	
            Retrieves a description of the surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSurface9::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT IDirect3DSurface9::GetDesc([Out] D3DSURFACE_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.SwapChain">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.SwapChain"/> interface to manipulate a swap chain.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9']/*"/>	
            <unmanaged>IDirect3DSwapChain9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.SwapChain"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.Present(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>	
            Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.	
            </summary>	
            <param name="sourceRectRef"><para>Pointer to the source rectangle (see <see cref="T:SharpDX.Rectangle"/>). Use <c>null</c> to present the entire surface. This value must be <c>null</c> unless the swap chain was created with <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/>. If the rectangle exceeds the source surface, the rectangle is clipped to the source surface. </para></param>	
            <param name="destRectRef"><para>Pointer to the destination rectangle in client coordinates (see <see cref="T:SharpDX.Rectangle"/>). This value must be <c>null</c> unless the swap chain was created with <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/>. Use <c>null</c> to fill the entire client area. If the rectangle exceeds the destination client area, the rectangle is clipped to the destination client area. </para></param>	
            <param name="hDestWindowOverride"><para>Destination window whose client area is taken as the target for this presentation. If this value is <c>null</c>, the hWndDeviceWindow member of <see cref="T:SharpDX.Direct3D9.PresentParameters"/> is taken. </para></param>	
            <param name="dirtyRegionRef"><para>This value must be <c>null</c> unless the swap chain was created with <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/>. See Flipping Surfaces (Direct3D 9). If this value is non-<c>null</c>, the contained region is expressed in back buffer coordinates. The rectangles within the region are the minimal set of pixels that need to be updated. This method takes these rectangles into account when optimizing the presentation by copying only the pixels within the region, or some suitably expanded set of rectangles. This is an aid to optimization only, and the application should not rely on the region being copied exactly. The implementation may choose to copy the whole source rectangle.</para></param>	
            <param name="dwFlags"><para>Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, or any combination of <see cref="F:SharpDX.Direct3D9.Present.DoNotWait"/> or <see cref="F:SharpDX.Direct3D9.Present.LinearContent"/>. </para>  If dwFlags = 0, this method behaves as it did prior to Direct3D 9. Present will spin until the hardware is free, without returning an error. If dwFlags = <see cref="F:SharpDX.Direct3D9.Present.DoNotWait"/>, and the hardware is busy processing or waiting for a vertical sync interval, the method will return <see cref="F:SharpDX.Direct3D9.ResultCode.WasStillDrawing"/>. If dwFlags = <see cref="F:SharpDX.Direct3D9.Present.LinearContent"/>, gamma correction is performed from linear space to sRGB for windowed swap chains. This flag will take effect only when the driver exposes <see cref="F:SharpDX.Direct3D9.Caps3.LinearToSrgbPresentation"/> (see Gamma (Direct3D 9)). Appliations should specify this flag if the backbuffer format is 16-bit floating point in order to match windowed mode present to fullscreen gamma behavior.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.DeviceLost"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.DriverInternalError"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The Present method is a shortcut to Present. Present has been updated to take a flag allowing the application to request that the method return immediately when the driver reports that it cannot schedule a presentation.If necessary, a stretch operation is applied to transfer the pixels within the source rectangle to the destination rectangle in the client area of the target window.Present will fail if called between BeginScene and EndScene pairs unless the render target is not the current render target (such as the back buffer you get from creating an additional swap chain). This is a new behavior for Direct3D 9.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::Present']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9::Present([In, Optional] const void* pSourceRect,[InOut, Optional] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.GetFrontBufferData(SharpDX.Direct3D9.Surface)">
            <summary>	
            Generates a copy of the swapchain's front buffer and places that copy in a system memory buffer provided by the application.	
            </summary>	
            <param name="destSurfaceRef"><para>Pointer to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface that will receive a copy of the swapchain's front buffer. The data is returned in successive rows with no intervening space, starting from the vertically highest row to the lowest.  For windowed mode, the size of the destination surface should be the size of the desktop. For full screen mode, the size of the destination surface should be the screen size. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If BackBuffer exceeds or equals the total number of back buffers, the function fails and returns <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Surface"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetFrontBufferData']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetFrontBufferData([In] IDirect3DSurface9* pDestSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.GetBackBuffer(System.Int32,SharpDX.Direct3D9.BackBufferType)">
            <summary>	
            Retrieves a back buffer from the swap chain of the device.	
            </summary>	
            <param name="iBackBuffer"><para>Index of the back buffer object to return. Back buffers are numbered from 0 to the total number of back buffers - 1. A value of 0 returns the first back buffer, not the front buffer. The front buffer is not accessible through this method. Use <see cref="M:SharpDX.Direct3D9.SwapChain.GetFrontBufferData(SharpDX.Direct3D9.Surface)"/> to retrieve a copy of the front buffer.</para></param>	
            <param name="type"><para>Stereo view is not supported in Direct3D 9, so the only valid value for this parameter is <see cref="F:SharpDX.Direct3D9.BackBufferType.Mono"/>. </para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the returned back buffer surface. </para></returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Surface"/> interface results in a memory leak. You must release any surfaces obtained through this method before releasing the swap chain it belongs to.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetBackBuffer']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetBackBuffer([In] unsigned int iBackBuffer,[In] D3DBACKBUFFER_TYPE Type,[Out] IDirect3DSurface9** ppBackBuffer)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.GetRasterStatus(SharpDX.Direct3D9.RasterStatus@)">
            <summary>	
            Returns information describing the raster of the monitor on which the swap chain is presented.	
            </summary>	
            <param name="rasterStatusRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.RasterStatus"/> structure filled with information about the position or other status of the raster on the monitor driven by this adapter. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if pRasterStatus is invalid or if the device does not support reading the current scan line. To determine if the device supports reading the scan line, check for the <see cref="F:SharpDX.Direct3D9.Caps.ReadScanline"/> flag in the Caps member of <see cref="T:SharpDX.Direct3D9.Capabilities"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetRasterStatus']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetRasterStatus([Out] D3DRASTER_STATUS* pRasterStatus)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.GetDisplayMode(SharpDX.Direct3D9.DisplayMode@)">
            <summary>	
            Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.	
            </summary>	
            <param name="modeRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayMode"/> structure containing data about the display mode of the adapter. As opposed to the display mode of the device, which may not be active if the device does not own full-screen mode. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetDisplayMode']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetDisplayMode([Out] D3DDISPLAYMODE* pMode)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the device associated with the swap chain.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface to fill with the device reference, if the query succeeds. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method allows navigation to the owning device object.Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Device"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetDevice']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.GetPresentParameters(SharpDX.Direct3D9.PresentParameters@)">
            <summary>	
            Retrieves the presentation parameters associated with a swap chain.	
            </summary>	
            <param name="presentationParametersRef"><para>Pointer to the presentation parameters. See <see cref="T:SharpDX.Direct3D9.PresentParameters"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method can be used to see the presentation parameters of the parent swap chain of a surface (a back buffer, for instance). The parent swap chain can be retrieved with <see cref="M:SharpDX.Direct3D9.Surface.GetContainer(System.Guid,System.IntPtr@)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetPresentParameters']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetPresentParameters([Out] D3DPRESENT_PARAMETERS* pPresentationParameters)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.#ctor(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.PresentParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.SwapChain"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="presentParameters">The present parameters.</param>
            <unmanaged>HRESULT IDirect3DDevice9::CreateAdditionalSwapChain([In] D3DPRESENT_PARAMETERS* pPresentationParameters,[In] IDirect3DSwapChain9** pSwapChain)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.GetBackBuffer(System.Int32)">
            <summary>
            Retrieves a back buffer from the swap chain of the device.
            </summary>
            <param name="iBackBuffer">The i back buffer.</param>
            <returns>The back buffer from the swap chain of the device.</returns>
            <unmanaged>HRESULT IDirect3DSwapChain9::GetBackBuffer([In] unsigned int iBackBuffer,[In] D3DBACKBUFFER_TYPE Type,[Out] IDirect3DSurface9** ppBackBuffer)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.Present(SharpDX.Direct3D9.Present)">
            <summary>
            Presents the contents of the next buffer in the sequence of back buffers to the screen.
            </summary>
            <param name="presentFlags">The present flags.</param>
            <unmanaged>HRESULT IDirect3DSwapChain9::Present([In, Optional] const void* pSourceRect,[InOut, Optional] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.Present(SharpDX.Direct3D9.Present,SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
            Presents the contents of the next buffer in the sequence of back buffers to the screen.
            </summary>
            <param name="presentFlags">The present flags.</param>
            <param name="sourceRectangle">The area of the back buffer that should be presented.</param>
            <param name="destinationRectangle">The area of the front buffer that should receive the result of the presentation.</param>
            <unmanaged>HRESULT IDirect3DSwapChain9::Present([In, Optional] const void* pSourceRect,[InOut, Optional] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.Present(SharpDX.Direct3D9.Present,SharpDX.Rectangle,SharpDX.Rectangle,System.IntPtr)">
            <summary>
            Presents the contents of the next buffer in the sequence of back buffers to the screen.
            </summary>
            <param name="presentFlags">The present flags.</param>
            <param name="sourceRectangle">The area of the back buffer that should be presented.</param>
            <param name="destinationRectangle">The area of the front buffer that should receive the result of the presentation.</param>
            <param name="windowOverride">The destination window whose client area is taken as the target for this presentation.</param>
            <unmanaged>HRESULT IDirect3DSwapChain9::Present([In, Optional] const void* pSourceRect,[InOut, Optional] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain.Present(SharpDX.Direct3D9.Present,SharpDX.Rectangle,SharpDX.Rectangle,System.IntPtr,System.Drawing.Region)">
            <summary>
            Presents the contents of the next buffer in the sequence of back buffers to the screen.
            </summary>
            <param name="flags">The flags.</param>
            <param name="sourceRectangle">The area of the back buffer that should be presented.</param>
            <param name="destinationRectangle">The area of the front buffer that should receive the result of the presentation.</param>
            <param name="windowOverride">The destination window whose client area is taken as the target for this presentation.</param>
            <param name="region">Specifies a region on the back buffer that contains the minimal amount of pixels that need to be updated.</param>
            <unmanaged>HRESULT IDirect3DSwapChain9::Present([In, Optional] const void* pSourceRect,[InOut, Optional] const void* pDestRect,[In] HWND hDestWindowOverride,[In] const RGNDATA* pDirtyRegion,[In] unsigned int dwFlags)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SwapChain.RasterStatus">
            <summary>	
            Returns information describing the raster of the monitor on which the swap chain is presented.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetRasterStatus']/*"/>	
            <unmanaged>GetRasterStatus</unmanaged>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetRasterStatus([Out] D3DRASTER_STATUS* pRasterStatus)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SwapChain.DisplayMode">
            <summary>	
            Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetDisplayMode']/*"/>	
            <unmanaged>GetDisplayMode</unmanaged>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetDisplayMode([Out] D3DDISPLAYMODE* pMode)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SwapChain.Device">
            <summary>	
            Retrieves the device associated with the swap chain.	
            </summary>	
            <remarks>	
            This method allows navigation to the owning device object.Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Device"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SwapChain.PresentParameters">
            <summary>	
            Retrieves the presentation parameters associated with a swap chain.	
            </summary>	
            <remarks>	
            This method can be used to see the presentation parameters of the parent swap chain of a surface (a back buffer, for instance). The parent swap chain can be retrieved with <see cref="M:SharpDX.Direct3D9.Surface.GetContainer(System.Guid,System.IntPtr@)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9::GetPresentParameters']/*"/>	
            <unmanaged>GetPresentParameters</unmanaged>	
            <unmanaged>HRESULT IDirect3DSwapChain9::GetPresentParameters([Out] D3DPRESENT_PARAMETERS* pPresentationParameters)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.SwapChain9Ex">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.SwapChain9Ex"/> interface to manipulate a swap chain.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9Ex']/*"/>	
            <unmanaged>IDirect3DSwapChain9Ex</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain9Ex.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.SwapChain9Ex"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain9Ex.GetLastPresentCount(System.Int32@)">
            <summary>	
            Returns the number of times the swapchain has been processed.	
            </summary>	
            <param name="lastPresentCountRef"><para>Pointer to a UINT to be filled with the number of times the <see cref="M:SharpDX.Direct3D9.DeviceEx.PresentEx(SharpDX.Direct3D9.Present)"/> method has been called. The count will also be incremented by calling some other APIs such as <see cref="M:SharpDX.Direct3D9.Device.SetDialogBoxMode(System.Boolean)"/>.</para></param>	
            <returns>S_OK the method was successful.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9Ex::GetLastPresentCount']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9Ex::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain9Ex.GetPresentStats(SharpDX.Direct3D9.PresentationStatistics@)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="presentationStatisticsRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9Ex::GetPresentStats']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9Ex::GetPresentStats([Out] D3DPRESENTSTATS* pPresentationStatistics)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.SwapChain9Ex.GetDisplayModeEx(SharpDX.Direct3D9.DisplayModeEx@,SharpDX.Direct3D9.DisplayRotation@)">
            <summary>	
            Retrieves the display mode's spatial resolution, color resolution, refresh frequency, and rotation settings.	
            </summary>	
            <param name="modeRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayModeEx"/> structure containing data about the display mode of the adapter. As opposed to the display mode of the device, which may not be active if the device does not own full-screen mode. </para></param>	
            <param name="rotationRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.DisplayRotation"/> indicating the type of screen rotation the application will do. The value returned through this reference is important when the <see cref="F:SharpDX.Direct3D9.PresentFlags.NoAutoRotate"/> flag is used; otherwise, it can be set to <c>null</c>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9Ex::GetDisplayModeEx']/*"/>	
            <unmanaged>HRESULT IDirect3DSwapChain9Ex::GetDisplayModeEx([Out] D3DDISPLAYMODEEX* pMode,[Out] D3DDISPLAYROTATION* pRotation)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.SwapChain9Ex.LastPresentCount">
            <summary>	
            Returns the number of times the swapchain has been processed.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9Ex::GetLastPresentCount']/*"/>	
            <unmanaged>GetLastPresentCount</unmanaged>	
            <unmanaged>HRESULT IDirect3DSwapChain9Ex::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.SwapChain9Ex.PresentStats">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DSwapChain9Ex::GetPresentStats']/*"/>	
            <unmanaged>GetPresentStats</unmanaged>	
            <unmanaged>HRESULT IDirect3DSwapChain9Ex::GetPresentStats([Out] D3DPRESENTSTATS* pPresentationStatistics)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.Texture">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.Texture"/> interface to manipulate a texture resource.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DTexture9']/*"/>	
            <unmanaged>IDirect3DTexture9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Texture"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.GetLevelDescription(System.Int32)">
            <summary>	
            Retrieves a level description of a texture resource.	
            </summary>	
            <param name="level"><para>Identifies a level of the texture resource. This method returns a surface description for the level specified by this parameter. </para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.SurfaceDescription"/> structure, describing the returned level. </para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DTexture9::GetLevelDesc']/*"/>	
            <unmanaged>HRESULT IDirect3DTexture9::GetLevelDesc([In] unsigned int Level,[Out] D3DSURFACE_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.GetSurfaceLevel(System.Int32)">
            <summary>	
            Retrieves the specified texture surface level.	
            </summary>	
            <param name="level"><para>Identifies a level of the texture resource. This method returns a surface for the level specified by this parameter. The top-level surface is denoted by 0. </para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Surface"/> interface, representing the returned surface. </para></returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Surface"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Surface"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DTexture9::GetSurfaceLevel']/*"/>	
            <unmanaged>HRESULT IDirect3DTexture9::GetSurfaceLevel([In] unsigned int Level,[Out] IDirect3DSurface9** ppSurfaceLevel)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.LockRectangle(System.Int32,SharpDX.Direct3D9.LockedRect@,System.IntPtr,SharpDX.Direct3D9.LockFlags)">
            <summary>	
            Locks a rectangle on a texture resource.	
            </summary>	
            <param name="level"><para>Specifies the level of the texture resource to lock. </para></param>	
            <param name="lockedRectRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.LockedRect"/> structure, describing the locked region. </para></param>	
            <param name="rectRef"><para>Pointer to a rectangle to lock. Specified by a reference to a <see cref="T:SharpDX.Rectangle"/> structure. Specifying <c>null</c> for this parameter expands the dirty region to cover the entire texture. </para></param>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>  <para> You may not specify a subrect when using <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/>. For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            Textures created with <see cref="F:SharpDX.Direct3D9.Pool.Default"/> are not lockable. Textures created in video memory are lockable when created with USAGE_DYNAMIC.For performance reasons, dirty regions are recorded only for level zero of a texture. Dirty regions are automatically recorded when <see cref="M:SharpDX.Direct3D9.Texture.LockRectangle(System.Int32,SharpDX.Direct3D9.LockedRect@,System.IntPtr,SharpDX.Direct3D9.LockFlags)"/> is called without <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>. See <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/> for more information.The only lockable format for a depth-stencil texture is D3DLOCK_D16_LOCKABLE.Video memory textures cannot be locked, but must be modified by calling <see cref="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/> or <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/>. There are exceptions for some proprietary driver pixel formats that Direct3D 9 does not recognize. These can be locked.This method cannot retrieve data from a texture resource created with <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> because such a texture must be assigned to <see cref="F:SharpDX.Direct3D9.Pool.Default"/> memory and is therefore not lockable. In this case, use instead <see cref="M:SharpDX.Direct3D9.Device.GetRenderTargetData(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/> to copy texture data from device memory to system memory.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DTexture9::LockRect']/*"/>	
            <unmanaged>HRESULT IDirect3DTexture9::LockRect([In] unsigned int Level,[Out] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.UnlockRectangle(System.Int32)">
            <summary>	
            Unlocks a rectangle on a texture resource.	
            </summary>	
            <param name="level"><para>Specifies the level of the texture resource to unlock. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DTexture9::UnlockRect']/*"/>	
            <unmanaged>HRESULT IDirect3DTexture9::UnlockRect([In] unsigned int Level)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.AddDirtyRectangle(System.IntPtr)">
            <summary>	
            Adds a dirty region to a texture resource.	
            </summary>	
            <param name="dirtyRectRef"><para>Pointer to a <see cref="T:SharpDX.Rectangle"/> structure, specifying the dirty region to add. Specifying <c>null</c> expands the dirty region to cover the entire texture. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            For performance reasons, dirty regions are only recorded for level zero of a texture. For sublevels, it is assumed that the corresponding (scaled) rectangle or box is also dirty. Dirty regions are automatically recorded when <see cref="M:SharpDX.Direct3D9.Texture.LockRectangle(System.Int32,SharpDX.Direct3D9.LockedRect@,System.IntPtr,SharpDX.Direct3D9.LockFlags)"/> is called without <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>. The destination surface of <see cref="M:SharpDX.Direct3D9.Device.UpdateSurface(SharpDX.Direct3D9.Surface,SharpDX.Direct3D9.Surface)"/> is also marked dirty automatically.Using <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> and explicitly specifying dirty regions can be used to increase the efficiency of <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/>. Using this method, applications can optimize what subset of a resource is copied by specifying dirty regions on the resource. However, the dirty regions may be expanded to optimize alignment.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DTexture9::AddDirtyRect']/*"/>	
            <unmanaged>HRESULT IDirect3DTexture9::AddDirtyRect([In] const void* pDirtyRect)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.#ctor(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Texture"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <unmanaged>HRESULT IDirect3DDevice9::CreateTexture([In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Levels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DTexture9** ppTexture,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.#ctor(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.IntPtr@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Texture"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="sharedHandle">The shared handle.</param>
            <unmanaged>HRESULT IDirect3DDevice9::CreateTexture([In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Levels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DTexture9** ppTexture,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.CheckRequirements(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool)">
            <summary>
            Checks texture-creation parameters.
            </summary>
            <param name="device">Device associated with the texture.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipLevelCount">Requested number of mipmap levels for the texture.</param>
            <param name="usage">The requested usage for the texture.</param>
            <param name="format">Requested format for the texture.</param>
            <param name="pool">Memory class where the resource will be placed.</param>
            <returns>
            A value type containing the proposed values to pass to the texture creation functions.
            </returns>
            <unmanaged>HRESULT D3DXCheckTextureRequirements([In] IDirect3DDevice9* pDevice,[InOut] unsigned int* pWidth,[InOut] unsigned int* pHeight,[InOut] unsigned int* pNumMipLevels,[In] unsigned int Usage,[InOut] D3DFORMAT* pFormat,[In] D3DPOOL Pool)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.ComputeNormalMap(SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.NormalMapFlags,SharpDX.Direct3D9.Channel,System.Single)">
            <summary>
            Computes the normal map.
            </summary>
            <param name="texture">The texture.</param>
            <param name="sourceTexture">The source texture.</param>
            <param name="flags">The flags.</param>
            <param name="channel">The channel.</param>
            <param name="amplitude">The amplitude.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXComputeNormalMap([In] IDirect3DTexture9* pTexture,[In] IDirect3DTexture9* pSrcTexture,[Out, Buffer] const PALETTEENTRY* pSrcPalette,[In] unsigned int Flags,[In] unsigned int Channel,[In] float Amplitude)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.ComputeNormalMap(SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.Texture,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.NormalMapFlags,SharpDX.Direct3D9.Channel,System.Single)">
            <summary>
            Computes the normal map.
            </summary>
            <param name="texture">The texture.</param>
            <param name="sourceTexture">The source texture.</param>
            <param name="palette">The palette.</param>
            <param name="flags">The flags.</param>
            <param name="channel">The channel.</param>
            <param name="amplitude">The amplitude.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXComputeNormalMap([In] IDirect3DTexture9* pTexture,[In] IDirect3DTexture9* pSrcTexture,[Out, Buffer] const PALETTEENTRY* pSrcPalette,[In] unsigned int Flags,[In] unsigned int Channel,[In] float Amplitude)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.Fill(SharpDX.Direct3D9.Fill2DCallback)">
            <summary>
            Uses a user-provided function to fill each texel of each mip level of a given texture.
            </summary>
            <param name="callback">A function that is used to fill the texture.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXFillTexture([In] IDirect3DTexture9* pTexture,[In] __function__stdcall* pFunction,[In] void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.Fill(SharpDX.Direct3D9.TextureShader)">
            <summary>
            Uses a compiled high-level shader language (HLSL) function to fill each texel of each mipmap level of a texture.
            </summary>
            <param name="shader">A texture shader object that is used to fill the texture.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXFillTextureTX([In] IDirect3DTexture9* pTexture,[In] ID3DXTextureShader* pTextureShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.LockRectangle(System.Int32,SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a rectangle on a texture resource.
            </summary>
            <param name="level">The level.</param>
            <param name="flags">The flags.</param>
            <returns>
            A <see cref="T:SharpDX.DataRectangle"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DTexture9::LockRect([In] unsigned int Level,[Out] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.LockRectangle(System.Int32,SharpDX.Direct3D9.LockFlags,SharpDX.DataStream@)">
            <summary>
            Locks a rectangle on a texture resource.
            </summary>
            <param name="level">The level.</param>
            <param name="flags">The flags.</param>
            <param name="stream">The stream pointing to the locked region.</param>
            <returns>
            A <see cref="T:SharpDX.DataRectangle"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DTexture9::LockRect([In] unsigned int Level,[Out] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.LockRectangle(System.Int32,SharpDX.Rectangle,SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a rectangle on a texture resource.
            </summary>
            <param name="level">The level.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="flags">The flags.</param>
            <returns>
            A <see cref="T:SharpDX.DataRectangle"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DTexture9::LockRect([In] D3DCUBEMAP_FACES FaceType,[In] unsigned int Level,[In] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.LockRectangle(System.Int32,SharpDX.Rectangle,SharpDX.Direct3D9.LockFlags,SharpDX.DataStream@)">
            <summary>
            Locks a rectangle on a texture resource.
            </summary>
            <param name="level">The level.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="flags">The flags.</param>
            <param name="stream">The stream pointing to the locked region.</param>
            <returns>
            A <see cref="T:SharpDX.DataRectangle"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DTexture9::LockRect([In] D3DCUBEMAP_FACES FaceType,[In] unsigned int Level,[In] D3DLOCKED_RECT* pLockedRect,[In] const void* pRect,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.AddDirtyRectangle">
            <summary>
            Adds a dirty region to a texture resource.
            </summary>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DTexture9::AddDirtyRect([In] const void* pDirtyRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.AddDirtyRectangle(SharpDX.Rectangle)">
            <summary>
            Adds a dirty region to a texture resource.
            </summary>
            <param name="dirtyRectRef">The dirty rect ref.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DTexture9::AddDirtyRect([In] const void* pDirtyRect)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromFile(SharpDX.Direct3D9.Device,System.String)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromFile(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry[]@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemory([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry[]@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.Texture"/></returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemory([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry[]@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.CreateFromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.CreateFromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.Texture"/></returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.CreateFromPointer(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="pointer">The pointer.</param>
            <param name="sizeInBytes">The size in bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Texture.CreateFromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.Texture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="fileName">Name of the file.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.Texture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DTexture9** ppTexture)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.TextureShader">
            <summary>	
            The <see cref="T:SharpDX.Direct3D9.TextureShader"/> interface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader']/*"/>	
            <unmanaged>ID3DXTextureShader</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.TextureShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.GetFunction(SharpDX.Direct3D.Blob@)">
            <summary>	
            Gets a reference to the function DWORD stream.	
            </summary>	
            <param name="functionOut"><para>A reference to the function DWORD stream. See <see cref="T:SharpDX.Direct3D.Blob"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetFunction']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::GetFunction([Out] ID3DXBuffer** ppFunction)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.GetConstantBuffer(SharpDX.Direct3D.Blob@)">
            <summary>	
            Get a reference to the constant table.	
            </summary>	
            <param name="constantBufferOut"><para>Pointer to an <see cref="T:SharpDX.Direct3D.Blob"/> interface, which contains the constants.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetConstantBuffer']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::GetConstantBuffer([Out] ID3DXBuffer** ppConstantBuffer)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.GetDescription(SharpDX.Direct3D9.ConstantTableDescription@)">
            <summary>	
            Gets a description of the constant table.	
            </summary>	
            <param name="descRef"><para>The attributes of the constant table. See <see cref="T:SharpDX.Direct3D9.ConstantTableDescription"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetDesc']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::GetDesc([Out] D3DXCONSTANTTABLE_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.GetConstantDescription(SharpDX.Direct3D9.EffectHandle,SharpDX.Direct3D9.ConstantDescription[],System.Int32@)">
            <summary>	
            Gets a reference to the array of constants in the constant table.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to a constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="constantDescRef"><para>Returns a reference to an array of descriptions. See <see cref="T:SharpDX.Direct3D9.ConstantDescription"/>.</para></param>	
            <param name="countRef"><para>The input supplied must be the maximum size of the array. The output is the number of elements that are filled in the array when the function returns.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, D3DXERR_INVALIDDATA.</returns>	
            <remarks>	
            Samplers can appear more than once in a constant table, therefore, this method can return an array of descriptions each with a different register index.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetConstantDesc']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::GetConstantDesc([In] D3DXHANDLE hConstant,[Out, Buffer] D3DXCONSTANT_DESC* pConstantDesc,[InOut] unsigned int* pCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.GetConstant(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Gets a constant by looking up its index.	
            </summary>	
            <param name="effectHandle"><para>A handle to the parent data structure. If the constant is a top-level parameter (there is no parent data structure), use <c>null</c>.</para></param>	
            <param name="index"><para>Zero-based index of the constant.</para></param>	
            <returns>Returns a unique identifier to the constant.</returns>	
            <remarks>	
            To get a constant from an array of constants, use <see cref="M:SharpDX.Direct3D9.TextureShader.GetConstantElement(SharpDX.Direct3D9.EffectHandle,System.Int32)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetConstant']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXTextureShader::GetConstant([In] D3DXHANDLE hConstant,[In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.GetConstantByName(SharpDX.Direct3D9.EffectHandle,System.String)">
            <summary>	
            Gets a constant by looking up its name.	
            </summary>	
            <param name="effectHandle"><para>A handle to the parent data structure. If the constant is a top-level parameter (there is no parent data structure), use <c>null</c>.</para></param>	
            <param name="nameRef"><para>A string containing the name of the constant.</para></param>	
            <returns>Returns a unique identifier to the constant.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetConstantByName']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXTextureShader::GetConstantByName([In] D3DXHANDLE hConstant,[In] const char* pName)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.GetConstantElement(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Get a constant from the constant table.	
            </summary>	
            <param name="effectHandle"><para>A handle to the array of constants.  This value may not be <c>null</c>.</para></param>	
            <param name="index"><para>Zero-based index of the element in the constant table.</para></param>	
            <returns>Returns a unique identifier to the constant.</returns>	
            <remarks>	
            To get a constant that is not part of an array, use <see cref="M:SharpDX.Direct3D9.TextureShader.GetConstant(SharpDX.Direct3D9.EffectHandle,System.Int32)"/> or <see cref="M:SharpDX.Direct3D9.TextureShader.GetConstantByName(SharpDX.Direct3D9.EffectHandle,System.String)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetConstantElement']/*"/>	
            <unmanaged>D3DXHANDLE ID3DXTextureShader::GetConstantElement([In] D3DXHANDLE hConstant,[In] unsigned int Index)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetDefaults">
            <summary>	
            Sets the constants to the default values declared in the shader.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetDefaults']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetDefaults()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetValue(SharpDX.Direct3D9.EffectHandle,System.IntPtr,System.Int32)">
            <summary>	
            Sets the constant table with the data in the buffer.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to a constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="dataRef"><para>A reference to a buffer containing the constant data.</para></param>	
            <param name="bytes"><para>Size of the buffer, in bytes.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetValue']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetValue([In] D3DXHANDLE hConstant,[In] const void* pData,[In] unsigned int Bytes)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetBool(SharpDX.Direct3D9.EffectHandle,System.Boolean)">
            <summary>	
            Sets a <see cref="T:System.Boolean"/> value.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="b"><para><see cref="T:System.Boolean"/> value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetBool']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetBool([In] D3DXHANDLE hConstant,[In] BOOL b)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetBoolArray(SharpDX.Direct3D9.EffectHandle,System.Boolean,System.Int32)">
            <summary>	
            Sets an array of <see cref="T:System.Boolean"/> values.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the array of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="bRef"><para>Array of <see cref="T:System.Boolean"/> values.</para></param>	
            <param name="count"><para>Number of <see cref="T:System.Boolean"/> values in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetBoolArray']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetBoolArray([In] D3DXHANDLE hConstant,[In] const BOOL* pb,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetInt(SharpDX.Direct3D9.EffectHandle,System.Int32)">
            <summary>	
            Sets an integer value.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="n"><para>Integer value.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetInt']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetInt([In] D3DXHANDLE hConstant,[In] int n)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetIntArray(SharpDX.Direct3D9.EffectHandle,System.Int32,System.Int32)">
            <summary>	
            Sets an array of integers.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the array of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="nRef"><para>Array of integers.</para></param>	
            <param name="count"><para>Number of integers in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetIntArray']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetIntArray([In] D3DXHANDLE hConstant,[In] const int* pn,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetFloat(SharpDX.Direct3D9.EffectHandle,System.Single)">
            <summary>	
            Sets a floating-point number.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="f"><para>Floating-point number.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetFloat']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetFloat([In] D3DXHANDLE hConstant,[In] float f)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetFloatArray(SharpDX.Direct3D9.EffectHandle,System.Single,System.Int32)">
            <summary>	
            Sets an array of floating-point numbers.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the array of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="fRef"><para>Array of floating-point numbers.</para></param>	
            <param name="count"><para>Number of floating-point values in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetFloatArray']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetFloatArray([In] D3DXHANDLE hConstant,[In] const float* pf,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetVector(SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4)">
            <summary>	
            Sets a 4D vector.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the vector constant. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="vectorRef"><para>Pointer to a 4D vector. See <see cref="T:SharpDX.Vector4"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetVector']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetVector([In] D3DXHANDLE hConstant,[In] const D3DXVECTOR4* pVector)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetVectorArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Vector4,System.Int32)">
            <summary>	
            Sets an array of 4D vectors.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the array of vector constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="vectorRef"><para>Array of 4D vectors. See <see cref="T:SharpDX.Vector4"/>.</para></param>	
            <param name="count"><para>Number of vectors in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetVectorArray']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetVectorArray([In] D3DXHANDLE hConstant,[In] const D3DXVECTOR4* pVector,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetMatrix(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@)">
            <summary>	
            Sets a non-transposed matrix.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the matrix of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixRef"><para>Pointer to a non-transposed matrix. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A non-transposed matrix contains row-major data; that is, each vector is contained in a row.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetMatrix']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetMatrix([In] D3DXHANDLE hConstant,[In] const D3DXMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetMatrixArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Sets an array of non-transposed matrices.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the array of constant matrices. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixRef"><para>Array of non-transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A non-transposed matrix contains row-major data; that is, each vector is contained in a row.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetMatrixArray']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetMatrixArray([In] D3DXHANDLE hConstant,[In] const D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetMatrixPointerArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Sets an array of references to non-transposed matrices.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to an array of constant matrices. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixOut"><para>Array of references to non-transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A non-transposed matrix contains row-major data; that is, each vector is contained in a row.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetMatrixPointerArray']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetMatrixPointerArray([In] D3DXHANDLE hConstant,[In] const D3DXMATRIX** ppMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetMatrixTranspose(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@)">
            <summary>	
            Sets a transposed matrix.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the matrix of constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixRef"><para>Pointer to a transposed matrix. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetMatrixTranspose']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetMatrixTranspose([In] D3DXHANDLE hConstant,[In] const D3DXMATRIX* pMatrix)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetMatrixTransposeArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Sets an array of transposed matrices.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the array of matrix constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixRef"><para>Array of transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetMatrixTransposeArray']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetMatrixTransposeArray([In] D3DXHANDLE hConstant,[In] const D3DXMATRIX* pMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.TextureShader.SetMatrixTransposePointerArray(SharpDX.Direct3D9.EffectHandle,SharpDX.Matrix@,System.Int32)">
            <summary>	
            Sets an array of references to transposed matrices.	
            </summary>	
            <param name="effectHandle"><para>Unique identifier to the array of matrix constants. See <see cref="T:SharpDX.Direct3D9.EffectHandle"/>.</para></param>	
            <param name="matrixOut"><para>Array of references to transposed matrices. See <see cref="T:SharpDX.Matrix"/>.</para></param>	
            <param name="count"><para>Number of matrices in the array.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            A transposed matrix contains column-major data; that is, each vector is contained in a column.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::SetMatrixTransposePointerArray']/*"/>	
            <unmanaged>HRESULT ID3DXTextureShader::SetMatrixTransposePointerArray([In] D3DXHANDLE hConstant,[In] const D3DXMATRIX** ppMatrix,[In] unsigned int Count)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.TextureShader.Function">
            <summary>	
            Gets a reference to the function DWORD stream.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetFunction']/*"/>	
            <unmanaged>GetFunction</unmanaged>	
            <unmanaged>HRESULT ID3DXTextureShader::GetFunction([Out] ID3DXBuffer** ppFunction)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.TextureShader.ConstantBuffer">
            <summary>	
            Get a reference to the constant table.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetConstantBuffer']/*"/>	
            <unmanaged>GetConstantBuffer</unmanaged>	
            <unmanaged>HRESULT ID3DXTextureShader::GetConstantBuffer([Out] ID3DXBuffer** ppConstantBuffer)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.TextureShader.Description">
            <summary>	
            Gets a description of the constant table.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXTextureShader::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT ID3DXTextureShader::GetDesc([Out] D3DXCONSTANTTABLE_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.VertexBuffer">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> interface to manipulate vertex buffer resources.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexBuffer9']/*"/>	
            <unmanaged>IDirect3DVertexBuffer9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexBuffer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexBuffer.Lock_(System.Int32,System.Int32,System.IntPtr@,SharpDX.Direct3D9.LockFlags)">
            <summary>	
            Locks a range of vertex data and obtains a reference to the vertex buffer memory.	
            </summary>	
            <param name="offsetToLock"><para>Offset into the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both parameters, SizeToLock and OffsetToLock.</para></param>	
            <param name="sizeToLock"><para>Size of the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both parameters, SizeToLock and OffsetToLock.</para></param>	
            <param name="bDataOut"><para>VOID* reference to a memory buffer containing the returned vertex data. </para></param>	
            <param name="lockFlags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoOverwrite"/>  <para> For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            As a general rule, do not hold a lock across more than one frame. When working with vertex buffers, you are allowed to make multiple lock calls; however, you must ensure that the number of lock calls match the number of unlock calls. DrawPrimitive calls will not succeed with any outstanding lock count on any currently set vertex buffer.The <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> and <see cref="F:SharpDX.Direct3D9.LockFlags.NoOverwrite"/> flags are valid only on buffers created with <see cref="F:SharpDX.Direct3D9.Usage.Dynamic"/>.For information about using <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.NoOverwrite"/> with <see cref="M:SharpDX.Direct3D9.VertexBuffer.Lock_(System.Int32,System.Int32,System.IntPtr@,SharpDX.Direct3D9.LockFlags)"/>, see Using Dynamic Vertex and Index Buffers.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexBuffer9::Lock']/*"/>	
            <unmanaged>HRESULT IDirect3DVertexBuffer9::Lock([In] unsigned int OffsetToLock,[In] unsigned int SizeToLock,[Out] void** ppbData,[In] D3DLOCK Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexBuffer.Unlock">
            <summary>	
            Unlocks vertex data.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexBuffer9::Unlock']/*"/>	
            <unmanaged>HRESULT IDirect3DVertexBuffer9::Unlock()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexBuffer.GetDescription(SharpDX.Direct3D9.VertexBufferDescription@)">
            <summary>	
            Retrieves a description of the vertex buffer resource.	
            </summary>	
            <param name="descRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.VertexBufferDescription"/> structure, describing the returned vertex buffer. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if the argument is invalid.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexBuffer9::GetDesc']/*"/>	
            <unmanaged>HRESULT IDirect3DVertexBuffer9::GetDesc([Out] D3DVERTEXBUFFER_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexBuffer.#ctor(SharpDX.Direct3D9.Device,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.VertexFormat,SharpDX.Direct3D9.Pool)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> class.
            </summary>
            <param name="device">The device that will be used to create the buffer.</param>
            <param name="sizeInBytes">Size of the buffer, in bytes.</param>
            <param name="usage">The requested usage of the buffer.</param>
            <param name="format">The vertex format of the vertices in the buffer. If set to <see cref="T:SharpDX.Direct3D9.VertexFormat"/>.None, the buffer will be a non-FVF buffer.</param>
            <param name="pool">The memory class into which the resource will be placed.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.VertexBuffer.#ctor(SharpDX.Direct3D9.Device,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.VertexFormat,SharpDX.Direct3D9.Pool,System.IntPtr@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VertexBuffer"/> class.
            </summary>
            <param name="device">The device that will be used to create the buffer.</param>
            <param name="sizeInBytes">Size of the buffer, in bytes.</param>
            <param name="usage">The requested usage of the buffer.</param>
            <param name="format">The vertex format of the vertices in the buffer. If set to <see cref="T:SharpDX.Direct3D9.VertexFormat"/>.None, the buffer will be a non-FVF buffer.</param>
            <param name="pool">The memory class into which the resource will be placed.</param>
            <param name="sharedHandle">The variable that will receive the shared handle for this resource.</param>
            <remarks>This method is only available in Direct3D9 Ex.</remarks>
        </member>
        <member name="M:SharpDX.Direct3D9.VertexBuffer.Lock(System.Int32,System.Int32,SharpDX.Direct3D9.LockFlags)">
            <summary>	
            Locks a range of vertex data and obtains a pointer to the vertex buffer memory.	
            </summary>	
            <remarks>	
             As a general rule, do not hold a lock across more than one frame. When working with vertex buffers, you are allowed to make multiple lock calls; however, you must ensure that the number of lock calls match the number of unlock calls. DrawPrimitive calls will not succeed with any outstanding lock count on any currently set vertex buffer. The D3DLOCK_DISCARD and D3DLOCK_NOOVERWRITE flags are valid only on buffers created with D3DUSAGE_DYNAMIC. For information about using D3DLOCK_DISCARD or D3DLOCK_NOOVERWRITE with IDirect3DVertexBuffer9::Lock, see {{Using Dynamic Vertex and Index Buffers}}. 	
            </remarks>	
            <param name="offsetToLock"> Offset into the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both parameters, SizeToLock and OffsetToLock. </param>
            <param name="sizeToLock"> Size of the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both parameters, SizeToLock and OffsetToLock. </param>
            <param name="lockFlags"> Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:    D3DLOCK_DISCARD D3DLOCK_NO_DIRTY_UPDATE D3DLOCK_NOSYSLOCK D3DLOCK_READONLY D3DLOCK_NOOVERWRITE   For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>.  </param>
            <returns>A <see cref="T:SharpDX.DataStream"/> if the method succeeds.</returns>
            <unmanaged>HRESULT IDirect3DVertexBuffer9::Lock([None] UINT OffsetToLock,[None] UINT SizeToLock,[Out] void** ppbData,[None] int Flags)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.VertexBuffer.Description">
            <summary>	
            Retrieves a description of the vertex buffer resource.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexBuffer9::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT IDirect3DVertexBuffer9::GetDesc([Out] D3DVERTEXBUFFER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.VertexDeclaration">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.VertexDeclaration"/> interface to encapsulate the vertex shader declaration.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexDeclaration9']/*"/>	
            <unmanaged>IDirect3DVertexDeclaration9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexDeclaration.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VertexDeclaration"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexDeclaration.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Gets the current device.	
            </summary>	
            <param name="deviceOut"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.Device"/> interface that is returned.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexDeclaration9::GetDevice']/*"/>	
            <unmanaged>HRESULT IDirect3DVertexDeclaration9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexDeclaration.GetDeclaration(SharpDX.Direct3D9.VertexElement[],System.Int32@)">
            <summary>	
            Gets the vertex shader declaration.	
            </summary>	
            <param name="elementRef"><para>Array of vertex elements (see <see cref="T:SharpDX.Direct3D9.VertexElement"/>) that make up a vertex shader declaration. The application needs to allocate enough room for this. The vertex element array ends with the D3DDECL_END macro.</para></param>	
            <param name="numElementsRef"><para>Number of elements in the array. The application needs to allocate enough room for this. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            The number of elements, pNumElements, includes the D3DDECL_END macro, which ends the declaration. So the element count is actually one higher than the number of valid vertex elements.Here's an example that will return the vertex declaration array of up to 256 elements:<code>	
             <see cref="T:SharpDX.Direct3D9.VertexElement"/> decl[MAXD3DDECLLENGTH];	
            UINT numElements;	
            <see cref="T:SharpDX.Result"/> hr = m_pVertexDeclaration-&gt;GetDeclaration( decl, &amp;numElements);	
            	
            </code>Specify <c>null</c> for pDeclto get the number of elements in the declaration.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexDeclaration9::GetDeclaration']/*"/>	
            <unmanaged>HRESULT IDirect3DVertexDeclaration9::GetDeclaration([Out, Buffer] D3DVERTEXELEMENT9* pElement,[InOut] unsigned int* pNumElements)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexDeclaration.#ctor(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.VertexElement[])">
            <summary>
            Create a vertex shader declaration from the device and the vertex elements.
            </summary>
            <remarks>
             See the {{Vertex Declaration (Direct3D 9)}} page for a detailed description of how to map vertex declarations between different versions of DirectX. 
            </remarks>
            <param name="elements"> An array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> vertex elements. </param>
            <returns><see cref="T:SharpDX.Direct3D9.VertexDeclaration"/> If the method succeeds</returns>
            <unmanaged>HRESULT IDirect3DDevice9::CreateVertexDeclaration([In, Buffer] const D3DVERTEXELEMENT9* pVertexElements,[None] IDirect3DVertexDeclaration9** ppDecl)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.VertexDeclaration.Device">
            <summary>	
            Gets the current device.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexDeclaration9::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT IDirect3DVertexDeclaration9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.VertexDeclaration.Elements">
            <summary>
            Gets the elements.
            </summary>
            <unmanaged>HRESULT IDirect3DVertexDeclaration9::GetDeclaration([Out, Buffer] D3DVERTEXELEMENT9* pElement,[InOut] unsigned int* pNumElements)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.VertexShader">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.VertexShader"/> interface to encapsulate the functionality of a vertex shader.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexShader9']/*"/>	
            <unmanaged>IDirect3DVertexShader9</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader.MaxDynamicFlowControlDepth">
            <summary>Constant MaxDynamicFlowControlDepth.</summary>
            <unmanaged>D3DVS20_MAX_DYNAMICFLOWCONTROLDEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader.MinDynamicFlowControlDepth">
            <summary>Constant MinDynamicFlowControlDepth.</summary>
            <unmanaged>D3DVS20_MIN_DYNAMICFLOWCONTROLDEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader.MaxTemps">
            <summary>Constant MaxTemps.</summary>
            <unmanaged>D3DVS20_MAX_NUMTEMPS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader.MinTemps">
            <summary>Constant MinTemps.</summary>
            <unmanaged>D3DVS20_MIN_NUMTEMPS</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader.MaxStaticFlowControlDepth">
            <summary>Constant MaxStaticFlowControlDepth.</summary>
            <unmanaged>D3DVS20_MAX_STATICFLOWCONTROLDEPTH</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader.MinStaticFlowControlDepth">
            <summary>Constant MinStaticFlowControlDepth.</summary>
            <unmanaged>D3DVS20_MIN_STATICFLOWCONTROLDEPTH</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VertexShader.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VertexShader"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexShader.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Gets the device.	
            </summary>	
            <param name="deviceOut"><para>Pointer to the <see cref="T:SharpDX.Direct3D9.Device"/> interface that is returned.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexShader9::GetDevice']/*"/>	
            <unmanaged>HRESULT IDirect3DVertexShader9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexShader.GetFunction(System.IntPtr,System.Int32@)">
            <summary>	
            Gets a reference to the shader data.	
            </summary>	
            <param name="arg0"><para>Pointer to a buffer that contains the shader data. The application needs to allocate enough room for this. </para></param>	
            <param name="sizeOfDataRef"><para>Size of the data, in bytes. To get the buffer size that is needed to retrieve the data, set pData = <c>null</c> when calling GetFunction. Then call GetFunction with the returned size, to get the buffer data.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexShader9::GetFunction']/*"/>	
            <unmanaged>HRESULT IDirect3DVertexShader9::GetFunction([In] void* arg0,[InOut] unsigned int* pSizeOfData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VertexShader.#ctor(SharpDX.Direct3D9.Device,SharpDX.Direct3D9.ShaderBytecode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VertexShader"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="function">The function.</param>
            <unmanaged>HRESULT IDirect3DDevice9::CreateVertexShader([In] const void* pFunction,[Out, Fast] IDirect3DVertexShader9** ppShader)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.VertexShader.Device">
            <summary>	
            Gets the device.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVertexShader9::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT IDirect3DVertexShader9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.VertexShader.Function">
            <summary>
            Gets the bytecode associated to this shader..
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.Volume">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.Volume"/> interface to manipulate volume resources.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9']/*"/>	
            <unmanaged>IDirect3DVolume9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Volume"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.GetDevice(SharpDX.Direct3D9.Device@)">
            <summary>	
            Retrieves the device associated with a volume.	
            </summary>	
            <param name="deviceOut"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Device"/> interface to fill with the device reference, if the query succeeds. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            This method allows navigation to the owning device object.Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Device"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::GetDevice']/*"/>	
            <unmanaged>HRESULT IDirect3DVolume9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.SetPrivateData(System.Guid,System.IntPtr,System.Int32,System.Int32)">
            <summary>	
            Associates data with the volume that is intended for use by the application, not by Direct3D.	
            </summary>	
            <param name="refguid"><para>Reference to the globally unique identifier that identifies the private data to set.</para></param>	
            <param name="dataRef"><para>Pointer to a buffer that contains the data to associate with the volume. </para></param>	
            <param name="sizeOfData"><para>Size of the buffer at pData in bytes. </para></param>	
            <param name="flags"><para>Value that describes the type of data being passed, or indicates to the application that the data should be invalidated when the resource changes. </para> <para></para>  ItemDescription  <para>(none)</para>  <para>If no flags are specified, Direct3D allocates memory to hold the data within the buffer and copies the data into the new buffer. The buffer allocated by Direct3D is automatically freed, as appropriate.</para>   <para>D3DSPD_IUNKNOWN</para>  <para>The data at pData is a reference to an <see cref="T:SharpDX.ComObject"/> interface. SizeOfData must be set to the size of a reference to an <see cref="T:SharpDX.ComObject"/> interface, sizeof(<see cref="T:SharpDX.ComObject"/>*). Direct3D automatically calls <see cref="T:SharpDX.ComObject"/> through pData and <see cref="T:SharpDX.ComObject"/> when the private data is destroyed. Private data will be destroyed by a subsequent call to <see cref="M:SharpDX.Direct3D9.Volume.SetPrivateData(System.Guid,System.IntPtr,System.Int32,System.Int32)"/> with the same <see cref="T:System.Guid"/>, a subsequent call to <see cref="M:SharpDX.Direct3D9.Volume.FreePrivateData(System.Guid)"/>, or when the <see cref="T:SharpDX.Direct3D9.Direct3D"/> object is released. For more information, see Remarks.</para>   <para>?</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, E_OUTOFMEMORY.</returns>	
            <remarks>	
            Direct3D does not manage the memory at pData. If this buffer was dynamically allocated, it is the calling application's responsibility to free the memory.Data is passed by value, and multiple sets of data can be associated with a single volume.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::SetPrivateData']/*"/>	
            <unmanaged>HRESULT IDirect3DVolume9::SetPrivateData([In] const GUID&amp; refguid,[In] const void* pData,[In] unsigned int SizeOfData,[In] unsigned int Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.GetPrivateData(System.Guid,System.IntPtr,System.Int32@)">
            <summary>	
            Copies the private data associated with the volume to a provided buffer.	
            </summary>	
            <param name="refguid"><para>Reference to (C++) or address of (C) the globally unique identifier that identifies the private data to retrieve. </para></param>	
            <param name="dataRef"><para>Pointer to a previously allocated buffer to fill with the requested private data if the call succeeds. The application calling this method is responsible for allocating and releasing this buffer. If this parameter is <c>null</c>, this method will return the buffer size in pSizeOfData.</para></param>	
            <param name="sizeOfDataRef"><para>Pointer to the size of the buffer at  pData, in bytes. If this value is less than the actual size of the private data, such as 0, the method sets this parameter to the required buffer size, and the method returns <see cref="F:SharpDX.Direct3D9.ResultCode.MoreData"/>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.MoreData"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotFound"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::GetPrivateData']/*"/>	
            <unmanaged>HRESULT IDirect3DVolume9::GetPrivateData([In] const GUID&amp; refguid,[In] void* pData,[Out] unsigned int* pSizeOfData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FreePrivateData(System.Guid)">
            <summary>	
            Frees the specified private data associated with this volume.	
            </summary>	
            <param name="refguid"><para>Reference to the globally unique identifier that identifies the private data to free.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be one of the following: <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>, <see cref="F:SharpDX.Direct3D9.ResultCode.NotFound"/>.</returns>	
            <remarks>	
            Direct3D calls this method automatically when a volume is released.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::FreePrivateData']/*"/>	
            <unmanaged>HRESULT IDirect3DVolume9::FreePrivateData([In] const GUID&amp; refguid)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.GetContainer(System.Guid,System.IntPtr)">
            <summary>	
            Provides access to the parent volume texture object, if this surface is a child level of a volume texture.	
            </summary>	
            <param name="riid"><para>Reference identifier of the volume being requested. </para></param>	
            <param name="containerOut"><para>Address of a reference to fill with the container reference, if the query succeeds. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            If the call succeeds, the reference count of the container is increased by one.Here's an example getting the parent volume texture of a volume texture.<code>	
             // Assumes pSurface is a valid <see cref="T:SharpDX.Direct3D9.Volume"/> reference	
            void *pContainer = <c>null</c>;	
            <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> *pVolumeTexture = <c>null</c>;	
            <see cref="T:SharpDX.Result"/> hr = pVolume-&gt;GetContainer(IID_IDirect3DVolumeTexture9, &amp;pContainer);	
            if (SUCCEEDED(hr) &amp;&amp; pContainer)	
            { pVolumeTexture = (<see cref="T:SharpDX.Direct3D9.VolumeTexture"/> *)pContainer;	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::GetContainer']/*"/>	
            <unmanaged>HRESULT IDirect3DVolume9::GetContainer([In] const GUID&amp; riid,[In] void** ppContainer)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.GetDescription(SharpDX.Direct3D9.VolumeDescription@)">
            <summary>	
            Retrieves a description of the volume.	
            </summary>	
            <param name="descRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.VolumeDescription"/> structure, describing the volume. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/> is returned if the argument is invalid.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::GetDesc']/*"/>	
            <unmanaged>HRESULT IDirect3DVolume9::GetDesc([Out] D3DVOLUME_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.LockBox(SharpDX.Direct3D9.LockedBox@,System.IntPtr,SharpDX.Direct3D9.LockFlags)">
            <summary>	
            Locks a box on a volume resource.	
            </summary>	
            <param name="lockedVolumeRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.LockedBox"/> structure, describing the locked region. </para></param>	
            <param name="boxRef"><para>Pointer to a box to lock. Specified by a reference to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifying <c>null</c> for this parameter locks the entire volume. </para></param>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>  <para> For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            For performance reasons, dirty regions are only recorded for level zero of a texture. Dirty regions are automatically recorded when <see cref="M:SharpDX.Direct3D9.Volume.LockBox(SharpDX.Direct3D9.LockedBox@,System.IntPtr,SharpDX.Direct3D9.LockFlags)"/> is called without <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>. See <see cref="M:SharpDX.Direct3D9.Device.UpdateTexture(SharpDX.Direct3D9.BaseTexture,SharpDX.Direct3D9.BaseTexture)"/> for more information.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::LockBox']/*"/>	
            <unmanaged>HRESULT IDirect3DVolume9::LockBox([Out] D3DLOCKED_BOX* pLockedVolume,[In] const void* pBox,[In] D3DLOCK Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.UnlockBox">
            <summary>	
            Unlocks a box on a volume resource.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::UnlockBox']/*"/>	
            <unmanaged>HRESULT IDirect3DVolume9::UnlockBox()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFile(SharpDX.Direct3D9.Volume,System.String,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Loads a volume from a file on the disk.
            </summary>
            <param name="volume">The volume.</param>
            <param name="fileName">Name of the file.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileW([In] IDirect3DVolume9* pDestVolume,[In] const PALETTEENTRY* pDestPalette,[In] const D3DBOX* pDestBox,[In] const wchar_t* pSrcFile,[In] const D3DBOX* pSrcBox,[In] unsigned int Filter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFile(SharpDX.Direct3D9.Volume,System.String,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box)">
            <summary>
            Loads a volume from a file on the disk.
            </summary>
            <param name="volume">The volume.</param>
            <param name="fileName">Name of the file.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileW([In] IDirect3DVolume9* pDestVolume,[In] const PALETTEENTRY* pDestPalette,[In] const D3DBOX* pDestBox,[In] const wchar_t* pSrcFile,[In] const D3DBOX* pSrcBox,[In] unsigned int Filter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFile(SharpDX.Direct3D9.Volume,System.String,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a volume from a file on the disk.
            </summary>
            <param name="volume">The volume.</param>
            <param name="fileName">Name of the file.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileW([In] IDirect3DVolume9* pDestVolume,[In] const PALETTEENTRY* pDestPalette,[In] const D3DBOX* pDestBox,[In] const wchar_t* pSrcFile,[In] const D3DBOX* pSrcBox,[In] unsigned int Filter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFile(SharpDX.Direct3D9.Volume,System.String,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a volume from a file on the disk.
            </summary>
            <param name="volume">The volume.</param>
            <param name="fileName">Name of the file.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <param name="palette">The palette.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileW([In] IDirect3DVolume9* pDestVolume,[In] const PALETTEENTRY* pDestPalette,[In] const D3DBOX* pDestBox,[In] const wchar_t* pSrcFile,[In] const D3DBOX* pSrcBox,[In] unsigned int Filter,[In] D3DCOLOR ColorKey,[In] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFileInMemory(SharpDX.Direct3D9.Volume,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Loads a volume from a file in memory.
            </summary>
            <param name="volume">The volume.</param>
            <param name="memory">The memory.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileInMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFileInMemory(SharpDX.Direct3D9.Volume,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box)">
            <summary>
            Loads a volume from a file in memory.
            </summary>
            <param name="volume">The volume.</param>
            <param name="memory">The memory.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileInMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFileInMemory(SharpDX.Direct3D9.Volume,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a volume from a file in memory.
            </summary>
            <param name="volume">The volume.</param>
            <param name="memory">The memory.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileInMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFileInMemory(SharpDX.Direct3D9.Volume,System.Byte[],SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a volume from a file in memory.
            </summary>
            <param name="volume">The volume.</param>
            <param name="memory">The memory.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <param name="palette">The palette.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileInMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFileInStream(SharpDX.Direct3D9.Volume,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Loads a volume from a file in a strean.
            </summary>
            <param name="volume">The volume.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileInMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFileInStream(SharpDX.Direct3D9.Volume,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box)">
            <summary>
            Loads a volume from a file in a strean.
            </summary>
            <param name="volume">The volume.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileInMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFileInStream(SharpDX.Direct3D9.Volume,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a volume from a file in a strean.
            </summary>
            <param name="volume">The volume.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileInMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromFileInStream(SharpDX.Direct3D9.Volume,System.IO.Stream,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Loads a volume from a file in a strean.
            </summary>
            <param name="volume">The volume.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <param name="palette">The palette.</param>
            <param name="imageInformation">The image information.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromFileInMemory([In] IDirect3DVolume9* pDestVolume,[Out, Buffer] const PALETTEENTRY* pDestPalette,[In] const void* pDestBox,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] const void* pSrcBox,[In] D3DX_FILTER Filter,[In] int ColorKey,[In] void* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromVolume(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Loads a volume from a source volume.
            </summary>
            <param name="destinationVolume">The destination volume.</param>
            <param name="sourceVolume">The source volume.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromVolume([In] IDirect3DVolume9* pDestVolume,[In] const PALETTEENTRY* pDestPalette,[In] const D3DBOX* pDestBox,[In] IDirect3DVolume9* pSrcVolume,[In] const PALETTEENTRY* pSrcPalette,[In] const D3DBOX* pSrcBox,[In] unsigned int Filter,[In] D3DCOLOR ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromVolume(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box)">
            <summary>
            Loads a volume from a source volume.
            </summary>
            <param name="destinationVolume">The destination volume.</param>
            <param name="sourceVolume">The source volume.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromVolume([In] IDirect3DVolume9* pDestVolume,[In] const PALETTEENTRY* pDestPalette,[In] const D3DBOX* pDestBox,[In] IDirect3DVolume9* pSrcVolume,[In] const PALETTEENTRY* pSrcPalette,[In] const D3DBOX* pSrcBox,[In] unsigned int Filter,[In] D3DCOLOR ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.FromVolume(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.PaletteEntry[],SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Loads a volume from a source volume.
            </summary>
            <param name="destinationVolume">The destination volume.</param>
            <param name="sourceVolume">The source volume.</param>
            <param name="filter">The filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="sourceBox">The source box.</param>
            <param name="destinationBox">The destination box.</param>
            <param name="destinationPalette">The destination palette.</param>
            <param name="sourcePalette">The source palette.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXLoadVolumeFromVolume([In] IDirect3DVolume9* pDestVolume,[In] const PALETTEENTRY* pDestPalette,[In] const D3DBOX* pDestBox,[In] IDirect3DVolume9* pSrcVolume,[In] const PALETTEENTRY* pSrcPalette,[In] const D3DBOX* pSrcBox,[In] unsigned int Filter,[In] D3DCOLOR ColorKey)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.LockBox(SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a box on a volume resource.
            </summary>
            <param name="flags">The flags.</param>
            <returns>
            The locked region of this resource
            </returns>
            <unmanaged>HRESULT IDirect3DVolume9::LockBox([Out] D3DLOCKED_BOX* pLockedVolume,[In] const void* pBox,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.LockBox(SharpDX.Direct3D9.Box,SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a box on a volume resource.
            </summary>
            <param name="box">The box.</param>
            <param name="flags">The flags.</param>
            <returns>The locked region of this resource</returns>
            <unmanaged>HRESULT IDirect3DVolume9::LockBox([Out] D3DLOCKED_BOX* pLockedVolume,[In] const void* pBox,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.ToFile(SharpDX.Direct3D9.Volume,System.String,SharpDX.Direct3D9.ImageFileFormat)">
            <summary>
            Saves a volume to a file on disk.
            </summary>
            <param name="volume">The volume.</param>
            <param name="fileName">Name of the file.</param>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveVolumeToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DVolume9* pSrcVolume,[In] const PALETTEENTRY* pSrcPalette,[In] const D3DBOX* pSrcBox)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.ToFile(SharpDX.Direct3D9.Volume,System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Box)">
            <summary>
            Saves a volume to a file on disk.
            </summary>
            <param name="volume">The volume.</param>
            <param name="fileName">Name of the file.</param>
            <param name="format">The format.</param>
            <param name="box">The box.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveVolumeToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DVolume9* pSrcVolume,[In] const PALETTEENTRY* pSrcPalette,[In] const D3DBOX* pSrcBox)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.ToFile(SharpDX.Direct3D9.Volume,System.String,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Saves a volume to a file on disk.
            </summary>
            <param name="volume">The volume.</param>
            <param name="fileName">Name of the file.</param>
            <param name="format">The format.</param>
            <param name="box">The box.</param>
            <param name="palette">The palette.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXSaveVolumeToFileW([In] const wchar_t* pDestFile,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DVolume9* pSrcVolume,[In] const PALETTEENTRY* pSrcPalette,[In] const D3DBOX* pSrcBox)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.ToStream(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.ImageFileFormat)">
            <summary>
            Saves a volume to a <see cref="T:SharpDX.DataStream"/>.
            </summary>
            <param name="volume">The volume.</param>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveVolumeToFileInMemory([In] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DVolume9* pSrcVolume,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcBox)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.ToStream(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Box)">
            <summary>
            Saves a volume to a <see cref="T:SharpDX.DataStream"/>.
            </summary>
            <param name="volume">The volume.</param>
            <param name="format">The format.</param>
            <param name="box">The box.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT D3DXSaveVolumeToFileInMemory([In] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DVolume9* pSrcVolume,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcBox)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.Volume.ToStream(SharpDX.Direct3D9.Volume,SharpDX.Direct3D9.ImageFileFormat,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Saves a volume to a <see cref="T:SharpDX.DataStream"/>. 
            </summary>
            <param name="volume">The volume.</param>
            <param name="format">The format.</param>
            <param name="box">The box.</param>
            <param name="palette">The palette.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXSaveVolumeToFileInMemory([In] ID3DXBuffer** ppDestBuf,[In] D3DXIMAGE_FILEFORMAT DestFormat,[In] IDirect3DVolume9* pSrcVolume,[In, Buffer] const PALETTEENTRY* pSrcPalette,[In] const void* pSrcBox)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Volume.Device">
            <summary>	
            Retrieves the device associated with a volume.	
            </summary>	
            <remarks>	
            This method allows navigation to the owning device object.Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Device"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Device"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::GetDevice']/*"/>	
            <unmanaged>GetDevice</unmanaged>	
            <unmanaged>HRESULT IDirect3DVolume9::GetDevice([Out] IDirect3DDevice9** ppDevice)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.Volume.Description">
            <summary>	
            Retrieves a description of the volume.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolume9::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT IDirect3DVolume9::GetDesc([Out] D3DVOLUME_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.VolumeTexture">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> interface to manipulate a volume texture resource.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolumeTexture9']/*"/>	
            <unmanaged>IDirect3DVolumeTexture9</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.GetLevelDescription(System.Int32)">
            <summary>	
            Retrieves a level description of a volume texture resource.	
            </summary>	
            <param name="level"><para>Identifies a level of the volume texture resource. This method returns a volume description for the level specified by this parameter. </para></param>	
            <returns><para>Pointer to a <see cref="T:SharpDX.Direct3D9.VolumeDescription"/> structure, describing the returned volume texture level. </para></returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolumeTexture9::GetLevelDesc']/*"/>	
            <unmanaged>HRESULT IDirect3DVolumeTexture9::GetLevelDesc([In] unsigned int Level,[Out] D3DVOLUME_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.GetVolumeLevel(System.Int32)">
            <summary>	
            Retrieves the specified volume texture level.	
            </summary>	
            <param name="level"><para>Identifies a level of the volume texture resource. This method returns a volume for the level specified by this parameter. </para></param>	
            <returns><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.Volume"/> interface, representing the returned volume level. </para></returns>	
            <remarks>	
            Calling this method will increase the internal reference count on the <see cref="T:SharpDX.Direct3D9.Volume"/> interface. Failure to call IUnknown::Release when finished using this <see cref="T:SharpDX.Direct3D9.Volume"/> interface results in a memory leak.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolumeTexture9::GetVolumeLevel']/*"/>	
            <unmanaged>HRESULT IDirect3DVolumeTexture9::GetVolumeLevel([In] unsigned int Level,[Out] IDirect3DVolume9** ppVolumeLevel)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.LockBox(System.Int32,SharpDX.Direct3D9.LockedBox@,System.IntPtr,SharpDX.Direct3D9.LockFlags)">
            <summary>	
            Locks a box on a volume texture resource.	
            </summary>	
            <param name="level"><para>Specifies the level of the volume texture resource to lock. </para></param>	
            <param name="lockedVolumeRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.LockedBox"/> structure, describing the locked region. </para></param>	
            <param name="boxRef"><para>Pointer to the volume to lock. This parameter is specified by a reference to a <see cref="T:SharpDX.Direct3D9.Box"/> structure. Specifying <c>null</c> for this parameter locks the entire volume level. </para></param>	
            <param name="flags"><para>Combination of zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are:  </para>  <see cref="F:SharpDX.Direct3D9.LockFlags.Discard"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> <see cref="F:SharpDX.Direct3D9.LockFlags.NoSystemLock"/> <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>  <para> For a description of the flags, see <see cref="T:SharpDX.Direct3D9.LockFlags"/>. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            For performance reasons, dirty regions are only recorded for level zero of a texture. Dirty regions are automatically recorded when LockBox is called without <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>. For more information, see UpdateTexture.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolumeTexture9::LockBox']/*"/>	
            <unmanaged>HRESULT IDirect3DVolumeTexture9::LockBox([In] unsigned int Level,[Out] D3DLOCKED_BOX* pLockedVolume,[In] const void* pBox,[In] D3DLOCK Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.UnlockBox(System.Int32)">
            <summary>	
            Unlocks a box on a volume texture resource.	
            </summary>	
            <param name="level"><para>Specifies the level of the volume texture resource to unlock. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolumeTexture9::UnlockBox']/*"/>	
            <unmanaged>HRESULT IDirect3DVolumeTexture9::UnlockBox([In] unsigned int Level)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(System.IntPtr)">
            <summary>	
            Adds a dirty region to a volume texture resource.	
            </summary>	
            <param name="dirtyBoxRef"><para>Pointer to a <see cref="T:SharpDX.Direct3D9.Box"/> structure, specifying the dirty region to add. Specifying <c>null</c> expands the dirty region to cover the entire volume texture. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/>. If the method fails, the return value can be <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>.</returns>	
            <remarks>	
            For performance reasons, dirty regions are only recorded for level zero of a texture. For sublevels, it is assumed that the corresponding (scaled) box is also dirty. Dirty regions are automatically recorded when LockBox is called without <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> or <see cref="F:SharpDX.Direct3D9.LockFlags.ReadOnly"/>.Using <see cref="F:SharpDX.Direct3D9.LockFlags.NoDirtyUpdate"/> and explicitly specifying dirty regions can be used to increase the efficiency of UpdateTexture. Using this method, applications can optimize what subset of a resource is copied by specifying dirty boxes on the resource. However, the dirty regions may be expanded to optimize alignment.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDirect3DVolumeTexture9::AddDirtyBox']/*"/>	
            <unmanaged>HRESULT IDirect3DVolumeTexture9::AddDirtyBox([In] const void* pDirtyBox)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.#ctor(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <unmanaged>HRESULT IDirect3DDevice9::CreateVolumeTexture([In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Levels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DVolumeTexture9** ppVolumeTexture,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.#ctor(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,System.IntPtr@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="sharedHandle">The shared handle.</param>
            <unmanaged>HRESULT IDirect3DDevice9::CreateVolumeTexture([In] unsigned int Width,[In] unsigned int Height,[In] unsigned int Levels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[Out, Fast] IDirect3DVolumeTexture9** ppVolumeTexture,[In] void** pSharedHandle)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.CheckRequirements(SharpDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool)">
            <summary>
            Checks texture-creation parameters.
            </summary>
            <param name="device">Device associated with the texture.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipLevelCount">Requested number of mipmap levels for the texture.</param>
            <param name="usage">The requested usage for the texture.</param>
            <param name="format">Requested format for the texture.</param>
            <param name="pool">Memory class where the resource will be placed.</param>
            <returns>
            A value type containing the proposed values to pass to the texture creation functions.
            </returns>
            <unmanaged>HRESULT D3DXCheckVolumeTextureRequirements([In] IDirect3DDevice9* pDevice,[InOut] unsigned int* pWidth,[InOut] unsigned int* pHeight,[InOut] unsigned int* pDepth,[InOut] unsigned int* pNumMipLevels,[In] unsigned int Usage,[InOut] D3DFORMAT* pFormat,[In] D3DPOOL Pool)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.Fill(SharpDX.Direct3D9.Fill3DCallback)">
            <summary>
            Uses a user-provided function to fill each texel of each mip level of a given texture.
            </summary>
            <param name="callback">A function that is used to fill the texture.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXFillVolumeTexture([In] IDirect3DVolumeTexture9* pVolumeTexture,[In] __function__stdcall* pFunction,[In] void* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.Fill(SharpDX.Direct3D9.TextureShader)">
            <summary>
            Uses a compiled high-level shader language (HLSL) function to fill each texel of each mipmap level of a texture.
            </summary>
            <param name="shader">A texture shader object that is used to fill the texture.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT D3DXFillVolumeTextureTX([In] IDirect3DVolumeTexture9* pVolumeTexture,[In] ID3DXVolumeTextureShader* pVolumeTextureShader)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.LockBox(System.Int32,SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a box on a volume texture resource.
            </summary>
            <param name="level">The level.</param>
            <param name="flags">The flags.</param>
            <returns>
            A <see cref="T:SharpDX.DataBox"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DVolumeTexture9::LockBox([In] unsigned int Level,[Out] D3DLOCKED_BOX* pLockedVolume,[In] const void* pBox,[In] D3DLOCK Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.LockBox(System.Int32,SharpDX.Direct3D9.Box,SharpDX.Direct3D9.LockFlags)">
            <summary>
            Locks a box on a volume texture resource.
            </summary>
            <param name="level">The level.</param>
            <param name="box">The box.</param>
            <param name="flags">The flags.</param>
            <returns>
            A <see cref="T:SharpDX.DataRectangle"/> describing the region locked.
            </returns>
            <unmanaged>HRESULT IDirect3DVolumeTexture9::LockBox([In] unsigned int Level,[Out] D3DLOCKED_BOX* pLockedVolume,[In] const void* pBox,[In] D3DLOCK Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox">
            <summary>
            Adds a dirty region to a texture resource.
            </summary>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DVolumeTexture9::AddDirtyBox([In] const void* pDirtyBox)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.AddDirtyBox(SharpDX.Direct3D9.Box)">
            <summary>
            Adds a dirty region to a texture resource.
            </summary>
            <param name="directBoxRef">The direct box ref.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IDirect3DVolumeTexture9::AddDirtyBox([In] const void* pDirtyBox)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromFile(SharpDX.Direct3D9.Device,System.String)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromFile(SharpDX.Direct3D9.Device,System.String,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry[]@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a file
            </summary>
            <param name="device">The device.</param>
            <param name="filename">The filename.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileExW([In] IDirect3DDevice9* pDevice,[In] const wchar_t* pSrcFile,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[In] void* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemory([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry[]@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a memory buffer.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/></returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemory([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Pool)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="usage">The usage.</param>
            <param name="pool">The pool.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.FromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,SharpDX.Direct3D9.ImageInformation@,SharpDX.Direct3D9.PaletteEntry[]@)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.CreateFromMemory(SharpDX.Direct3D9.Device,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.CreateFromStream(SharpDX.Direct3D9.Device,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="stream">The stream.</param>
            <param name="sizeBytes">The size bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/></returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.CreateFromPointer(SharpDX.Direct3D9.Device,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="pointer">The pointer.</param>
            <param name="sizeInBytes">The size in bytes.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.VolumeTexture.CreateFromFile(SharpDX.Direct3D9.Device,System.String,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Direct3D9.Usage,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.Pool,SharpDX.Direct3D9.Filter,SharpDX.Direct3D9.Filter,System.Int32,System.IntPtr,SharpDX.Direct3D9.PaletteEntry[])">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D9.VolumeTexture"/> from a stream.
            </summary>
            <param name="device">The device.</param>
            <param name="fileName">Name of the file.</param>
            <param name="size">The size.</param>
            <param name="levelCount">The level count.</param>
            <param name="usage">The usage.</param>
            <param name="format">The format.</param>
            <param name="pool">The pool.</param>
            <param name="filter">The filter.</param>
            <param name="mipFilter">The mip filter.</param>
            <param name="colorKey">The color key.</param>
            <param name="imageInformation">The image information.</param>
            <param name="palette">The palette.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.VolumeTexture"/>
            </returns>
            <unmanaged>HRESULT D3DXCreateVolumeTextureFromFileInMemoryEx([In] IDirect3DDevice9* pDevice,[In] const void* pSrcData,[In] unsigned int SrcDataSize,[In] unsigned int Size,[In] unsigned int MipLevels,[In] unsigned int Usage,[In] D3DFORMAT Format,[In] D3DPOOL Pool,[In] unsigned int Filter,[In] unsigned int MipFilter,[In] D3DCOLOR ColorKey,[Out] D3DXIMAGE_INFO* pSrcInfo,[Out, Buffer] PALETTEENTRY* pPalette,[In] IDirect3DVolumeTexture9** ppVolumeTexture)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.XFile">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.XFile"/> interface to create instances of the <see cref="T:SharpDX.Direct3D9.XFileEnumObject"/> and <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/> interfaces, and to register templates.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFile']/*"/>	
            <unmanaged>ID3DXFile</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFile.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.XFile"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFile.CreateEnumObject(System.IntPtr,System.Int32,SharpDX.Direct3D9.XFileEnumObject@)">
            <summary>	
            Creates an enumerator object that will read a .x file.	
            </summary>	
            <param name="arg0"><para>The data source. Either:</para>  A file name A D3DXF_FILELOADMEMORY structure A D3DXF_FILELOADRESOURCE structure  <para> Depending on the value of loadflags.</para></param>	
            <param name="arg1"><para>Value that specifies the source of the data. This value can be one of the D3DXF_FILELOADOPTIONS flags.</para></param>	
            <param name="arg2"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.XFileEnumObject"/> interface, representing the created enumerator object. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: D3DXFERR_BADVALUE, D3DXFERR_PARSEERROR.</returns>	
            <remarks>	
            After using this method, use one of the <see cref="T:SharpDX.Direct3D9.XFileEnumObject"/> methods to retrieve a data object.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFile::CreateEnumObject']/*"/>	
            <unmanaged>HRESULT ID3DXFile::CreateEnumObject([In] const void* arg0,[In] unsigned int arg1,[In] ID3DXFileEnumObject** arg2)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFile.CreateSaveObject(System.IntPtr,System.Int32,System.Int32,SharpDX.Direct3D9.XFileSaveObject@)">
            <summary>	
            Creates a save object that will be used to save data to a .x file.	
            </summary>	
            <param name="arg0"><para>Pointer to the name of the file to use for saving data.</para></param>	
            <param name="arg1"><para>Value that specifies the name of the file to which data is to be saved. This value can be one of the File Save Options flags.</para></param>	
            <param name="arg2"><para>Indicates the format to use when saving the .x file. This value can be one of the File Formats flags. For more information, see Remarks.</para></param>	
            <param name="arg3"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/> interface, representing the created save object.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: D3DXFERR_BADVALUE, D3DXFERR_PARSEERROR.</returns>	
            <remarks>	
            After using this method, use methods of the <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/> interface to create data objects and to save templates or data.For the saved file format dwFileFormat, one of the binary, legacy binary, or text flags in File Formats must be specified. The file can be compressed by using the optional <see cref="F:SharpDX.Direct3D9.XFileFormat.Compressed"/> flag.The file format values can be combined in a logical OR to create compressed text or compressed binary files. If you indicate that the file format should be text and compressed, the file will be written out first as text and then compressed. However, compressed text files are not as efficient as binary text files; in most cases, therefore, you will want to indicate binary and compressed.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFile::CreateSaveObject']/*"/>	
            <unmanaged>HRESULT ID3DXFile::CreateSaveObject([In] const void* arg0,[In] unsigned int arg1,[In] unsigned int arg2,[In] ID3DXFileSaveObject** arg3)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFile.RegisterTemplates(System.IntPtr,SharpDX.PointerSize)">
            <summary>	
            Registers custom templates.	
            </summary>	
            <param name="arg0"><para>Pointer to a buffer consisting of a .x file in text or binary format that contains templates.</para></param>	
            <param name="arg1"><para>Size of the buffer pointed to by pvData, in bytes.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: D3DXFERR_BADVALUE, D3DXFERR_PARSEERROR.</returns>	
            <remarks>	
            The following code fragment provides an example call to RegisterTemplates And example contents for the buffer to which pvData points.<code>	
             #define XSKINEXP_TEMPLATES \ "xof 0303txt 0032\ template XSkinMeshHeader \ { \ &lt;3CF169CE-FF7C-44ab-93C0-F78F62D172E2&gt; \ WORD nMaxSkinWeightsPerVertex; \ WORD nMaxSkinWeightsPerFace; \ WORD nBones; \ } \ template VertexDuplicationIndices \ { \ &lt;B8D65549-D7C9-4995-89CF-53A9A8B031E3&gt; \ DWORD nIndices; \ DWORD nOriginalVertices; \ array DWORD indices[nIndices]; \ } \ template SkinWeights \ { \ &lt;6F0D123B-BAD2-4167-A0D0-80224F25FABB&gt; \ STRING transformNodeName;\ DWORD nWeights; \ array DWORD vertexIndices[nWeights]; \ array float weights[nWeights]; \ Matrix4x4 matrixOffset; \ }"	
            .	
            .	
            . LPD3DXFILE pD3DXFile = <c>null</c>; if ( FAILED  (hr = pD3DXFile-&gt;RegisterTemplates(  (LPVOID)XSKINEXP_TEMPLATES, sizeof( XSKINEXP_TEMPLATES ) - 1 ) ) )	
            goto End;	
            	
            </code>All templates must specify a name and a UUID.This method calls the RegisterEnumTemplates method, obtaining an <see cref="T:SharpDX.Direct3D9.XFileEnumObject"/> interface reference by calling CreateEnumObject with pvData as the first parameter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFile::RegisterTemplates']/*"/>	
            <unmanaged>HRESULT ID3DXFile::RegisterTemplates([In] const void* arg0,[In] SIZE_T arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFile.RegisterEnumTemplates(SharpDX.Direct3D9.XFileEnumObject)">
            <summary>	
            Registers custom templates, given an <see cref="T:SharpDX.Direct3D9.XFileEnumObject"/> enumeration object.	
            </summary>	
            <param name="arg0">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/> .If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <remarks>	
            When this method is called, it copies templates stored with the <see cref="T:SharpDX.Direct3D9.XFileEnumObject"/>, representing the file, to the local template store of the <see cref="T:SharpDX.Direct3D9.XFile"/> object.If an <see cref="T:SharpDX.Direct3D9.XFileEnumObject"/> reference is not available, call the RegisterTemplates method instead.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFile::RegisterEnumTemplates']/*"/>	
            <unmanaged>HRESULT ID3DXFile::RegisterEnumTemplates([In] ID3DXFileEnumObject* arg0)</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.XFileData">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.XFileData"/> interface to build or to access the immediate hierarchy of the data object. Template restrictions determine the hierarchy.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData']/*"/>	
            <unmanaged>ID3DXFileData</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.XFileData"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.GetEnum(SharpDX.Direct3D9.XFileEnumObject@)">
            <summary>	
            Retrieves the enumeration object in this file data object.	
            </summary>	
            <param name="arg0"><para>Address of a reference to receive the enumeration object in this file data object.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::GetEnum']/*"/>	
            <unmanaged>HRESULT ID3DXFileData::GetEnum([Out] ID3DXFileEnumObject** arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.GetName(System.String,SharpDX.PointerSize@)">
            <summary>	
            Retrieves the name of this file data object.	
            </summary>	
            <param name="arg0"><para>Address of a reference to receive the name of this file data object. If this parameter is <c>null</c>, then puiSize will return the size of the string. If szName points to valid memory, the name of this file data object will be copied into szName up to the number of characters given by puiSize. </para></param>	
            <param name="arg1"><para>Pointer to the size of the string that represents the name of this file data object. This parameter can be <c>null</c> if szName provides a reference to the name. This parameter will return the size of the string if szName is <c>null</c>.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <remarks>	
            For this method to succeed, either szName or puiSize must be non-<c>null</c>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::GetName']/*"/>	
            <unmanaged>HRESULT ID3DXFileData::GetName([In] char* arg0,[Out] SIZE_T* arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.GetId(System.Guid)">
            <summary>	
            Retrieves the <see cref="T:System.Guid"/> of this file data object.	
            </summary>	
            <param name="arg0"><para>Pointer to a <see cref="T:System.Guid"/> to receive the ID of this file data object. If the file data object has no ID, the returned parameter value will be GUID_NULL.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::GetId']/*"/>	
            <unmanaged>HRESULT ID3DXFileData::GetId([In] GUID* arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.Lock(SharpDX.PointerSize,System.IntPtr)">
            <summary>	
            Accesses the .x file data.	
            </summary>	
            <param name="arg0"><para>Pointer to the size of the .x file data.</para></param>	
            <param name="arg1"><para>Address of a reference to receive the <see cref="T:SharpDX.Direct3D9.XFileData"/> file data object's interface reference. See Remarks.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <remarks>	
            The ppData reference is only valid during a <see cref="M:SharpDX.Direct3D9.XFileData.Lock(SharpDX.PointerSize,System.IntPtr)"/> ... <see cref="M:SharpDX.Direct3D9.XFileData.Unlock"/> sequence. You can make multiple lock calls. However, you must ensure that the number of lock calls matches the number of unlock calls.Because file data is not guaranteed to be aligned properly with byte boundaries, you should access ppData with UNALIGNED references.Returned parameter values are not guaranteed to be valid due to possible file corruption; therefore, your code should verify the returned parameter values.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::Lock']/*"/>	
            <unmanaged>HRESULT ID3DXFileData::Lock([In] SIZE_T* arg0,[In] const void** arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.Unlock">
            <summary>	
            Ends the lifespan of the ppData reference returned by <see cref="M:SharpDX.Direct3D9.XFileData.Lock(SharpDX.PointerSize,System.IntPtr)"/>.	
            </summary>	
            <returns>The return value is <see cref="F:SharpDX.Result.Ok"/>.</returns>	
            <remarks>	
            You must ensure that the number of <see cref="M:SharpDX.Direct3D9.XFileData.Lock(SharpDX.PointerSize,System.IntPtr)"/> calls matches the number of <see cref="M:SharpDX.Direct3D9.XFileData.Unlock"/> calls. After calling Unlock, the ppData reference returned by <see cref="M:SharpDX.Direct3D9.XFileData.Lock(SharpDX.PointerSize,System.IntPtr)"/> should no longer be used.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::Unlock']/*"/>	
            <unmanaged>HRESULT ID3DXFileData::Unlock()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.GetTypeInfo(System.Guid@)">
            <summary>	
            Retrieves the template ID in this file data object.	
            </summary>	
            <param name="arg0"><para>Pointer to the <see cref="T:System.Guid"/> representing the template in this file data object.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::GetType']/*"/>	
            <unmanaged>HRESULT ID3DXFileData::GetType([Out] GUID* arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.IsReference_">
            <summary>	
            Indicates whether this file data object is a reference object that points to another child data object.	
            </summary>	
            <returns>Returns TRUE if the file data object is a reference object; returns <see cref="F:SharpDX.Result.False"/> otherwise.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::IsReference']/*"/>	
            <unmanaged>BOOL ID3DXFileData::IsReference()</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.GetChildren(SharpDX.PointerSize@)">
            <summary>	
            Retrieves the number of children in this file data object.	
            </summary>	
            <param name="arg0"><para>Address of a reference to receive the number of children in this file data object.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::GetChildren']/*"/>	
            <unmanaged>HRESULT ID3DXFileData::GetChildren([Out] SIZE_T* arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileData.GetChild(SharpDX.PointerSize,SharpDX.Direct3D9.XFileData@)">
            <summary>	
            Retrieves a child object in this file data object.	
            </summary>	
            <param name="arg0"><para>ID of the child object to retrieve.</para></param>	
            <param name="arg1"><para>Address of a reference to receive the child object's interface reference.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following values: D3DXFERR_BADVALUE, D3DXFERR_NOMOREOBJECTS.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::GetChild']/*"/>	
            <unmanaged>HRESULT ID3DXFileData::GetChild([In] SIZE_T arg0,[Out] ID3DXFileData** arg1)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.XFileData.Enum">
            <summary>	
            Retrieves the enumeration object in this file data object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::GetEnum']/*"/>	
            <unmanaged>GetEnum</unmanaged>	
            <unmanaged>HRESULT ID3DXFileData::GetEnum([Out] ID3DXFileEnumObject** arg0)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.XFileData.TypeInfo">
            <summary>	
            Retrieves the template ID in this file data object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::GetType']/*"/>	
            <unmanaged>GetType</unmanaged>	
            <unmanaged>HRESULT ID3DXFileData::GetType([Out] GUID* arg0)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.XFileData.IsReference">
            <summary>	
            Indicates whether this file data object is a reference object that points to another child data object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::IsReference']/*"/>	
            <unmanaged>IsReference</unmanaged>	
            <unmanaged>BOOL ID3DXFileData::IsReference()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.XFileData.Children">
            <summary>	
            Retrieves the number of children in this file data object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileData::GetChildren']/*"/>	
            <unmanaged>GetChildren</unmanaged>	
            <unmanaged>HRESULT ID3DXFileData::GetChildren([Out] SIZE_T* arg0)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.XFileEnumObject">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.XFileEnumObject"/> interface to cycle through the child file data objects in the file and to retrieve a child object by its globally unique identifier (<see cref="T:System.Guid"/>) or by its name.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileEnumObject']/*"/>	
            <unmanaged>ID3DXFileEnumObject</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileEnumObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.XFileEnumObject"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileEnumObject.GetFile(SharpDX.Direct3D9.XFile@)">
            <summary>	
            Retrieves the <see cref="T:SharpDX.Direct3D9.XFile"/> object.	
            </summary>	
            <param name="arg0">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileEnumObject::GetFile']/*"/>	
            <unmanaged>HRESULT ID3DXFileEnumObject::GetFile([Out] ID3DXFile** arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileEnumObject.GetChildren(SharpDX.PointerSize@)">
            <summary>	
            Retrieves the number of child objects in this file data object.	
            </summary>	
            <param name="arg0"><para>Address of a reference to receive the number of child objects in this file data object.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileEnumObject::GetChildren']/*"/>	
            <unmanaged>HRESULT ID3DXFileEnumObject::GetChildren([Out] SIZE_T* arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileEnumObject.GetChild(SharpDX.PointerSize,SharpDX.Direct3D9.XFileData@)">
            <summary>	
            Retrieves a child object in this file data object.	
            </summary>	
            <param name="arg0"><para>ID of the child object to retrieve.</para></param>	
            <param name="arg1"><para>Address of a reference to receive the child object's interface reference.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: D3DXFERR_BADVALUE, D3DXFERR_NOMOREOBJECTS.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileEnumObject::GetChild']/*"/>	
            <unmanaged>HRESULT ID3DXFileEnumObject::GetChild([In] SIZE_T arg0,[Out] ID3DXFileData** arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileEnumObject.GetDataObjectById(System.Guid,SharpDX.Direct3D9.XFileData@)">
            <summary>	
            Retrieves the data object that has the specified <see cref="T:System.Guid"/>.	
            </summary>	
            <param name="arg0"><para>Reference to the requested <see cref="T:System.Guid"/>. </para></param>	
            <param name="arg1"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.XFileData"/> interface, representing the returned file data object. </para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following:DXFILEERR_BADVALUE, DXFILEERR_NOTFOUND.</returns>	
            <remarks>	
            Obtain the <see cref="T:System.Guid"/> rguid of the current file data object with the <see cref="M:SharpDX.Direct3D9.XFileData.GetId(System.Guid)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileEnumObject::GetDataObjectById']/*"/>	
            <unmanaged>HRESULT ID3DXFileEnumObject::GetDataObjectById([In] const GUID&amp; arg0,[In] ID3DXFileData** arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileEnumObject.GetDataObjectByName(System.String,SharpDX.Direct3D9.XFileData@)">
            <summary>	
            Retrieves the data object that has the specified name.	
            </summary>	
            <param name="arg0"><para>Pointer to the requested name. </para></param>	
            <param name="arg1"><para>Address of a reference to an <see cref="T:SharpDX.Direct3D9.XFileData"/> interface, representing the returned file data object.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following:DXFILEERR_BADVALUE, DXFILEERR_NOTFOUND.</returns>	
            <remarks>	
            Obtain the name szName of the current file data object with the <see cref="M:SharpDX.Direct3D9.XFileData.GetName(System.String,SharpDX.PointerSize@)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileEnumObject::GetDataObjectByName']/*"/>	
            <unmanaged>HRESULT ID3DXFileEnumObject::GetDataObjectByName([In] const char* arg0,[In] ID3DXFileData** arg1)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.XFileEnumObject.File">
            <summary>	
            Retrieves the <see cref="T:SharpDX.Direct3D9.XFile"/> object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileEnumObject::GetFile']/*"/>	
            <unmanaged>GetFile</unmanaged>	
            <unmanaged>HRESULT ID3DXFileEnumObject::GetFile([Out] ID3DXFile** arg0)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.XFileEnumObject.Children">
            <summary>	
            Retrieves the number of child objects in this file data object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileEnumObject::GetChildren']/*"/>	
            <unmanaged>GetChildren</unmanaged>	
            <unmanaged>HRESULT ID3DXFileEnumObject::GetChildren([Out] SIZE_T* arg0)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.XFileSaveData">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.XFileSaveData"/> interface to add data objects as children of a .x file data node.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveData']/*"/>	
            <unmanaged>ID3DXFileSaveData</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveData.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.XFileSaveData"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveData.GetSave(SharpDX.Direct3D9.XFileSaveObject@)">
            <summary>	
            Retrieves a reference to this <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/> file data node.	
            </summary>	
            <param name="arg0">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveData::GetSave']/*"/>	
            <unmanaged>HRESULT ID3DXFileSaveData::GetSave([Out] ID3DXFileSaveObject** arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveData.GetName(System.String,SharpDX.PointerSize@)">
            <summary>	
            Retrieves the name of this <see cref="T:SharpDX.Direct3D9.XFileSaveData"/> file data node.	
            </summary>	
            <param name="arg0">No documentation.</param>	
            <param name="arg1">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <remarks>	
            For this method to succeed, either szName or puiSize must be non-<c>null</c>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveData::GetName']/*"/>	
            <unmanaged>HRESULT ID3DXFileSaveData::GetName([In] char* arg0,[Out] SIZE_T* arg1)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveData.GetId(System.Guid)">
            <summary>	
            Retrieves the <see cref="T:System.Guid"/> of this <see cref="T:SharpDX.Direct3D9.XFileSaveData"/> file data node.	
            </summary>	
            <param name="arg0">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the following value will be returned: D3DXFERR_BADVALUE.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveData::GetId']/*"/>	
            <unmanaged>HRESULT ID3DXFileSaveData::GetId([In] GUID* arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveData.GetTypeInfo(System.Guid@)">
            <summary>	
            Retrieves the template ID of this file data node.	
            </summary>	
            <param name="arg0"><para>Pointer to the <see cref="T:System.Guid"/> representing the template in this file data node.</para></param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: D3DXFERR_BADOBJECT, D3DXFERR_BADVALUE.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveData::GetType']/*"/>	
            <unmanaged>HRESULT ID3DXFileSaveData::GetType([Out] GUID* arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveData.AddDataObject(System.Guid,System.String,System.Guid,SharpDX.PointerSize,System.IntPtr,SharpDX.Direct3D9.XFileSaveData@)">
            <summary>	
            Adds a data object as a child of the <see cref="T:SharpDX.Direct3D9.XFileSaveData"/> file data node.	
            </summary>	
            <param name="arg0">No documentation.</param>	
            <param name="arg1">No documentation.</param>	
            <param name="arg2">No documentation.</param>	
            <param name="arg3">No documentation.</param>	
            <param name="arg4">No documentation.</param>	
            <param name="arg5">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: D3DXFERR_BADOBJECT, D3DXFERR_BADVALUE, E_OUTOFMEMORY.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveData::AddDataObject']/*"/>	
            <unmanaged>HRESULT ID3DXFileSaveData::AddDataObject([In] const GUID&amp; arg0,[In] const char* arg1,[In] const GUID* arg2,[In] SIZE_T arg3,[In] const void* arg4,[In] ID3DXFileSaveData** arg5)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveData.AddDataReference(System.String,System.Guid)">
            <summary>	
            Adds a data reference as a child of this <see cref="T:SharpDX.Direct3D9.XFileSaveData"/> file data node. The data reference points to a file data object.	
            </summary>	
            <param name="arg0">No documentation.</param>	
            <param name="arg1">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: D3DXFERR_BADOBJECT, D3DXFERR_BADVALUE, E_OUTOFMEMORY.</returns>	
            <remarks>	
            The file data object being referenced must have either a name or a <see cref="T:System.Guid"/>. The file data object must also derive from a different parent <see cref="T:SharpDX.Direct3D9.XFileSaveData"/> object.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveData::AddDataReference']/*"/>	
            <unmanaged>HRESULT ID3DXFileSaveData::AddDataReference([In] const char* arg0,[In] const GUID* arg1)</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.XFileSaveData.Save">
            <summary>	
            Retrieves a reference to this <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/> file data node.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveData::GetSave']/*"/>	
            <unmanaged>GetSave</unmanaged>	
            <unmanaged>HRESULT ID3DXFileSaveData::GetSave([Out] ID3DXFileSaveObject** arg0)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.XFileSaveData.TypeInfo">
            <summary>	
            Retrieves the template ID of this file data node.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveData::GetType']/*"/>	
            <unmanaged>GetType</unmanaged>	
            <unmanaged>HRESULT ID3DXFileSaveData::GetType([Out] GUID* arg0)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.XFileSaveObject">
            <summary>	
            Applications use the methods of the <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/> interface to write a .x file to disk, and to add and save data objects and templates.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveObject']/*"/>	
            <unmanaged>ID3DXFileSaveObject</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveObject.GetFile(SharpDX.Direct3D9.XFile@)">
            <summary>	
            Gets the <see cref="T:SharpDX.Direct3D9.XFile"/> interface of the object that created this <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/> object.	
            </summary>	
            <param name="arg0">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: D3DXFERR_BADVALUE, E_NOINTERFACE, E_POINTER.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveObject::GetFile']/*"/>	
            <unmanaged>HRESULT ID3DXFileSaveObject::GetFile([Out] ID3DXFile** arg0)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveObject.AddDataObject(System.Guid,System.String,System.Guid,SharpDX.PointerSize,System.IntPtr,SharpDX.Direct3D9.XFileSaveData@)">
            <summary>	
            Adds a data object as a child of the <see cref="T:SharpDX.Direct3D9.XFileSaveData"/> object.	
            </summary>	
            <param name="arg0">No documentation.</param>	
            <param name="arg1">No documentation.</param>	
            <param name="arg2">No documentation.</param>	
            <param name="arg3">No documentation.</param>	
            <param name="arg4">No documentation.</param>	
            <param name="arg5">No documentation.</param>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be one of the following: D3DXFERR_BADOBJECT, DXFILEERR_BADVALUE, E_OUTOFMEMORY.</returns>	
            <remarks>	
            If a data reference object will reference the data object, either the szName or pId parameter must be non-<c>null</c>.Save the created data to disk by using the <see cref="M:SharpDX.Direct3D9.XFileSaveObject.Save"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveObject::AddDataObject']/*"/>	
            <unmanaged>HRESULT ID3DXFileSaveObject::AddDataObject([In] const GUID&amp; arg0,[In] const char* arg1,[In] const GUID* arg2,[In] SIZE_T arg3,[In] const void* arg4,[In] ID3DXFileSaveData** arg5)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.XFileSaveObject.Save">
            <summary>	
            Saves a data object and its children to a .x file on disk.	
            </summary>	
            <returns>If the method succeeds, the return value is <see cref="F:SharpDX.Result.Ok"/>. If the method fails, the return value can be the following: D3DXFERR_BADOBJECT.</returns>	
            <remarks>	
            After this method succeeds, <see cref="M:SharpDX.Direct3D9.XFileSaveObject.AddDataObject(System.Guid,System.String,System.Guid,SharpDX.PointerSize,System.IntPtr,SharpDX.Direct3D9.XFileSaveData@)"/>, <see cref="M:SharpDX.Direct3D9.XFileSaveData.AddDataObject(System.Guid,System.String,System.Guid,SharpDX.PointerSize,System.IntPtr,SharpDX.Direct3D9.XFileSaveData@)"/> and <see cref="M:SharpDX.Direct3D9.XFileSaveData.AddDataReference(System.String,System.Guid)"/> can no longer be called until a new <see cref="T:SharpDX.Direct3D9.XFile"/> object is created.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveObject::Save']/*"/>	
            <unmanaged>HRESULT ID3DXFileSaveObject::Save()</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.XFileSaveObject.File">
            <summary>	
            Gets the <see cref="T:SharpDX.Direct3D9.XFile"/> interface of the object that created this <see cref="T:SharpDX.Direct3D9.XFileSaveObject"/> object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='ID3DXFileSaveObject::GetFile']/*"/>	
            <unmanaged>GetFile</unmanaged>	
            <unmanaged>HRESULT ID3DXFileSaveObject::GetFile([Out] ID3DXFile** arg0)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.AttributeRange">
            <summary>	
            Stores an attribute table entry.	
            </summary>	
            <remarks>	
            An attribute table is used to identify areas of the mesh that need to be drawn with different textures, render states, materials, and so on.  In addition, the application can use the attribute table to hide portions of a mesh by not drawing a given attribute identifier (AttribId) when drawing the frame.The LPD3DXATTRIBUTERANGE type is defined as a reference to the <see cref="T:SharpDX.Direct3D9.AttributeRange"/> structure.<code>	
             typedef <see cref="T:SharpDX.Direct3D9.AttributeRange"/>* LPD3DXATTRIBUTERANGE;	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTERANGE']/*"/>	
            <unmanaged>D3DXATTRIBUTERANGE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeRange.AttribId">
            <summary>	
            <para>Attribute table identifier.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTERANGE::AttribId']/*"/>	
            <unmanaged>unsigned int AttribId</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeRange.FaceStart">
            <summary>	
            <para>Starting face.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTERANGE::FaceStart']/*"/>	
            <unmanaged>unsigned int FaceStart</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeRange.FaceCount">
            <summary>	
            <para>Face count.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTERANGE::FaceCount']/*"/>	
            <unmanaged>unsigned int FaceCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeRange.VertexStart">
            <summary>	
            <para>Starting vertex.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTERANGE::VertexStart']/*"/>	
            <unmanaged>unsigned int VertexStart</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeRange.VertexCount">
            <summary>	
            <para>Vertex count.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTERANGE::VertexCount']/*"/>	
            <unmanaged>unsigned int VertexCount</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.AttributeWeights">
            <summary>	
            Specifies mesh weight attributes.	
            </summary>	
            <remarks>	
            This structure describes how a simplification operation will consider vertex data when calculating relative costs between collapsing edges.  For example, if the Normal field is 0.0, the simplification operation will ignore the vertex normal component when calculating the error for the collapse.  However, if the Normal field is 1.0, the simplification operation will use the vertex normal component. If the Normal field is 2.0, double the amount of errors;  if the Normal field is 4.0, then quadruple the number of errors, and so on.The LPD3DXATTRIBUTEWEIGHTS type is defined as a reference to the <see cref="T:SharpDX.Direct3D9.AttributeWeights"/> structure.<code>	
             typedef <see cref="T:SharpDX.Direct3D9.AttributeWeights"/>* LPD3DXATTRIBUTEWEIGHTS;	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTEWEIGHTS']/*"/>	
            <unmanaged>D3DXATTRIBUTEWEIGHTS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeWeights.Position">
            <summary>	
            <para>Position.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTEWEIGHTS::Position']/*"/>	
            <unmanaged>float Position</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeWeights.Boundary">
            <summary>	
            <para>Blend weight.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTEWEIGHTS::Boundary']/*"/>	
            <unmanaged>float Boundary</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeWeights.Normal">
            <summary>	
            <para>Normal.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTEWEIGHTS::Normal']/*"/>	
            <unmanaged>float Normal</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeWeights.Diffuse">
            <summary>	
            <para>Diffuse lighting value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTEWEIGHTS::Diffuse']/*"/>	
            <unmanaged>float Diffuse</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeWeights.Specular">
            <summary>	
            <para>Specular lighting value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTEWEIGHTS::Specular']/*"/>	
            <unmanaged>float Specular</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeWeights.Tangent">
            <summary>	
            <para>Tangent.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTEWEIGHTS::Tangent']/*"/>	
            <unmanaged>float Tangent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.AttributeWeights.Binormal">
            <summary>	
            <para>Binormal.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTEWEIGHTS::Binormal']/*"/>	
            <unmanaged>float Binormal</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.AttributeWeights.TextureCoordinate">
            <summary>	
            <para>Eight texture coordinates.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXATTRIBUTEWEIGHTS::Texcoord']/*"/>	
            <unmanaged>float Texcoord[8]</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.BandwidthTimings">
            <summary>	
            Throughput metrics for help in understanding the performance of an application.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9BANDWIDTHTIMINGS']/*"/>	
            <unmanaged>D3DDEVINFO_D3D9BANDWIDTHTIMINGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BandwidthTimings.MaxBandwidthUtilized">
            <summary>	
            <para>The bandwidth or maximum data transfer rate from the host CPU to the GPU. This is typically the bandwidth of the PCI or AGP bus which connects the CPU and the GPU.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9BANDWIDTHTIMINGS::MaxBandwidthUtilized']/*"/>	
            <unmanaged>float MaxBandwidthUtilized</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BandwidthTimings.FrontEndUploadMemoryUtilizedPercent">
            <summary>	
            <para>Memory utilized percentage when uploading data from the host CPU to the GPU. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9BANDWIDTHTIMINGS::FrontEndUploadMemoryUtilizedPercent']/*"/>	
            <unmanaged>float FrontEndUploadMemoryUtilizedPercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BandwidthTimings.VertexRateUtilizedPercent">
            <summary>	
            <para>Vertex throughput percentage. This is the number of vertices processed compared to the theoretical maximum vertex processing rate.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9BANDWIDTHTIMINGS::VertexRateUtilizedPercent']/*"/>	
            <unmanaged>float VertexRateUtilizedPercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BandwidthTimings.TriangleSetupRateUtilizedPercent">
            <summary>	
            <para>Triangle set-up throughput percentage. This is the number of triangles that are set up for rasterization compared to the theoretical maximum triangle set-up rate.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9BANDWIDTHTIMINGS::TriangleSetupRateUtilizedPercent']/*"/>	
            <unmanaged>float TriangleSetupRateUtilizedPercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.BandwidthTimings.FillRateUtilizedPercent">
            <summary>	
            <para>Pixel fill throughput percentage. This is the number of pixels that are filled compared to the theoretical pixel fill.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9BANDWIDTHTIMINGS::FillRateUtilizedPercent']/*"/>	
            <unmanaged>float FillRateUtilizedPercent</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Box">
            <summary>	
            Defines a volume.	
            </summary>	
            <remarks>	
            D3DBOX includes the left, top, and front edges; however, the right, bottom, and back edges are not included. For example, a box that is 100 units wide and begins at 0 (thus, including the points up to and including 99) would be expressed with a value of 0 for the Left member and a value of 100 for the Right member. Note that a value of 99 is not used for the Right member.The restrictions on side ordering observed for <see cref="T:SharpDX.Direct3D9.Box"/> are left to right, top to bottom, and front to back.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBOX']/*"/>	
            <unmanaged>D3DBOX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Box.Left">
            <summary>	
            <para>Position of the left side of the box on the x-axis.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBOX::Left']/*"/>	
            <unmanaged>unsigned int Left</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Box.Top">
            <summary>	
            <para>Position of the top of the box on the y-axis.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBOX::Top']/*"/>	
            <unmanaged>unsigned int Top</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Box.Right">
            <summary>	
            <para>Position of the right side of the box on the x-axis.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBOX::Right']/*"/>	
            <unmanaged>unsigned int Right</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Box.Bottom">
            <summary>	
            <para>Position of the bottom of the box on the y-axis.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBOX::Bottom']/*"/>	
            <unmanaged>unsigned int Bottom</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Box.Front">
            <summary>	
            <para>Position of the front of the box on the z-axis.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBOX::Front']/*"/>	
            <unmanaged>unsigned int Front</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Box.Back">
            <summary>	
            <para>Position of the back of the box on the z-axis.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DBOX::Back']/*"/>	
            <unmanaged>unsigned int Back</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CacheUtilization">
            <summary>	
            Measure the cache hit rate performance for textures and indexed vertices.	
            </summary>	
            <remarks>	
            An efficient cache is typically closer to a 90 percent hit rate, and an inefficient cache is typically closer to a 10 percent hit rate (although a low percentage is not necessarily a problem).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9CACHEUTILIZATION']/*"/>	
            <unmanaged>D3DDEVINFO_D3D9CACHEUTILIZATION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CacheUtilization.TextureCacheHitRate">
            <summary>	
            <para>The hit rate for finding a texture in the texture cache. This assumes there is a texture cache. Increasing the level-of-detail bias to use the most detailed texture, using many large textures, or producing a near random texture access pattern on large textures with custom shader code can dramatically affect the texture cache hit rate.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9CACHEUTILIZATION::TextureCacheHitRate']/*"/>	
            <unmanaged>float TextureCacheHitRate</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CacheUtilization.PostTransformVertexCacheHitRate">
            <summary>	
            <para>The hit rate for finding transformed vertices in the vertex cache. The GPU is designed to transform indexed vertices and may store them in a vertex cache. If you are using meshes, <see cref="M:SharpDX.Direct3D9.D3DX9.OptimizeFaces(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Int32[])"/> or <see cref="M:SharpDX.Direct3D9.D3DX9.OptimizeVertices(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Int32[])"/> may result in better vertex cache utilization.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9CACHEUTILIZATION::PostTransformVertexCacheHitRate']/*"/>	
            <unmanaged>float PostTransformVertexCacheHitRate</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CallbackKey">
            <summary>	
            Describes a callback key for use in key frame animation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXKEY_CALLBACK']/*"/>	
            <unmanaged>D3DXKEY_CALLBACK</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CallbackKey.Time">
            <summary>	
            <para>Key frame time stamp.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXKEY_CALLBACK::Time']/*"/>	
            <unmanaged>float Time</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CallbackKey.Data">
            <summary>	
            <para>Pointer to user callback data.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXKEY_CALLBACK::pCallbackData']/*"/>	
            <unmanaged>void* pCallbackData</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ClipStatus">
            <summary>	
            Describes the current clip status.	
            </summary>	
            <remarks>	
            When clipping is enabled during vertex processing (by ProcessVertices, DrawPrimitive, or other drawing functions), Direct3D computes a clip code for every vertex. The clip code is a combination of D3DCS_* bits. When a vertex is outside a particular clipping plane, the corresponding bit is set in the clipping code. Direct3D maintains the clip status using <see cref="T:SharpDX.Direct3D9.ClipStatus"/>, which has ClipUnion and ClipIntersection members. ClipUnion is a bitwise OR of all vertex clip codes and ClipIntersection is a bitwise AND of all vertex clip codes. Initial values are zero for ClipUnion and 0xFFFFFFFF for ClipIntersection. When <see cref="F:SharpDX.Direct3D9.RenderState.Clipping"/> is set to <see cref="F:SharpDX.Result.False"/>, ClipUnion and ClipIntersection are set to zero. Direct3D updates the clip status during drawing calls. To compute clip status for a particular object, set ClipUnion and ClipIntersection to their initial value and continue drawing.Clip status is not updated by DrawRectPatch and DrawTriPatch because there is no software emulation for them.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCLIPSTATUS9']/*"/>	
            <unmanaged>D3DCLIPSTATUS9</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "F:SharpDX.Direct3D9.ClipStatus.ClipUnion" -->
        <member name="F:SharpDX.Direct3D9.ClipStatus.ClipIntersection">
            <summary>	
            <para>Clip intersection flags that describe the current clip status. This member can take the same flags as ClipUnion. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DCLIPSTATUS9::ClipIntersection']/*"/>	
            <unmanaged>unsigned int ClipIntersection</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ConstantDescription">
            <summary>	
            A description of a constant in a constant table.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC']/*"/>	
            <unmanaged>D3DXCONSTANT_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.Name">
            <summary>	
            <para>Name of the constant.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::Name']/*"/>	
            <unmanaged>const char* Name</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.RegisterSet">
            <summary>	
            <para>Constant data type. See <see cref="T:SharpDX.Direct3D9.RegisterSet"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::RegisterSet']/*"/>	
            <unmanaged>D3DXREGISTER_SET RegisterSet</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.RegisterIndex">
            <summary>	
            <para>Zero-based index of the constant in the table.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::RegisterIndex']/*"/>	
            <unmanaged>unsigned int RegisterIndex</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.RegisterCount">
            <summary>	
            <para>Number of registers that contain data.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::RegisterCount']/*"/>	
            <unmanaged>unsigned int RegisterCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.Class">
            <summary>	
            <para>Parameter class. See <see cref="T:SharpDX.Direct3D9.ParameterClass"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::Class']/*"/>	
            <unmanaged>D3DXPARAMETER_CLASS Class</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.Type">
            <summary>	
            <para>Parameter type. See <see cref="T:SharpDX.Direct3D9.ParameterType"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::Type']/*"/>	
            <unmanaged>D3DXPARAMETER_TYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.Rows">
            <summary>	
            <para>Number of rows.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::Rows']/*"/>	
            <unmanaged>unsigned int Rows</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.Columns">
            <summary>	
            <para>Number of columns.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::Columns']/*"/>	
            <unmanaged>unsigned int Columns</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.Elements">
            <summary>	
            <para>Number of elements in the array.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::Elements']/*"/>	
            <unmanaged>unsigned int Elements</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.StructMembers">
            <summary>	
            <para>Number of structure member sub-parameters.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::StructMembers']/*"/>	
            <unmanaged>unsigned int StructMembers</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.Bytes">
            <summary>	
            <para>Data size in number of bytes.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::Bytes']/*"/>	
            <unmanaged>unsigned int Bytes</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantDescription.DefaultValue">
            <summary>	
            <para>Pointer to the default value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANT_DESC::DefaultValue']/*"/>	
            <unmanaged>const void* DefaultValue</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ConstantTableDescription">
            <summary>	
            A description of the constant table.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANTTABLE_DESC']/*"/>	
            <unmanaged>D3DXCONSTANTTABLE_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantTableDescription.Creator">
            <summary>	
            <para>Name of the constant table creator.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANTTABLE_DESC::Creator']/*"/>	
            <unmanaged>const char* Creator</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantTableDescription.Version">
            <summary>	
            <para>Shader version.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANTTABLE_DESC::Version']/*"/>	
            <unmanaged>unsigned int Version</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ConstantTableDescription.Constants">
            <summary>	
            <para>Number of constants in the constant table.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXCONSTANTTABLE_DESC::Constants']/*"/>	
            <unmanaged>unsigned int Constants</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.CreationParameters">
            <summary>	
            Describes the creation parameters for a device.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVICE_CREATION_PARAMETERS']/*"/>	
            <unmanaged>D3DDEVICE_CREATION_PARAMETERS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreationParameters.AdapterOrdinal">
            <summary>	
            <para>Ordinal number that denotes the display adapter. D3DADAPTER_DEFAULT is always the primary display adapter.  Use this ordinal as the Adapter parameter for any of the <see cref="T:SharpDX.Direct3D9.Direct3D"/> methods. Note that different instances of Direct3D 9.0 objects can use different ordinals. Adapters can enter or leave a system when users, for example, add or remove monitors from a multiple-monitor system or when they hot-swap a laptop. Consequently, use this ordinal only in a Direct3D 9.0 instance known to be valid, that is, either the Direct3D 9.0 that created this <see cref="T:SharpDX.Direct3D9.Device"/> interface or the Direct3D 9.0 returned from GetDirect3D, as called through this <see cref="T:SharpDX.Direct3D9.Device"/> interface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVICE_CREATION_PARAMETERS::AdapterOrdinal']/*"/>	
            <unmanaged>unsigned int AdapterOrdinal</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreationParameters.DeviceType">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.DeviceType"/> enumerated type. Denotes the amount of emulated functionality for this device. The value of this parameter mirrors the value passed to the CreateDevice call that created this device.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVICE_CREATION_PARAMETERS::DeviceType']/*"/>	
            <unmanaged>D3DDEVTYPE DeviceType</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreationParameters.HFocusWindow">
            <summary>	
            <para>Window handle to which focus belongs for this Direct3D device. The value of this parameter mirrors the value passed to the CreateDevice call that created this device.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVICE_CREATION_PARAMETERS::hFocusWindow']/*"/>	
            <unmanaged>HWND hFocusWindow</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.CreationParameters.BehaviorFlags">
            <summary>	
            <para>A combination of one or more <see cref="T:SharpDX.Direct3D9.CreateFlags"/> constants that control global behavior of the device. These constants mirror the constants passed to CreateDevice when the device was created.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVICE_CREATION_PARAMETERS::BehaviorFlags']/*"/>	
            <unmanaged>unsigned int BehaviorFlags</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.DisplayModeFilter">
            <summary>	
            Specifies types of display modes to filter out.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEFILTER']/*"/>	
            <unmanaged>D3DDISPLAYMODEFILTER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayModeFilter.Size">
            <summary>	
            <para>The size of this structure. This should always be set to sizeof(<see cref="T:SharpDX.Direct3D9.DisplayModeFilter"/>).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEFILTER::Size']/*"/>	
            <unmanaged>unsigned int Size</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayModeFilter.Format">
            <summary>	
            <para>The display mode format to filter out. See <see cref="T:SharpDX.Direct3D9.Format"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEFILTER::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.DisplayModeFilter.ScanLineOrdering">
            <summary>	
            <para>Whether the scanline ordering is interlaced or progressive. See <see cref="T:SharpDX.Direct3D9.ScanlineOrdering"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDISPLAYMODEFILTER::ScanLineOrdering']/*"/>	
            <unmanaged>D3DSCANLINEORDERING ScanLineOrdering</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.EffectDescription">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECT_DESC']/*"/>	
            <unmanaged>D3DXEFFECT_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDescription.Creator">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECT_DESC::Creator']/*"/>	
            <unmanaged>const char* Creator</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDescription.Parameters">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECT_DESC::Parameters']/*"/>	
            <unmanaged>unsigned int Parameters</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDescription.Techniques">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECT_DESC::Techniques']/*"/>	
            <unmanaged>unsigned int Techniques</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EffectDescription.Functions">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEFFECT_DESC::Functions']/*"/>	
            <unmanaged>unsigned int Functions</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.EventDescription">
            <summary>	
            Describes an animation event.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC']/*"/>	
            <unmanaged>D3DXEVENT_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventDescription.Type">
            <summary>	
            <para>Event type, as defined in <see cref="T:SharpDX.Direct3D9.EventType"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC::Type']/*"/>	
            <unmanaged>D3DXEVENT_TYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventDescription.Track">
            <summary>	
            <para>Event track identifier.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC::Track']/*"/>	
            <unmanaged>unsigned int Track</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventDescription.StartTime">
            <summary>	
            <para>Start time of the event in global time.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC::StartTime']/*"/>	
            <unmanaged>double StartTime</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventDescription.Duration">
            <summary>	
            <para>Duration of the event in global time.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC::Duration']/*"/>	
            <unmanaged>double Duration</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventDescription.Transition">
            <summary>	
            <para>Transition style of the event, as defined in <see cref="T:SharpDX.Direct3D9.TransitionType"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC::Transition']/*"/>	
            <unmanaged>D3DXTRANSITION_TYPE Transition</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventDescription.Weight">
            <summary>	
            <para>Track weight for the event.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC::Weight']/*"/>	
            <unmanaged>float Weight</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventDescription.Speed">
            <summary>	
            <para>Track speed for the event.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC::Speed']/*"/>	
            <unmanaged>float Speed</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.EventDescription.Position">
            <summary>	
            <para>Track position for the event.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC::Position']/*"/>	
            <unmanaged>double Position</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.EventDescription.Enable">
            <summary>	
            <para>Enable flag.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXEVENT_DESC::Enable']/*"/>	
            <unmanaged>BOOL Enable</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ExtendedMaterial">
            <summary>	
            Returns material information saved in Direct3D (.x) files.	
            </summary>	
            <remarks>	
            The <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXW(System.String,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)"/> and <see cref="M:SharpDX.Direct3D9.D3DX9.LoadMeshFromXof(SharpDX.Direct3D9.XFileData,System.Int32,SharpDX.Direct3D9.Device,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,SharpDX.Direct3D.Blob@,System.Int32,SharpDX.Direct3D9.Mesh@)"/> functions return an array of <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structures  that specify the material color and name of the texture for each material in the mesh. The application is then required to load the texture.The LPD3DXMATERIAL type is defined as a reference to the <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/> structure.<code>	
             typedef struct <see cref="T:SharpDX.Direct3D9.ExtendedMaterial"/>* LPD3DXMATERIAL;	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMATERIAL']/*"/>	
            <unmanaged>D3DXMATERIAL</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ExtendedMaterial.MatD3D">
            <summary>	
            <para> <see cref="T:SharpDX.Direct3D9.Material"/> structure that describes the material properties.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMATERIAL::MatD3D']/*"/>	
            <unmanaged>D3DMATERIAL9 MatD3D</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ExtendedMaterial.PTextureFilename">
            <summary>	
            <para>Pointer to a string that specifies the file name of the texture.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMATERIAL::pTextureFilename']/*"/>	
            <unmanaged>char* pTextureFilename</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.FontDescription">
            <summary>	
            Defines the attributes of a font.	
            </summary>	
            <remarks>	
            The compiler setting also determines the structure type. If Unicode is defined, the <see cref="T:SharpDX.Direct3D9.FontDescription"/> structure type resolves to a <see cref="T:SharpDX.Direct3D9.FontDescription"/>;  otherwise the structure type resolves to a D3DXFONT_DESCA.Possible values of the above members are given in the GDI <see cref="T:SharpDX.Win32Native.LogFont"/> structure.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW']/*"/>	
            <unmanaged>D3DXFONT_DESCW</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FontDescription.Height">
            <summary>	
            <para>Height, in logical units, of the font's character cell or character.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::Height']/*"/>	
            <unmanaged>int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FontDescription.Width">
            <summary>	
            <para>Width, in logical units, of characters in the font.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FontDescription.Weight">
            <summary>	
            <para>Weight of the font in the range from 0 through 1000.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::Weight']/*"/>	
            <unmanaged>unsigned int Weight</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FontDescription.MipLevels">
            <summary>	
            <para>Number of mip levels requested. If this value is zero or D3DX_DEFAULT, a complete mipmap chain is created. If the value is 1, the texture space  is mapped identically to the screen space.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::MipLevels']/*"/>	
            <unmanaged>unsigned int MipLevels</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FontDescription.CharSet">
            <summary>	
            <para>Character set.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::CharSet']/*"/>	
            <unmanaged>unsigned char CharSet</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FontDescription.OutputPrecision">
            <summary>	
            <para>Output precision. The output precision defines how closely the output must match the requested font height, width, character orientation,  escapement, pitch, and font type.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::OutputPrecision']/*"/>	
            <unmanaged>unsigned char OutputPrecision</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FontDescription.Quality">
            <summary>	
            <para>Output quality.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::Quality']/*"/>	
            <unmanaged>unsigned char Quality</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FontDescription.PitchAndFamily">
            <summary>	
            <para>Pitch and family of the font.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::PitchAndFamily']/*"/>	
            <unmanaged>unsigned char PitchAndFamily</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FontDescription.FaceName">
            <summary>	
            <para>A null-terminated string or characters that specifies the typeface name of the font. The length of the string must not exceed 32 characters,  including the  terminating null character. If FaceName is an empty string, the first font that matches the other specified attributes will be used. If the compiler settings require Unicode, the data type TCHAR resolves to WCHAR; otherwise, the data type resolves to CHAR. See Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::FaceName']/*"/>	
            <unmanaged>wchar_t FaceName[32]</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.FontDescription.Italic">
            <summary>	
            <para>Set to TRUE for an Italic font.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFONT_DESCW::Italic']/*"/>	
            <unmanaged>BOOL Italic</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Frame">
            <summary>	
            Encapsulates a transform frame in a transformation frame hierarchy.	
            </summary>	
            <remarks>	
            An application can derive from this structure to add other data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFRAME']/*"/>	
            <unmanaged>D3DXFRAME</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Frame.Name">
            <summary>	
            <para>Name of the frame.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFRAME::Name']/*"/>	
            <unmanaged>char* Name</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Frame.TransformationMatrix">
            <summary>	
            <para>Transformation matrix.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFRAME::TransformationMatrix']/*"/>	
            <unmanaged>D3DXMATRIX TransformationMatrix</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Frame.PMeshContainer">
            <summary>	
            <para>Pointer to the mesh container.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFRAME::pMeshContainer']/*"/>	
            <unmanaged>D3DXMESHCONTAINER* pMeshContainer</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Frame.PFrameSibling">
            <summary>	
            <para>Pointer to a sibling frame.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFRAME::pFrameSibling']/*"/>	
            <unmanaged>D3DXFRAME* pFrameSibling</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Frame.PFrameFirstChild">
            <summary>	
            <para>Pointer to a child frame.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFRAME::pFrameFirstChild']/*"/>	
            <unmanaged>D3DXFRAME* pFrameFirstChild</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.FunctionDescription">
            <summary>	
            Describes a function used by an effect.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFUNCTION_DESC']/*"/>	
            <unmanaged>D3DXFUNCTION_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FunctionDescription.Name">
            <summary>	
            <para>Function name.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFUNCTION_DESC::Name']/*"/>	
            <unmanaged>const char* Name</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.FunctionDescription.Annotations">
            <summary>	
            <para>Unused. This member will always be set to zero by GetFunctionDesc. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXFUNCTION_DESC::Annotations']/*"/>	
            <unmanaged>unsigned int Annotations</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.GammaRamp">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DGAMMARAMP']/*"/>	
            <unmanaged>D3DGAMMARAMP</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.GammaRamp.Red">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DGAMMARAMP::red']/*"/>	
            <unmanaged>unsigned short red[256]</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.GammaRamp.Green">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DGAMMARAMP::green']/*"/>	
            <unmanaged>unsigned short green[256]</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.GammaRamp.Blue">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DGAMMARAMP::blue']/*"/>	
            <unmanaged>unsigned short blue[256]</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ImageInformation">
            <summary>	
            Returns a description of the original contents of an image file.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMAGE_INFO']/*"/>	
            <unmanaged>D3DXIMAGE_INFO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageInformation.Width">
            <summary>	
            <para>Width of original image in pixels.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMAGE_INFO::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageInformation.Height">
            <summary>	
            <para>Height of original image in pixels.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMAGE_INFO::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageInformation.Depth">
            <summary>	
            <para>Depth of original image in pixels.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMAGE_INFO::Depth']/*"/>	
            <unmanaged>unsigned int Depth</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageInformation.MipLevels">
            <summary>	
            <para>Number of mip levels in original image.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMAGE_INFO::MipLevels']/*"/>	
            <unmanaged>unsigned int MipLevels</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageInformation.Format">
            <summary>	
            <para>A value from the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type that most closely describes the data in the original image.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMAGE_INFO::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageInformation.ResourceType">
            <summary>	
            <para>Represents the type of the texture stored in the file. It is either <see cref="F:SharpDX.Direct3D9.ResourceType.Texture"/>, <see cref="F:SharpDX.Direct3D9.ResourceType.VolumeTexture"/>, or D3DRTYPE_CubeTexture.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMAGE_INFO::ResourceType']/*"/>	
            <unmanaged>D3DRESOURCETYPE ResourceType</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ImageInformation.ImageFileFormat">
            <summary>	
            <para>Represents the format of the image file.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXIMAGE_INFO::ImageFileFormat']/*"/>	
            <unmanaged>D3DXIMAGE_FILEFORMAT ImageFileFormat</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.ImageInformation.FromFile(System.String)">
            <summary>
            Retrieves information about a given image file on the disk.
            </summary>
            <param name="fileName">The filename.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure</returns>
            <unmanaged>HRESULT D3DXGetImageInfoFromFileInMemory([In] const void* pSrcData,[In] unsigned int SrcDataSize,[Out] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ImageInformation.FromMemory(System.Byte[])">
            <summary>
            Retrieves information about a given image file in memory.
            </summary>
            <param name="memory">The memory.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure</returns>
            <unmanaged>HRESULT D3DXGetImageInfoFromFileInMemory([In] const void* pSrcData,[In] unsigned int SrcDataSize,[Out] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ImageInformation.FromStream(System.IO.Stream)">
            <summary>
            Retrieves information about a given image file from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure</returns>
            <remarks>This method keeps the position of the stream</remarks>
            <unmanaged>HRESULT D3DXGetImageInfoFromFileInMemory([In] const void* pSrcData,[In] unsigned int SrcDataSize,[Out] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ImageInformation.FromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Retrieves information about a given image file from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="keepPosition">if set to <c>true</c> preserve the stream position; <c>false</c> will move the stream pointer.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.ImageInformation"/> structure</returns>
            <unmanaged>HRESULT D3DXGetImageInfoFromFileInMemory([In] const void* pSrcData,[In] unsigned int SrcDataSize,[Out] D3DXIMAGE_INFO* pSrcInfo)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.IndexBufferDescription">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DINDEXBUFFER_DESC']/*"/>	
            <unmanaged>D3DINDEXBUFFER_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.IndexBufferDescription.Format">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DINDEXBUFFER_DESC::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.IndexBufferDescription.Type">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DINDEXBUFFER_DESC::Type']/*"/>	
            <unmanaged>D3DRESOURCETYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.IndexBufferDescription.Usage">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DINDEXBUFFER_DESC::Usage']/*"/>	
            <unmanaged>D3DUSAGE Usage</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.IndexBufferDescription.Pool">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DINDEXBUFFER_DESC::Pool']/*"/>	
            <unmanaged>D3DPOOL Pool</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.IndexBufferDescription.Size">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DINDEXBUFFER_DESC::Size']/*"/>	
            <unmanaged>unsigned int Size</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.InterfaceTimings">
            <summary>	
            Percent of time processing data in the driver. These statistics may help identify cases when the driver is waiting for other resources.	
            </summary>	
            <remarks>	
            These metrics help identify when a driver is waiting and what it is waiting for. High percentages are not necessarily a problem.These system-global metrics may or may not be implemented. Depending on the specific hardware, these metrics may not support multiple queries simultaneously.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9INTERFACETIMINGS']/*"/>	
            <unmanaged>D3DDEVINFO_D3D9INTERFACETIMINGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.InterfaceTimings.WaitingForGPUToUseApplicationResourceTimePercent">
            <summary>	
            <para>Percentage of time the driver spent waiting for the GPU to finish using a locked resource (and <see cref="F:SharpDX.Direct3D9.LockFlags.DoNotWait"/> wasn't specified).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9INTERFACETIMINGS::WaitingForGPUToUseApplicationResourceTimePercent']/*"/>	
            <unmanaged>float WaitingForGPUToUseApplicationResourceTimePercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.InterfaceTimings.WaitingForGPUToAcceptMoreCommandsTimePercent">
            <summary>	
            <para>Percentage of time the driver spent waiting for the GPU to finish processing some commands before the driver could send more. This indicates the driver has run out of room to send commands to the GPU.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9INTERFACETIMINGS::WaitingForGPUToAcceptMoreCommandsTimePercent']/*"/>	
            <unmanaged>float WaitingForGPUToAcceptMoreCommandsTimePercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.InterfaceTimings.WaitingForGPUToStayWithinLatencyTimePercent">
            <summary>	
            <para>Percentage of time the driver spent waiting for the GPU latency to reduce to less than three rendering frames. </para>	
             <para></para>	
             <para>If an application is GPU-limited, the driver must stall the CPU until the GPU gets within three frames. This prevents an application from queuing up many seconds' worth of rendering calls which may dramatically increase the latency between when the user inputs new data and when the user sees the results of that input. In general, the driver can track the number of times Present is called to prevent queuing up more than three frames of rendering work.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9INTERFACETIMINGS::WaitingForGPUToStayWithinLatencyTimePercent']/*"/>	
            <unmanaged>float WaitingForGPUToStayWithinLatencyTimePercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.InterfaceTimings.WaitingForGPUExclusiveResourceTimePercent">
            <summary>	
            <para>Percentage of time the driver spent waiting for a resource that cannot be pipelined (that is operated in parallel). An application may want to avoid using a non-pipelined resource for performance reasons.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9INTERFACETIMINGS::WaitingForGPUExclusiveResourceTimePercent']/*"/>	
            <unmanaged>float WaitingForGPUExclusiveResourceTimePercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.InterfaceTimings.WaitingForGPUOtherTimePercent">
            <summary>	
            <para>Percentage of time the driver spent waiting for other GPU processing.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9INTERFACETIMINGS::WaitingForGPUOtherTimePercent']/*"/>	
            <unmanaged>float WaitingForGPUOtherTimePercent</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Light">
            <summary>	
            Defines a set of lighting properties.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9']/*"/>	
            <unmanaged>D3DLIGHT9</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Type">
            <summary>	
            <para>Type of the light source. This value is one of the members of the <see cref="T:SharpDX.Direct3D9.LightType"/> enumerated type. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Type']/*"/>	
            <unmanaged>D3DLIGHTTYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Diffuse">
            <summary>	
            <para>Diffuse color emitted by the light. This member is a <see cref="T:SharpDX.Color4"/> structure. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Diffuse']/*"/>	
            <unmanaged>D3DCOLORVALUE Diffuse</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Specular">
            <summary>	
            <para>Specular color emitted by the light. This member is a <see cref="T:SharpDX.Color4"/> structure. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Specular']/*"/>	
            <unmanaged>D3DCOLORVALUE Specular</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Ambient">
            <summary>	
            <para>Ambient color emitted by the light. This member is a <see cref="T:SharpDX.Color4"/> structure. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Ambient']/*"/>	
            <unmanaged>D3DCOLORVALUE Ambient</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Position">
            <summary>	
            <para>Position of the light in world space, specified by a <see cref="T:SharpDX.Vector3"/> structure. This member has no meaning for directional lights and is ignored in that case. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Position']/*"/>	
            <unmanaged>D3DVECTOR Position</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Direction">
            <summary>	
            <para>Direction that the light is pointing in world space, specified by a <see cref="T:SharpDX.Vector3"/> structure. This member has meaning only for directional and spotlights. This vector need not be normalized, but it should have a nonzero length. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Direction']/*"/>	
            <unmanaged>D3DVECTOR Direction</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Range">
            <summary>	
            <para>Distance beyond which the light has no effect. The maximum allowable value for this member is the square root of FLT_MAX. This member does not affect directional lights. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Range']/*"/>	
            <unmanaged>float Range</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Falloff">
            <summary>	
            <para>Decrease in illumination between a spotlight's inner cone (the angle specified by  Theta) and the outer edge of the outer cone (the angle specified by Phi). </para>	
             <para>The effect of falloff on the lighting is subtle. Furthermore, a small performance penalty is incurred by shaping the falloff curve. For these reasons, most developers set this value to 1.0.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Falloff']/*"/>	
            <unmanaged>float Falloff</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Attenuation0">
            <summary>	
            <para>Value specifying how the light intensity changes over distance. Attenuation values are ignored for directional lights. This member represents an attenuation constant. For information about attenuation, see Light Properties (Direct3D 9). Valid values for this member range from 0.0 to infinity. For non-directional lights, all three attenuation values should not be set to 0.0 at the same time. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Attenuation0']/*"/>	
            <unmanaged>float Attenuation0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Attenuation1">
            <summary>	
            <para>Value specifying how the light intensity changes over distance. Attenuation values are ignored for directional lights. This member represents an attenuation constant. For information about attenuation, see Light Properties (Direct3D 9). Valid values for this member range from 0.0 to infinity. For non-directional lights, all three attenuation values should not be set to 0.0 at the same time.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Attenuation1']/*"/>	
            <unmanaged>float Attenuation1</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Attenuation2">
            <summary>	
            <para>Value specifying how the light intensity changes over distance. Attenuation values are ignored for directional lights. This member represents an attenuation constant. For information about attenuation, see Light Properties (Direct3D 9). Valid values for this member range from 0.0 to infinity. For non-directional lights, all three attenuation values should not be set to 0.0 at the same time.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Attenuation2']/*"/>	
            <unmanaged>float Attenuation2</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Theta">
            <summary>	
            <para>Angle, in radians, of a spotlight's inner cone - that is, the fully illuminated spotlight cone. This value must be in the range from 0 through the value specified by Phi.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Theta']/*"/>	
            <unmanaged>float Theta</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Light.Phi">
            <summary>	
            <para>Angle, in radians, defining the outer edge of the spotlight's outer cone. Points outside this cone are not lit by the spotlight. This value must be between 0 and pi. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLIGHT9::Phi']/*"/>	
            <unmanaged>float Phi</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.LockedBox">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCKED_BOX']/*"/>	
            <unmanaged>D3DLOCKED_BOX</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockedBox.RowPitch">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCKED_BOX::RowPitch']/*"/>	
            <unmanaged>int RowPitch</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockedBox.SlicePitch">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCKED_BOX::SlicePitch']/*"/>	
            <unmanaged>int SlicePitch</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockedBox.PBits">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCKED_BOX::pBits']/*"/>	
            <unmanaged>void* pBits</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.LockedRect">
            <summary>	
            Describes a locked rectangular region.	
            </summary>	
            <remarks>	
            The pitch for DXTn formats is different from what was returned in DirectX 7. It now refers to the number of bytes in a row of blocks. For example, if you have a width of 16, then you will have a pitch of 4 blocks (4*8 for DXT1, 4*16 for DXT2-5.)	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCKED_RECT']/*"/>	
            <unmanaged>D3DLOCKED_RECT</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockedRect.Pitch">
            <summary>	
            <para>Number of bytes in one row of the surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCKED_RECT::Pitch']/*"/>	
            <unmanaged>int Pitch</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.LockedRect.PBits">
            <summary>	
            <para>Pointer to the locked bits. If a <see cref="T:SharpDX.Rectangle"/> was provided to the LockRect call, pBits will be appropriately offset from the start of the surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DLOCKED_RECT::pBits']/*"/>	
            <unmanaged>void* pBits</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Macro">
            <summary>	
            Describes preprocessor definitions used by an effect object.	
            </summary>	
            <remarks>	
            To use D3DXMACROs in more than one line, prefix each new line character with a backslash (like a #define in the C language). For example:<code>	
             sample=	
            macro.Name = "DO_CODE_BLOCK";	
            macro.Definition = "/* here is a block of code */\\\n" "{ do something ... }\\\n";	
            	
            </code>Notice the 3 backslash characters at the end of the line. The first two are required to output a single '\', followed by the newline character "\n". Optionally, you may also want to terminate your lines using "\\\r\n".	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMACRO']/*"/>	
            <unmanaged>D3DXMACRO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Macro.Name">
            <summary>	
            <para>Preprocessor name.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMACRO::Name']/*"/>	
            <unmanaged>const char* Name</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Macro.Definition">
            <summary>	
            <para>Definition name.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMACRO::Definition']/*"/>	
            <unmanaged>const char* Definition</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Macro.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Macro"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition.</param>
        </member>
        <member name="T:SharpDX.Direct3D9.Material">
            <summary>	
            Specifies material properties.	
            </summary>	
            <remarks>	
            To turn off specular highlights, set <see cref="F:SharpDX.Direct3D9.RenderState.SpecularEnable"/> to <see cref="F:SharpDX.Result.False"/>, using <see cref="T:SharpDX.Direct3D9.RenderState"/>. This is the fastest option because no specular highlights will be calculated.For more information about using the lighting engine to calculate specular lighting, see Specular Lighting (Direct3D 9).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMATERIAL9']/*"/>	
            <unmanaged>D3DMATERIAL9</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Material.Diffuse">
            <summary>	
            <para>Value specifying the diffuse color of the material. See <see cref="T:SharpDX.Color4"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMATERIAL9::Diffuse']/*"/>	
            <unmanaged>D3DCOLORVALUE Diffuse</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Material.Ambient">
            <summary>	
            <para>Value specifying the ambient color of the material. See <see cref="T:SharpDX.Color4"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMATERIAL9::Ambient']/*"/>	
            <unmanaged>D3DCOLORVALUE Ambient</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Material.Specular">
            <summary>	
            <para>Value specifying the specular color of the material. See <see cref="T:SharpDX.Color4"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMATERIAL9::Specular']/*"/>	
            <unmanaged>D3DCOLORVALUE Specular</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Material.Emissive">
            <summary>	
            <para>Value specifying the emissive color of the material. See <see cref="T:SharpDX.Color4"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMATERIAL9::Emissive']/*"/>	
            <unmanaged>D3DCOLORVALUE Emissive</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Material.Power">
            <summary>	
            <para>Floating-point value specifying the sharpness of specular highlights. The higher the value, the sharper the highlight.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DMATERIAL9::Power']/*"/>	
            <unmanaged>float Power</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.MeshContainer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHCONTAINER']/*"/>	
            <unmanaged>D3DXMESHCONTAINER</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshContainer.Name">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHCONTAINER::Name']/*"/>	
            <unmanaged>char* Name</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshContainer.MeshData">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHCONTAINER::MeshData']/*"/>	
            <unmanaged>D3DXMESHDATA MeshData</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshContainer.PMaterials">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHCONTAINER::pMaterials']/*"/>	
            <unmanaged>D3DXMATERIAL* pMaterials</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshContainer.PEffects">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHCONTAINER::pEffects']/*"/>	
            <unmanaged>D3DXEFFECTINSTANCE* pEffects</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshContainer.NumMaterials">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHCONTAINER::NumMaterials']/*"/>	
            <unmanaged>unsigned int NumMaterials</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshContainer.PAdjacency">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHCONTAINER::pAdjacency']/*"/>	
            <unmanaged>unsigned int* pAdjacency</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshContainer.PSkinInfo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHCONTAINER::pSkinInfo']/*"/>	
            <unmanaged>ID3DXSkinInfo* pSkinInfo</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshContainer.PNextMeshContainer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHCONTAINER::pNextMeshContainer']/*"/>	
            <unmanaged>D3DXMESHCONTAINER* pNextMeshContainer</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.MeshData">
            <summary>	
            Mesh data structure.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHDATA']/*"/>	
            <unmanaged>D3DXMESHDATA</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshData.Type">
            <summary>	
            <para>Defines the mesh data type. See <see cref="T:SharpDX.Direct3D9.MeshDataType"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHDATA::Type']/*"/>	
            <unmanaged>D3DXMESHDATATYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshData.PMesh">
            <summary>	
            <para>Pointer to a mesh. See <see cref="T:SharpDX.Direct3D9.Mesh"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHDATA::pMesh']/*"/>	
            <unmanaged>ID3DXMesh* pMesh</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshData.PPMesh">
            <summary>	
            <para>Pointer to a patch mesh. See <see cref="T:SharpDX.Direct3D9.PatchMesh"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHDATA::pPMesh']/*"/>	
            <unmanaged>ID3DXPMesh* pPMesh</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.MeshData.PPatchMesh">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXMESHDATA::pPatchMesh']/*"/>	
            <unmanaged>ID3DXPatchMesh* pPatchMesh</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ParameterDescription">
            <summary>	
            Describes a parameter used for an effect object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC']/*"/>	
            <unmanaged>D3DXPARAMETER_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Name">
            <summary>	
            <para>Name of the parameter.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Name']/*"/>	
            <unmanaged>const char* Name</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Semantic">
            <summary>	
            <para>Semantic meaning, also called the usage.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Semantic']/*"/>	
            <unmanaged>const char* Semantic</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Class">
            <summary>	
            <para>Parameter class. Set this to one of the values in <see cref="T:SharpDX.Direct3D9.ParameterClass"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Class']/*"/>	
            <unmanaged>D3DXPARAMETER_CLASS Class</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Type">
            <summary>	
            <para>Parameter type. Set this to one of the values in <see cref="T:SharpDX.Direct3D9.ParameterType"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Type']/*"/>	
            <unmanaged>D3DXPARAMETER_TYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Rows">
            <summary>	
            <para>Number of rows in the array.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Rows']/*"/>	
            <unmanaged>unsigned int Rows</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Columns">
            <summary>	
            <para>Number of columns in the array.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Columns']/*"/>	
            <unmanaged>unsigned int Columns</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Elements">
            <summary>	
            <para>Number of elements in the array.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Elements']/*"/>	
            <unmanaged>unsigned int Elements</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Annotations">
            <summary>	
            <para>Number of annotations.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Annotations']/*"/>	
            <unmanaged>unsigned int Annotations</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.StructMembers">
            <summary>	
            <para>Number of structure members.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::StructMembers']/*"/>	
            <unmanaged>unsigned int StructMembers</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Flags">
            <summary>	
            <para>Parameter attributes. See Effect Constants.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Flags']/*"/>	
            <unmanaged>unsigned int Flags</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ParameterDescription.Bytes">
            <summary>	
            <para>The size of the parameter, in bytes. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPARAMETER_DESC::Bytes']/*"/>	
            <unmanaged>unsigned int Bytes</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PassDescription">
            <summary>	
            Describes a pass for an effect object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPASS_DESC']/*"/>	
            <unmanaged>D3DXPASS_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PassDescription.Name">
            <summary>	
            <para>String value used for the pass.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPASS_DESC::Name']/*"/>	
            <unmanaged>const char* Name</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PassDescription.Annotations">
            <summary>	
            <para>Annotations are user-specific data that can be attached to any technique, pass, or parameter. See Add Information to Effect Parameters with_Annotations.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPASS_DESC::Annotations']/*"/>	
            <unmanaged>unsigned int Annotations</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PassDescription.PVertexShaderFunction">
            <summary>	
            <para>Pointer to the vertex shader function. If an effect is created with <see cref="F:SharpDX.Direct3D9.FX.NotCloneable"/>, this structure will return a <c>null</c> reference when called by GetPassDesc.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPASS_DESC::pVertexShaderFunction']/*"/>	
            <unmanaged>const unsigned int* pVertexShaderFunction</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PassDescription.PPixelShaderFunction">
            <summary>	
            <para>Pointer to the pixel shader function. If an effect is created with <see cref="F:SharpDX.Direct3D9.FX.NotCloneable"/>, this structure will return a <c>null</c> reference when called by GetPassDesc.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPASS_DESC::pPixelShaderFunction']/*"/>	
            <unmanaged>const unsigned int* pPixelShaderFunction</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PatchInfo">
            <summary>	
            Structure that contains the attributes of a patch mesh.	
            </summary>	
            <remarks>	
            A mesh is a set of faces, each of which is described by a simple polygon. Objects can be created by connecting several meshes together.  A patch mesh is constructed from patches. A patch is a four-sided piece of geometry constructed from curves.  The type of curve used and the order of the curve can be varied so that the patch surface will fit almost any surface shape.The following types of patch combinations are supported:Patch TypeBasisDegree RectangleBezier2,3,5 RectangleB-Spline2,3,5 RectangleCatmull-Rom3 TriangleBezier2,3,5 N-patchN/A3?	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPATCHINFO']/*"/>	
            <unmanaged>D3DXPATCHINFO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PatchInfo.PatchType">
            <summary>	
            <para>The patch type. For information about patch types, see <see cref="T:SharpDX.Direct3D9.PatchMeshType"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPATCHINFO::PatchType']/*"/>	
            <unmanaged>D3DXPATCHMESHTYPE PatchType</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PatchInfo.Degree">
            <summary>	
            <para>Degree of the curves used to construct the patch. For information about the degrees supported, see <see cref="T:SharpDX.Direct3D9.Degree"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPATCHINFO::Degree']/*"/>	
            <unmanaged>D3DDEGREETYPE Degree</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PatchInfo.Basis">
            <summary>	
            <para>Type of curve used to construct the patch. For information about the basis types supported, see <see cref="T:SharpDX.Direct3D9.Basis"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXPATCHINFO::Basis']/*"/>	
            <unmanaged>D3DBASISTYPE Basis</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PipelineTimings">
            <summary>	
            Percent of time processing data in the pipeline.	
            </summary>	
            <remarks>	
            For best performance, a balanced load is recommended.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9PIPELINETIMINGS']/*"/>	
            <unmanaged>D3DDEVINFO_D3D9PIPELINETIMINGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PipelineTimings.VertexProcessingTimePercent">
            <summary>	
            <para>Percent of time spent running vertex shaders.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9PIPELINETIMINGS::VertexProcessingTimePercent']/*"/>	
            <unmanaged>float VertexProcessingTimePercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PipelineTimings.PixelProcessingTimePercent">
            <summary>	
            <para>Percent of time spent running pixel shaders.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9PIPELINETIMINGS::PixelProcessingTimePercent']/*"/>	
            <unmanaged>float PixelProcessingTimePercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PipelineTimings.OtherGPUProcessingTimePercent">
            <summary>	
            <para>Percent of time spent doing other processing.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9PIPELINETIMINGS::OtherGPUProcessingTimePercent']/*"/>	
            <unmanaged>float OtherGPUProcessingTimePercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PipelineTimings.GPUIdleTimePercent">
            <summary>	
            <para>Percent of time not processing anything.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9PIPELINETIMINGS::GPUIdleTimePercent']/*"/>	
            <unmanaged>float GPUIdleTimePercent</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PixelShader20Caps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADERCAPS2_0']/*"/>	
            <unmanaged>D3DPSHADERCAPS2_0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader20Caps.Caps">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADERCAPS2_0::Caps']/*"/>	
            <unmanaged>D3DPS20CAPS Caps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader20Caps.DynamicFlowControlDepth">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADERCAPS2_0::DynamicFlowControlDepth']/*"/>	
            <unmanaged>int DynamicFlowControlDepth</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader20Caps.TempCount">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADERCAPS2_0::NumTemps']/*"/>	
            <unmanaged>int NumTemps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader20Caps.StaticFlowControlDepth">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADERCAPS2_0::StaticFlowControlDepth']/*"/>	
            <unmanaged>int StaticFlowControlDepth</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PixelShader20Caps.InstructionSlotCount">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPSHADERCAPS2_0::NumInstructionSlots']/*"/>	
            <unmanaged>int NumInstructionSlots</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PresentationStatistics">
            <summary>	
            Describes swapchain statistics relating to PresentEx calls.	
            </summary>	
            <remarks>	
            When a 9Ex application adopts Flip Mode present (<see cref="F:SharpDX.Direct3D9.SwapEffect.FlipEx"/>), applications can detect frame dropping by calling GetPresentStatistics  at any point in time.  In effect, they can do the following.Render to the back buffer Call Present Call GetPresentStats and store the resulting <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structure Render the next frame to the back buffer Call Present Repeat steps 4 and 5 one or more times Call GetPresentStats and store the resulting <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structure  Compare the values of PresentRefreshCount from the two stored <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structures.  The application can calculate the corresponding PresentRefreshCount of a particular PresentCount parameter based on the assumptions of  PresentRefreshCount increment and PresentCount assignment of frame presents.  If the PresentRefreshCount last sampled does not  match the PresentCount (i.e. if the PresentRefreshCount has incremented but PresentCount has not, then there was frame dropping.)Applications can determine whether a frame has been dropped by sampling any two instances of PresentCount and  GetPresentStats (by calling GetPresentStats API at any two points in time). For example, a media application that is presenting at the same rate  as the monitor refresh rate (for example, monitor refresh rate is 60Hz, the application presents a frame every 1/60 seconds) wants to present  frames A, B, C, D, E, each corresponding to Present IDs (PresentCount) 1, 2, 3, 7, 8.The application code looks like the following sequence.Render frame A to the back buffer Call Present, PresentCount = 1 Call GetPresentStats and store the resulting <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structure Render the next 4 frames, B, C, D, E, respectively Call Present 4 times, PresentCounts = 2, 3, 7, 8, respectively Call GetPresentStats and store the resulting <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structure  Compare the values of PresentRefreshCount from the two stored <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structures.   If the difference is 2, i.e. 2 vblank intervals has elapsed between the two GetPresentStats API calls,  then the last presented frame should be frame C.  Because the application presents once very vblank interval (the refresh rate of the monitor),  the time elapsed between when frame A is presented and when frame C is presented should be 2 vblanks.   Compare the values of PresentCount from the two stored <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structures.   If the first PresentCount is 1 (corresponding to frame A) and the second PresentCount is 3 (corresponding to frame C),  then no frames have been dropped.  If the second PresentCount is 3, which corresponds to frame D,  then the application knows that one frame has been dropped.Note that GetPresentStatistics will be processed after it is called, regardless of the state of FLIPEX mode PresentEx  calls.Windows?Vista:??The Present calls will be queued and then processed before GetPresentStats  call will be processed.When an application detects that the presentation of certain frames are behind, it can skip those frames and correct the presentation to  re-synchronize with the vblank.  To do this, an application can simply not render the late frames and start rendering with the next correct frame  in the queue.  However, if an application has already started the rendering of late frames, it can use a new Present parameter in D3D9Ex called <see cref="F:SharpDX.Direct3D9.Present.ForceImmediate"/>.  The flag will be passed in the parameters of Present API call and indicates to the runtime that the frame  will be processed immediately within the next vblank interval, effectively not visible on screen at all.  Here is the application usage example  after the last step in the previous example.Render the next frame to the back buffer Discover from PresentRefreshCount that the next frame is already late Set Present interval to <see cref="F:SharpDX.Direct3D9.Present.ForceImmediate"/> Call Present on the next frameApplications can synchronize video and audio streams in the same manner because the behavior of GetPresentStatistics  does not change in that scenario.D3D9Ex Flip Mode provides frame statistics information to windowed applications and full screen 9Ex applications.Windows?Vista:??Use the DWM APIs for retrieving present statistics.When Desktop Window Manager is turned off, windowed mode 9Ex applications using flip mode will receive present statistics information of  limited accuracy.Windows?Vista:??<para>If an application is not fast enough to keep up with the monitor's refresh rate, possibly due to slow hardware or lack of system resources,  then it can experience a graphics glitch. A glitch is a so-called visual hiccup. If a monitor is set to refresh at 60 Hz, and the application  can only manage 30 fps, then half of the frames will have glitches.</para>	
             <para>Applications can detect a glitch by keeping track of SynchRefreshCount. For example, an application might perform the following sequence of actions.</para>	
              Render to the back buffer. Call Present.  Call GetPresentStats and store the resulting <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structure.  Render the next frame to the back buffer.  Call Present.  Call GetPresentStats and store the resulting <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structure. Compare the values of SyncRefreshCount from the two stored <see cref="T:SharpDX.Direct3D9.PresentationStatistics"/> structures.  If the difference is greater than one, then a frame was skipped.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTSTATS']/*"/>	
            <unmanaged>D3DPRESENTSTATS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentationStatistics.PresentCount">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTSTATS::PresentCount']/*"/>	
            <unmanaged>unsigned int PresentCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentationStatistics.PresentRefreshCount">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTSTATS::PresentRefreshCount']/*"/>	
            <unmanaged>unsigned int PresentRefreshCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentationStatistics.SyncRefreshCount">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTSTATS::SyncRefreshCount']/*"/>	
            <unmanaged>unsigned int SyncRefreshCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentationStatistics.SyncQPCTime">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTSTATS::SyncQPCTime']/*"/>	
            <unmanaged>LARGE_INTEGER SyncQPCTime</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentationStatistics.SyncGPUTime">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENTSTATS::SyncGPUTime']/*"/>	
            <unmanaged>LARGE_INTEGER SyncGPUTime</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.PresentParameters">
            <summary>	
            Describes the presentation parameters.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS']/*"/>	
            <unmanaged>D3DPRESENT_PARAMETERS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.BackBufferWidth">
            <summary>	
            <para>Width of the new swap chain's back buffers, in pixels. If Windowed is <see cref="F:SharpDX.Result.False"/> (the presentation is full-screen), this value must equal the width of one of the enumerated display modes found through EnumAdapterModes. If Windowed is TRUE and either BackBufferWidth or BackBufferHeight is zero, the corresponding dimension of the client area of the hDeviceWindow (or the focus window, if hDeviceWindow is <c>null</c>) is taken.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::BackBufferWidth']/*"/>	
            <unmanaged>unsigned int BackBufferWidth</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.BackBufferHeight">
            <summary>	
            <para>Height of the new swap chain's back buffers, in pixels. If Windowed is <see cref="F:SharpDX.Result.False"/> (the presentation is full-screen), this value must equal the height of one of the enumerated display modes found through EnumAdapterModes. If Windowed is TRUE and either BackBufferWidth or BackBufferHeight is zero, the corresponding dimension of the client area of the hDeviceWindow (or the focus window, if hDeviceWindow is <c>null</c>) is taken.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::BackBufferHeight']/*"/>	
            <unmanaged>unsigned int BackBufferHeight</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.BackBufferFormat">
            <summary>	
            <para>The back buffer format. For more information about formats, see <see cref="T:SharpDX.Direct3D9.Format"/>. This value must be one of the render-target formats as validated by CheckDeviceType. You can use GetDisplayMode to obtain the current format.</para>	
             <para>In fact, <see cref="F:SharpDX.Direct3D9.Format.Unknown"/> can be specified for the BackBufferFormat while in windowed mode. This tells the runtime to use the current display-mode format and eliminates the need to call GetDisplayMode.</para>	
             <para>For windowed applications, the back buffer format no longer needs to match the display-mode format because color conversion can now be done by the hardware (if the hardware supports color conversion). The set of possible back buffer formats is constrained, but the runtime will allow any valid back buffer format to be presented to any desktop format. (There is the additional requirement that the device be operable in the desktop mode; devices typically do not operate in 8 bits per pixel modes.)</para>	
             <para>Full-screen applications cannot do color conversion.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::BackBufferFormat']/*"/>	
            <unmanaged>D3DFORMAT BackBufferFormat</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.BackBufferCount">
            <summary>	
            <para>This value can be between 0 and <see cref="F:SharpDX.Direct3D9.Present.BackBuffersMaximum"/> (or <see cref="F:SharpDX.Direct3D9.Present.BackBuffersMaximumEx"/> when using Direct3D 9Ex). Values of 0 are treated as 1. If the number of back buffers cannot be created, the runtime will fail the method call and fill this value with the number of back buffers that could be created. As a result, an application can call the method twice with the same <see cref="T:SharpDX.Direct3D9.PresentParameters"/> structure and expect it to work the second time.</para>	
             <para>The method fails if one back buffer cannot be created. The value of BackBufferCount influences what set of swap effects are allowed. Specifically, any <see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/> swap effect requires that there be exactly one back buffer.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::BackBufferCount']/*"/>	
            <unmanaged>unsigned int BackBufferCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.MultiSampleType">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.MultisampleType"/> enumerated type. The value must be <see cref="F:SharpDX.Direct3D9.MultisampleType.None"/> unless SwapEffect has been set to <see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/>. Multisampling is supported only if the swap effect is <see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::MultiSampleType']/*"/>	
            <unmanaged>D3DMULTISAMPLE_TYPE MultiSampleType</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.MultiSampleQuality">
            <summary>	
            <para>Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by  CheckDeviceMultiSampleType. Passing a larger value returns the error <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. Paired values of render targets or of depth stencil surfaces and <see cref="T:SharpDX.Direct3D9.MultisampleType"/> must match.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::MultiSampleQuality']/*"/>	
            <unmanaged>unsigned int MultiSampleQuality</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.SwapEffect">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.SwapEffect"/> enumerated type. The runtime will guarantee the implied semantics concerning buffer swap behavior; therefore, if Windowed is TRUE and SwapEffect is set to <see cref="F:SharpDX.Direct3D9.SwapEffect.Flip"/>, the runtime will create one extra back buffer and copy whichever becomes the front buffer at presentation time.</para>	
             <para><see cref="F:SharpDX.Direct3D9.SwapEffect.Copy"/> requires that BackBufferCount be set to 1.</para>	
             <para><see cref="F:SharpDX.Direct3D9.SwapEffect.Discard"/> will be enforced in the debug runtime by filling any buffer with noise after it is presented.</para>	
               <para>Differences between Direct3D9 and Direct3D9Ex</para>	
             <para>In Direct3D9Ex, <see cref="F:SharpDX.Direct3D9.SwapEffect.FlipEx"/> is added to designate when an application is adopting flip mode. That is, whan an application's frame is passed in window's mode (instead of copied) to the Desktop Window Manager(DWM) for composition. Flip mode provides more efficient memory bandwidth and enables an application to take advantage of full-screen-present statistics. It does not change full screen behavior. Flip mode behavior is available beginning with Windows 7.</para>	
               <para>?</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::SwapEffect']/*"/>	
            <unmanaged>D3DSWAPEFFECT SwapEffect</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.DeviceWindowHandle">
            <summary>	
            <para>The device window determines the location and size of the back buffer on screen. This is used by Direct3D when the back buffer contents are copied to the front buffer during Present.</para>	
               <para>For a full-screen application, this is a handle to the top window (which is the focus window). </para>	
             <para>For applications that use multiple full-screen devices (such as a multimonitor system), exactly one device can use the focus window as the device window. All other devices must have unique device windows.</para>	
              For a windowed-mode application, this handle will be the default target window for Present. If this handle is <c>null</c>, the focus window will be taken.  <para>Note that no attempt is made by the runtime to reflect user changes in window size. The back buffer is not implicitly reset when this window is reset. However, the Present method does automatically track window position changes.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::hDeviceWindow']/*"/>	
            <unmanaged>HWND hDeviceWindow</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.AutoDepthStencilFormat">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type. The format of the automatic depth-stencil surface that the device will create. This member is ignored unless EnableAutoDepthStencil is TRUE.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::AutoDepthStencilFormat']/*"/>	
            <unmanaged>D3DFORMAT AutoDepthStencilFormat</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.PresentFlags">
            <summary>	
            <para>One of the <see cref="T:SharpDX.Direct3D9.PresentFlags"/> constants.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::Flags']/*"/>	
            <unmanaged>D3DPRESENTFLAG Flags</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.FullScreenRefreshRateInHz">
            <summary>	
            <para>The rate at which the display adapter refreshes the screen. The value depends on the mode in which the application is running:</para>	
              For windowed mode, the refresh rate must be 0. For full-screen mode, the refresh rate is one of the refresh rates returned by EnumAdapterModes.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::FullScreen_RefreshRateInHz']/*"/>	
            <unmanaged>unsigned int FullScreen_RefreshRateInHz</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.PresentParameters.PresentationInterval">
            <summary>	
            <para>The maximum rate at which the swap chain's back buffers can be presented to the front buffer. For a detailed explanation of the modes and the intervals that are supported, see <see cref="T:SharpDX.Direct3D9.Present"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::PresentationInterval']/*"/>	
            <unmanaged>D3DPRESENT_INTERVAL PresentationInterval</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.PresentParameters.#ctor(System.Int32,System.Int32,SharpDX.Direct3D9.Format,System.Int32,SharpDX.Direct3D9.MultisampleType,System.Int32,SharpDX.Direct3D9.SwapEffect,System.IntPtr,System.Boolean,System.Boolean,SharpDX.Direct3D9.Format,SharpDX.Direct3D9.PresentFlags,System.Int32,SharpDX.Direct3D9.PresentInterval)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.PresentParameters"/> struct.
            </summary>
            <param name="backBufferWidth">Width of the back buffer.</param>
            <param name="backBufferHeight">Height of the back buffer.</param>
            <param name="backBufferFormat">The back buffer format.</param>
            <param name="backBufferCount">The back buffer count.</param>
            <param name="multiSampleType">Type of the multi sample.</param>
            <param name="multiSampleQuality">The multi sample quality.</param>
            <param name="swapEffect">The swap effect.</param>
            <param name="deviceWindowHandle">The device window handle.</param>
            <param name="windowed">if set to <c>true</c> [windowed].</param>
            <param name="enableAutoDepthStencil">if set to <c>true</c> [enable auto depth stencil].</param>
            <param name="autoDepthStencilFormat">The auto depth stencil format.</param>
            <param name="presentFlags">The present flags.</param>
            <param name="fullScreenRefreshRateInHz">The full screen refresh rate in hz.</param>
            <param name="presentationInterval">The presentation interval.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.PresentParameters.InitDefaults">
            <summary>
            Init this structure to defaults
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.PresentParameters.Windowed">
            <summary>	
            <para>TRUE if the application runs windowed; <see cref="F:SharpDX.Result.False"/> if the application runs full-screen.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::Windowed']/*"/>	
            <unmanaged>BOOL Windowed</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.PresentParameters.EnableAutoDepthStencil">
            <summary>	
            <para>If this value is TRUE, Direct3D will manage depth buffers for the application. The device will create a depth-stencil buffer when it is created. The depth-stencil buffer will be automatically set as the render target of the device. When the device is reset, the depth-stencil buffer will be automatically destroyed and recreated in the new size.</para>	
             <para>If EnableAutoDepthStencil is TRUE, then AutoDepthStencilFormat must be a valid depth-stencil format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DPRESENT_PARAMETERS::EnableAutoDepthStencil']/*"/>	
            <unmanaged>BOOL EnableAutoDepthStencil</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.RasterStatus">
            <summary>	
            Describes the raster status.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRASTER_STATUS']/*"/>	
            <unmanaged>D3DRASTER_STATUS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RasterStatus.ScanLine">
            <summary>	
            <para>If InVBlank is <see cref="F:SharpDX.Result.False"/>, then this value is an integer roughly corresponding to the current scan line painted by the raster. Scan lines are numbered in the same way as Direct3D surface coordinates: 0 is the top of the primary surface, extending to the value (height of the surface - 1) at the bottom of the display.</para>	
             <para>If InVBlank is TRUE, then this value is set to zero and can be ignored.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRASTER_STATUS::ScanLine']/*"/>	
            <unmanaged>unsigned int ScanLine</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.RasterStatus.InVBlank">
            <summary>	
            <para>TRUE if the raster is in the vertical blank period. <see cref="F:SharpDX.Result.False"/> if the raster is not in the vertical blank period. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRASTER_STATUS::InVBlank']/*"/>	
            <unmanaged>BOOL InVBlank</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.RectanglePatchInfo">
            <summary>	
            Describes a rectangular high-order patch.	
            </summary>	
            <remarks>	
            The following diagram identifies the parameters that specify a rectangle patch.Each of the vertices in the vertex buffer is shown as a black dot. In this case, the vertex buffer has 20 vertices in it, 16 of which are in the rectangle patch. The stride is the number of vertices in the width of the vertex buffer, in this case five. The x offset to the first vertex is called the StartIndexVertexWidth and is in this case 1. The y offset to the first patch vertex is called the StartIndexVertexHeight and is in this case 0.To render a stream of individual rectangular patches (non-mosaic), you should interpret your geometry as a long narrow (1 x N) rectangular patch. The <see cref="T:SharpDX.Direct3D9.RectanglePatchInfo"/> structure for such a strip (cubic B?zier) would be set up in the following manner.<code>	
             <see cref="T:SharpDX.Direct3D9.RectanglePatchInfo"/> RectInfo; RectInfo.Width = 4;	
            RectInfo.Height = 4;	
            RectInfo.Stride = 4;	
            RectInfo.Basis = <see cref="F:SharpDX.Direct3D9.Basis.Bezier"/>;	
            RectInfo.Order = D3DORDER_CUBIC;	
            RectInfo.StartVertexOffsetWidth = 0;	
            RectInfo.StartVertexOffsetHeight = 4*i;  // The variable i is the index of the 	
            //   patch you want to render.	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRECTPATCH_INFO']/*"/>	
            <unmanaged>D3DRECTPATCH_INFO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RectanglePatchInfo.StartVertexOffsetWidth">
            <summary>	
            <para>Starting vertex offset width, in number of vertices. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRECTPATCH_INFO::StartVertexOffsetWidth']/*"/>	
            <unmanaged>unsigned int StartVertexOffsetWidth</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RectanglePatchInfo.StartVertexOffsetHeight">
            <summary>	
            <para>Starting vertex offset height, in number of vertices. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRECTPATCH_INFO::StartVertexOffsetHeight']/*"/>	
            <unmanaged>unsigned int StartVertexOffsetHeight</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RectanglePatchInfo.Width">
            <summary>	
            <para>Width of each vertex, in number of vertices. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRECTPATCH_INFO::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RectanglePatchInfo.Height">
            <summary>	
            <para>Height of each vertex, in number of vertices. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRECTPATCH_INFO::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RectanglePatchInfo.Stride">
            <summary>	
            <para>Width of the imaginary two-dimensional vertex array, which occupies the same space as the vertex buffer. For an example, see the diagram below. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRECTPATCH_INFO::Stride']/*"/>	
            <unmanaged>unsigned int Stride</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RectanglePatchInfo.Basis">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Basis"/> enumerated type, defining the basis type for the rectangular high-order patch. </para>	
              ValueOrder supportedWidth and height D3DBASIS_BEZIERLinear, cubic, and quinticWidth = height = (DWORD)order + 1 D3DBASIS_BSPLINELinear, cubic, and quinticWidth = height &gt; (DWORD)order D3DBASIS_INTERPOLATECubicWidth = height &gt; (DWORD)order  <para>?</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRECTPATCH_INFO::Basis']/*"/>	
            <unmanaged>D3DBASISTYPE Basis</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RectanglePatchInfo.Degree">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Degree"/> enumerated type, defining the degree for the rectangular patch. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRECTPATCH_INFO::Degree']/*"/>	
            <unmanaged>D3DDEGREETYPE Degree</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.RenderToEnvironmentMapDescription">
            <summary>	
            Describes an off-screen render target used by an instance of <see cref="T:SharpDX.Direct3D9.RenderToEnvironmentMap"/>.	
            </summary>	
            <remarks>	
            This method is used to return the creation parameters used when creating an <see cref="T:SharpDX.Direct3D9.RenderToEnvironmentMap"/> object.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTE_DESC']/*"/>	
            <unmanaged>D3DXRTE_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderToEnvironmentMapDescription.Size">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTE_DESC::Size']/*"/>	
            <unmanaged>unsigned int Size</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderToEnvironmentMapDescription.MipLevels">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTE_DESC::MipLevels']/*"/>	
            <unmanaged>unsigned int MipLevels</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderToEnvironmentMapDescription.Format">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTE_DESC::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderToEnvironmentMapDescription.DepthStencilFormat">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTE_DESC::DepthStencilFormat']/*"/>	
            <unmanaged>D3DFORMAT DepthStencilFormat</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.RenderToEnvironmentMapDescription.DepthStencil">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTE_DESC::DepthStencil']/*"/>	
            <unmanaged>BOOL DepthStencil</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.RenderToSurfaceDescription">
            <summary>	
            Describes a render surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTS_DESC']/*"/>	
            <unmanaged>D3DXRTS_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderToSurfaceDescription.Width">
            <summary>	
            <para>Width of the render surface, in pixels.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTS_DESC::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderToSurfaceDescription.Height">
            <summary>	
            <para>Height of the render surface, in pixels.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTS_DESC::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderToSurfaceDescription.Format">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the pixel format of the render surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTS_DESC::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RenderToSurfaceDescription.DepthStencilFormat">
            <summary>	
            <para>If DepthStencil is set to TRUE, this parameter is a member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type,  describing the depth-stencil format of the render surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTS_DESC::DepthStencilFormat']/*"/>	
            <unmanaged>D3DFORMAT DepthStencilFormat</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.RenderToSurfaceDescription.DepthStencil">
            <summary>	
            <para>If TRUE, the render surface supports a depth-stencil surface; otherwise this member is set to <see cref="F:SharpDX.Result.False"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXRTS_DESC::DepthStencil']/*"/>	
            <unmanaged>BOOL DepthStencil</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ResourceManager">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_RESOURCEMANAGER']/*"/>	
            <unmanaged>D3DDEVINFO_RESOURCEMANAGER</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.ResourceManager.Stats">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_RESOURCEMANAGER::stats']/*"/>	
            <unmanaged>D3DRESOURCESTATS stats[8]</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ResourceStats">
            <summary>	
            Resource statistics gathered by the D3DDEVINFO_ResourceManager when using the asynchronous query mechanism.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS']/*"/>	
            <unmanaged>D3DRESOURCESTATS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.ApproximateBytesDownloaded">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::ApproxBytesDownloaded']/*"/>	
            <unmanaged>unsigned int ApproxBytesDownloaded</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.NumberEvicted">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::NumEvicts']/*"/>	
            <unmanaged>unsigned int NumEvicts</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.NumberVideoCreated">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::NumVidCreates']/*"/>	
            <unmanaged>unsigned int NumVidCreates</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.LastPriority">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::LastPri']/*"/>	
            <unmanaged>unsigned int LastPri</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.NumberUsed">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::NumUsed']/*"/>	
            <unmanaged>unsigned int NumUsed</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.NumberUsedInVideoMemory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::NumUsedInVidMem']/*"/>	
            <unmanaged>unsigned int NumUsedInVidMem</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.WorkingSet">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::WorkingSet']/*"/>	
            <unmanaged>unsigned int WorkingSet</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.WorkingSetBytes">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::WorkingSetBytes']/*"/>	
            <unmanaged>unsigned int WorkingSetBytes</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.TotalManaged">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::TotalManaged']/*"/>	
            <unmanaged>unsigned int TotalManaged</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ResourceStats.TotalBytes">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::TotalBytes']/*"/>	
            <unmanaged>unsigned int TotalBytes</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.ResourceStats.Thrashing">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DRESOURCESTATS::bThrashing']/*"/>	
            <unmanaged>BOOL bThrashing</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.RotationKey">
            <summary>	
            Describes a quaternion key for use in key frame animation. A quaternion key is a quaternion value at a given time.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXKEY_QUATERNION']/*"/>	
            <unmanaged>D3DXKEY_QUATERNION</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RotationKey.Time">
            <summary>	
            <para>Time value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXKEY_QUATERNION::Time']/*"/>	
            <unmanaged>float Time</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.RotationKey.Value">
            <summary>	
            <para> <see cref="T:SharpDX.Quaternion"/> quaternion that supplies rotation values.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXKEY_QUATERNION::Value']/*"/>	
            <unmanaged>D3DXQUATERNION Value</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ScaleKey">
            <summary>	
            Describes a vector key for use in key frame animation. It specifies a vector at a given time. This is used for scale and translation keys.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXKEY_VECTOR3']/*"/>	
            <unmanaged>D3DXKEY_VECTOR3</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ScaleKey.Time">
            <summary>	
            <para>Key frame time stamp.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXKEY_VECTOR3::Time']/*"/>	
            <unmanaged>float Time</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ScaleKey.Value">
            <summary>	
            <para> <see cref="T:SharpDX.Vector3"/> 3D vector that supplies scale and/or translation values.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXKEY_VECTOR3::Value']/*"/>	
            <unmanaged>D3DXVECTOR3 Value</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ShaderConstantinfo">
            <summary>	
            typedef struct <see cref="T:SharpDX.Direct3D9.ShaderConstantinfo"/> { DWORD Name; WORD ?RegisterSet; WORD ?RegisterIndex; WORD ?RegisterCount; WORD ?Reserved; DWORD TypeInfo; DWORD DefaultValue;	
            } <see cref="T:SharpDX.Direct3D9.ShaderConstantinfo"/>, *LPD3DXSHADER_CONSTANTINFO;	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTINFO']/*"/>	
            <unmanaged>D3DXSHADER_CONSTANTINFO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstantinfo.Name">
            <summary>	
            <para>Offset from the beginning of this structure, in bytes, to the string that contains the constant information.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTINFO::Name']/*"/>	
            <unmanaged>unsigned int Name</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstantinfo.RegisterSet">
            <summary>	
            <para>Register set. See <see cref="T:SharpDX.Direct3D9.RegisterSet"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTINFO::RegisterSet']/*"/>	
            <unmanaged>unsigned short RegisterSet</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstantinfo.RegisterIndex">
            <summary>	
            <para>The register index.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTINFO::RegisterIndex']/*"/>	
            <unmanaged>unsigned short RegisterIndex</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstantinfo.RegisterCount">
            <summary>	
            <para>Number of registers.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTINFO::RegisterCount']/*"/>	
            <unmanaged>unsigned short RegisterCount</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstantinfo.Reserved">
            <summary>	
            <para>Reserved.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTINFO::Reserved']/*"/>	
            <unmanaged>unsigned short Reserved</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstantinfo.TypeInfo">
            <summary>	
            <para>Offset from the beginning of this structure, in bytes, to the string that contains the D3DXSHADER_TYPEINFO information.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTINFO::TypeInfo']/*"/>	
            <unmanaged>unsigned int TypeInfo</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstantinfo.DefaultValue">
            <summary>	
            <para>Offset from the beginning of this structure, in bytes, to the string that contains the default value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTINFO::DefaultValue']/*"/>	
            <unmanaged>unsigned int DefaultValue</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ShaderConstanttable">
            <summary>	
            Helper structure for managing a shader constant table. This can also be done using <see cref="T:SharpDX.Direct3D9.ConstantTable"/>.	
            </summary>	
            <remarks>	
            Shader constant information is included in a tab-delimited table of comments.  All offsets are measured in bytes from the beginning of the structure.  Entries in the constant table are sorted by Creator in ascending order.A shader constant table can be managed with the <see cref="T:SharpDX.Direct3D9.ConstantTable"/> interfaces.  Alternatively, you can manage the constant table with <see cref="T:SharpDX.Direct3D9.ShaderConstanttable"/>.This size member is often initialized using the following:<code>	
             <see cref="T:SharpDX.Direct3D9.ShaderConstanttable"/> constantTable;	
            constantTable.Size = sizeof(<see cref="T:SharpDX.Direct3D9.ShaderConstanttable"/>)	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTTABLE']/*"/>	
            <unmanaged>D3DXSHADER_CONSTANTTABLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstanttable.Size">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTTABLE::Size']/*"/>	
            <unmanaged>unsigned int Size</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstanttable.Creator">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTTABLE::Creator']/*"/>	
            <unmanaged>unsigned int Creator</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstanttable.Version">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTTABLE::Version']/*"/>	
            <unmanaged>unsigned int Version</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstanttable.Constants">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTTABLE::Constants']/*"/>	
            <unmanaged>unsigned int Constants</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstanttable.ConstantInfo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTTABLE::ConstantInfo']/*"/>	
            <unmanaged>unsigned int ConstantInfo</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstanttable.Flags">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTTABLE::Flags']/*"/>	
            <unmanaged>unsigned int Flags</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderConstanttable.Target">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSHADER_CONSTANTTABLE::Target']/*"/>	
            <unmanaged>unsigned int Target</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.ShaderSemantic">
            <summary>	
            Semantics map a parameter to vertex or pixel shader registers. They can also be optional descriptive strings attached to non-register parameters.	
            </summary>	
            <remarks>	
            Semantics are required for vertex and pixel shader, input and output registers.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSEMANTIC']/*"/>	
            <unmanaged>D3DXSEMANTIC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderSemantic.Usage">
            <summary>	
            <para>Options that identify how resources are used. See <see cref="T:SharpDX.Direct3D9.DeclarationUsage"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSEMANTIC::Usage']/*"/>	
            <unmanaged>D3DDECLUSAGE Usage</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.ShaderSemantic.UsageIndex">
            <summary>	
            <para>Options that modify how the usage is interpreted. The usage and usage index make up a vertex declaration. See Vertex Declaration (Direct3D 9).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXSEMANTIC::UsageIndex']/*"/>	
            <unmanaged>unsigned int UsageIndex</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.StageTimings">
            <summary>	
            Percent of time processing shader data.	
            </summary>	
            <remarks>	
            For best performance, a balanced load is recommended.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9STAGETIMINGS']/*"/>	
            <unmanaged>D3DDEVINFO_D3D9STAGETIMINGS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StageTimings.MemoryProcessingPercent">
            <summary>	
            <para>Percent of time in shader spent on memory accesses.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9STAGETIMINGS::MemoryProcessingPercent']/*"/>	
            <unmanaged>float MemoryProcessingPercent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.StageTimings.ComputationProcessingPercent">
            <summary>	
            <para>Percent of time processing (moving data around in registers or doing mathematical operations).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3D9STAGETIMINGS::ComputationProcessingPercent']/*"/>	
            <unmanaged>float ComputationProcessingPercent</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.SurfaceDescription">
            <summary>	
            Describes a surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSURFACE_DESC']/*"/>	
            <unmanaged>D3DSURFACE_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SurfaceDescription.Format">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the surface format. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSURFACE_DESC::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SurfaceDescription.Type">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.ResourceType"/> enumerated type, identifying this resource as a surface. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSURFACE_DESC::Type']/*"/>	
            <unmanaged>D3DRESOURCETYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SurfaceDescription.Usage">
            <summary>	
            <para>Either the <see cref="F:SharpDX.Direct3D9.Usage.DepthStencil"/> or <see cref="F:SharpDX.Direct3D9.Usage.RenderTarget"/> values. For more information, see <see cref="T:SharpDX.Direct3D9.Usage"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSURFACE_DESC::Usage']/*"/>	
            <unmanaged>D3DUSAGE Usage</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SurfaceDescription.Pool">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, specifying the class of memory allocated for this surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSURFACE_DESC::Pool']/*"/>	
            <unmanaged>D3DPOOL Pool</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SurfaceDescription.MultiSampleType">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.MultisampleType"/> enumerated type, specifying the levels of full-scene multisampling supported by the surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSURFACE_DESC::MultiSampleType']/*"/>	
            <unmanaged>D3DMULTISAMPLE_TYPE MultiSampleType</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SurfaceDescription.MultiSampleQuality">
            <summary>	
            <para>Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by  CheckDeviceMultiSampleType. Passing a larger value returns the error, <see cref="F:SharpDX.Direct3D9.ResultCode.InvalidCall"/>. The MultisampleQuality values of paired render targets, depth stencil surfaces and the MultiSample type must all match.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSURFACE_DESC::MultiSampleQuality']/*"/>	
            <unmanaged>unsigned int MultiSampleQuality</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SurfaceDescription.Width">
            <summary>	
            <para>Width of the surface, in pixels.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSURFACE_DESC::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.SurfaceDescription.Height">
            <summary>	
            <para>Height of the surface, in pixels.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DSURFACE_DESC::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TechniqueDescription">
            <summary>	
            Describes a technique used by an effect.	
            </summary>	
            <remarks>	
            Some video cards can render two textures in a single pass. However, if a card does not have this capability, it is often possible to render the same effect in two passes, using one texture for each pass.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTECHNIQUE_DESC']/*"/>	
            <unmanaged>D3DXTECHNIQUE_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TechniqueDescription.Name">
            <summary>	
            <para>String that contains the technique name.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTECHNIQUE_DESC::Name']/*"/>	
            <unmanaged>const char* Name</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TechniqueDescription.Passes">
            <summary>	
            <para>Number of rendering passes the technique requires. See Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTECHNIQUE_DESC::Passes']/*"/>	
            <unmanaged>unsigned int Passes</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TechniqueDescription.Annotations">
            <summary>	
            <para>The number of annotations. See Add Information to Effect Parameters with_Annotations.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTECHNIQUE_DESC::Annotations']/*"/>	
            <unmanaged>unsigned int Annotations</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TrackDescription">
            <summary>	
            Describes an animation track and specifies blending weight, speed, and position for the track at a given time.	
            </summary>	
            <remarks>	
            Tracks with the same priority are blended together, and the two resulting values are then blended using the priority blend factor.  A track must have an animation set (stored separately) associated with it.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTRACK_DESC']/*"/>	
            <unmanaged>D3DXTRACK_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrackDescription.Priority">
            <summary>	
            <para>Priority type, as defined in <see cref="T:SharpDX.Direct3D9.TrackPriority"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTRACK_DESC::Priority']/*"/>	
            <unmanaged>D3DXPRIORITY_TYPE Priority</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrackDescription.Weight">
            <summary>	
            <para>Weight value. The weight determines the proportion of this track to blend with other tracks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTRACK_DESC::Weight']/*"/>	
            <unmanaged>float Weight</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrackDescription.Speed">
            <summary>	
            <para>Speed value. This is used similarly to a multiplier to scale the period of the track.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTRACK_DESC::Speed']/*"/>	
            <unmanaged>float Speed</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrackDescription.Position">
            <summary>	
            <para>Time position of the track, in the local timeframe of its current animation set.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTRACK_DESC::Position']/*"/>	
            <unmanaged>double Position</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.TrackDescription.Enable">
            <summary>	
            <para>Track enable/disable. To enable, set to TRUE. To disable, set to <see cref="F:SharpDX.Result.False"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXTRACK_DESC::Enable']/*"/>	
            <unmanaged>BOOL Enable</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.TrianglePatchInfo">
            <summary>	
            Describes a triangular high-order patch.	
            </summary>	
            <remarks>	
            For example, the following diagram identifies the vertex order and segment numbers for a cubic B?zier triangle patch. The vertex order determines the segment numbers used by DrawTriPatch. The offset is the number of bytes to the first triangle patch vertex in the vertex buffer.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTRIPATCH_INFO']/*"/>	
            <unmanaged>D3DTRIPATCH_INFO</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrianglePatchInfo.StartVertexOffset">
            <summary>	
            <para>Starting vertex offset, in number of vertices. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTRIPATCH_INFO::StartVertexOffset']/*"/>	
            <unmanaged>unsigned int StartVertexOffset</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrianglePatchInfo.VertexCount">
            <summary>	
            <para>Number of vertices.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTRIPATCH_INFO::NumVertices']/*"/>	
            <unmanaged>unsigned int NumVertices</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrianglePatchInfo.Basis">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Basis"/> enumerated type, which defines the basis type for the triangular high-order patch. The only valid value for this member is <see cref="F:SharpDX.Direct3D9.Basis.Bezier"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTRIPATCH_INFO::Basis']/*"/>	
            <unmanaged>D3DBASISTYPE Basis</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.TrianglePatchInfo.Degree">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Degree"/> enumerated type, defining the degree type for the triangular high-order patch.</para>	
              ValueNumber of vertices D3DDEGREE_CUBIC10 D3DDEGREE_LINEAR3 D3DDEGREE_QUADRATICN/A D3DDEGREE_QUINTIC21  <para>?</para>	
             <para>N/A - Not available. Not supported.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DTRIPATCH_INFO::Degree']/*"/>	
            <unmanaged>D3DDEGREETYPE Degree</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VCache">
            <summary>	
            DirectX 8.1 and later versions only.	
            </summary>	
            <remarks>	
            DirectX 8.1 versions only.The Direct3D runtime calls a driver's D3dGetDriverState function to obtain vertex-cache information from the driver. In this D3dGetDriverState call, the runtime specifies the D3DDEVINFOID_VCACHE flag in the dwFlags member of the DD_GETDRIVERSTATEDATA structure that the runtime passes. The driver specifies vertex-cache information in a <see cref="T:SharpDX.Direct3D9.VCache"/> structure and returns it at the lpdwStates member of DD_GETDRIVERSTATEDATA.DirectX 9.0 and later versions only.The Direct3D runtime specifies D3DDP2OP_CREATEQUERY and D3DDP2OP_ISSUEQUERY commands in calls to the driver's D3dDrawPrimitives2 callback to create driver-side resources for the query and then to asynchronously query the driver for vertex-cache information. In the call with the D3DDP2OP_CREATEQUERY command, the runtime specifies the <see cref="F:SharpDX.Direct3D9.QueryType.VCache"/> query type in the QueryType member of the D3DHAL_DP2CREATEQUERY structure.When the driver completes a vertex-cache query, the driver sets the total size of the response buffer in the dwErrorOffset member of the D3DHAL_DRAWPRIMITIVES2DATA structure and sets the ddrval member of D3DHAL_DRAWPRIMITIVES2DATA to <see cref="F:SharpDX.Direct3D9.ResultCode.Success"/> for successful completion. The driver also overwrites the incoming command buffer with the outgoing response buffer. This response buffer contains a D3DHAL_DP2RESPONSEQUERY structure that identifies a response for the vertex-cache query. This D3DHAL_DP2RESPONSEQUERY is followed by the vertex-cache data in the <see cref="T:SharpDX.Direct3D9.VCache"/> structure.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_VCACHE']/*"/>	
            <unmanaged>D3DDEVINFO_VCACHE</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VCache.Pattern">
            <summary>	
            <para>Specifies the bit pattern. The driver must specify the bit pattern as the CACH four-character code (FOURCC) value. The driver can use the MAKEFOURCC macro as follows to specify the FOURCC value as CACH:</para>	
              	
            <code>	
            MAKEFOURCC('C', 'A', 'C', 'H');	
            </code>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_VCACHE::Pattern']/*"/>	
            <unmanaged>unsigned int Pattern</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VCache.OptMethod">
            <summary>	
            <para>Specifies the method of mesh optimization. The driver can use one of the following values to specify the mesh optimization that it uses: </para>	
              ValueMeaning  <para><see cref="F:SharpDX.Direct3D9.MeshOptimizeFlags.StripReorder"/> (0)</para>	
              <para>Longest strips optimization</para>	
               <para>D3DXMESHOPT_VCACHE (1)</para>	
              <para>Vertex-cache based optimization</para>	
               <para>?</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_VCACHE::OptMethod']/*"/>	
            <unmanaged>unsigned int OptMethod</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VCache.CacheSize">
            <summary>	
            <para>Specifies the effective size, in entries, for which the driver optimizes the vertex cache. The actual cache size is not required to be the size specified in CacheSize because in most cases the actual cache size turns out to be larger. The driver only specifies an optimized size in CacheSize if it also specifies D3DXMESHOPT_VCACHE in the OptMethod member.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_VCACHE::CacheSize']/*"/>	
            <unmanaged>unsigned int CacheSize</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VCache.MagicNumber">
            <summary>	
            <para>Specifies the number that should be used as part of a trial-and-error procedure when determining when to restart the strips list. This number can be set from 1 to the value in the CacheSize member. Typically, the best values are near CacheSize/2. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_VCACHE::MagicNumber']/*"/>	
            <unmanaged>unsigned int MagicNumber</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexBufferDescription">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXBUFFER_DESC']/*"/>	
            <unmanaged>D3DVERTEXBUFFER_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBufferDescription.Format">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXBUFFER_DESC::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBufferDescription.Type">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXBUFFER_DESC::Type']/*"/>	
            <unmanaged>D3DRESOURCETYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBufferDescription.Usage">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXBUFFER_DESC::Usage']/*"/>	
            <unmanaged>D3DUSAGE Usage</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBufferDescription.Pool">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXBUFFER_DESC::Pool']/*"/>	
            <unmanaged>D3DPOOL Pool</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBufferDescription.SizeInBytes">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXBUFFER_DESC::Size']/*"/>	
            <unmanaged>unsigned int Size</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexBufferDescription.Fvf">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXBUFFER_DESC::FVF']/*"/>	
            <unmanaged>D3DFVF FVF</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexElement">
            <summary>	
            Defines the vertex data layout. Each vertex can contain one or more data types, and each data type is described by a vertex element.	
            </summary>	
            <remarks>	
            Vertex data is defined using an array of <see cref="T:SharpDX.Direct3D9.VertexElement"/> structures. Use D3DDECL_END to declare the last element in the declaration.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXELEMENT9']/*"/>	
            <unmanaged>D3DVERTEXELEMENT9</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexElement.Stream">
            <summary>	
            <para>Stream number.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXELEMENT9::Stream']/*"/>	
            <unmanaged>unsigned short Stream</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexElement.Offset">
            <summary>	
            <para>Offset from the beginning of the vertex data to the data associated with the particular data type.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXELEMENT9::Offset']/*"/>	
            <unmanaged>unsigned short Offset</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexElement.Type">
            <summary>	
            <para>The data type, specified as a <see cref="T:SharpDX.Direct3D9.DeclarationType"/>. One of several predefined types that define the data size. Some methods have an implied type.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXELEMENT9::Type']/*"/>	
            <unmanaged>D3DDECLTYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexElement.Method">
            <summary>	
            <para>The method specifies the tessellator processing, which determines how the tessellator interprets (or operates on) the vertex data. For more information, see <see cref="T:SharpDX.Direct3D9.DeclarationMethod"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXELEMENT9::Method']/*"/>	
            <unmanaged>D3DDECLMETHOD Method</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexElement.Usage">
            <summary>	
            <para>Defines what the data will be used for; that is, the interoperability between vertex data layouts and vertex shaders. Each usage acts to bind a vertex declaration to a vertex shader. In some cases, they have a special interpretation. For example, an element that specifies <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Normal"/> or <see cref="F:SharpDX.Direct3D9.DeclarationUsage.Position"/> is used by the N-patch tessellator to set up tessellation. See <see cref="T:SharpDX.Direct3D9.DeclarationUsage"/> for a list of the available semantics. <see cref="F:SharpDX.Direct3D9.DeclarationUsage.TextureCoordinate"/> can be used for user-defined fields (which don't have an existing usage defined).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXELEMENT9::Usage']/*"/>	
            <unmanaged>D3DDECLUSAGE Usage</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexElement.UsageIndex">
            <summary>	
            <para>Modifies the usage data to allow the user to specify multiple usage types.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVERTEXELEMENT9::UsageIndex']/*"/>	
            <unmanaged>unsigned char UsageIndex</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexElement.VertexDeclarationEnd">
            <summary>
            Used for closing a VertexElement declaration.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.VertexElement.#cctor">
            <summary>
            Initializes the <see cref="T:SharpDX.Direct3D9.VertexElement"/> struct.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.VertexElement.#ctor(System.Int16,System.Int16,SharpDX.Direct3D9.DeclarationType,SharpDX.Direct3D9.DeclarationMethod,SharpDX.Direct3D9.DeclarationUsage,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.VertexElement"/> struct.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
            <param name="usage">The usage.</param>
            <param name="usageIndex">Index of the usage.</param>
        </member>
        <member name="T:SharpDX.Direct3D9.VertexShader20Caps">
            <summary>	
            Vertex shader caps.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVSHADERCAPS2_0']/*"/>	
            <unmanaged>D3DVSHADERCAPS2_0</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader20Caps.Caps">
            <summary>	
            <para>Instruction predication is supported if this value is nonzero. See setp_comp - vs.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVSHADERCAPS2_0::Caps']/*"/>	
            <unmanaged>D3DVS20CAPS Caps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader20Caps.DynamicFlowControlDepth">
            <summary>	
            <para> Either 0 or 24, which represents the depth of the dynamic flow control instruction nesting. See <see cref="T:SharpDX.Direct3D9.VertexShaderCaps"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVSHADERCAPS2_0::DynamicFlowControlDepth']/*"/>	
            <unmanaged>int DynamicFlowControlDepth</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader20Caps.TempCount">
            <summary>	
            <para>The number of temporary registers supported. See <see cref="T:SharpDX.Direct3D9.VertexShaderCaps"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVSHADERCAPS2_0::NumTemps']/*"/>	
            <unmanaged>int NumTemps</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexShader20Caps.StaticFlowControlDepth">
            <summary>	
            <para>The depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions. See <see cref="T:SharpDX.Direct3D9.VertexShaderCaps"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVSHADERCAPS2_0::StaticFlowControlDepth']/*"/>	
            <unmanaged>int StaticFlowControlDepth</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.VertexStats">
            <summary>	
            Reports the number of triangles that have been processed and clipped by the runtime's software vertex processing.	
            </summary>	
            <remarks>	
            Use the debug runtime and software vertex processing to get the number of non-clipped and clipped primitives for a particular scene. Primitives will typically be clipped based on a guard band (if one is present). The clipping guard band is set with parameters such as GuardBandLeft in <see cref="T:SharpDX.Direct3D9.Capabilities"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3DVERTEXSTATS']/*"/>	
            <unmanaged>D3DDEVINFO_D3DVERTEXSTATS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexStats.NumRenderedTriangles">
            <summary>	
            <para>Total number of triangles that are not clipped in this frame.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3DVERTEXSTATS::NumRenderedTriangles']/*"/>	
            <unmanaged>unsigned int NumRenderedTriangles</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VertexStats.NumExtraClippingTriangles">
            <summary>	
            <para>Number of new triangles generated by clipping.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DDEVINFO_D3DVERTEXSTATS::NumExtraClippingTriangles']/*"/>	
            <unmanaged>unsigned int NumExtraClippingTriangles</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Viewport">
            <summary>	
            Defines the window dimensions of a render-target surface onto which a 3D volume projects.	
            </summary>	
            <remarks>	
            The X, Y, Width, and Height members describe the position and dimensions of the viewport on the render-target surface. Usually, applications render to the entire target surface; when rendering on a 640 x 480 surface, these members should be 0, 0, 640, and 480, respectively. The MinZ and MaxZ are typically set to 0.0 and 1.0 but can be set to other values to achieve specific effects. For example, you might set them both to 0.0 to force the system to render objects to the foreground of a scene, or both to 1.0 to force the objects into the background.When the viewport parameters for a device change (because of a call to the SetViewport method), the driver builds a new transformation matrix.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVIEWPORT9']/*"/>	
            <unmanaged>D3DVIEWPORT9</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Viewport.X">
            <summary>	
            <para>Pixel coordinate of the upper-left corner of the viewport on the render-target surface. Unless you want to render to a subset of the surface, this member can be set to 0. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVIEWPORT9::X']/*"/>	
            <unmanaged>unsigned int X</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Viewport.Y">
            <summary>	
            <para>Pixel coordinate of the upper-left corner of the viewport on the render-target surface. Unless you want to render to a subset of the surface, this member can be set to 0. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVIEWPORT9::Y']/*"/>	
            <unmanaged>unsigned int Y</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Viewport.Width">
            <summary>	
            <para>Width dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this member should be set to the width dimension of the render-target surface. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVIEWPORT9::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Viewport.Height">
            <summary>	
            <para>Height dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this member should be set to the height dimension of the render-target surface. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVIEWPORT9::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Viewport.MinZ">
            <summary>	
            <para>Together with MaxZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 0.0. Clipping is performed after applying the projection matrix. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVIEWPORT9::MinZ']/*"/>	
            <unmanaged>float MinZ</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Viewport.MaxZ">
            <summary>	
            <para>Together with MinZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 1.0. Clipping is performed after applying the projection matrix. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVIEWPORT9::MaxZ']/*"/>	
            <unmanaged>float MaxZ</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D9.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Viewport"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="minZ">The min Z.</param>
            <param name="maxZ">The max Z.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.Viewport"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:SharpDX.Direct3D9.VolumeDescription">
            <summary>	
            Describes a volume.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVOLUME_DESC']/*"/>	
            <unmanaged>D3DVOLUME_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeDescription.Format">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Format"/> enumerated type, describing the surface format of the volume. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVOLUME_DESC::Format']/*"/>	
            <unmanaged>D3DFORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeDescription.Type">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.ResourceType"/> enumerated type, identifying this resource as a volume. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVOLUME_DESC::Type']/*"/>	
            <unmanaged>D3DRESOURCETYPE Type</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeDescription.Usage">
            <summary>	
            <para>Currently not used. Always returned as 0. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVOLUME_DESC::Usage']/*"/>	
            <unmanaged>D3DUSAGE Usage</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeDescription.Pool">
            <summary>	
            <para>Member of the <see cref="T:SharpDX.Direct3D9.Pool"/> enumerated type, specifying the class of memory allocated for this volume. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVOLUME_DESC::Pool']/*"/>	
            <unmanaged>D3DPOOL Pool</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeDescription.Width">
            <summary>	
            <para>Width of the volume, in pixels. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVOLUME_DESC::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeDescription.Height">
            <summary>	
            <para>Height of the volume, in pixels. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVOLUME_DESC::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeDescription.Depth">
            <summary>	
            <para>Depth of the volume, in pixels. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DVOLUME_DESC::Depth']/*"/>	
            <unmanaged>unsigned int Depth</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.WeldEpsilons">
            <summary>	
            Specifies tolerance values for each vertex component when comparing vertices to determine if they are similar enough to be welded together.	
            </summary>	
            <remarks>	
            The LPD3DXWELDEPSILONS type is defined as a reference to the <see cref="T:SharpDX.Direct3D9.WeldEpsilons"/> structure.<code>	
             typedef <see cref="T:SharpDX.Direct3D9.WeldEpsilons"/> *LPD3DXWELDEPSILONS;	
            	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS']/*"/>	
            <unmanaged>D3DXWELDEPSILONS</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldEpsilons.Position">
            <summary>	
            <para>Position</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::Position']/*"/>	
            <unmanaged>float Position</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldEpsilons.BlendWeights">
            <summary>	
            <para>Blend weight</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::BlendWeights']/*"/>	
            <unmanaged>float BlendWeights</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldEpsilons.Normal">
            <summary>	
            <para>Normal</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::Normal']/*"/>	
            <unmanaged>float Normal</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldEpsilons.PSize">
            <summary>	
            <para>Point size value</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::PSize']/*"/>	
            <unmanaged>float PSize</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldEpsilons.Specular">
            <summary>	
            <para>Specular lighting value</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::Specular']/*"/>	
            <unmanaged>float Specular</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldEpsilons.Diffuse">
            <summary>	
            <para>Diffuse lighting value</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::Diffuse']/*"/>	
            <unmanaged>float Diffuse</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldEpsilons.Tangent">
            <summary>	
            <para>Tangent</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::Tangent']/*"/>	
            <unmanaged>float Tangent</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldEpsilons.Binormal">
            <summary>	
            <para>Binormal</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::Binormal']/*"/>	
            <unmanaged>float Binormal</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.WeldEpsilons.TessFactor">
            <summary>	
            <para>Tessellation factor</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::TessFactor']/*"/>	
            <unmanaged>float TessFactor</unmanaged>	
        </member>
        <member name="P:SharpDX.Direct3D9.WeldEpsilons.Texcoord">
            <summary>	
            <para>Eight texture coordinates</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DXWELDEPSILONS::Texcoord']/*"/>	
            <unmanaged>float Texcoord[8]</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.Xfilecompressedanimationset">
            <summary>	
            Identifies compressed key frame animation data.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='XFILECOMPRESSEDANIMATIONSET']/*"/>	
            <unmanaged>XFILECOMPRESSEDANIMATIONSET</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Xfilecompressedanimationset.CompressedBlockSize">
            <summary>	
            <para>Total size, in bytes, of the compressed data in the compressed key frame animation data buffer.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='XFILECOMPRESSEDANIMATIONSET::CompressedBlockSize']/*"/>	
            <unmanaged>unsigned int CompressedBlockSize</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Xfilecompressedanimationset.TicksPerSec">
            <summary>	
            <para>Number of animation key frame ticks that occur per second.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='XFILECOMPRESSEDANIMATIONSET::TicksPerSec']/*"/>	
            <unmanaged>float TicksPerSec</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Xfilecompressedanimationset.PlaybackType">
            <summary>	
            <para>Type of the animation set playback loop. See <see cref="T:SharpDX.Direct3D9.PlaybackType"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='XFILECOMPRESSEDANIMATIONSET::PlaybackType']/*"/>	
            <unmanaged>unsigned int PlaybackType</unmanaged>	
        </member>
        <member name="F:SharpDX.Direct3D9.Xfilecompressedanimationset.BufferLength">
            <summary>	
            <para>Minimum buffer size, in bytes, required to hold compressed key frame animation data. Value is equal to ( ( CompressedBlockSize + 3 ) / 4 ).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='XFILECOMPRESSEDANIMATIONSET::BufferLength']/*"/>	
            <unmanaged>unsigned int BufferLength</unmanaged>	
        </member>
        <member name="T:SharpDX.Direct3D9.IncludeShadow">
            <summary>
            Shadow callback for <see cref="T:SharpDX.Direct3D9.Include"/>.
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D9.IncludeShadow.ToIntPtr(SharpDX.Direct3D9.Include)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:SharpDX.Direct3D9.IncludeShadow.IncludeVtbl">
            <summary>
            Internal Include Callback
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.IncludeShadow.IncludeVtbl.OpenDelegate">
            <summary>	
            A user-implemented method for opening and reading the contents of a shader #include file.	
            </summary>
            <param name="thisPtr">This pointer</param>
            <param name="includeType">A <see cref="T:SharpDX.Direct3D9.IncludeType"/>-typed value that indicates the location of the #include file. </param>
            <param name="fileNameRef">Name of the #include file.</param>
            <param name="pParentData">Pointer to the container that includes the #include file.</param>
            <param name="dataRef">Pointer to the buffer that Open returns that contains the include directives. This pointer remains valid until <see cref="M:SharpDX.Direct3D9.Include.Close(System.IO.Stream)"/> is called.</param>
            <param name="bytesRef">Pointer to the number of bytes that Open returns in ppData.</param>
            <returns>The user-implemented method should return S_OK. If Open fails when reading the #include file, the application programming interface (API) that caused Open to be called fails. This failure can occur in one of the following situations:The high-level shader language (HLSL) shader fails one of the D3D10CompileShader*** functions.The effect fails one of the D3D10CreateEffect*** functions.</returns>
            <unmanaged>HRESULT Open([None] D3D_INCLUDE_TYPE IncludeType,[None] const char* pFileName,[None] LPCVOID pParentData,[None] LPCVOID* ppData,[None] UINT* pBytes)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.IncludeShadow.IncludeVtbl.CloseDelegate">
            <summary>	
            A user-implemented method for closing a shader #include file.	
            </summary>	
            <remarks>	
            If <see cref="M:SharpDX.Direct3D9.Include.Open(SharpDX.Direct3D9.IncludeType,System.String,System.IO.Stream)"/> was successful, Close is guaranteed to be called before the API using the <see cref="T:SharpDX.Direct3D9.Include"/> interface returns.	
            </remarks>
            <param name="thisPtr">This pointer</param>
            <param name="pData">Pointer to the buffer that contains the include directives. This is the pointer that was returned by the corresponding <see cref="M:SharpDX.Direct3D9.Include.Open(SharpDX.Direct3D9.IncludeType,System.String,System.IO.Stream)"/> call.</param>
            <returns>The user-implemented Close method should return S_OK. If Close fails when it closes the #include file, the application programming interface (API) that caused Close to be called fails. This failure can occur in one of the following situations:The high-level shader language (HLSL) shader fails one of the D3D10CompileShader*** functions.The effect fails one of the D3D10CreateEffect*** functions.</returns>
            <unmanaged>HRESULT Close([None] LPCVOID pData)</unmanaged>
        </member>
        <member name="T:SharpDX.Direct3D9.PaletteEntry">
            <summary>The PaletteEntry struct contains the color and usage of an entry in a logical palette. </summary>
            <unmanaged>PALETTEENTRY</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.PaletteEntry.Red">
            <summary>
            The red intensity value for the palette entry.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.PaletteEntry.Green">
            <summary>
            The green intensity value for the palette entry.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.PaletteEntry.Blue">
            <summary>
            The blue intensity value for the palette entry.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.PaletteEntry.Flags">
            <summary>
            Indicates how the palette entry is to be used. 
            TODO define an enum for flags
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.ShaderBytecode">
            <summary>
              Represents the compiled bytecode of a shader or effect.
            </summary>
            <unmanaged>Blob</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.#ctor(SharpDX.DataStream)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> class.
            </summary>
            <param name="data">A <see cref="T:SharpDX.DataStream"/> containing the compiled bytecode.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.#ctor(System.IO.Stream)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> class.
            </summary>
            <param name="data">A <see cref="T:System.IO.Stream"/> containing the compiled bytecode.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.#ctor(System.IntPtr,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> class.
            </summary>
            <param name="buffer">a pointer to a compiler bytecode</param>
            <param name="sizeInBytes">size of the bytecode</param>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.#ctor(SharpDX.Direct3D.Blob)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> class.
            </summary>
            <param name="blob">The BLOB.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.GetShaderSize(System.IntPtr)">
            <summary>
            Gets the size of the shader from a function pointer.
            </summary>
            <param name="shaderFunctionPtr">The shader function pointer.</param>
            <returns>Size of the shader</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Assemble(System.Byte[],SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Assembles a shader from the given source data.
            </summary>
            <param name="sourceData">The source shader data.</param>
            <param name="flags">Compilation options.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> object representing the raw shader stream.</returns>
            <unmanaged>HRESULT D3DXAssembleShader([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Assemble(System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Assembles a shader from the given source data.
            </summary>
            <param name="sourceData">The source shader data.</param>
            <param name="flags">Compilation options.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> object representing the raw shader stream.</returns>
            <unmanaged>HRESULT D3DXAssembleShader([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Assemble(System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Assembles a shader from the given source data.
            </summary>
            <param name="sourceData">The source shader data.</param>
            <param name="defines">Macro definitions.</param>
            <param name="includeFile">An <see cref="T:SharpDX.Direct3D9.Include"/> interface to use for handling #include directives.</param>
            <param name="flags">Compilation options.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> object representing the raw shader stream.</returns>
            <unmanaged>HRESULT D3DXAssembleShader([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Assemble(System.Byte[],SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Assembles a shader from the given source data.
            </summary>
            <param name="sourceData">The source shader data.</param>
            <param name="defines">Macro definitions.</param>
            <param name="includeFile">An <see cref="T:SharpDX.Direct3D9.Include"/> interface to use for handling #include directives.</param>
            <param name="flags">Compilation options.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> object representing the raw shader stream.</returns>
            <unmanaged>HRESULT D3DXAssembleShader([In] const void* pSrcData,[In] unsigned int SrcDataLen,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.AssembleFromFile(System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Assembles a shader from file.
            </summary>
            <param name="fileName">Name of the shader file.</param>
            <param name="flags">Compilation options.</param>
            <returns>A <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> object representing the raw shader stream.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.AssembleFromFile(System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Assembles a shader from file.
            </summary>
            <param name="fileName">Name of the shader file.</param>
            <param name="defines">Macro definitions.</param>
            <param name="includeFile">An <see cref="T:SharpDX.Direct3D9.Include"/> interface to use for handling #include directives.</param>
            <param name="flags">Compilation options.</param>
            <returns>
            A <see cref="T:SharpDX.Direct3D9.ShaderBytecode"/> object representing the raw shader stream.
            </returns>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Compile(System.String,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles the provided shader or effect source.
            </summary>
            <param name="shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Compile(System.Byte[],System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles the provided shader or effect source.
            </summary>
            <param name="shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Compile(System.String,System.String,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles the provided shader or effect source.
            </summary>
            <param name="shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name="entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Compile(System.Byte[],System.String,System.String,SharpDX.Direct3D9.ShaderFlags)">
            <summary>
            Compiles the provided shader or effect source.
            </summary>
            <param name="shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name="entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Compile(System.String,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include)">
            <summary>
            Compiles the provided shader or effect source.
            </summary>
            <param name="shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <param name="defines">A set of macros to define during compilation.</param>
            <param name="include">An interface for handling include files.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Compile(System.Byte[],System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include)">
            <summary>
            Compiles the provided shader or effect source.
            </summary>
            <param name="shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <param name="defines">A set of macros to define during compilation.</param>
            <param name="include">An interface for handling include files.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Compile(System.String,System.String,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include)">
            <summary>
            Compiles the provided shader or effect source.
            </summary>
            <param name="shaderSource">A string containing the source of the shader or effect to compile.</param>
            <param name="entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <param name="defines">A set of macros to define during compilation.</param>
            <param name="include">An interface for handling include files.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.CompileFromFile(System.String,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include)">
            <summary>
            Compiles a shader or effect from a file on disk.
            </summary>
            <param name="fileName">The name of the source file to compile.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <param name="defines">A set of macros to define during compilation.</param>
            <param name="include">An interface for handling include files.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.CompileFromFile(System.String,System.String,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include)">
            <summary>
            Compiles a shader or effect from a file on disk.
            </summary>
            <param name="fileName">The name of the source file to compile.</param>
            <param name="entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <param name="defines">A set of macros to define during compilation.</param>
            <param name="include">An interface for handling include files.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Compile(System.Byte[],System.String,System.String,SharpDX.Direct3D9.ShaderFlags,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include)">
            <summary>
            Compiles the provided shader or effect source.
            </summary>
            <param name="shaderSource">An array of bytes containing the raw source of the shader or effect to compile.</param>
            <param name="entryPoint">The name of the shader entry-point function, or <c>null</c> for an effect file.</param>
            <param name="profile">The shader target or set of shader features to compile against.</param>
            <param name="shaderFlags">Shader compilation options.</param>
            <param name="defines">A set of macros to define during compilation.</param>
            <param name="include">An interface for handling include files.</param>
            <returns>
            The compiled shader bytecode, or <c>null</c> if the method fails.
            </returns>
            <unmanaged>HRESULT D3DXCompileShader([In] const char* pSrcData,[In] unsigned int SrcDataLen,[In] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] const char* pFunctionName,[In] const char* pProfile,[In] unsigned int Flags,[In] ID3DXBuffer** ppShader,[In] ID3DXBuffer** ppErrorMsgs,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Disassemble">
            <summary>
              Disassembles compiled HLSL code back into textual source.
            </summary>
            <returns>The textual source of the shader or effect.</returns>
            <unmanaged>HRESULT D3DXDisassembleShader([In] const void* pShader,[In] BOOL EnableColorCode,[In] const char* pComments,[In] ID3DXBuffer** ppDisassembly)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Disassemble(System.Boolean)">
            <summary>
            Disassembles compiled HLSL code back into textual source.
            </summary>
            <param name="enableColorCode">if set to <c>true</c> [enable color code].</param>
            <returns>
            The textual source of the shader or effect.
            </returns>
            <unmanaged>HRESULT D3DXDisassembleShader([In] const void* pShader,[In] BOOL EnableColorCode,[In] const char* pComments,[In] ID3DXBuffer** ppDisassembly)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Disassemble(System.Boolean,System.String)">
            <summary>
            Disassembles compiled HLSL code back into textual source.
            </summary>
            <param name="enableColorCode">if set to <c>true</c> [enable color code].</param>
            <param name="comments">Commenting information to embed in the disassembly.</param>
            <returns>
            The textual source of the shader or effect.
            </returns>
            <unmanaged>HRESULT D3DXDisassembleShader([In] const void* pShader,[In] BOOL EnableColorCode,[In] const char* pComments,[In] ID3DXBuffer** ppDisassembly)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.FindComment(SharpDX.Direct3D9.Format)">
            <summary>
            Searches through the shader for the specified comment.
            </summary>
            <param name="fourCC">A FOURCC code used to identify the comment.</param>
            <returns>The comment data.</returns>
            <unmanaged>HRESULT D3DXFindShaderComment([In] const void* pFunction,[In] unsigned int FourCC,[Out] const void** ppData,[Out] unsigned int* pSizeInBytes)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.GetInputSemantics">
            <summary>
            Gets the set of semantics for shader inputs.
            </summary>
            <returns>The set of semantics for shader inputs.</returns>
            <unmanaged>HRESULT D3DXGetShaderInputSemantics([In] const void* pFunction,[In, Out, Buffer] D3DXSEMANTIC* pSemantics,[InOut] unsigned int* pCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.GetOutputSemantics">
            <summary>
            Gets the set of semantics for shader outputs.
            </summary>
            <returns>The set of semantics for shader outputs.</returns>
            <unmanaged>HRESULT D3DXGetShaderOutputSemantics([In] const void* pFunction,[In, Out, Buffer] D3DXSEMANTIC* pSemantics,[InOut] unsigned int* pCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.GetSamplers">
            <summary>
            Gets the sampler names references in the shader.
            </summary>
            <returns>The set of referenced sampler names.</returns>
            <unmanaged>HRESULT D3DXGetShaderSamplers([In] const void* pFunction,[In] const char** pSamplers,[In] unsigned int* pCount)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.MajorVersion(System.Int32)">
            <summary>
            Extracts the major version component of a shader version number.
            </summary>
            <param name="version">The shader version number.</param>
            <returns>The major version component.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.MinorVersion(System.Int32)">
            <summary>
            Extracts the minor version component of a shader version number.
            </summary>
            <param name="version">The shader version number.</param>
            <returns>The minor version component.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.ParseVersion(System.Int32)">
            <summary>
            Converts a shader version number into a managed <see cref="T:System.Version" /> object.
            </summary>
            <param name="version">The shader version number.</param>
            <returns>The parsed shader version information.</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Load(System.IO.Stream)">
            <summary>
            Loads from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>A shader bytecode</returns>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Save(System.String)">
            <summary>
            Saves to the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Save(System.IO.Stream)">
            <summary>
            Saves this bycode to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.FromPointer(System.IntPtr)">
            <summary>
            Froms the pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Preprocess(System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include)">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to preprocess.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The preprocessed shader source.</returns>
            <unmanaged>HRESULT D3DXPreprocessShader([In] const void* pSrcData,[In] unsigned int SrcDataSize,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Preprocess(System.Byte[],SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include)">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to preprocess.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The preprocessed shader source.</returns>
            <unmanaged>HRESULT D3DXPreprocessShader([In] const void* pSrcData,[In] unsigned int SrcDataSize,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Preprocess(System.Byte[],SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String@)">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">An array of bytes containing the raw source of the shader or effect to preprocess.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if preprocessing succeeded.</param>
            <returns>The preprocessed shader source.</returns>
            <unmanaged>HRESULT D3DXPreprocessShader([In] const void* pSrcData,[In] unsigned int SrcDataSize,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Preprocess(System.IntPtr,System.Int32,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String@)">
            <summary>
            Preprocesses the provided shader or effect source.
            </summary>
            <param name="shaderSourcePtr">The shader source PTR.</param>
            <param name="shaderSourceLength">Length of the shader source.</param>
            <param name="defines">A set of macros to define during preprocessing.</param>
            <param name="include">An interface for handling include files.</param>
            <param name="compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if preprocessing succeeded.</param>
            <returns>
            The preprocessed shader source.
            </returns>
            <unmanaged>HRESULT D3DXPreprocessShader([In] const void* pSrcData,[In] unsigned int SrcDataSize,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.Preprocess(System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String@)">
            <summary>
              Preprocesses the provided shader or effect source.
            </summary>
            <param name = "shaderSource">A string containing the source of the shader or effect to preprocess.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if preprocessing succeeded.</param>
            <returns>The preprocessed shader source.</returns>
            <unmanaged>HRESULT D3DXPreprocessShader([In] const void* pSrcData,[In] unsigned int SrcDataSize,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.PreprocessFromFile(System.String)">
            <summary>
              Preprocesses a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <returns>The preprocessed shader source.</returns>
            <unmanaged>HRESULT D3DXPreprocessShader([In] const void* pSrcData,[In] unsigned int SrcDataSize,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.PreprocessFromFile(System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include)">
            <summary>
              Preprocesses a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <returns>The preprocessed shader source.</returns>
            <unmanaged>HRESULT D3DXPreprocessShader([In] const void* pSrcData,[In] unsigned int SrcDataSize,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.PreprocessFromFile(System.String,SharpDX.Direct3D9.Macro[],SharpDX.Direct3D9.Include,System.String@)">
            <summary>
              Preprocesses a shader or effect from a file on disk.
            </summary>
            <param name = "fileName">The name of the source file to compile.</param>
            <param name = "defines">A set of macros to define during preprocessing.</param>
            <param name = "include">An interface for handling include files.</param>
            <param name = "compilationErrors">When the method completes, contains a string of compilation errors, or an empty string if preprocessing succeeded.</param>
            <returns>The preprocessed shader source.</returns>
            <unmanaged>HRESULT D3DXPreprocessShader([In] const void* pSrcData,[In] unsigned int SrcDataSize,[In, Buffer] const D3DXMACRO* pDefines,[In] ID3DXInclude* pInclude,[In] ID3DXBuffer** ppShaderText,[In] ID3DXBuffer** ppErrorMsgs)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.FromStream(System.IO.Stream)">
            <summary>
              Read a compiled shader bytecode from a Stream and return a ShaderBytecode
            </summary>
            <param name = "stream"></param>
            <returns></returns>
        </member>
        <member name="M:SharpDX.Direct3D9.ShaderBytecode.FromFile(System.String)">
            <summary>
              Read a compiled shader bytecode from a Stream and return a ShaderBytecode
            </summary>
            <param name = "fileName"></param>
            <returns></returns>
        </member>
        <member name="P:SharpDX.Direct3D9.ShaderBytecode.BufferPointer">
            <summary>
            Gets the buffer pointer.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D9.ShaderBytecode.BufferSize">
            <summary>
            Gets or sets the size of the buffer.
            </summary>
            <value>
            The size of the buffer.
            </value>
        </member>
        <member name="P:SharpDX.Direct3D9.ShaderBytecode.ConstantTable">
            <summary>
            Gets the shader constant table.
            </summary>
            <unmanaged>HRESULT D3DXGetShaderConstantTable([In] const void* pFunction,[In] ID3DXConstantTable** ppConstantTable)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.ShaderBytecode.Version">
            <summary>
            Gets the version of the shader.
            </summary>
            <unmanaged>unsigned int D3DXGetShaderVersion([In] const void* pFunction)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D9.ShaderBytecode.Data">
            <summary>
              Gets the raw data of the compiled bytecode.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.TextureRequirements.Width">
            <summary>
            Width of the texture.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.TextureRequirements.Height">
            <summary>
            Height of the texture.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.TextureRequirements.Format">
            <summary>
            Format of the texture.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.TextureRequirements.MipLevelCount">
            <summary>
            Mip level count of the texture.
            </summary>
        </member>
        <member name="T:SharpDX.Direct3D9.VolumeTextureRequirements">
            <summary>
            Contains requested texture creation parameters for volume textures.
            </summary>
            <unmanaged>None</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeTextureRequirements.Width">
            <summary>
            The requested width of the texture, in pixels.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeTextureRequirements.Height">
            <summary>
            The requested height of the texture, in pixels.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeTextureRequirements.Depth">
            <summary>
            The requested depth of the texture, in pixels.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeTextureRequirements.Format">
            <summary>
            The requested surface format.
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D9.VolumeTextureRequirements.MipLevelCount">
            <summary>
            The requested mip level count.
            </summary>
        </member>
    </members>
</doc>
