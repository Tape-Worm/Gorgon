<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.Animation</name>
    </assembly>
    <members>
        <member name="T:SharpDX.Animation.Transition">
            <summary>	
            Defines a transition, which determines how an animation variable changes over time.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransition']/*"/>	
            <unmanaged>IUIAnimationTransition</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Transition.#ctor(SharpDX.Animation.TransitionFactory,SharpDX.Animation.Interpolator)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Transition"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="interpolator">The interpolator.</param>
        </member>
        <member name="M:SharpDX.Animation.Transition.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Transition"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Animation.Transition.SetInitialValue(System.Double)">
            <summary>	
            Sets the initial value for the transition.	
            </summary>	
            <param name="value"><para>The initial value for the transition.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            This method should not be called after the transition has been added to a storyboard.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransition::SetInitialValue']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransition::SetInitialValue([In] double value)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Transition.SetInitialVelocity(System.Double)">
            <summary>	
            Sets the initial velocity for the transition.	
            </summary>	
            <param name="velocity"><para>The initial velocity for the transition.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            This method should not be called after the transition has been added to a storyboard.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransition::SetInitialVelocity']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransition::SetInitialVelocity([In] double velocity)</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Transition.IsDurationKnown_" -->
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Transition.GetDuration(System.Double@)" -->
        <member name="P:SharpDX.Animation.Transition.InitialValue">
            <summary>	
            Sets the initial value for the transition.	
            </summary>	
            <remarks>	
            This method should not be called after the transition has been added to a storyboard.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransition::SetInitialValue']/*"/>	
            <unmanaged>SetInitialValue</unmanaged>	
            <unmanaged>HRESULT IUIAnimationTransition::SetInitialValue([In] double value)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Transition.InitialVelocity">
            <summary>	
            Sets the initial velocity for the transition.	
            </summary>	
            <remarks>	
            This method should not be called after the transition has been added to a storyboard.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransition::SetInitialVelocity']/*"/>	
            <unmanaged>SetInitialVelocity</unmanaged>	
            <unmanaged>HRESULT IUIAnimationTransition::SetInitialVelocity([In] double velocity)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Transition.IsDurationKnown">
            <summary>	
            Determines whether a transition's duration is currently known.	
            </summary>	
            <remarks>	
            This method should not be called when the storyboard to which the transition has been added is scheduled or playing.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransition::IsDurationKnown']/*"/>	
            <unmanaged>IsDurationKnown</unmanaged>	
            <unmanaged>HRESULT IUIAnimationTransition::IsDurationKnown()</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Transition.Duration">
            <summary>	
            Gets the duration of the transition.	
            </summary>	
            <remarks>	
            An application should typically call the <see cref="M:SharpDX.Animation.Transition.IsDurationKnown_"/> method before calling this method. This method should not be called when the storyboard to which the transition has been added is scheduled or playing.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransition::GetDuration']/*"/>	
            <unmanaged>GetDuration</unmanaged>	
            <unmanaged>HRESULT IUIAnimationTransition::GetDuration([Out] double* duration)</unmanaged>
        </member>
        <member name="T:SharpDX.Animation.TransitionLibrary">
            <summary>	
            Defines a library of standard transitions.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary']/*"/>	
            <unmanaged>IUIAnimationTransitionLibrary</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.TransitionLibrary"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.TransitionLibrary"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.Instantaneous(System.Double)">
            <summary>	
            Creates an instantaneous transition.	
            </summary>	
            <param name="finalValue"><para> The value of the animation variable at the end of the transition.</para></param>	
            <returns><para> The new instantaneous transition.</para></returns>	
            <remarks>	
            During an instantaneous transition, the value of the animation variable changes instantly from its current value to a specified final value. The duration of this transition is always zero.The figure below shows the effect on an animation variable over time during an instantaneous transition.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateInstantaneousTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateInstantaneousTransition([In] double finalValue,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.Constant(System.Double)">
            <summary>	
            Creates a constant transition.	
            </summary>	
            <param name="duration"><para> The duration of the transition.</para></param>	
            <returns><para> The new constant transition.</para></returns>	
            <remarks>	
            During a constant transition, the value of an animation variable remains at the initial value over the duration of the transition.The figure below shows the effect on an animation variable over time during a constant-duration transition.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateConstantTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateConstantTransition([In] double duration,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.Discrete(System.Double,System.Double,System.Double)">
            <summary>	
            Creates a discrete transition.	
            </summary>	
            <param name="delay"><para>The amount of time by which to delay the instantaneous switch to the final value.</para></param>	
            <param name="finalValue"><para> The value of the animation variable at the end of the transition.</para></param>	
            <param name="hold"><para>The amount of time by which to hold the variable at its final value.</para></param>	
            <returns><para> The new discrete transition.</para></returns>	
            <remarks>	
            During a discrete transition, the animation variable remains at the initial value for a specified delay time, then switches instantaneously to a specified final value and remains at that value for a given hold time.The figure below shows the effect on an animation variable over time during a discrete transition.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateDiscreteTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateDiscreteTransition([In] double delay,[In] double finalValue,[In] double hold,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.Linear(System.Double,System.Double)">
            <summary>	
            Creates a linear transition.	
            </summary>	
            <param name="duration"><para> The duration of the transition.</para></param>	
            <param name="finalValue"><para> The value of the animation variable at the end of the transition.</para></param>	
            <returns><para> The new linear transition.</para></returns>	
            <remarks>	
            During a linear transition, the value of the animation variable transitions linearly from its initial value to a  specified final value.The figure below shows the effect on an animation variable over time during a linear transition.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateLinearTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateLinearTransition([In] double duration,[In] double finalValue,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.LinearFromSpeed(System.Double,System.Double)">
            <summary>	
            Creates a linear-speed transition.	
            </summary>	
            <param name="speed"><para>The absolute value of the velocity.</para></param>	
            <param name="finalValue"><para> The value of the animation variable at the end of the transition.</para></param>	
            <returns><para> The new linear-speed transition.</para></returns>	
            <remarks>	
            During a linear-speed transition, the value of the animation variable changes at a specified rate. The duration of the transition is determined by  the difference between the initial value and the specified final value.The figure below shows the effect on an animation variable over time during a linear-speed transition.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateLinearTransitionFromSpeed']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateLinearTransitionFromSpeed([In] double speed,[In] double finalValue,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.SinusoidalFromVelocity(System.Double,System.Double)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="duration">No documentation.</param>	
            <param name="period">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateSinusoidalTransitionFromVelocity']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateSinusoidalTransitionFromVelocity([In] double duration,[In] double period,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.SinusoidalFromRange(System.Double,System.Double,System.Double,System.Double,SharpDX.Animation.Slope)">
            <summary>	
            Creates a sinusoidal-range  transition, with a specified range of oscillation.	
            </summary>	
            <param name="duration"><para>The duration of the transition.</para></param>	
            <param name="minimumValue"><para>The value of the animation variable at a trough of the sinusoidal wave.</para></param>	
            <param name="maximumValue"><para>The value of the animation variable at a peak of the sinusoidal wave.</para></param>	
            <param name="period"><para>The period of oscillation of the sinusoidal wave, in seconds.</para></param>	
            <param name="slope"><para>The slope at the start of the transition.</para></param>	
            <returns><para> The new sinusoidal-range transition.</para></returns>	
            <remarks>	
            The value of the animation variable fluctuates between the specified minimum and maximum values over the entire duration of a  sinusodial-range transition. The slope parameter is used to disambiguate between the two possible sine waves specified by the other parameters.The figure below shows the effect on an animation variable over time during a sinusoidal-range transition. Passing in the <see cref="F:SharpDX.Animation.Slope.Increasing"/> enumeration value yields a wave like the solid curve shown in the figure, whereas the <see cref="F:SharpDX.Animation.Slope.Decreasing"/> value yields a wave like the dashed curve.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateSinusoidalTransitionFromRange']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateSinusoidalTransitionFromRange([In] double duration,[In] double minimumValue,[In] double maximumValue,[In] double period,[In] UI_ANIMATION_SLOPE slope,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.AccelerateDecelerate(System.Double,System.Double,System.Double,System.Double)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="duration">No documentation.</param>	
            <param name="finalValue">No documentation.</param>	
            <param name="accelerationRatio">No documentation.</param>	
            <param name="decelerationRatio">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateAccelerateDecelerateTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateAccelerateDecelerateTransition([In] double duration,[In] double finalValue,[In] double accelerationRatio,[In] double decelerationRatio,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.Reversal(System.Double)">
            <summary>	
            Creates a reversal transition.	
            </summary>	
            <param name="duration"><para>The duration of the transition.</para></param>	
            <returns><para> The new reversal transition.</para></returns>	
            <remarks>	
            A reversal transition smoothly changes direction over the specified duration. The final value will be the same as the initial value and the final velocity will be the negative of the initial velocity. The figure below shows such a reversal transition.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateReversalTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateReversalTransition([In] double duration,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.Cubic(System.Double,System.Double,System.Double)">
            <summary>	
            Creates a cubic transition.	
            </summary>	
            <param name="duration"><para> The duration of the transition.</para></param>	
            <param name="finalValue"><para> The value of the animation variable at the end of the transition.</para></param>	
            <param name="finalVelocity"><para> The velocity of the variable at the end of the transition.</para></param>	
            <returns><para> The new cubic transition.</para></returns>	
            <remarks>	
            During a cubic transition, the value of the animation variable changes from its initial value to a specified final value over the duration of the transition, ending at a specified velocity.The figure below shows the effect on an animation variable over time during a cubic transition.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateCubicTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateCubicTransition([In] double duration,[In] double finalValue,[In] double finalVelocity,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.SmoothStop(System.Double,System.Double)">
            <summary>	
            Creates a smooth-stop transition.	
            </summary>	
            <param name="maximumDuration"><para> The maximum duration of the transition.</para></param>	
            <param name="finalValue"><para> The value of the animation variable at the end of the transition.</para></param>	
            <returns><para> The new smooth-stop transition.</para></returns>	
            <remarks>	
            A smooth-stop transition slows down as it approaches the specified final value, and reaches it with a velocity of zero. The duration of the transition is determined by the initial velocity, the difference between the initial and final values, and the specified maximum duration. If there is no solution consisting of a single parabolic arc, this method creates a cubic transition.The figure below shows the effect on an animation variable over time during a smooth-stop transition.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateSmoothStopTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateSmoothStopTransition([In] double maximumDuration,[In] double finalValue,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionLibrary.ParabolicFromAcceleration(System.Double,System.Double,System.Double)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="finalValue">No documentation.</param>	
            <param name="finalVelocity">No documentation.</param>	
            <param name="acceleration">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionLibrary::CreateParabolicTransitionFromAcceleration']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionLibrary::CreateParabolicTransitionFromAcceleration([In] double finalValue,[In] double finalVelocity,[In] double acceleration,[Out] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.KeyFrame">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='__MIDL___MIDL_itf_UIAnimation_0000_0002_0003']/*"/>	
            <unmanaged>__MIDL___MIDL_itf_UIAnimation_0000_0002_0003</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.KeyFrame.Start">
            <summary>
            Represents the implicit keyframe at the start of every storyboard.
            </summary>
        </member>
        <member name="M:SharpDX.Animation.KeyFrame.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.KeyFrame"/> struct.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="F:SharpDX.Animation.KeyFrame.Id">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='__MIDL___MIDL_itf_UIAnimation_0000_0002_0003::_']/*"/>	
            <unmanaged>void* _</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.PriorityComparisonShadow">
            <summary>
            Internal PriorityComparison Callback
            </summary>
        </member>
        <member name="T:SharpDX.Animation.PriorityComparison">
            <summary>	
            Defines a method for priority comparison that the animation manager uses to resolve scheduling conflicts.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationPriorityComparison']/*"/>	
            <unmanaged>IUIAnimationPriorityComparison</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.PriorityComparison.HasPriority(SharpDX.Animation.Storyboard,SharpDX.Animation.Storyboard,SharpDX.Animation.PriorityEffect)">
            <summary>	
            No documentation.	
            </summary>	
            <param name="scheduledStoryboard">No documentation.</param>	
            <param name="newStoryboard">No documentation.</param>	
            <param name="priorityEffect">No documentation.</param>	
            <returns>No documentation.</returns>	
            <!-- Failed to insert some or all of included XML --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationPriorityComparison::HasPriority']/*"/>	
            <unmanaged>HRESULT IUIAnimationPriorityComparison::HasPriority([In] IUIAnimationStoryboard* scheduledStoryboard,[In] IUIAnimationStoryboard* newStoryboard,[In] UI_ANIMATION_PRIORITY_EFFECT priorityEffect)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.PriorityComparisonShadow.ToIntPtr(SharpDX.Animation.PriorityComparison)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:SharpDX.Animation.PriorityComparisonShadow.PriorityComparisonVtbl.HasPriorityDelegate">
            <unmanaged>HRESULT IUIAnimationPriorityComparison::OnManagerStatusChanged([In] UI_ANIMATION_MANAGER_STATUS newStatus,[In] UI_ANIMATION_MANAGER_STATUS previousStatus)</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.Dependencies">
            <summary>	
            Defines which aspects of an interpolator  depend on a given input.	
            </summary>	
            <remarks>	
            Multiple <see cref="T:SharpDX.Animation.Dependencies"/> values can be combined using a bitwise-OR operation.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_DEPENDENCIES']/*"/>	
            <unmanaged>UI_ANIMATION_DEPENDENCIES</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Dependencies.None">
            <summary>	
            <para>No aspect depends on the input.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_NONE']/*"/>	
            <unmanaged>UI_ANIMATION_DEPENDENCY_NONE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Dependencies.IntermediateValues">
            <summary>	
            <para>The intermediate values depend on the input.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_INTERMEDIATE_VALUES']/*"/>	
            <unmanaged>UI_ANIMATION_DEPENDENCY_INTERMEDIATE_VALUES</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Dependencies.FinalValue">
            <summary>	
            <para>The final value depends on the input.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_FINAL_VALUE']/*"/>	
            <unmanaged>UI_ANIMATION_DEPENDENCY_FINAL_VALUE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Dependencies.FinalVelocity">
            <summary>	
            <para>The final velocity depends on the input.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_FINAL_VELOCITY']/*"/>	
            <unmanaged>UI_ANIMATION_DEPENDENCY_FINAL_VELOCITY</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Dependencies.Duration">
            <summary>	
            <para>The duration depends on the input.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_DURATION']/*"/>	
            <unmanaged>UI_ANIMATION_DEPENDENCY_DURATION</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.IdleBehavior">
            <summary>	
            Defines the behavior of a timer when the animation manager is idle.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_IDLE_BEHAVIOR']/*"/>	
            <unmanaged>UI_ANIMATION_IDLE_BEHAVIOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.IdleBehavior.Continue">
            <summary>	
            <para> The timer continues to generate timer events (is enabled) when the animation manager is idle.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_IDLE_BEHAVIOR_CONTINUE']/*"/>	
            <unmanaged>UI_ANIMATION_IDLE_BEHAVIOR_CONTINUE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.IdleBehavior.Disable">
            <summary>	
            <para> The timer is suspended (disabled) when the animation manager is idle. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_IDLE_BEHAVIOR_DISABLE']/*"/>	
            <unmanaged>UI_ANIMATION_IDLE_BEHAVIOR_DISABLE</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.ManagerStatus">
            <summary>	
            Defines the activity status of an animation manager.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_MANAGER_STATUS']/*"/>	
            <unmanaged>UI_ANIMATION_MANAGER_STATUS</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.ManagerStatus.Idle">
            <summary>	
            <para> The animation manager is idle; no animations are currently playing.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_MANAGER_IDLE']/*"/>	
            <unmanaged>UI_ANIMATION_MANAGER_IDLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.ManagerStatus.Busy">
            <summary>	
            <para> The animation manager is busy; at least one animation is currently playing or scheduled.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_MANAGER_BUSY']/*"/>	
            <unmanaged>UI_ANIMATION_MANAGER_BUSY</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.Mode">
            <summary>	
            Defines animation modes.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_MODE']/*"/>	
            <unmanaged>UI_ANIMATION_MODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Mode.Disabled">
            <summary>	
            <para> Animation is disabled.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_MODE_DISABLED']/*"/>	
            <unmanaged>UI_ANIMATION_MODE_DISABLED</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Mode.SystemDefault">
            <summary>	
            <para> The animation mode is managed by the system.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_MODE_SYSTEM_DEFAULT']/*"/>	
            <unmanaged>UI_ANIMATION_MODE_SYSTEM_DEFAULT</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Mode.Enabled">
            <summary>	
            <para> Animation is enabled.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_MODE_ENABLED']/*"/>	
            <unmanaged>UI_ANIMATION_MODE_ENABLED</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.PriorityEffect">
            <summary>	
            Defines potential effects on a storyboard if a priority comparison returns false.	
            </summary>	
            <remarks>	
            This enumeration is used as the priorityEffect parameter of  <see cref="M:SharpDX.Animation.PriorityComparison.HasPriority(SharpDX.Animation.Storyboard,SharpDX.Animation.Storyboard,SharpDX.Animation.PriorityEffect)"/>, informing the client of the potential effect on the storyboard to be scheduled when the return value is false (S_FALSE).  <see cref="F:SharpDX.Animation.PriorityEffect.Failure"/> means that the  attempt to schedule the storyboard might fail if the return value is false.   <see cref="F:SharpDX.Animation.PriorityEffect.Delay"/> means that the attempt to schedule the storyboard will succeed, but if the return value is false, the storyboard could play later than it would otherwise.This enumeration can help an application decide how aggressive to be about reducing latency in the UI. For example, if the application returns true when the effect is <see cref="F:SharpDX.Animation.PriorityEffect.Delay"/>, then other animations might get canceled or compressed even though doing so was not strictly necessary to play a new animation within the application-specified longest acceptable delay.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_PRIORITY_EFFECT']/*"/>	
            <unmanaged>UI_ANIMATION_PRIORITY_EFFECT</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.PriorityEffect.Failure">
            <summary>	
            <para> This storyboard might not be successfully scheduled.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_PRIORITY_EFFECT_FAILURE']/*"/>	
            <unmanaged>UI_ANIMATION_PRIORITY_EFFECT_FAILURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.PriorityEffect.Delay">
            <summary>	
            <para> The storyboard will be scheduled, but might start playing later.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_PRIORITY_EFFECT_DELAY']/*"/>	
            <unmanaged>UI_ANIMATION_PRIORITY_EFFECT_DELAY</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.RoundingMode">
            <summary>	
            Defines the rounding modes to be used when the value of an animation variable is converted from a floating-point type to an integer type.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_ROUNDING_MODE']/*"/>	
            <unmanaged>UI_ANIMATION_ROUNDING_MODE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.RoundingMode.RoundingNearest">
            <summary>	
            <para> Round to the nearest integer.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_ROUNDING_NEAREST']/*"/>	
            <unmanaged>UI_ANIMATION_ROUNDING_NEAREST</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.RoundingMode.RoundingFloor">
            <summary>	
            <para> Round down.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_ROUNDING_FLOOR']/*"/>	
            <unmanaged>UI_ANIMATION_ROUNDING_FLOOR</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.RoundingMode.RoundingCeiling">
            <summary>	
            <para> Round up.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_ROUNDING_CEILING']/*"/>	
            <unmanaged>UI_ANIMATION_ROUNDING_CEILING</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.SchedulingResult">
            <summary>	
            Defines results for storyboard scheduling.	
            </summary>	
            <remarks>	
            <see cref="M:SharpDX.Animation.Storyboard.Schedule(System.Double)"/> returns <see cref="F:SharpDX.Animation.SchedulingResult.Deferred"/> only if the application attempts to schedule a storyboard during a callback to <see cref="!:SharpDX.Animation.StoryboardEventHandler.OnStoryboardStatusChanged"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_RESULT']/*"/>	
            <unmanaged>UI_ANIMATION_SCHEDULING_RESULT</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.SchedulingResult.UnexpectedFailure">
            <summary>	
            <para> Scheduling failed for an unexpected reason.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_UNEXPECTED_FAILURE']/*"/>	
            <unmanaged>UI_ANIMATION_SCHEDULING_UNEXPECTED_FAILURE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.SchedulingResult.InsufficientPriority">
            <summary>	
            <para> Scheduling failed because a scheduling conflict occurred and the currently scheduled storyboard has higher priority. For more information, see <see cref="M:SharpDX.Animation.PriorityComparison.HasPriority(SharpDX.Animation.Storyboard,SharpDX.Animation.Storyboard,SharpDX.Animation.PriorityEffect)"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_INSUFFICIENT_PRIORITY']/*"/>	
            <unmanaged>UI_ANIMATION_SCHEDULING_INSUFFICIENT_PRIORITY</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.SchedulingResult.AlreadyScheduled">
            <summary>	
            <para> Scheduling failed because  the storyboard is already scheduled.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_ALREADY_SCHEDULED']/*"/>	
            <unmanaged>UI_ANIMATION_SCHEDULING_ALREADY_SCHEDULED</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.SchedulingResult.Succeeded">
            <summary>	
            <para> Scheduling succeeded.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_SUCCEEDED']/*"/>	
            <unmanaged>UI_ANIMATION_SCHEDULING_SUCCEEDED</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.SchedulingResult.Deferred">
            <summary>	
            <para> Scheduling is deferred and will be attempted when the current callback completes.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_DEFERRED']/*"/>	
            <unmanaged>UI_ANIMATION_SCHEDULING_DEFERRED</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.Slope">
            <summary>	
            Defines animation slope characteristics.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_SLOPE']/*"/>	
            <unmanaged>UI_ANIMATION_SLOPE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Slope.Increasing">
            <summary>	
            <para> An increasing slope.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_SLOPE_INCREASING']/*"/>	
            <unmanaged>UI_ANIMATION_SLOPE_INCREASING</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.Slope.Decreasing">
            <summary>	
            <para> A decreasing slope.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_SLOPE_DECREASING']/*"/>	
            <unmanaged>UI_ANIMATION_SLOPE_DECREASING</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.StoryboardStatus">
            <summary>	
            Defines  the status for a storyboard.	
            </summary>	
            <remarks>	
            Unless <see cref="M:SharpDX.Animation.Storyboard.GetStatus(SharpDX.Animation.StoryboardStatus@)"/> is called from a handler for OnStoryboardStatusChanged events, it returns only the following status values:<see cref="F:SharpDX.Animation.StoryboardStatus.Building"/> <see cref="F:SharpDX.Animation.StoryboardStatus.Scheduled"/> <see cref="F:SharpDX.Animation.StoryboardStatus.Playing"/> <see cref="F:SharpDX.Animation.StoryboardStatus.Ready"/>All status values can be passed to  <see cref="!:SharpDX.Animation.StoryboardEventHandler.OnStoryboardStatusChanged"/>.The following diagram illustrates the transitions between these states.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_STATUS']/*"/>	
            <unmanaged>UI_ANIMATION_STORYBOARD_STATUS</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.StoryboardStatus.Building">
            <summary>	
            <para> The storyboard has never been scheduled.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_BUILDING']/*"/>	
            <unmanaged>UI_ANIMATION_STORYBOARD_BUILDING</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.StoryboardStatus.Scheduled">
            <summary>	
            <para> The storyboard is scheduled to play.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_SCHEDULED']/*"/>	
            <unmanaged>UI_ANIMATION_STORYBOARD_SCHEDULED</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.StoryboardStatus.Cancelled">
            <summary>	
            <para> The storyboard was canceled.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_CANCELLED']/*"/>	
            <unmanaged>UI_ANIMATION_STORYBOARD_CANCELLED</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.StoryboardStatus.Playing">
            <summary>	
            <para> The storyboard is currently playing.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_PLAYING']/*"/>	
            <unmanaged>UI_ANIMATION_STORYBOARD_PLAYING</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.StoryboardStatus.Truncated">
            <summary>	
            <para> The storyboard was truncated.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_TRUNCATED']/*"/>	
            <unmanaged>UI_ANIMATION_STORYBOARD_TRUNCATED</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.StoryboardStatus.Finished">
            <summary>	
            <para> The storyboard has finished playing.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_FINISHED']/*"/>	
            <unmanaged>UI_ANIMATION_STORYBOARD_FINISHED</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.StoryboardStatus.Ready">
            <summary>	
            <para> The storyboard is built and ready for scheduling.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_READY']/*"/>	
            <unmanaged>UI_ANIMATION_STORYBOARD_READY</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.StoryboardStatus.InsufficientPriority">
            <summary>	
            <para> Scheduling the storyboard failed because a scheduling conflict occurred and the currently scheduled storyboard has higher priority.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_INSUFFICIENT_PRIORITY']/*"/>	
            <unmanaged>UI_ANIMATION_STORYBOARD_INSUFFICIENT_PRIORITY</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.TimerClientStatus">
            <summary>	
            Defines activity status for a timer's client.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_TIMER_CLIENT_STATUS']/*"/>	
            <unmanaged>UI_ANIMATION_TIMER_CLIENT_STATUS</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.TimerClientStatus.Idle">
            <summary>	
            <para> The client is idle.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_TIMER_CLIENT_IDLE']/*"/>	
            <unmanaged>UI_ANIMATION_TIMER_CLIENT_IDLE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.TimerClientStatus.Busy">
            <summary>	
            <para> The client is busy.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_TIMER_CLIENT_BUSY']/*"/>	
            <unmanaged>UI_ANIMATION_TIMER_CLIENT_BUSY</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.UpdateResult">
            <summary>	
            Defines results for animation updates.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_UPDATE_RESULT']/*"/>	
            <unmanaged>UI_ANIMATION_UPDATE_RESULT</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.UpdateResult.NoChange">
            <summary>	
            <para> No animation variables have changed.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_UPDATE_NO_CHANGE']/*"/>	
            <unmanaged>UI_ANIMATION_UPDATE_NO_CHANGE</unmanaged>	
        </member>
        <member name="F:SharpDX.Animation.UpdateResult.VariablesChanged">
            <summary>	
            <para> One or more animation variables has changed.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='UI_ANIMATION_UPDATE_VARIABLES_CHANGED']/*"/>	
            <unmanaged>UI_ANIMATION_UPDATE_VARIABLES_CHANGED</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.Interpolator">
            <summary>	
            Defines methods for creating a custom interpolator.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator']/*"/>	
            <unmanaged>IUIAnimationInterpolator</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Interpolator.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Interpolator"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Animation.Interpolator.SetInitialValueAndVelocity(System.Double,System.Double)">
            <summary>	
            Sets the initial value and velocity at the start of the transition.	
            </summary>	
            <param name="initialValue"><para>The initial value.</para></param>	
            <param name="initialVelocity"><para>The initial velocity.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code.  See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Windows Animation always calls SetInitialValueAndVelocity before calling the other methods of  <see cref="T:SharpDX.Animation.Interpolator"/> at different offsets. However, it can be called multiple times with different parameters. Interpolators can cache internal state to improve performance, but they must update this cached state each time SetInitialValueAndVelocity is called and ensure that the results of subsequent calls to these methods reflect the updated state.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator::SetInitialValueAndVelocity']/*"/>	
            <unmanaged>HRESULT IUIAnimationInterpolator::SetInitialValueAndVelocity([In] double initialValue,[In] double initialVelocity)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Interpolator.SetDuration(System.Double)">
            <summary>	
            Sets the duration of the transition.	
            </summary>	
            <param name="duration"><para>The duration of the transition.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Windows Animation calls this method only after calling the GetDependencies method, and only if that call returns <see cref="F:SharpDX.Animation.Dependencies.Duration"/> as one of its durationDependencies flags.Typically, an interpolator with a duration dependency will have a duration parameter in its associated creation method of <see cref="T:SharpDX.Animation.TransitionFactory"/>.  The interpolator should store its duration when first initialized and overwrite it when SetDuration is called.Windows Animation always calls the SetInitialValueAndVelocity method to set the initial value and velocity before calling SetDuration, so a custom interpolator need not check whether the initial value and velocity have been set.Windows Animation can call SetInitialValueAndVelocity and SetDuration multiple times with different parameters. Interpolators can cache internal state to improve performance, but they must update this cached state each time SetInitialValueAndVelocity is called and ensure that the results of subsequent calls to SetDuration reflect the updated state.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator::SetDuration']/*"/>	
            <unmanaged>HRESULT IUIAnimationInterpolator::SetDuration([In] double duration)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Interpolator.GetDuration(System.Double@)">
            <summary>	
            Gets the duration of a transition.	
            </summary>	
            <param name="duration"><para>The duration of the transition.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Windows Animation always calls the SetInitialValueAndVelocity method to set the initial value and velocity before calling GetDuration, so a custom interpolator need not check whether the initial value and velocity have been set.Windows Animation can call SetInitialValueAndVelocity multiple times with different parameters. Interpolators can cache internal state to improve performance, but they must update this cached state each time SetInitialValueAndVelocity is called and ensure that the results of subsequent calls to GetDuration reflect the updated state.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator::GetDuration']/*"/>	
            <unmanaged>HRESULT IUIAnimationInterpolator::GetDuration([Out] double* duration)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Interpolator.GetFinalValue(System.Double@)">
            <summary>	
            Gets the final value at the end of the transition.	
            </summary>	
            <param name="value"><para>The final value.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code.  See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Windows Animation always calls the SetInitialValueAndVelocity method to set the initial value and velocity before calling GetFinalValue, so a custom interpolator need not check whether the initial value and velocity have been set.Windows Animation can call SetInitialValueAndVelocity multiple times with different parameters. Interpolators can cache internal state to improve performance, but they must update this cached state each time SetInitialValueAndVelocity is called and ensure that the results of subsequent calls to GetFinalValue reflect the updated state.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator::GetFinalValue']/*"/>	
            <unmanaged>HRESULT IUIAnimationInterpolator::GetFinalValue([Out] double* value)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Interpolator.InterpolateValue(System.Double)">
            <summary>	
            Interpolates the value of an animation variable at the specified offset.	
            </summary>	
            <param name="offset"><para> The offset from the start of the transition.</para> <para>This parameter is always greater than or equal to zero and less than the duration of the transition. This method is not called if the duration of the transition is zero.</para></param>	
            <returns><para>The interpolated value.</para></returns>	
            <remarks>	
            Windows Animation always calls the SetInitialValueAndVelocity method to set the initial value and velocity before calling InterpolateValue, so a custom interpolator need not check whether the initial value and velocity have been set.Windows Animation can call SetInitialValueAndVelocity multiple times with different parameters. Interpolators can cache internal state to improve performance, but they must update this cached state each time SetInitialValueAndVelocity is called and ensure that the results of subsequent calls to InterpolateValue reflect the updated state.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator::InterpolateValue']/*"/>	
            <unmanaged>HRESULT IUIAnimationInterpolator::InterpolateValue([In] double offset,[Out] double* value)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Interpolator.InterpolateVelocity(System.Double)">
            <summary>	
            Interpolates the velocity, or rate of change, at the specified offset.	
            </summary>	
            <param name="offset"><para>The offset from the start of the transition.</para> <para>The offset is always greater than or equal to zero and less than or equal to the duration of the transition. This method is not called if the duration of the transition is zero.</para></param>	
            <returns><para> The interpolated velocity.</para></returns>	
            <remarks>	
            Windows Animation always calls the SetInitialValueAndVelocity method to set the initial value and velocity before calling InterpolateVelocity, so a custom interpolator need not check whether the initial value and velocity have been set.Windows Animation can call SetInitialValueAndVelocity multiple times with different parameters. Interpolators can cache internal state to improve performance, but they must update this cached state each time SetInitialValueAndVelocity is called and ensure that the results of subsequent calls to InterpolateVelocity reflect the updated state.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator::InterpolateVelocity']/*"/>	
            <unmanaged>HRESULT IUIAnimationInterpolator::InterpolateVelocity([In] double offset,[Out] double* velocity)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Interpolator.GetDependencies(SharpDX.Animation.Dependencies@,SharpDX.Animation.Dependencies@,SharpDX.Animation.Dependencies@)">
            <summary>	
            Gets the aspects of the interpolator that depend on the initial value or velocity passed to SetInitialValueAndVelocity, or that depend on the duration passed to SetDuration.	
            </summary>	
            <param name="initialValueDependencies">No documentation.</param>	
            <param name="initialVelocityDependencies">No documentation.</param>	
            <param name="durationDependencies">No documentation.</param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            This method is called to identify which aspects of the custom interpolator are affected by certain inputs: value, velocity, and duration. For each of these inputs, the interpolator returns either of the following:The bitwise-OR of any members of <see cref="T:SharpDX.Animation.Dependencies"/> that apply. <see cref="F:SharpDX.Animation.Dependencies.None"/> if nothing depends on the input.For example, consider an interpolator (1) that accepts a final value as a parameter, (2) that always comes to a gradual stop at that final value, and (3) whose duration is determined by the difference between the final and initial values.  The interpolator should return <see cref="F:SharpDX.Animation.Dependencies.IntermediateValues"/>|UI_ANIMATION_DURATION for initialValueDependencies.  It should not return <see cref="F:SharpDX.Animation.Dependencies.FinalValue"/> because this is set when the interpolator is created and is not affected by the initial value. Likewise it should not return <see cref="F:SharpDX.Animation.Dependencies.FinalVelocity"/> because the slope of the curve is defined to always be zero when it reaches the final value.It is important that an interpolator return correct set of flags. If a flag is not present for an output, Windows Animation assumes that the corresponding parameter does not affect that aspect of the interpolator's results.  For example, if the custom interpolator does not include <see cref="F:SharpDX.Animation.Dependencies.FinalValue"/> for initialVelocityDependencies, Windows Animation may call SetInitialValueAndVelocity with an arbitrary velocity parameter, then call GetFinalValue to determine the final value.  The interpolator's implementation of GetFinalValue must return the same result no matter what velocity parameter has been passed to SetInitialValueAndVelocity because the interpolator has claimed that the transition's final value does not depend on the initial velocity.Note??If the flags returned for durationDependencies do not include <see cref="F:SharpDX.Animation.Dependencies.Duration"/>, SetDuration will never be called on the interpolator.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator::GetDependencies']/*"/>	
            <unmanaged>HRESULT IUIAnimationInterpolator::GetDependencies([Out] UI_ANIMATION_DEPENDENCIES* initialValueDependencies,[Out] UI_ANIMATION_DEPENDENCIES* initialVelocityDependencies,[Out] UI_ANIMATION_DEPENDENCIES* durationDependencies)</unmanaged>	
        </member>
        <member name="P:SharpDX.Animation.Interpolator.Duration">
            <summary>	
            Gets the duration of a transition.	
            </summary>	
            <remarks>	
            Windows Animation always calls the SetInitialValueAndVelocity method to set the initial value and velocity before calling GetDuration, so a custom interpolator need not check whether the initial value and velocity have been set.Windows Animation can call SetInitialValueAndVelocity multiple times with different parameters. Interpolators can cache internal state to improve performance, but they must update this cached state each time SetInitialValueAndVelocity is called and ensure that the results of subsequent calls to GetDuration reflect the updated state.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator::GetDuration']/*"/>	
            <unmanaged>GetDuration</unmanaged>	
            <unmanaged>HRESULT IUIAnimationInterpolator::GetDuration([Out] double* duration)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Interpolator.FinalValue">
            <summary>	
            Gets the final value at the end of the transition.	
            </summary>	
            <remarks>	
            Windows Animation always calls the SetInitialValueAndVelocity method to set the initial value and velocity before calling GetFinalValue, so a custom interpolator need not check whether the initial value and velocity have been set.Windows Animation can call SetInitialValueAndVelocity multiple times with different parameters. Interpolators can cache internal state to improve performance, but they must update this cached state each time SetInitialValueAndVelocity is called and ensure that the results of subsequent calls to GetFinalValue reflect the updated state.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationInterpolator::GetFinalValue']/*"/>	
            <unmanaged>GetFinalValue</unmanaged>	
            <unmanaged>HRESULT IUIAnimationInterpolator::GetFinalValue([Out] double* value)</unmanaged>
        </member>
        <member name="T:SharpDX.Animation.Manager">
            <summary>	
            Defines the animation manager, which provides a central interface for creating and managing animations.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager']/*"/>	
            <unmanaged>IUIAnimationManager</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Manager"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Animation.Manager.CreateAnimationVariable(System.Double,SharpDX.Animation.Variable)">
            <summary>	
            Creates a new animation variable.	
            </summary>	
            <param name="initialValue"><para> The initial value for the new animation variable.</para></param>	
            <param name="variable"><para> The new animation variable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            The initial value of an animation variable is specified when the variable is created. After an animation variable is created, its value cannot be changed directly; it must be updated through the animation manager.An animation variable is typically created to represent each visual characteristic that is to be animated. For example, an application might create two animation variables for the X and Y coordinates of an object that can move freely within a window.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::CreateAnimationVariable']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::CreateAnimationVariable([In] double initialValue,[Out, Fast] IUIAnimationVariable** variable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.ScheduleTransition(SharpDX.Animation.Variable,SharpDX.Animation.Transition,System.Double)">
            <summary>	
            Creates and schedules a single-transition storyboard.	
            </summary>	
            <param name="variable"><para> The animation variable.</para></param>	
            <param name="transition"><para> A transition to be applied to the animation variable.</para></param>	
            <param name="timeNow"><para> The current system time.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            This method schedules a new storyboard by creating the storyboard, applying the specified transition to the specified variable, and then scheduling the storyboard.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::ScheduleTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::ScheduleTransition([In] IUIAnimationVariable* variable,[In] IUIAnimationTransition* transition,[In] double timeNow)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.CreateStoryboard(SharpDX.Animation.Storyboard)">
            <summary>	
            Creates a new storyboard.	
            </summary>	
            <param name="storyboard"><para> The new storyboard.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Storyboards can specify complex coordinated updates to many animation variables. These updates happen in sequence or in parallel, and they are guaranteed to remain synchronized within the storyboard. A storyboard is created, populated with transitions on animation variables, and then scheduled.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::CreateStoryboard']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::CreateStoryboard([Out, Fast] IUIAnimationStoryboard** storyboard)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.FinishAllStoryboards(System.Double)">
            <summary>	
            Finishes all active storyboards within the specified time interval.	
            </summary>	
            <param name="completionDeadline"><para> The maximum time interval during which all storyboards must be finished.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Calling FinishAllStoryboards ensures that all active storyboards finish within the specified completion deadline. If a storyboard is scheduled to play past the deadline, it is compressed. A storyboard is considered active if its status is <see cref="F:SharpDX.Animation.StoryboardStatus.Playing"/> or <see cref="F:SharpDX.Animation.StoryboardStatus.Scheduled"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::FinishAllStoryboards']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::FinishAllStoryboards([In] double completionDeadline)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.AbandonAllStoryboards">
            <summary>	
            Abandons all active storyboards.	
            </summary>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Calling this method is equivalent to calling the <see cref="M:SharpDX.Animation.Storyboard.Abandon"/> method for each active storyboard. A storyboard is considered active if its status is <see cref="F:SharpDX.Animation.StoryboardStatus.Playing"/> or <see cref="F:SharpDX.Animation.StoryboardStatus.Scheduled"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::AbandonAllStoryboards']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::AbandonAllStoryboards()</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.Update(System.Double)">
            <summary>	
            Updates the values of all animation variables.	
            </summary>	
            <param name="timeNow"><para> The current system time. This parameter must be greater than or equal to 0.0.</para></param>	
            <returns><para>The result of the update. This parameter can be omitted from calls to this method.</para></returns>	
            <remarks>	
            Calling this method advances the animation manager to timeNow, changing statuses of storyboards as necessary and updating any animation variables to appropriate interpolated values. If the animation manager is paused, no storyboards or variables are updated. If the animation  mode is <see cref="F:SharpDX.Animation.Mode.Disabled"/>, all scheduled storyboards finish playing immediately. If the values of any variables change during this call, the value of updateResult is <see cref="F:SharpDX.Animation.UpdateResult.VariablesChanged"/>; otherwise, it is <see cref="F:SharpDX.Animation.UpdateResult.NoChange"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::Update']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::Update([In] double timeNow,[Out, Optional] UI_ANIMATION_UPDATE_RESULT* updateResult)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.GetVariableFromTag(System.IntPtr,System.Int32)">
            <summary>	
            Gets the animation variable with the specified tag.	
            </summary>	
            <param name="@object"><para> The object portion of the tag. This parameter can be <c>null</c>.</para></param>	
            <param name="id"><para> The identifier portion of the tag.</para></param>	
            <returns><para> The animation variable that matches the specified tag, or <c>null</c> if no match is found.</para></returns>	
            <remarks>	
            A tag is a pairing of an integer identifier (id) with a COM object (object). An application can use tags to identify animation variables and storyboards. <c>null</c> is a valid object component of a tag; therefore, the object parameter can be <c>null</c>.Tags are not necessarily unique; this method returns UI_E_AMBIGUOUS_MATCH if more than one animation variable exists with the specified tag.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::GetVariableFromTag']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::GetVariableFromTag([In, Optional] void* object,[In] unsigned int id,[Out] IUIAnimationVariable** variable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.GetStoryboardFromTag(System.IntPtr,System.Int32)">
            <summary>	
            Gets the storyboard with the specified tag.	
            </summary>	
            <param name="@object"><para> The object portion of the tag. This parameter can be <c>null</c>.</para></param>	
            <param name="id"><para> The identifier portion of the tag.</para></param>	
            <returns><para> The storyboard that matches the specified tag, or <c>null</c> if no match is found.</para></returns>	
            <remarks>	
            A tag is a pairing of an integer identifier (id) with a COM object (object). An application can use tags to identify animation variables and storyboards. <c>null</c> is a valid object component of a tag; therefore, the object parameter can be <c>null</c>.Tags are not necessarily unique; this method returns UI_E_AMBIGUOUS_MATCH if more than one storyboard exists with the specified tag.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::GetStoryboardFromTag']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::GetStoryboardFromTag([In, Optional] void* object,[In] unsigned int id,[Out] IUIAnimationStoryboard** storyboard)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.GetStatus(SharpDX.Animation.ManagerStatus@)">
            <summary>	
            Gets the status of the animation manager.	
            </summary>	
            <param name="status"><para> The status.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::GetStatus']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::GetStatus([Out] UI_ANIMATION_MANAGER_STATUS* status)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.SetAnimationMode(SharpDX.Animation.Mode)">
            <summary>	
            Sets the animation mode.	
            </summary>	
            <param name="mode"><para> The animation mode.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            This method is used to enable or disable animation globally. While animation is disabled, all storyboards finish immediately when they are scheduled. The default mode is <see cref="F:SharpDX.Animation.Mode.SystemDefault"/>, which lets Windows decide when to enable or disable animation in the application.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::SetAnimationMode']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::SetAnimationMode([In] UI_ANIMATION_MODE mode)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.Pause">
            <summary>	
            Pauses all animations.	
            </summary>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            When an animation manager is paused, its status is set to <see cref="F:SharpDX.Animation.ManagerStatus.Idle"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::Pause']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::Pause()</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.Resume">
            <summary>	
            Resumes all animations.	
            </summary>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            When an animation manager is resumed, and at least one animation is currently scheduled or playing, its status is set to <see cref="F:SharpDX.Animation.ManagerStatus.Busy"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::Resume']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::Resume()</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.SetManagerEventHandler_(System.IntPtr)">
            <summary>	
            Specifies a handler for animation manager status updates.	
            </summary>	
            <param name="handler"><para>The event handler to be called when the status of the animation manager changes.   The specified object must implement the <see cref="T:SharpDX.Animation.ManagerEventHandler"/> interface or be <c>null</c>. See Remarks section for more information.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Passing <c>null</c> for the handler parameter causes Windows Animation to release its reference to any handler object that you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::SetManagerEventHandler']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::SetManagerEventHandler([In, Optional] IUIAnimationManagerEventHandler* handler)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.SetCancelPriorityComparison_(System.IntPtr)">
            <summary>	
            Sets the priority comparison handler to be called to determine whether a scheduled storyboard can be canceled.	
            </summary>	
            <param name="comparison"><para> The priority comparison handler for cancelation.   The specified object must implement the <see cref="T:SharpDX.Animation.PriorityComparison"/> interface or be <c>null</c>. See Remarks.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Setting a priority comparison handler with this method enables the application to indicate when scheduling conflicts can be resolved by canceling storyboards.A scheduled storyboard can be canceled only if it has not started playing and the priority comparison object registered with this method returns <see cref="F:SharpDX.Result.Ok"/>. Canceled storyboards are completely removed from the schedule.Passing <c>null</c> for the comparison parameter causes Windows Animation to release its reference to any priority comparison handler object you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::SetCancelPriorityComparison']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::SetCancelPriorityComparison([In, Optional] IUIAnimationPriorityComparison* comparison)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.SetTrimPriorityComparison_(System.IntPtr)">
            <summary>	
            Sets the priority comparison handler to be called to determine whether a scheduled storyboard can be trimmed.	
            </summary>	
            <param name="comparison"><para>The priority comparison handler for trimming.   The specified object must implement the <see cref="T:SharpDX.Animation.PriorityComparison"/> interface or be <c>null</c>. See Remarks.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Setting a priority comparison handler with this method enables the application to indicate when  scheduling conflicts can be resolved by trimming the scheduled storyboard.A scheduled storyboard can be trimmed only if the priority comparison object registered with this method returns <see cref="F:SharpDX.Result.Ok"/>. If the new storyboard trims the scheduled storyboard,  the scheduled storyboard can no longer affect a variable once the new storyboard begins to animate that variable.Passing <c>null</c> for the comparison parameter causes Windows Animation to release its reference to any handler object you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::SetTrimPriorityComparison']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::SetTrimPriorityComparison([In, Optional] IUIAnimationPriorityComparison* comparison)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.SetCompressPriorityComparison_(System.IntPtr)">
            <summary>	
            Sets the priority comparison handler to be called to determine whether a scheduled storyboard can be compressed.	
            </summary>	
            <param name="comparison"><para> The priority comparison handler for compression.   The specified object must implement the <see cref="T:SharpDX.Animation.PriorityComparison"/> interface or be <c>null</c>. See Remarks. </para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Setting a priority comparison handler with this method enables the application to indicate when the scheduling conflicts can be resolved by compressing  the scheduled storyboard and any other storyboards animating the same variables.A storyboard can be compressed only if the priority comparison object registered with this method returns <see cref="F:SharpDX.Result.Ok"/> for all the other scheduled storyboards that will be affected by compression. When the storyboards are compressed, time is temporarily accelerated for affected storyboards, so they play faster.Passing <c>null</c> for the comparison parameter causes Windows Animation to release its reference to any handler object you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::SetCompressPriorityComparison']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::SetCompressPriorityComparison([In, Optional] IUIAnimationPriorityComparison* comparison)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.SetConcludePriorityComparison_(System.IntPtr)">
            <summary>	
            Sets the priority comparison handler to be called to determine whether a scheduled storyboard can be concluded.	
            </summary>	
            <param name="comparison"><para> The priority comparison handler for conclusion. The specified object must implement the <see cref="T:SharpDX.Animation.PriorityComparison"/> interface or be <c>null</c>. See Remarks.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Setting a priority comparison handler with this method enables the application to indicate when scheduling conflicts can be resolved by concluding the scheduled storyboard.A scheduled storyboard can be concluded only if it contains a loop with a repetition count of UI_ANIMATION_REPEAT_INDEFINITELY and the priority comparison object registered with this method returns <see cref="F:SharpDX.Result.Ok"/>. If the storyboard is concluded, the current repetition of the loop completes, and the reminder of the storyboard then plays.Passing <c>null</c> for the comparison parameter causes Windows Animation to release its reference to any handler object you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::SetConcludePriorityComparison']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::SetConcludePriorityComparison([In, Optional] IUIAnimationPriorityComparison* comparison)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.SetDefaultLongestAcceptableDelay(System.Double)">
            <summary>	
            Sets the default acceptable animation delay. This is the length of time that may pass before storyboards begin.	
            </summary>	
            <param name="delay"><para> The default delay. This parameter can be a positive value, or UI_ANIMATION_SECONDS_EVENTUALLY (-1) to indicate that any finite delay is acceptable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code.             See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            For a storyboard to be successfully scheduled, it must begin before the longest acceptable delay has elapsed. This delay is determined in the following order: the delay value set by calling <see cref="M:SharpDX.Animation.Storyboard.SetLongestAcceptableDelay(System.Double)"/> for this specific storyboard, the delay value set by calling this method, or 0.0 if neither method has been called.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::SetDefaultLongestAcceptableDelay']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::SetDefaultLongestAcceptableDelay([In] double delay)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.Shutdown">
            <summary>	
            Shuts down the animation manager and all its associated objects.	
            </summary>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Calling this method directs the animation manager, and all the objects it created, to  release all their references to other objects. After <see cref="M:SharpDX.Animation.Manager.Shutdown"/> has been called, no other methods may be called on the animation manager or any objects that it created. An application can call this method to clean up if there is any possibility that the application has introduced a reference cycle that includes some animation objects.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::Shutdown']/*"/>	
            <unmanaged>HRESULT IUIAnimationManager::Shutdown()</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Manager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Manager"/> class.
            </summary>
        </member>
        <member name="M:SharpDX.Animation.Manager.GetVariableFromTag(System.Int32,System.Object)">
            <summary>
            Gets the variable from tag.
            </summary>
            <param name="id">The id.</param>
            <param name="tagObject">The tag object. This parameter can be null.</param>
            <returns>A variable associated with this tag.</returns>
            <unmanaged>HRESULT IUIAnimationManager::GetVariableFromTag([In, Optional] void* object,[In] unsigned int id,[Out] IUIAnimationVariable** variable)</unmanaged>
        </member>
        <member name="M:SharpDX.Animation.Manager.GetStoryboardFromTag(System.Int32,System.Object)">
            <summary>
            Gets the storyboard from tag.
            </summary>
            <param name="id">The id.</param>
            <param name="tagObject">The tag object. This parameter can be null.</param>
            <returns>A storyboard associated with this tag.</returns>
            <unmanaged>HRESULT IUIAnimationManager::GetStoryboardFromTag([In, Optional] void* object,[In] unsigned int id,[Out] IUIAnimationStoryboard** storyboard)</unmanaged>
        </member>
        <member name="M:SharpDX.Animation.Manager.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:SharpDX.Animation.Manager.Status">
            <summary>	
            Gets the status of the animation manager.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::GetStatus']/*"/>	
            <unmanaged>GetStatus</unmanaged>	
            <unmanaged>HRESULT IUIAnimationManager::GetStatus([Out] UI_ANIMATION_MANAGER_STATUS* status)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Manager.AnimationMode">
            <summary>	
            Sets the animation mode.	
            </summary>	
            <remarks>	
            This method is used to enable or disable animation globally. While animation is disabled, all storyboards finish immediately when they are scheduled. The default mode is <see cref="F:SharpDX.Animation.Mode.SystemDefault"/>, which lets Windows decide when to enable or disable animation in the application.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::SetAnimationMode']/*"/>	
            <unmanaged>SetAnimationMode</unmanaged>	
            <unmanaged>HRESULT IUIAnimationManager::SetAnimationMode([In] UI_ANIMATION_MODE mode)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Manager.DefaultLongestAcceptableDelay">
            <summary>	
            Sets the default acceptable animation delay. This is the length of time that may pass before storyboards begin.	
            </summary>	
            <remarks>	
            For a storyboard to be successfully scheduled, it must begin before the longest acceptable delay has elapsed. This delay is determined in the following order: the delay value set by calling <see cref="M:SharpDX.Animation.Storyboard.SetLongestAcceptableDelay(System.Double)"/> for this specific storyboard, the delay value set by calling this method, or 0.0 if neither method has been called.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManager::SetDefaultLongestAcceptableDelay']/*"/>	
            <unmanaged>SetDefaultLongestAcceptableDelay</unmanaged>	
            <unmanaged>HRESULT IUIAnimationManager::SetDefaultLongestAcceptableDelay([In] double delay)</unmanaged>
        </member>
        <member name="E:SharpDX.Animation.Manager.StatusChanged">
            <summary>
            Occurs when [status changed].
            </summary>
        </member>
        <member name="P:SharpDX.Animation.Manager.CancelPriorityComparison">
            <summary>
            Sets the cancel priority comparison.
            </summary>
            <value>
            The cancel priority comparison.
            </value>
        </member>
        <member name="P:SharpDX.Animation.Manager.TrimPriorityComparison">
            <summary>
            Sets the trim priority comparison.
            </summary>
            <value>
            The trim priority comparison.
            </value>
        </member>
        <member name="P:SharpDX.Animation.Manager.CompressPriorityComparison">
            <summary>
            Sets the compress priority comparison.
            </summary>
            <value>
            The compress priority comparison.
            </value>
        </member>
        <member name="P:SharpDX.Animation.Manager.ConcludePriorityComparison">
            <summary>
            Sets the conclude priority comparison.
            </summary>
            <value>
            The conclude priority comparison.
            </value>
        </member>
        <member name="T:SharpDX.Animation.Manager.StatusChangedDelegate">
            <summary>
            A delegate to receive status changed events from the manager.
            </summary>
            <param name="newStatus">The new status.</param>
            <param name="previousStatus">The previous status.</param>
        </member>
        <member name="T:SharpDX.Animation.Manager.PriorityComparisonDelegate">
            <summary>
            A delegate used to resolve scheduling conflicts.
            </summary>
            <param name="scheduledStoryboard">The scheduled storyboard.</param>
            <param name="newStoryboard">The new storyboard.</param>
            <param name="priorityEffect">The priority effect.</param>
            <returns><c>true</c> if newStoryboard has priority. <c>false</c> if scheduledStoryboard has priority</returns>
        </member>
        <member name="T:SharpDX.Animation.ManagerEventHandler">
            <summary>	
            Defines a method for handling status updates to an animation manager.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationManagerEventHandler']/*"/>	
            <unmanaged>IUIAnimationManagerEventHandler</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.ManagerEventHandler.OnManagerStatusChanged(SharpDX.Animation.ManagerStatus,SharpDX.Animation.ManagerStatus)">
            <unmanaged>HRESULT IUIAnimationManagerEventHandler::OnManagerStatusChanged([In] UI_ANIMATION_MANAGER_STATUS newStatus,[In] UI_ANIMATION_MANAGER_STATUS previousStatus)</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.Storyboard">
            <summary>	
            Defines a storyboard, which contains a group of transitions that are synchronized relative to one another.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard']/*"/>	
            <unmanaged>IUIAnimationStoryboard</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Storyboard.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Storyboard"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Storyboard.AddTransition(SharpDX.Animation.Variable,SharpDX.Animation.Transition)" -->
        <member name="M:SharpDX.Animation.Storyboard.AddKeyframeAtOffset(SharpDX.Animation.KeyFrame,System.Double)">
            <summary>	
            Adds a keyframe at the specified offset from an existing keyframe.	
            </summary>	
            <param name="existingKeyframe"><para> The existing keyframe. To add a keyframe at an offset from the start of the storyboard, use the special keyframe UI_ANIMATION_KEYFRAME_STORYBOARD_START.</para></param>	
            <param name="offset"><para> The offset from the existing keyframe at which a new keyframe is to be added.</para></param>	
            <returns><para> The keyframe to be added.</para></returns>	
            <remarks>	
            A keyframe represents a moment in time within a storyboard and can be used to specify the start and end times of transitions. Because keyframes can be added at the ends of transitions, their offsets from the start of the storyboard may not be known until the storyboard is playing.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::AddKeyframeAtOffset']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::AddKeyframeAtOffset([In] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003* existingKeyframe,[In] double offset,[Out] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003** keyframe)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Storyboard.AddKeyframeAfterTransition(SharpDX.Animation.Transition)">
            <summary>	
            Adds a keyframe at the end of the specified transition.	
            </summary>	
            <param name="transition"><para> The transition after which a keyframe is to be added.</para></param>	
            <returns><para> The keyframe to be added.</para></returns>	
            <remarks>	
            A keyframe represents a moment in time within a storyboard and can be used to specify the start and end times of transitions. Because keyframes can be added at the ends of transitions, their offsets from the start of the storyboard may not be known until the storyboard is playing.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::AddKeyframeAfterTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::AddKeyframeAfterTransition([In] IUIAnimationTransition* transition,[Out] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003** keyframe)</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Storyboard.AddTransitionAtKeyframe(SharpDX.Animation.Variable,SharpDX.Animation.Transition,SharpDX.Animation.KeyFrame)" -->
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Storyboard.AddTransitionBetweenKeyframes(SharpDX.Animation.Variable,SharpDX.Animation.Transition,SharpDX.Animation.KeyFrame,SharpDX.Animation.KeyFrame)" -->
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Storyboard.RepeatBetweenKeyframes(SharpDX.Animation.KeyFrame,SharpDX.Animation.KeyFrame,System.Int32)" -->
        <member name="M:SharpDX.Animation.Storyboard.HoldVariable(SharpDX.Animation.Variable)">
            <summary>	
            Directs the storyboard to hold the specified animation variable at its final value until the storyboard ends.	
            </summary>	
            <param name="variable"><para> The animation variable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            When a storyboard is playing, it has exclusive access to any variables it animates unless the storyboard is trimmed by a higher priority storyboard. Typically, this exclusive access is released  when the last transition in the storyboard for that variable finishes playing. Applications can call this method to maintain exclusive access to the animation variable and hold the variable, at the final value of the last transition, until the end of the storyboard.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::HoldVariable']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::HoldVariable([In] IUIAnimationVariable* variable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Storyboard.SetLongestAcceptableDelay(System.Double)">
            <summary>	
            Sets the longest acceptable delay before the scheduled storyboard begins.	
            </summary>	
            <param name="delay"><para> The longest acceptable delay. This parameter can be a positive value, or UI_ANIMATION_SECONDS_EVENTUALLY (-1) to indicate that any finite delay is acceptable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            For a storyboard to be successfully scheduled, it must begin before the longest acceptable delay has elapsed. This delay is determined in the following order: the delay value set by calling this method, the delay value set by calling the <see cref="M:SharpDX.Animation.Manager.SetDefaultLongestAcceptableDelay(System.Double)"/> method, or 0.0 if neither of these methods has been called.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::SetLongestAcceptableDelay']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::SetLongestAcceptableDelay([In] double delay)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Storyboard.Schedule(System.Double)">
            <summary>	
            Directs the storyboard to schedule itself for play.	
            </summary>	
            <param name="timeNow"><para> The current time.</para></param>	
            <returns><para>The result of the scheduling request. This parameter can be omitted from calls to this method.</para></returns>	
            <remarks>	
            This method directs a storyboard to attempt to add itself to the schedule of playing storyboards. The rules are as follows:<para>If there are no playing storyboards animating any of the same animation variables, the attempt succeeds and the storyboard starts playing immediately.</para>	
               <para>If the storyboard has priority to cancel, trim, conclude, or compress conflicting storyboards, the attempt to schedule succeeds and the storyboard begins playing as soon as possible.</para>	
               <para>If the storyboard does not have priority, the attempt fails and the schedulingResult parameter is set to <see cref="F:SharpDX.Animation.SchedulingResult.InsufficientPriority"/>.</para>If this method is called from a handler for OnStoryboardStatusChanged events, the schedulingResult parameter is set to <see cref="F:SharpDX.Animation.SchedulingResult.Deferred"/>.  The only way to determine whether the storyboard is successfully scheduled is to set a storyboard event handler and check whether the storyboard's status ever becomes <see cref="F:SharpDX.Animation.StoryboardStatus.InsufficientPriority"/>.It is possible reuse a storyboard by calling Schedule again after its status has reached <see cref="F:SharpDX.Animation.StoryboardStatus.Ready"/>.  An attempt to schedule a storyboard when it is in any state other than <see cref="F:SharpDX.Animation.StoryboardStatus.Building"/> or <see cref="F:SharpDX.Animation.StoryboardStatus.Ready"/> fails, and  schedulingResult is set to <see cref="F:SharpDX.Animation.SchedulingResult.AlreadyScheduled"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::Schedule']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::Schedule([In] double timeNow,[Out, Optional] UI_ANIMATION_SCHEDULING_RESULT* schedulingResult)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Storyboard.Conclude">
            <summary>	
            Completes the current iteration of a keyframe loop that is in progress (where the loop is set to UI_ANIMATION_REPEAT_INDEFINITELY), terminates the loop, and continues with the storyboard.	
            </summary>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            This method specifies that any subsequent  keyframe loops that have a repetition count of UI_ANIMATION_REPEAT_INDEFINITELY (-1) will be skipped while the remainder of the storyboard is played.An iteration of a keyframe loop that is in progress will be completed before the remainder of the storyboard plays.If this method is called  at the end  of a keyframe loop iteration, the loop is terminated and the loop value is set to the starting loop value.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::Conclude']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::Conclude()</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Storyboard.Finish(System.Double)">
            <summary>	
            Finishes the storyboard within the specified time, compressing the storyboard if necessary.	
            </summary>	
            <param name="completionDeadline"><para> The maximum amount of time that the storyboard can use to finish playing.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            This method has no effect on storyboard events. Events continue to be raised as expected while the storyboard plays.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::Finish']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::Finish([In] double completionDeadline)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Storyboard.Abandon">
            <summary>	
            Terminates the storyboard, releases all related animation variables, and removes the storyboard from the schedule.	
            </summary>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            This method can be called before or after the storyboard starts playing.This method does not trigger any storyboard events.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::Abandon']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::Abandon()</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Storyboard.SetTag(System.IntPtr,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Storyboard.GetTag(System.IntPtr@,System.Int32@)" -->
        <member name="M:SharpDX.Animation.Storyboard.GetStatus(SharpDX.Animation.StoryboardStatus@)">
            <summary>	
            Gets the status of the storyboard.	
            </summary>	
            <param name="status"><para> The storyboard status.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Unless this method is called from a handler for OnStoryboardStatusChanged events, the only values it returns are <see cref="F:SharpDX.Animation.StoryboardStatus.Building"/>, <see cref="F:SharpDX.Animation.StoryboardStatus.Scheduled"/>,	
            <see cref="F:SharpDX.Animation.StoryboardStatus.Playing"/>, and <see cref="F:SharpDX.Animation.StoryboardStatus.Ready"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::GetStatus']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::GetStatus([Out] UI_ANIMATION_STORYBOARD_STATUS* status)</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Storyboard.GetElapsedTime(System.Double@)" -->
        <member name="M:SharpDX.Animation.Storyboard.SetStoryboardEventHandler_(System.IntPtr)">
            <summary>	
            Specifies a handler for storyboard events.	
            </summary>	
            <param name="handler"><para> The handler to be called whenever storyboard status and update events occur. The specified object must implement the <see cref="T:SharpDX.Animation.StoryboardEventHandler"/> interface or be <c>null</c>. See Remarks.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Passing <c>null</c> for the handler parameter causes Windows Animation to release its reference to any handler object you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::SetStoryboardEventHandler']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::SetStoryboardEventHandler([In, Optional] IUIAnimationStoryboardEventHandler* handler)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Storyboard.#ctor(SharpDX.Animation.Manager)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Storyboard"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:SharpDX.Animation.Storyboard.RepeatBetweenKeyframes(SharpDX.Animation.KeyFrame,SharpDX.Animation.KeyFrame,SharpDX.Animation.RepeatCount)">
            <!-- Failed to insert some or all of included XML --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::RepeatBetweenKeyframes']/*"/>	
            <unmanaged>HRESULT IUIAnimationStoryboard::RepeatBetweenKeyframes([In] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003* startKeyframe,[In] __MIDL___MIDL_itf_UIAnimation_0000_0002_0003* endKeyframe,[In] int repetitionCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Storyboard.SetTag(System.Object,System.Int32)">
            <summary>
            Sets the tag.
            </summary>
            <param name="object">The @object.</param>
            <param name="id">The id.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IUIAnimationStoryboard::SetTag([In, Optional] void* object,[In] unsigned int id)</unmanaged>
        </member>
        <member name="M:SharpDX.Animation.Storyboard.GetTag(System.Object@,System.Int32@)">
            <summary>
            Gets the tag.
            </summary>
            <param name="object">The @object.</param>
            <param name="id">The id.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IUIAnimationStoryboard::GetTag([Out, Optional] void** object,[Out, Optional] unsigned int* id)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Storyboard.LongestAcceptableDelay">
            <summary>	
            Sets the longest acceptable delay before the scheduled storyboard begins.	
            </summary>	
            <remarks>	
            For a storyboard to be successfully scheduled, it must begin before the longest acceptable delay has elapsed. This delay is determined in the following order: the delay value set by calling this method, the delay value set by calling the <see cref="M:SharpDX.Animation.Manager.SetDefaultLongestAcceptableDelay(System.Double)"/> method, or 0.0 if neither of these methods has been called.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::SetLongestAcceptableDelay']/*"/>	
            <unmanaged>SetLongestAcceptableDelay</unmanaged>	
            <unmanaged>HRESULT IUIAnimationStoryboard::SetLongestAcceptableDelay([In] double delay)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Storyboard.Status">
            <summary>	
            Gets the status of the storyboard.	
            </summary>	
            <remarks>	
            Unless this method is called from a handler for OnStoryboardStatusChanged events, the only values it returns are <see cref="F:SharpDX.Animation.StoryboardStatus.Building"/>, <see cref="F:SharpDX.Animation.StoryboardStatus.Scheduled"/>,	
            <see cref="F:SharpDX.Animation.StoryboardStatus.Playing"/>, and <see cref="F:SharpDX.Animation.StoryboardStatus.Ready"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::GetStatus']/*"/>	
            <unmanaged>GetStatus</unmanaged>	
            <unmanaged>HRESULT IUIAnimationStoryboard::GetStatus([Out] UI_ANIMATION_STORYBOARD_STATUS* status)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Storyboard.ElapsedTime">
            <summary>	
            Gets the time that has elapsed since the storyboard started playing.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboard::GetElapsedTime']/*"/>	
            <unmanaged>GetElapsedTime</unmanaged>	
            <unmanaged>HRESULT IUIAnimationStoryboard::GetElapsedTime([Out] double* elapsedTime)</unmanaged>
        </member>
        <member name="T:SharpDX.Animation.StoryboardEventHandler">
            <summary>	
            Defines methods for handling status and update events for a storyboard.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationStoryboardEventHandler']/*"/>	
            <unmanaged>IUIAnimationStoryboardEventHandler</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.Timer">
            <summary>	
            Defines an animation timer, which provides services for managing animation timing.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer']/*"/>	
            <unmanaged>IUIAnimationTimer</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Timer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Timer"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Animation.Timer.SetTimerUpdateHandler_(System.IntPtr,SharpDX.Animation.IdleBehavior)">
            <summary>	
            Specifies a timer update handler.	
            </summary>	
            <param name="updateHandler"><para> A timer update handler, or <c>null</c> (see Remarks).  The specified object must implement the <see cref="T:SharpDX.Animation.TimerUpdateHandler"/> interface.</para></param>	
            <param name="idleBehavior"><para> A member of  <see cref="T:SharpDX.Animation.IdleBehavior"/> that specifies the behavior of the timer when it is idle.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. If the update handler is already connected to a timer, this method returns UI_E_TIMER_CLIENT_ALREADY_CONNECTED. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            The timer update handler receives time updates (ticks) from the timer. The timer indicates an update by calling  the <see cref="!:SharpDX.Animation.TimerUpdateHandler.OnUpdate"/> method on the specified handler.Passing <c>null</c> for the updateHandler parameter causes Windows Animation to release its reference to any handler object you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::SetTimerUpdateHandler']/*"/>	
            <unmanaged>HRESULT IUIAnimationTimer::SetTimerUpdateHandler([In, Optional] IUIAnimationTimerUpdateHandler* updateHandler,[In] UI_ANIMATION_IDLE_BEHAVIOR idleBehavior)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Timer.SetTimerEventHandler_(System.IntPtr)">
            <summary>	
            Specifies a timer event handler.	
            </summary>	
            <param name="handler"><para> A timer event handler.  The specified object must implement the <see cref="T:SharpDX.Animation.TimerEventHandler"/> interface or be <c>null</c>. See Remarks.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Timing events include the OnPreUpdate, OnPostUpdate, and OnRenderingTooSlow methods of the <see cref="T:SharpDX.Animation.TimerEventHandler"/> interface.Passing <c>null</c> for the handler parameter causes Windows Animation to release its reference to any handler object you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::SetTimerEventHandler']/*"/>	
            <unmanaged>HRESULT IUIAnimationTimer::SetTimerEventHandler([In, Optional] IUIAnimationTimerEventHandler* handler)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Timer.Enable">
            <summary>	
            Enables the animation timer.	
            </summary>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::Enable']/*"/>	
            <unmanaged>HRESULT IUIAnimationTimer::Enable()</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Timer.Disable">
            <summary>	
            Disables the animation timer.	
            </summary>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::Disable']/*"/>	
            <unmanaged>HRESULT IUIAnimationTimer::Disable()</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Timer.IsEnabled_">
            <summary>	
            Determines whether the timer is currently enabled.	
            </summary>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if the animation timer is enabled, S_FALSE if the animation timer is disabled, or an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::IsEnabled']/*"/>	
            <unmanaged>HRESULT IUIAnimationTimer::IsEnabled()</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Timer.GetTime(System.Double@)">
            <summary>	
            Gets the current time.	
            </summary>	
            <param name="seconds"><para> The current time, in UI_ANIMATION_SECONDS.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            This method can be used in both the application-driven and timer-driven  configurations to retrieve the system time in UI_ANIMATION_SECONDS, the units used throughout the Windows Animation API.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::GetTime']/*"/>	
            <unmanaged>HRESULT IUIAnimationTimer::GetTime([Out] double* seconds)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Timer.SetFrameRateThreshold(System.Int32)">
            <summary>	
            Sets the frame rate below which the timer notifies the application that rendering is too slow.	
            </summary>	
            <param name="framesPerSecond"><para> The minimum desirable frame rate, in frames per second.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            If the rendering frame rate for an animation falls below the specified frame rate, an  <see cref="!:SharpDX.Animation.TimerEventHandler.OnRenderingTooSlow"/> event is raised.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::SetFrameRateThreshold']/*"/>	
            <unmanaged>HRESULT IUIAnimationTimer::SetFrameRateThreshold([In] unsigned int framesPerSecond)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Timer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Timer"/> class.
            </summary>
        </member>
        <member name="P:SharpDX.Animation.Timer.IsEnabled">
            <summary>	
            Determines whether the timer is currently enabled.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::IsEnabled']/*"/>	
            <unmanaged>IsEnabled</unmanaged>	
            <unmanaged>HRESULT IUIAnimationTimer::IsEnabled()</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Timer.Time">
            <summary>	
            Gets the current time.	
            </summary>	
            <remarks>	
            This method can be used in both the application-driven and timer-driven  configurations to retrieve the system time in UI_ANIMATION_SECONDS, the units used throughout the Windows Animation API.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::GetTime']/*"/>	
            <unmanaged>GetTime</unmanaged>	
            <unmanaged>HRESULT IUIAnimationTimer::GetTime([Out] double* seconds)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Timer.FrameRateThreshold">
            <summary>	
            Sets the frame rate below which the timer notifies the application that rendering is too slow.	
            </summary>	
            <remarks>	
            If the rendering frame rate for an animation falls below the specified frame rate, an  <see cref="!:SharpDX.Animation.TimerEventHandler.OnRenderingTooSlow"/> event is raised.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimer::SetFrameRateThreshold']/*"/>	
            <unmanaged>SetFrameRateThreshold</unmanaged>	
            <unmanaged>HRESULT IUIAnimationTimer::SetFrameRateThreshold([In] unsigned int framesPerSecond)</unmanaged>
        </member>
        <member name="T:SharpDX.Animation.TimerClientEventHandler">
            <summary>	
            Defines a method for handling events related to changes in timer client status.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimerClientEventHandler']/*"/>	
            <unmanaged>IUIAnimationTimerClientEventHandler</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.TimerEventHandler">
            <summary>	
            Defines methods for handling timing events.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimerEventHandler']/*"/>	
            <unmanaged>IUIAnimationTimerEventHandler</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.TimerUpdateHandler">
            <summary>	
            Defines methods for handling timing update events.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTimerUpdateHandler']/*"/>	
            <unmanaged>IUIAnimationTimerUpdateHandler</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.TransitionFactory">
            <summary>	
            Defines a method for creating transitions from custom interpolators.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionFactory']/*"/>	
            <unmanaged>IUIAnimationTransitionFactory</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionFactory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.TransitionFactory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Animation.TransitionFactory.CreateTransition(SharpDX.Animation.Interpolator,SharpDX.Animation.Transition)">
            <summary>	
            Creates a transition from a custom interpolator.	
            </summary>	
            <param name="interpolator"><para> The interpolator from which a transition is to be created.   The specified object must implement the <see cref="T:SharpDX.Animation.Interpolator"/> interface.</para></param>	
            <param name="transition"><para> The new transition.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationTransitionFactory::CreateTransition']/*"/>	
            <unmanaged>HRESULT IUIAnimationTransitionFactory::CreateTransition([In] IUIAnimationInterpolator* interpolator,[Out, Fast] IUIAnimationTransition** transition)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.TransitionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.TransitionFactory"/> class.
            </summary>
        </member>
        <member name="T:SharpDX.Animation.Variable">
            <summary>	
            Defines an animation variable, which represents a visual element that can be animated.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable']/*"/>	
            <unmanaged>IUIAnimationVariable</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Variable"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.Animation.Variable.GetValue(System.Double@)">
            <summary>	
            Gets the current value of the animation variable.	
            </summary>	
            <param name="value"><para> The current value of the animation variable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            The results can be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetValue']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::GetValue([Out] double* value)</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Variable.GetFinalValue(System.Double@)" -->
        <member name="M:SharpDX.Animation.Variable.GetPreviousValue(System.Double@)">
            <summary>	
            Gets the previous value of the animation variable. This is the value of the animation variable before the most recent update.	
            </summary>	
            <param name="reviousValueRef"><para> The previous value of the animation variable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            The results can be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetPreviousValue']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::GetPreviousValue([Out] double* previousValue)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.GetIntegerValue(System.Int32@)">
            <summary>	
            Gets the current value of the animation variable as an integer.	
            </summary>	
            <param name="value"><para> The current value of the animation variable, converted to an INT32 value.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            To specify the rounding mode to be used when converting the value, use the <see cref="M:SharpDX.Animation.Variable.SetRoundingMode(SharpDX.Animation.RoundingMode)"/> method.The result can also be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetIntegerValue']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::GetIntegerValue([Out] int* value)</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Variable.GetFinalIntegerValue(System.Int32@)" -->
        <member name="M:SharpDX.Animation.Variable.GetPreviousIntegerValue(System.Int32@)">
            <summary>	
            Gets the previous value of the animation variable as an integer.       This is the value of the animation variable before the most recent update.	
            </summary>	
            <param name="reviousValueRef"><para> The previous value of the animation variable, converted to an INT32 value.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            To specify the rounding mode to be used when converting the value, use the <see cref="M:SharpDX.Animation.Variable.SetRoundingMode(SharpDX.Animation.RoundingMode)"/> method.The result can also be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetPreviousIntegerValue']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::GetPreviousIntegerValue([Out] int* previousValue)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.GetCurrentStoryboard(SharpDX.Animation.Storyboard@)">
            <summary>	
            Gets the storyboard that is currently animating the animation variable.	
            </summary>	
            <param name="storyboard"><para>The current storyboard, or <c>null</c> if no storyboard is currently animating the animation variable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See UIAnimation Error Codes for a list of error codes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetCurrentStoryboard']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::GetCurrentStoryboard([Out] IUIAnimationStoryboard** storyboard)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)">
            <summary>	
            Sets the lower bound (floor) for the animation variable. The value of the animation variable should not fall below the specified value.	
            </summary>	
            <param name="bound"><para> The lower bound for the animation variable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::SetLowerBound']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::SetLowerBound([In] double bound)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)">
            <summary>	
            Sets an upper bound (ceiling) for the animation variable. The value of the animation variable should not rise above the specified value.	
            </summary>	
            <param name="bound"><para> The upper bound for the animation variable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::SetUpperBound']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::SetUpperBound([In] double bound)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.SetRoundingMode(SharpDX.Animation.RoundingMode)">
            <summary>	
            Specifies the rounding mode for the animation variable.	
            </summary>	
            <param name="mode"><para> The rounding mode for the animation variable.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            An animation variable's rounding mode determines how a floating-point value is converted to an integer. The default mode for each variable is <see cref="F:SharpDX.Animation.RoundingMode.RoundingNearest"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::SetRoundingMode']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::SetRoundingMode([In] UI_ANIMATION_ROUNDING_MODE mode)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.SetTag(System.IntPtr,System.Int32)">
            <summary>	
            Sets the tag for an animation variable.	
            </summary>	
            <param name="@object"><para> The object portion of the tag. This parameter can be <c>null</c>.</para></param>	
            <param name="id"><para> The identifier portion  of the tag.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            A tag is a pairing of an integer identifier (id) with a COM object (object); it can be used by an application to identify an animation variable.           Because <c>null</c> is a valid object component of a tag, the object parameter can be <c>null</c>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::SetTag']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::SetTag([In, Optional] void* object,[In] unsigned int id)</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.Animation.Variable.GetTag(System.IntPtr@,System.Int32@)" -->
        <member name="M:SharpDX.Animation.Variable.SetVariableChangeHandler_(System.IntPtr)">
            <summary>	
            Specifies a variable change handler. This handler is notified of changes to the value of the animation variable.	
            </summary>	
            <param name="handler"><para> A variable change handler.   The specified object must implement the <see cref="T:SharpDX.Animation.VariableChangeHandler"/> interface or be <c>null</c>. See Remarks.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Windows Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Passing <c>null</c> for the handler parameter causes Windows Animation to release its reference to any handler object you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::SetVariableChangeHandler']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::SetVariableChangeHandler([In, Optional] IUIAnimationVariableChangeHandler* handler)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.SetVariableIntegerChangeHandler_(System.IntPtr)">
            <summary>	
            Specifies an integer variable change handler. This handler is notified of changes to the integer value of the animation variable.	
            </summary>	
            <param name="handler"><para> An integer variable change handler.   The specified object must implement the <see cref="T:SharpDX.Animation.VariableIntegerChangeHandler"/> interface or be <c>null</c>. See Remarks.</para></param>	
            <returns>If the method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code. See Winodws Animation Error Codes for a list of error codes.</returns>	
            <remarks>	
            Passing <c>null</c> for the handler parameter causes Windows Animation to release its reference to any handler object you passed in earlier. This technique can be essential for breaking reference cycles without having to call the <see cref="M:SharpDX.Animation.Manager.Shutdown"/> method.<see cref="!:SharpDX.Animation.VariableIntegerChangeHandler.OnIntegerValueChanged"/> is called only if the rounded value has changed since the last update.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::SetVariableIntegerChangeHandler']/*"/>	
            <unmanaged>HRESULT IUIAnimationVariable::SetVariableIntegerChangeHandler([In, Optional] IUIAnimationVariableIntegerChangeHandler* handler)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.#ctor(SharpDX.Animation.Manager,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Animation.Variable"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="initialValue">The initial value.</param>
            <unmanaged>HRESULT IUIAnimationManager::CreateAnimationVariable([In] double initialValue,[Out] IUIAnimationVariable** variable)</unmanaged>	
        </member>
        <member name="M:SharpDX.Animation.Variable.SetTag(System.Object,System.Int32)">
            <summary>
            Sets the tag.
            </summary>
            <param name="object">The @object.</param>
            <param name="id">The id.</param>
            <returns>A <see cref="T:SharpDX.Result"/> object describing the result of the operation.</returns>
            <unmanaged>HRESULT IUIAnimationStoryboard::SetTag([In, Optional] void* object,[In] unsigned int id)</unmanaged>
        </member>
        <member name="M:SharpDX.Animation.Variable.GetTag(System.Object@,System.Int32@)">
            <summary>
            Gets the tag.
            </summary>
            <param name="object">The @object.</param>
            <param name="id">The id.</param>
            <returns>
            A <see cref="T:SharpDX.Result"/> object describing the result of the operation.
            </returns>
            <unmanaged>HRESULT IUIAnimationStoryboard::GetTag([Out, Optional] void** object,[Out, Optional] unsigned int* id)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.Value">
            <summary>	
            Gets the current value of the animation variable.	
            </summary>	
            <remarks>	
            The results can be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetValue']/*"/>	
            <unmanaged>GetValue</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::GetValue([Out] double* value)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.FinalValue">
            <summary>	
            Gets the final value of the animation variable.   This is the value after all currently scheduled animations have completed.	
            </summary>	
            <remarks>	
            The result can be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetFinalValue']/*"/>	
            <unmanaged>GetFinalValue</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::GetFinalValue([Out] double* finalValue)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.PreviousValue">
            <summary>	
            Gets the previous value of the animation variable. This is the value of the animation variable before the most recent update.	
            </summary>	
            <remarks>	
            The results can be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetPreviousValue']/*"/>	
            <unmanaged>GetPreviousValue</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::GetPreviousValue([Out] double* previousValue)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.IntegerValue">
            <summary>	
            Gets the current value of the animation variable as an integer.	
            </summary>	
            <remarks>	
            To specify the rounding mode to be used when converting the value, use the <see cref="M:SharpDX.Animation.Variable.SetRoundingMode(SharpDX.Animation.RoundingMode)"/> method.The result can also be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetIntegerValue']/*"/>	
            <unmanaged>GetIntegerValue</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::GetIntegerValue([Out] int* value)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.FinalIntegerValue">
            <summary>	
            Gets the final value of the animation variable as an integer.       This is the value after all currently scheduled animations have completed.	
            </summary>	
            <remarks>	
            To specify the rounding mode to be used when converting the value, use the <see cref="M:SharpDX.Animation.Variable.SetRoundingMode(SharpDX.Animation.RoundingMode)"/> method.The result can also be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetFinalIntegerValue']/*"/>	
            <unmanaged>GetFinalIntegerValue</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::GetFinalIntegerValue([Out] int* finalValue)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.PreviousIntegerValue">
            <summary>	
            Gets the previous value of the animation variable as an integer.       This is the value of the animation variable before the most recent update.	
            </summary>	
            <remarks>	
            To specify the rounding mode to be used when converting the value, use the <see cref="M:SharpDX.Animation.Variable.SetRoundingMode(SharpDX.Animation.RoundingMode)"/> method.The result can also be affected by the lower and upper bounds determined by <see cref="M:SharpDX.Animation.Variable.SetLowerBound(System.Double)"/> and <see cref="M:SharpDX.Animation.Variable.SetUpperBound(System.Double)"/>, respectively.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetPreviousIntegerValue']/*"/>	
            <unmanaged>GetPreviousIntegerValue</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::GetPreviousIntegerValue([Out] int* previousValue)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.CurrentStoryboard">
            <summary>	
            Gets the storyboard that is currently animating the animation variable.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::GetCurrentStoryboard']/*"/>	
            <unmanaged>GetCurrentStoryboard</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::GetCurrentStoryboard([Out] IUIAnimationStoryboard** storyboard)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.LowerBound">
            <summary>	
            Sets the lower bound (floor) for the animation variable. The value of the animation variable should not fall below the specified value.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::SetLowerBound']/*"/>	
            <unmanaged>SetLowerBound</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::SetLowerBound([In] double bound)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.UpperBound">
            <summary>	
            Sets an upper bound (ceiling) for the animation variable. The value of the animation variable should not rise above the specified value.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::SetUpperBound']/*"/>	
            <unmanaged>SetUpperBound</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::SetUpperBound([In] double bound)</unmanaged>
        </member>
        <member name="P:SharpDX.Animation.Variable.RoundingMode">
            <summary>	
            Specifies the rounding mode for the animation variable.	
            </summary>	
            <remarks>	
            An animation variable's rounding mode determines how a floating-point value is converted to an integer. The default mode for each variable is <see cref="F:SharpDX.Animation.RoundingMode.RoundingNearest"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariable::SetRoundingMode']/*"/>	
            <unmanaged>SetRoundingMode</unmanaged>	
            <unmanaged>HRESULT IUIAnimationVariable::SetRoundingMode([In] UI_ANIMATION_ROUNDING_MODE mode)</unmanaged>
        </member>
        <member name="T:SharpDX.Animation.VariableChangeHandler">
            <summary>	
            Defines a method for handling events related to animation variable updates.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariableChangeHandler']/*"/>	
            <unmanaged>IUIAnimationVariableChangeHandler</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.VariableIntegerChangeHandler">
            <summary>	
            Defines a method for handling animation variable update events.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IUIAnimationVariableIntegerChangeHandler']/*"/>	
            <unmanaged>IUIAnimationVariableIntegerChangeHandler</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.ManagerEventHandlerShadow">
            <summary>
            Internal ManagerEventHandler Callback
            </summary>
        </member>
        <member name="M:SharpDX.Animation.ManagerEventHandlerShadow.ToIntPtr(SharpDX.Animation.ManagerEventHandler)">
            <summary>
            Return a pointer to the unamanged version of this callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns>A pointer to a shadow c++ callback</returns>
        </member>
        <member name="T:SharpDX.Animation.ManagerEventHandlerShadow.ManagerEventHandlerVtbl.OnManagerStatusChangedDelegate">
            <unmanaged>HRESULT IUIAnimationManagerEventHandler::OnManagerStatusChanged([In] UI_ANIMATION_MANAGER_STATUS newStatus,[In] UI_ANIMATION_MANAGER_STATUS previousStatus)</unmanaged>	
        </member>
        <member name="T:SharpDX.Animation.RepeatCount">
            <summary>
            Repeat count used for <see cref="M:SharpDX.Animation.Storyboard.RepeatBetweenKeyframes(SharpDX.Animation.KeyFrame,SharpDX.Animation.KeyFrame,SharpDX.Animation.RepeatCount)"/>
            </summary>
        </member>
        <member name="F:SharpDX.Animation.RepeatCount.Indefinitely">
            <summary>
            Indicates that the interval between two keyframes in a storyboard should repeat indefinitely until the <see cref="M:SharpDX.Animation.Storyboard.Conclude"/> method is called.
            </summary>
            <unmanaged>UI_ANIMATION_REPEAT_INDEFINITELY</unmanaged>
        </member>
        <member name="F:SharpDX.Animation.RepeatCount.IndefinitelyConcludeAtEnd">
            <summary>
            Indicates that the interval between two keyframes in a storyboard should repeat indefinitely until the keyframe loop terminates on the ending keyframe when the <see cref="M:SharpDX.Animation.Storyboard.Conclude"/> method is called.
            </summary>
            <unmanaged>UI_ANIMATION_REPEAT_INDEFINITELY_CONCLUDE_AT_END</unmanaged>
        </member>
        <member name="F:SharpDX.Animation.RepeatCount.IndefinitelyConcludeAtStart">
            <summary>
            Indicates that the interval between two keyframes in a storyboard should repeat indefinitely until the keyframe loop terminates on the starting keyframe when the <see cref="M:SharpDX.Animation.Storyboard.Conclude"/> method is called.
            </summary>
            <unmanaged>UI_ANIMATION_REPEAT_INDEFINITELY_CONCLUDE_AT_START</unmanaged>
        </member>
    </members>
</doc>
