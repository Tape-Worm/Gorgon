<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gorgon.Graphics</name>
    </assembly>
    <members>
        <member name="T:GorgonLibrary.Graphics.GorgonShaderInclude">
            <summary>
            An include file for a shader.
            </summary>
            <remarks>Use this object to load in #include definitions for a shader.  If the shader source contains an #include, it will try to locate that include file on the file system.  However, this does not work when the files are 
            loaded from a stream object (it wouldn't know where to find the include file).  So to facilitate this, this object will contain the source for the include file and will be looked up -before- the file system is 
            checked for the include file.
            <para>Gorgon does not use the #include keyword for HLSL, Ss it will not interfere with it.  However a new keyword must be used: '#GorgonInclude "&lt;include name&gt;"[, "&lt;include path&gt;"]'.  This keyword takes 2 parameters 
            unlike the 1 parameter for #include.  The first parameter is the name of the include file, this is defined by the user.  The second parameter is the path to the include file.  The first parameter is required, but the second is optional.</para>
            <para>The include object is only for shaders with source code, therefore, the objects will be ignored when used with a binary shader.  Binary shaders should already have the required information in them.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderInclude.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonShaderInclude"/> struct.
            </summary>
            <param name="includeName">Name of the include file.</param>
            <param name="includeSource">The include source code.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="includeName"/> parameters is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the includeName parameter is empty.</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderInclude.SourceCode">
            <summary>
            Property to return the source code for the include file.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderInclude.Name">
            <summary>
            Property to return the name of the include file.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderVersion">
            <summary>
            Version for the shaders.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderVersion.Version5">
            <summary>
            Shader model 5.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderVersion.Version4">
            <summary>
            Shader model 4.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderVersion.Version4_1">
            <summary>
            Shader model 4, profile 1.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderVersion.Version2a_b">
            <summary>
            Shader model 2, vertex shader profile a, pixel shader profile b.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ShaderType">
            <summary>
            Shader types.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderType.Vertex">
            <summary>
            Vertex shader.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderType.Pixel">
            <summary>
            Pixel shader.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderType.Geometry">
            <summary>
            Geometry shader.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderType.Compute">
            <summary>
            Compute shader.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderType.Domain">
            <summary>
            Domain shader.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ShaderType.Hull">
            <summary>
            Hull shader.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonShader">
            <summary>
            The base shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.GetD3DVersion">
            <summary>
            Function to retrieve the Direct3D shader version.
            </summary>
            <returns>The Direct3D shader version.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.CompileFromSource(System.Boolean)">
            <summary>
            Function to compile the shader.
            </summary>
            <param name="includeDebugInfo">TRUE to include debug information, FALSE to exclude it.</param>
            <returns>The compiled shader byte code.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.CreateShader(SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
            Function to create the shader.
            </summary>
            <param name="byteCode">Byte code for the shader.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.LoadShader">
            <summary>
            Function to load a shader from preexisting byte code.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.Compile">
            <summary>
            Function to compile the shader.
            </summary>
            <remarks>Whenever a shader is changed (i.e. its <see cref="P:GorgonLibrary.Graphics.GorgonShader.SourceCode">SourceCode</see> parameter is modified), this method should be called to build the shader.</remarks>
            <exception cref="T:System.NotSupportedException">Thrown when the shader is not supported by the current supported feature level for the video hardware.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the shader fails to compile.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.Save(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Function to save the shader to a stream.
            </summary>
            <param name="stream">Stream to write into.</param>
            <param name="binary">TRUE to save the binary version of the shader, FALSE to save the source.</param>
            <param name="saveDebug">TRUE to save the debug information, FALSE to exclude it.</param>
            <remarks>The <paramref name="saveDebug"/> parameter is only applicable when the <paramref name="binary"/> parameter is set to TRUE.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the shader is being saved as source code and the <see cref="P:GorgonLibrary.Graphics.GorgonShader.SourceCode">SourceCode</see> parameter is NULL (Nothing in VB.Net) or empty.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the shader fails to compile.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.Save(System.String,System.Boolean,System.Boolean)">
            <summary>
            Function to save the shader to a file.
            </summary>
            <param name="fileName">File name and path for the shader file.</param>
            <param name="binary">TRUE if saving as a binary version of the shader, FALSE if not.</param>
            <param name="saveDebug">TRUE to save debug information with the shader, FALSE to exclude it.</param>
            <remarks>The <paramref name="saveDebug"/> parameter is only applicable when the <paramref name="binary"/> parameter is set to TRUE.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="fileName"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown is the fileName parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the shader is being saved as source code and the <see cref="P:GorgonLibrary.Graphics.GorgonShader.SourceCode">SourceCode</see> parameter is NULL (Nothing in VB.Net) or empty.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the shader fails to compile.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.ShaderType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonShader"/> class.
            </summary>
            <param name="graphics">Graphics interface that created this shader.</param>
            <param name="name">The name of the shader.</param>
            <param name="type">Type of the shader.</param>
            <param name="entryPoint">The entry point method for the shader.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> parameter is an empty string.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.D3DByteCode">
            <summary>
            Property to return the shader byte code.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.IsBinary">
            <summary>
            Property to return whether the shader is a binary object or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.IsDebug">
            <summary>
            Property to set or return whether to include debug information in the shader or not.
            </summary>
            <remarks>
            This property has no effect when the shader is a <see cref="P:GorgonLibrary.Graphics.GorgonShader.IsBinary">binary shader</see> (i.e. no source code).
            <para>After changing this property, use the <see cref="M:GorgonLibrary.Graphics.GorgonShader.Compile">Compile</see> method to update the shader.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.ShaderType">
            <summary>
            Property to return the type of shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.EntryPoint">
            <summary>
            Property to return the entry point method.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.Graphics">
            <summary>
            Property to return the graphics interface that created this shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.Version">
            <summary>
            Property to set or return the shader model version number for this shader.
            </summary>
            <remarks>It is not recommended to set this value manually.  Gorgon will attempt to find the best version for the supported feature level.
            <para>After changing this property, use the <see cref="M:GorgonLibrary.Graphics.GorgonShader.Compile">Compile</see> method to update the shader.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.SourceCode">
            <summary>
            Property to set or return the source code for the shader.
            </summary>
            <remarks>This value will be empty or NULL (Nothing in VB.Net) if the shader has no source code (i.e. it's loaded from a binary shader).
            <para>After changing this property, use the <see cref="M:GorgonLibrary.Graphics.GorgonShader.Compile">Compile</see> method to update the shader.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.Errors">
            <summary>
            Property to set or return the errors generated by the shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShader.HasChanged">
            <summary>
            Property to set or return whether an object has been updated.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVideoDeviceCollection">
            <summary>
            A collection of the video devices installed in the system and their outputs, and modes.
            </summary>
            <remarks>This object is used to enumerate all the video devices present within the system, and will provide a <see cref="T:GorgonLibrary.Graphics.GorgonVideoDevice">GorgonVideoDevice</see> object to use 
            when specific device selection is required.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.PrintLog(GorgonLibrary.Graphics.GorgonVideoDevice)">
            <summary>
            Function to print device log information.
            </summary>
            <param name="device">Device to print.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.AddSoftwareDevices(System.Boolean,System.Boolean)">
            <summary>
            Function to add the software devices.
            </summary>
            <param name="includeRef">TRUE to include the reference device, FALSE to exclude it.</param>
            <param name="includeWARP">TRUE to include the WARP device, FALSE to exclude it.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.Enumerate(System.Boolean,System.Boolean)">
            <summary>
            Function to enumerate the video devices attached to the computer.
            </summary>
            <param name="includeRef">TRUE to include the reference device, FALSE to exclude it.</param>
            <param name="includeWARP">TRUE to include the WARP device, FALSE to exclude it.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.ClearItems">
            <summary>
            Function to clear the items from the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVideoDeviceCollection"/> class.
            </summary>
            <param name="includeReference">TRUE to include the reference rasterizer rendering device, FALSE to exclude it.</param>
            <param name="includeWARP">TRUE to include the WARP software rasterizer, FALSE to exclude it.</param>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown if no suitable video devices are available on the system.</exception>
            <remarks>If the <paramref name="includeReference"/> flag is TRUE, then the reference rasterizer will only appear in Debug mode.  If the library is in Release mode, then the reference rasterizer  
            will not be included.  If the Reference Rasterizer is to be used, then Direct3D 11 SDK -must- be installed as the reference rasterizer is only included with
            the SDK.
            <para>The reference rasterizer is very slow, and should only be used to locate an issue with a driver.</para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.Item(System.Int32)">
            <summary>
            Property to return a video device by its index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.Item(System.String)">
            <summary>
            Property to return a video device by its name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDeviceCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonDepthStencil">
            <summary>
            A depth/stencil buffer.
            </summary>
            <remarks>This is for setting a depth and/or stencil buffer along with a render target.  When pairing with a render target, the user must ensure that the depth/stencil buffer matches the dimensions and 
            the multisampling settings for the render target.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.CleanUp">
            <summary>
            Function to clean up any resources for the depth/stencil buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.CreateResources">
            <summary>
            Function to create the resources for the depth/stencil buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.ValidateSettings(GorgonLibrary.Graphics.GorgonGraphics,GorgonLibrary.Graphics.GorgonDepthStencilSettings)">
            <summary>
            Function to validate the settings for this depth/stencil buffer.
            </summary>
            <param name="graphics">Graphics interface that will create this depth/stencil buffer.</param>
            <param name="settings">Settings to validate.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.UpdateSettings">
            <summary>
            Function to update the settings for the depth/stencil buffer.
            </summary>
            <remarks>This will destroy and re-create the depth/stencil buffer according to the modified <see cref="P:GorgonLibrary.GorgonGraphics.GorgonDepthStencil.Settings">settings</see></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.Clear(System.Single,System.Int32)">
            <summary>
            Function to clear the depth/stencil buffer.
            </summary>
            <param name="depthValue">Value to fill with depth portion with.</param>
            <param name="stencilValue">Value to fill the stencil portion with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.ClearDepth(System.Single)">
            <summary>
            Function to clear the depth portion of the depth/stencil buffer.
            </summary>
            <param name="depthValue">Value to fill the depth buffer with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.ClearStencil(System.Int32)">
            <summary>
            Function to clear the stencil portion of the depth/stencil buffer.
            </summary>
            <param name="stencilValue">Value to fill the stencil buffer with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.GorgonDepthStencilSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonDepthStencil"/> class.
            </summary>
            <param name="graphics">Graphics interface that owns this depth/stencil buffer.</param>
            <param name="name">The name of the depth/stencil buffer.</param>
            <param name="settings">Settings for the depth buffer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> parameter is an empty string.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencil.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencil.D3DDepthStencilView">
            <summary>
            Property to return the D3D depth/stencil view for the depth/stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencil.Texture">
            <summary>
            Property to return the texture for the depth buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencil.FormatInformation">
            <summary>
            Property to return information about the depth/stencil buffer format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencil.Graphics">
            <summary>
            Property to return the graphics interface that owns this depth/stencil.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencil.Settings">
            <summary>
            Property to return the settings for a depth/stencil buffer.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonEffect">
            <summary>
            An abstract effect used for applying shaders to rendering.
            </summary>
            <remarks>Users may use this to implement custom shading for objects.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.OnBeforeRender">
            <summary>
            Function called before rendering begins.
            </summary>
            <returns>TRUE to continue rendering, FALSE to exit.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.OnAfterRender">
            <summary>
            Function called after rendering ends.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.OnBeforeRenderPass(System.Int32)">
            <summary>
            Function called when a pass is about to start rendering.
            </summary>
            <param name="passIndex">Index of the pass being rendered.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.OnAfterRenderPass(System.Int32)">
            <summary>
            Function called after a pass has rendered.
            </summary>
            <param name="passIndex">Index of the pass being rendered.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.RenderImpl(System.Action{System.Int32},System.Int32)">
            <summary>
            Function to render a specific pass while using this effect.
            </summary>
            <param name="renderMethod">Method to use to render the data.</param>
            <param name="passIndex">Index of the pass to render.</param>
            <remarks>The <paramref name="renderMethod"/> is an action delegate that must be defined with an integer value.  The parameter indicates which pass the rendering is currently on.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.RenderPass(System.Action{System.Int32},System.Int32)">
            <summary>
            Function to render a specific pass while using this effect.
            </summary>
            <param name="renderMethod">Method to use to render the data.</param>
            <param name="passIndex">Index of the pass to render.</param>
            <remarks>The <paramref name="renderMethod"/> is an action delegate that must be defined with an integer value.  The parameter indicates which pass the rendering is currently on.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.Render(System.Action{System.Int32})">
            <summary>
            Function to render while using this effect.
            </summary>
            <param name="renderMethod">Method to use to render the data.</param>
            <remarks>The <paramref name="renderMethod"/> is an action delegate that must be defined with an integer value.  The parameter indicates which pass the rendering is currently on.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.FreeResources">
            <summary>
            Function to free any resources allocated by the effect.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.Render">
            <summary>
            Function to render while using this effect.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonEffect"/> class.
            </summary>
            <param name="graphics">Graphics interface that created this object.</param>
            <param name="name">The name of the effect.</param>
            <param name="passCount">Number of passes for the effect.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> parameter is an empty string.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonEffect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonEffect.PixelShader">
            <summary>
            Property to set or return the pixel shader to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonEffect.VertexShader">
            <summary>
            Property to set or return the vertex shader to use.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonEffect.Graphics">
            <summary>
            Property to return the graphics interface that created this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonEffect.PassCount">
            <summary>
            Property to return the number of passes for this effect.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ITextureSettings">
            <summary>
            Settings for a texture.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.Width">
            <summary>
            Property to set or return the width of a texture.
            </summary>
            <remarks>When loading a file, leave as 0 to use the width from the file source.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.Height">
            <summary>
            Property to set or return the height of a texture.
            </summary>
            <remarks>
            When loading a file, leave as 0 to use the height from the file source.
            <para>This applies to 2D and 3D textures only.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.Depth">
            <summary>
            Property to set or return the depth of a texture.
            </summary>
            <remarks>
            When loading a file, leave as 0 to use the width from the depth source.
            <para>This applies to 3D textures only.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.Format">
            <summary>
            Property to set or return the format of a texture.
            </summary>
            <remarks>
            When loading a texture from a file, leave this as Unknown to get the file format from the source file.
            <para>This sets the format of the texture data.  If you want to change the format of a texture when being sampled in a shader, then set the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.ViewFormat">ViewFormat</see> property to anything other than Unknown.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.ViewFormat">
            <summary>
            Property to set or return the shader view format.
            </summary>
            <remarks>This changes how the texture is sampled/viewed in a shader.  The default value is Unknown.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.ArrayCount">
            <summary>
            Property to set or return the number of textures there are in a texture array.
            </summary>
            <remarks>This only applies to 1D and 2D textures, 3D textures always have this value set to 1.  The default value is 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.IsTextureCube">
            <summary>
            Property to set or return whether this is a cube texture.
            </summary>
            <remarks>When setting this value to TRUE, ensure that the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.ArrayCount">ArrayCount</see> property is set to a multiple of 6.
            <para>This only applies to 2D textures.  All other textures will return FALSE.  The default value is FALSE.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.MipCount">
            <summary>
            Property to set or return the number of mip maps in a texture.
            </summary>
            <remarks>To have the system generate mipmaps for you, set this value to 0.  The default value for this setting is 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.Multisampling">
            <summary>
            Property to set or return the multisampling count/quality for the texture.
            </summary>
            <remarks>This only applies to 2D textures.  The default value is a count of 1, and a quality of 0 (no multisampling).
            <para>Note that multisampled textures cannot have sub resources (e.g. mipmaps), so the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.MipCount">MipCount</see> should be set to 1.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.Usage">
            <summary>
            Property to set or return the usage for the texture.
            </summary>
            <remarks>The default value is Default.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.IsPowerOfTwo">
            <summary>
            Property to return whether the size of the texture is a power of 2 or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.FileFilter">
            <summary>
            Property to set or return the type of filter when loading an image from a stream or file.
            </summary>
            <remarks>This only applies to textures created when loading an image from a stream or file.  Texture creation methods do not use this.
            <para>This defaults to None.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ITextureSettings.FileMipFilter">
            <summary>
            Property to set or return the type of mipmap filter when loading an image from a stream or file.
            </summary>
            <remarks>This only applies to textures created when loading an image from a stream or file.  Texture creation methods do not use this.
            <para>This defaults to None.</para>
            </remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture1DSettings">
            <summary>
            Settings for a 1D texture.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1DSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture1DSettings"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.FileFilter">
            <summary>
            Property to set or return the type of filter when loading an image from a stream or file.
            </summary>
            <remarks>This only applies to textures created when loading an image from a stream or file.  Texture creation methods do not use this.
            <para>This defaults to None.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.FileMipFilter">
            <summary>
            Property to set or return the type of mipmap filter when loading an image from a stream or file.
            </summary>
            <remarks>This only applies to textures created when loading an image from a stream or file.  Texture creation methods do not use this.
            <para>This defaults to None.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.GorgonLibrary#Graphics#ITextureSettings#IsTextureCube">
            <summary>
            Property to set or return whether this is a cube texture.
            </summary>
            <value></value>
            <remarks>When setting this value to TRUE, ensure that the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.ArrayCount">ArrayCount</see> property is set to a multiple of 6.
            <para>This only applies to 2D textures.  All other textures will return FALSE.  The default value is FALSE.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.Width">
            <summary>
            Property to set or return the width of a texture.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.GorgonLibrary#Graphics#ITextureSettings#Height">
            <summary>
            Property to set or return the height of a texture.
            </summary>
            <value></value>
            <remarks>This applies to 2D and 3D textures only.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.GorgonLibrary#Graphics#ITextureSettings#Depth">
            <summary>
            Property to set or return the depth of a texture.
            </summary>
            <value></value>
            <remarks>This applies to 3D textures only.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.Format">
            <summary>
            Property to set or return the format of a texture.
            </summary>
            <value></value>
            <remarks>This sets the format of the texture data.  If you want to change the format of a texture when being sampled in a shader, then set the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.ViewFormat">ViewFormat</see> property to anything other than Unknown.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.ViewFormat">
            <summary>
            Property to set or return the shader view format.
            </summary>
            <value></value>
            <remarks>This changes how the texture is sampled/viewed in a shader.  The default value is Unknown.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.ArrayCount">
            <summary>
            Property to set or return the number of textures there are in a texture array.
            </summary>
            <value></value>
            <remarks>This only applies to 1D and 2D textures, 3D textures always have this value set to 1.  The default value is 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.MipCount">
            <summary>
            Property to set or return the number of mip maps in a texture.
            </summary>
            <value></value>
            <remarks>The default value for this setting is 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.GorgonLibrary#Graphics#ITextureSettings#Multisampling">
            <summary>
            Property to set or return the multisampling count/quality for the texture.
            </summary>
            <value></value>
            <remarks>This only applies to 2D textures.  The default value is a count of 1, and a quality of 0 (no multisampling).</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.Usage">
            <summary>
            Property to set or return the usage for the texture.
            </summary>
            <value></value>
            <remarks>The default value is Default.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DSettings.IsPowerOfTwo">
            <summary>
            Property to return whether the size of the texture is a power of 2 or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture2DSettings">
            <summary>
            Settings for a 2D texture.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture2DSettings"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.Size">
            <summary>
            Property to set or return the size of the texture.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.FileFilter">
            <summary>
            Property to set or return the type of filter when loading an image from a stream or file.
            </summary>
            <remarks>This only applies to textures created when loading an image from a stream or file.  Texture creation methods do not use this.
            <para>This defaults to None.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.FileMipFilter">
            <summary>
            Property to set or return the type of mipmap filter when loading an image from a stream or file.
            </summary>
            <remarks>This only applies to textures created when loading an image from a stream or file.  Texture creation methods do not use this.
            <para>This defaults to None.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.IsTextureCube">
            <summary>
            Property to set or return whether this is a cube texture.
            </summary>
            <value></value>
            <remarks>When setting this value to TRUE, ensure that the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.ArrayCount">ArrayCount</see> property is set to a multiple of 6.
            <para>This only applies to 2D textures.  All other textures will return FALSE.  The default value is FALSE.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.Width">
            <summary>
            Property to set or return the width of a texture.
            </summary>
            <value></value>
            <remarks>When loading a file, leave as 0 to use the width from the file source.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.Height">
            <summary>
            Property to set or return the height of a texture.
            </summary>
            <value></value>
            <remarks>
            When loading a file, leave as 0 to use the height from the file source.
            <para>This applies to 2D and 3D textures only.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.GorgonLibrary#Graphics#ITextureSettings#Depth">
            <summary>
            Property to set or return the depth of a texture.
            </summary>
            <value></value>
            <remarks>
            When loading a file, leave as 0 to use the width from the depth source.
            <para>This applies to 3D textures only.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.Format">
            <summary>
            Property to set or return the format of a texture.
            </summary>
            <value></value>
            <remarks>
            When loading a texture from a file, leave this as Unknown to get the file format from the source file.
            <para>This sets the format of the texture data.  If you want to change the format of a texture when being sampled in a shader, then set the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.ViewFormat">ViewFormat</see> property to anything other than Unknown.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.ViewFormat">
            <summary>
            Property to set or return the shader view format.
            </summary>
            <value></value>
            <remarks>This changes how the texture is sampled/viewed in a shader.  The default value is Unknown.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.ArrayCount">
            <summary>
            Property to set or return the number of textures there are in a texture array.
            </summary>
            <value></value>
            <remarks>This only applies to 1D and 2D textures, 3D textures always have this value set to 1.  The default value is 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.MipCount">
            <summary>
            Property to set or return the number of mip maps in a texture.
            </summary>
            <value></value>
            <remarks>To have the system generate mipmaps for you, set this value to 0.  The default value for this setting is 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.Multisampling">
            <summary>
            Property to set or return the multisampling count/quality for the texture.
            </summary>
            <value></value>
            <remarks>This only applies to 2D textures.  The default value is a count of 1, and a quality of 0 (no multisampling).
            <para>Note that multisampled textures cannot have sub resources (e.g. mipmaps), so the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.MipCount">MipCount</see> should be set to 1.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.Usage">
            <summary>
            Property to set or return the usage for the texture.
            </summary>
            <value></value>
            <remarks>The default value is Default.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DSettings.IsPowerOfTwo">
            <summary>
            Property to return whether the size of the texture is a power of 2 or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture3DSettings">
            <summary>
            Settings for a 3D texture.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3DSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture3DSettings"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.FileFilter">
            <summary>
            Property to set or return the type of filter when loading an image from a stream or file.
            </summary>
            <remarks>This only applies to textures created when loading an image from a stream or file.  Texture creation methods do not use this.
            <para>This defaults to None.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.FileMipFilter">
            <summary>
            Property to set or return the type of mipmap filter when loading an image from a stream or file.
            </summary>
            <remarks>This only applies to textures created when loading an image from a stream or file.  Texture creation methods do not use this.
            <para>This defaults to None.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.GorgonLibrary#Graphics#ITextureSettings#IsTextureCube">
            <summary>
            Property to set or return whether this is a cube texture.
            </summary>
            <value></value>
            <remarks>When setting this value to TRUE, ensure that the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.ArrayCount">ArrayCount</see> property is set to a multiple of 6.
            <para>This only applies to 2D textures.  All other textures will return FALSE.  The default value is FALSE.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.Width">
            <summary>
            Property to set or return the width of a texture.
            </summary>
            <value></value>
            <remarks>When loading a file, leave as 0 to use the width from the file source.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.Height">
            <summary>
            Property to set or return the height of a texture.
            </summary>
            <value></value>
            <remarks>
            When loading a file, leave as 0 to use the height from the file source.
            <para>This applies to 2D and 3D textures only.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.Depth">
            <summary>
            Property to set or return the depth of a texture.
            </summary>
            <value></value>
            <remarks>
            When loading a file, leave as 0 to use the width from the depth source.
            <para>This applies to 3D textures only.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.Format">
            <summary>
            Property to set or return the format of a texture.
            </summary>
            <value></value>
            <remarks>
            When loading a texture from a file, leave this as Unknown to get the file format from the source file.
            <para>This sets the format of the texture data.  If you want to change the format of a texture when being sampled in a shader, then set the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.ViewFormat">ViewFormat</see> property to anything other than Unknown.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.ViewFormat">
            <summary>
            Property to set or return the shader view format.
            </summary>
            <value></value>
            <remarks>This changes how the texture is sampled/viewed in a shader.  The default value is Unknown.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.GorgonLibrary#Graphics#ITextureSettings#ArrayCount">
            <summary>
            Property to set or return the number of textures there are in a texture array.
            </summary>
            <value></value>
            <remarks>This only applies to 1D and 2D textures, 3D textures always have this value set to 1.  The default value is 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.MipCount">
            <summary>
            Property to set or return the number of mip maps in a texture.
            </summary>
            <value></value>
            <remarks>To have the system generate mipmaps for you, set this value to 0.  The default value for this setting is 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.GorgonLibrary#Graphics#ITextureSettings#Multisampling">
            <summary>
            Property to set or return the multisampling count/quality for the texture.
            </summary>
            <value></value>
            <remarks>This only applies to 2D textures.  The default value is a count of 1, and a quality of 0 (no multisampling).
            <para>Note that multisampled textures cannot have sub resources (e.g. mipmaps), so the <see cref="P:GorgonLibrary.Graphics.ITextureSettings.MipCount">MipCount</see> should be set to 1.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.Usage">
            <summary>
            Property to set or return the usage for the texture.
            </summary>
            <value></value>
            <remarks>The default value is Default.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DSettings.IsPowerOfTwo">
            <summary>
            Property to return whether the size of the texture is a power of 2 or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVertexShader">
            <summary>
            A vertex shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexShader.CreateShader(SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
            Function to compile the shader.
            </summary>
            <param name="byteCode">Byte code for the shader.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexShader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexShader.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVertexShader"/> class.
            </summary>
            <param name="graphics">The graphics interface that created this vertex shader.</param>
            <param name="name">The name of the vertex shader.</param>
            <param name="entryPoint">Entry point for the vertex shader.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVertexShader.D3DShader">
            <summary>
            Property to return the Direct 3D vertex shader.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonInputElement">
            <summary>
            An input element for a buffer.
            </summary>
            <remarks>This defines the layout of an item of data for a buffer.  Typically this is used with a Vertex buffer to define a specific element for a vertex.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputElement.Convert">
            <summary>
            Function to convert this Gorgon input element into a Direct3D input element.
            </summary>
            <returns>The direct 3D input element.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputElement.op_Equality(GorgonLibrary.Graphics.GorgonInputElement,GorgonLibrary.Graphics.GorgonInputElement)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputElement.op_Inequality(GorgonLibrary.Graphics.GorgonInputElement,GorgonLibrary.Graphics.GorgonInputElement)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputElement.#ctor(System.String,GorgonLibrary.Graphics.BufferFormat,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonInputElement"/> class.
            </summary>
            <param name="context">The context for the element.</param>
            <param name="format">The format and type of the element.</param>
            <param name="offset">The offset of the element within the vertex.</param>
            <param name="index">The index of the element.</param>
            <param name="slot">The vertex buffer slot for the element.</param>
            <param name="instanced">TRUE if using instanced data, FALSE if not.</param>
            <param name="instanceCount">Number of instances to use before moving to the next element.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputElement.#ctor(GorgonLibrary.Graphics.GorgonInputElement,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonInputElement"/> struct.
            </summary>
            <param name="source">The source element.</param>
            <param name="offset">The offset of the element.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputElement.Equals(GorgonLibrary.Graphics.GorgonInputElement)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputElement.Context">
            <summary>
            Property to return the context of the element.
            </summary>
            <remarks>This is a string value that corresponds to a shader input.  For example, to specify a position, the user would set this to "position".  
            These contexts can be named whatever the user wishes.  This must map to a corresponding element in the shader.
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputElement.Index">
            <summary>
            Property to return the index of the context.
            </summary>
            <remarks>This is used to denote the same context but at another index.  For example, to specify a second set of texture coordinates, set this 
            to 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputElement.Format">
            <summary>
            Property to return the format of the data.
            </summary>
            <remarks>This is used to specify the format and type of the element.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputElement.Offset">
            <summary>
            Property to return the offset of this element compared to other elements.
            </summary>
            <remarks>The format of the data dictates the offset of the element.  This value is optional.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputElement.Slot">
            <summary>
            Property to return the vertex buffer slot this element will use.
            </summary>
            <remarks>Multiple vertex buffers can be used to identify parts of the same vertex.  This is used to minimize the amount of data being written to a 
            vertex buffer and provide better performance.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputElement.Instanced">
            <summary>
            Property to return whether this data is instanced or per vertex.
            </summary>
            <remarks>Indicates that the element should be included in instancing.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputElement.InstanceCount">
            <summary>
            Property to return the number of instances to draw.
            </summary>
            <remarks>The number of times this element should be used before moving to the next element.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputElement.Size">
            <summary>
            Property to return the size in bytes of this element.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputElement.GorgonLibrary#INamedObject#Name">
            <summary>
            Property to return the name of this object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonFont">
            <summary>
            Provides functionality for creating, reading, and saving bitmap fonts.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonFont.FileHeader">
            <summary>
            Header for a Gorgon font file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Function to save the font to a stream.
            </summary>
            <param name="stream">Stream to write into.</param>
            <param name="externalTextures">TRUE to save the textures as external files, FALSE to bundle them with the font.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the stream parameter does not allow for writing.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the externalTextures parameter is TRUE and the stream is not a file stream.</exception>
            <remarks>The <paramref name="externalTextures"/> parameter will only work on file streams, if the stream is not a file stream, then an exception will be thrown.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.DrawGlyphCharacter(System.Drawing.Graphics,System.Drawing.Bitmap,System.Drawing.Font,System.Drawing.StringFormat,System.Char,System.Drawing.Rectangle)">
            <summary>
            Function to draw the glyph character onto the bitmap.
            </summary>
            <param name="graphics">Graphics interface.</param>
            <param name="bitmap">Bitmap to write onto.</param>
            <param name="font">Font to use.</param>
            <param name="format">Formatter for the string.</param>
            <param name="character">Character to write.</param>
            <param name="position">Position on the bitmap.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.IsBitmapColumnEmpty(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
            Function to determine if a bitmap is empty.
            </summary>
            <param name="pixels">Pixels to evaluate.</param>
            <param name="x">Horizontal position.</param>
            <returns>TRUE if empty, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.IsBitmapRowEmpty(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
            Function to determine if a bitmap is empty.
            </summary>
            <param name="pixels">Pixels to evaluate.</param>
            <param name="y">Vertical position.</param>
            <returns>TRUE if empty, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GetCharRect(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Char)">
            <summary>
            Function to return the character bounding rectangles.
            </summary>
            <param name="g">Graphics interface to use.</param>
            <param name="font">Font to apply.</param>
            <param name="format">Format for the font.</param>
            <param name="c">Character to evaluate.</param>
            <returns>A rectangle for the bounding box and offset of the character.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.CopyBitmap(System.Drawing.Bitmap,GorgonLibrary.Graphics.GorgonTexture2D)">
            <summary>
            Function to copy bitmap data to a texture.
            </summary>
            <param name="bitmap">Bitmap to copy.</param>
            <param name="texture">Texture to receive the data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.Save(System.IO.Stream)">
            <summary>
            Function to save the font to a stream.
            </summary>
            <param name="stream">Stream to write into.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.IO.IOException">Thrown when the stream parameter does not allow for writing.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.Save(System.String,System.Boolean)">
            <summary>
            Function to save the font to a file.
            </summary>
            <param name="fileName">File name and path of the font to save.</param>
            <param name="externalTextures">TRUE to save the textures external to the font file, FALSE to bundle together with the font file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="fileName"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the fileName parameter is an empty string.</exception>
            <remarks>Saving the textures externally with the <paramref name="externalTextures"/> parameter set to TRUE is good for altering the textures in an image 
            editing application.  Ultimately, it is recommended that the textures be bundled with the font by setting externalTextures to FALSE.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.Save(System.String)">
            <summary>
            Function to save the font to a file.
            </summary>
            <param name="fileName">File name and path of the font to save.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="fileName"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the fileName parameter is an empty string.</exception>
            <remarks>This overload will always save the textures with the font.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.Update(GorgonLibrary.Graphics.GorgonFontSettings)">
            <summary>
            Function to create or update the font.
            </summary>
            <param name="settings">Font settings to use.</param>
            <remarks>
            This is used to generate a new set of font textures, and essentially "create" the font object.
            <para>This method will clear all the glyphs and textures in the font and rebuild the font with the specified parameters.</para>
            <para>Internal textures used by the glyph will be destroyed.  However, if there's a user defined texture or glyph using a user defined texture, then it will not be destroyed 
            and clean up will be the responsibility of the user.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="settings"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the texture size in the settings exceeds that of the capabilities of the feature level.
            <para>-or-</para>
            <para>Thrown when the font family name is NULL or Empty.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.GorgonFontSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonFont"/> class.
            </summary>
            <param name="graphics">The graphics interface that created this object.</param>
            <param name="name">The name of the font.</param>
            <param name="settings">Settings to apply to the font.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.KerningPairs">
            <summary>
            Property to return a list of kerning pairs.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.Settings">
            <summary>
            Property to return the font settings.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.Graphics">
            <summary>
            Property to return the graphics interface that created this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.Textures">
            <summary>
            Property to return the textures for this font.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.Glyphs">
            <summary>
            Property to return the glyphs for this font.
            </summary>
            <remarks>A glyph is a graphical representation of a character.  For Gorgon, this means a glyph for a specific character will point to a region of texels on a texture.
            <para>Note that the glyph for a character is not required to represent the exact character (for example, the character "A" could map to the "V" character on the texture).  This 
            will allow mapping of symbols to a character representation.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.Ascent">
            <summary>
            Property to return the ascent for the font, in pixels.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.Descent">
            <summary>
            Property to return the descent for the font, in pixels.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.LineHeight">
            <summary>
            Property to return the line height, in pixels, for the font.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.FontHeight">
            <summary>
            Property to return the font height, in pixels.
            </summary>
            <remarks>This is not the same as line height, the line height is a combination of ascent, descent and internal/external leading space.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.HasChanged">
            <summary>
            Property to set or return whether an object has been updated.
            </summary>
            <value></value>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonFont.GlyphCollection">
            <summary>
            A collection of glyphs for the font.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Contains(System.Char)">
            <summary>
            Function to return whether the character exists in this collection.
            </summary>
            <param name="character">The character to find.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Contains(GorgonLibrary.Graphics.GorgonGlyph)">
            <summary>
            Function to return whether a glyph exists in this collection or not.
            </summary>
            <param name="glyph">Glyph to find.</param>
            <returns>TRUE if the glyph was found, FALSE if not.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="glyph"/> parameter is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Indexof(System.Char)">
            <summary>
            Function to return the index of a character in the collection.
            </summary>
            <param name="character">Character to find.</param>
            <returns>The index of the character if found, -1 if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.IndexOf(GorgonLibrary.Graphics.GorgonGlyph)">
            <summary>
            Function to return the index of a glyph in the collection.
            </summary>
            <param name="glyph">Glyph to find.</param>
            <returns>The index of the glyph if found, -1 if not.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="glyph"/> parameter is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Add(GorgonLibrary.Graphics.GorgonGlyph)">
            <summary>
            Function to add a new glyph to the collection.
            </summary>
            <param name="glyph">Glyph to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="glyph"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="glyph"/> parameter already exists in this collection.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Remove(GorgonLibrary.Graphics.GorgonGlyph)">
            <summary>
            Function to remove a glyph from the list.
            </summary>
            <param name="glyph">The texture to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="glyph"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The glyph does not exist in the collection.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Remove(System.Char)">
            <summary>
            Function to remove a glyph from the list.
            </summary>
            <param name="character">Character represented by the glyph to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when then <paramref name="character"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The character glyph does not exist in the collection.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Remove(System.Int32)">
            <summary>
            Function to remove a glyph by index.
            </summary>
            <param name="index">The index of the glyph to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is less than 0 or greater than the number of items in the collection.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Clear">
            <summary>
            Function to clear all character glyphs from this collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.#ctor(GorgonLibrary.Graphics.GorgonFont)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonFont.GlyphCollection"/> class.
            </summary>
            <param name="font">Fonr that owns this glyph collection.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#IDictionary{System#Char@GorgonLibrary#Graphics#GorgonGlyph}#Add(System.Char,GorgonLibrary.Graphics.GorgonGlyph)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
              
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#IDictionary{System#Char@GorgonLibrary#Graphics#GorgonGlyph}#ContainsKey(System.Char)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#IDictionary{System#Char@GorgonLibrary#Graphics#GorgonGlyph}#Remove(System.Char)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.TryGetValue(System.Char,GorgonLibrary.Graphics.GorgonGlyph@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Char@GorgonLibrary#Graphics#GorgonGlyph}}#Add(System.Collections.Generic.KeyValuePair{System.Char,GorgonLibrary.Graphics.GorgonGlyph})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Char@GorgonLibrary#Graphics#GorgonGlyph}}#Contains(System.Collections.Generic.KeyValuePair{System.Char,GorgonLibrary.Graphics.GorgonGlyph})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Char@GorgonLibrary#Graphics#GorgonGlyph}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Char,GorgonLibrary.Graphics.GorgonGlyph}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Char@GorgonLibrary#Graphics#GorgonGlyph}}#Remove(System.Collections.Generic.KeyValuePair{System.Char,GorgonLibrary.Graphics.GorgonGlyph})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Char@GorgonLibrary#Graphics#GorgonGlyph}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Item(System.Char)">
            <summary>
            Property to set or return a glyph in the collection by its character representation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Item(System.Int32)">
            <summary>
            Property to return a glyph in the list by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#IDictionary{System#Char@GorgonLibrary#Graphics#GorgonGlyph}#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.System#Collections#Generic#IDictionary{System#Char@GorgonLibrary#Graphics#GorgonGlyph}#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.GlyphCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection">
            <summary>
            A collection of textures used for the font.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.RemoveItem(GorgonLibrary.Graphics.GorgonTexture2D)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.RemoveItem(System.String)">
            <summary>
            Removes the item.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.Add(GorgonLibrary.Graphics.GorgonTexture2D)">
            <summary>
            Function to add a texture to the list.
            </summary>
            <param name="texture">Texture to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when then <paramref name="texture"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the texture parameter already exists in this collection.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.AddRange(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonTexture2D})">
            <summary>
            Function to add a list of items to the collection.
            </summary>
            <param name="items">Items to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="items"/> parameter is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.Remove(GorgonLibrary.Graphics.GorgonTexture2D)">
            <summary>
            Function to remove a texture from the list.
            </summary>
            <param name="texture">The texture to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when then <paramref name="texture"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The texture does not exist in the collection.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.Remove(System.Int32)">
            <summary>
            Function to remove a texture from the list.
            </summary>
            <param name="index">Index of the texture to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when then <paramref name="index"/> parameter is less than 0 or larger than than Count-1 of textures.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.Remove(System.String)">
            <summary>
            Function to remove a texture from the list.
            </summary>
            <param name="name">Name of the texture to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when then <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The texture does not exist in the collection.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.Clear">
            <summary>
            Function to remove all textures from the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.#ctor(GorgonLibrary.Graphics.GorgonFont)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection"/> class.
            </summary>
            <param name="font">Font that owns this collection.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.Item(System.String)">
            <summary>
            Property to return a texture from the collection by name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.Item(System.Int32)">
            <summary>
            Property to return a texture from the collection by its index.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonRenderTarget">
            <summary>
            A texture render target.
            </summary>
            <remarks>Use this to render graphics data to a texture.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.OnTargetResize">
            <summary>
            Function called when the target is resized.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.CleanUp">
            <summary>
            Function to clean up any internal resources.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.CreateResources">
            <summary>
            Function to create the resources for the render target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.Initialize">
            <summary>
            Function to initialize the target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.UpdateResourceView">
            <summary>
            Function called by a texture to update the resource view.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.ValidateRenderTargetSettings(GorgonLibrary.Graphics.GorgonGraphics,GorgonLibrary.Graphics.GorgonRenderTargetSettings)">
            <summary>
            Function to validate the settings for a render target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.Clear(GorgonLibrary.Graphics.GorgonColor)">
            <summary>
            Function to clear the swap chain and any depth buffer attached to it.
            </summary>
            <param name="color">Color used to clear the swap chain.</param>
            <remarks>This will only clear the swap chain.  Any attached depth/stencil buffer will remain untouched.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.Clear(GorgonLibrary.Graphics.GorgonColor,System.Single)">
            <summary>
            Function to clear the swap chain and an associated depth buffer.
            </summary>
            <param name="color">Color used to clear the swap chain.</param>
            <param name="depthValue">Value used to fill the depth buffer.</param>
            <remarks>This will clear the swap chain and depth buffer, but depth buffers with a stencil component will remain untouched.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.Clear(GorgonLibrary.Graphics.GorgonColor,System.Single,System.Int32)">
            <summary>
            Function to clear the swap chain and an associated depth buffer with a stencil component.
            </summary>
            <param name="color">Color used to clear the swap chain.</param>
            <param name="depthValue">Value used to fill the depth buffer.</param>
            <param name="stencilValue">Value used to fill the stencil component of the depth buffer.</param>
            <remarks>This will clear the swap chain, depth buffer and stencil component of the depth buffer.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.UpdateSettings(GorgonLibrary.Graphics.GorgonVideoMode,GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Function to update the settings for the render target.
            </summary>
            <param name="mode">New video mode to use.</param>
            <param name="depthStencilFormat">The format of the internal depth/stencil buffer.</param>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonVideoMode.Format">GorgonRenderTargetSettings.VideoMode.Format</see> property cannot be used by the render target.
            <para>-or-</para>
            <para>The width and height are not valid for the render target.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.GorgonRenderTargetSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonRenderTarget"/> class.
            </summary>
            <param name="graphics">The graphics interface that created this object.</param>
            <param name="name">The name of the render target.</param>
            <param name="settings">Settings to apply to the render target.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTarget.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:GorgonLibrary.Graphics.GorgonRenderTarget.Resized">
            <summary>
            Event called after the swap chain has been resized.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTarget.D3DRenderTarget">
            <summary>
            Property to return the D3D render target interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTarget.InternalDepthStencil">
            <summary>
            Property to set or return the internal depth/stencil for the render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTarget.Settings">
            <summary>
            Property to return the settings for this render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTarget.DepthStencil">
            <summary>
            Property to set or return the depth/stencil for this render target.
            </summary>
            <remarks>
            Setting this value to NULL will reset this value to the internal depth/stencil buffer if one was created when the render target was created.  Use <see cref="M:GorgonLibrary.GorgonGraphics.GorgonRenderTarget.UpdateSettings">UpdateSettings</see> to 
            change the internal depth/stencil buffer.
            <para>Care should be taken with the lifetime of the depth/stencil that is attached to this render target.  If a user creates the render target with a depth buffer, its 
            lifetime will be managed by the render target (i.e. it will be disposed when the render target is disposed).  If a user sets this value to an external depth buffer, then the render target will -NOT- manage the lifetime of the external depth/stencil.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTarget.Texture">
            <summary>
            Property to return the texture for the render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTarget.Graphics">
            <summary>
            Property to return the graphics interface that created this render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTarget.Viewport">
            <summary>
            Property to return the default viewport associated with this render target.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonOutputMerger">
            <summary>
            Manages the display of the graphics data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.CleanUp">
            <summary>
            Function to clean up resources used by the interface.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.Draw(System.Int32,System.Int32)">
            <summary>
            Function to draw polygons to the current render target.
            </summary>
            <param name="vertexStart">Vertex to start at.</param>
            <param name="vertexCount">Number of vertices to draw.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.DrawAuto">
            <summary>
            Function to draw geometry of an unknown size.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.DrawIndexed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to draw indexed polygons.
            </summary>
            <param name="indexStart">Starting index to use.</param>
            <param name="baseVertex">Vertex index added to each index.</param>
            <param name="indexCount">Number of indices to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.DrawIndexedInstanced(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to draw indexed instanced polygons.
            </summary>
            <param name="startInstance">A value added to each index.</param>
            <param name="indexStart">Starting index to use.</param>
            <param name="baseVertex">Vertex index added to each index.</param>
            <param name="instanceCount">Number of indices to use.</param>
            <param name="indexCount">Number of indices to read per instance.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.DrawInstanced(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to draw instanced polygons.
            </summary>
            <param name="startInstance">Value added to each index.</param>
            <param name="startVertex">Vertex to start at.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="vertexCount">Number of vertices to draw.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.DrawInstancedIndirect(GorgonLibrary.Graphics.GorgonBaseBuffer,System.Int32,System.Boolean)">
            <summary>
            Function to draw indexed, instanced GPU generated data.
            </summary>
            <param name="buffer">Buffer holding the GPU generated data.</param>
            <param name="alignedAyteOffset">Number of bytes to start at within the buffer.</param>
            <param name="isIndexed">TRUE if the data is indexed, FALSE if not.</param>
            <remarks>This method is not supported by SM2_a_b or SM_4.x video devices.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the current video device is a SM2_a_b or SM4_x device.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.CreateDepthStencil(System.String,GorgonLibrary.Graphics.GorgonDepthStencilSettings)">
            <summary>
            Function to create a depth/stencil buffer.
            </summary>
            <param name="name">Name of the depth/stencil buffer.</param>
            <param name="settings">Settings to apply to the depth/stencil buffer.</param>
            <returns>A new depth/stencil buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).
            <para>-or-</para>
            <para>Thrown when the <paramref name="settings"/> parameter is NULL (Nothing in VB.Net).</para>
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonDepthStencilSettings.Format">GorgonDepthStencilSettings.Format</see> property is set to Unknown or is unsupported.</para>
            </exception>
            <remarks>
            A depth buffer may be paired with a swapchain or render target through its DepthStencil property.  When pairing the depth/stencil to the render target, Ensure that the depth/stencil buffer width, height and multisample settings match that of the render target that it is paired with.
            <para>The texture for a depth/stencil may be used in a shader for cards that have a feature level of SM_4_1 or better, and can be set to do so by setting the <see cref="P:GorgonLibrary.Graphics.GorgonDepthStencilSettings.TextureFormat">GorgonDepthStencilSettings.TextureFormat</see> property to a typeless format. 
            If this is attempted on a video device that has a feature level of SM_4_0 or below, then an exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.CreateSwapChain(System.String,GorgonLibrary.Graphics.GorgonSwapChainSettings)">
            <summary>
            Function to create a swap chain.
            </summary>
            <param name="name">Name of the swap chain.</param>
            <param name="settings">Settings for the swap chain.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).
            <para>-or-</para>
            <para>Thrown when the <paramref name="settings"/> parameter is NULL (Nothing in VB.Net).</para>
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.Window">GorgonSwapChainSettings.Window</see> property is NULL (Nothing in VB.Net), and the <see cref="P:GorgonLibrary.Gorgon.ApplicationForm">Gorgon application window</see> is NULL.</para>
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonVideoMode.Format">GorgonSwapChainSettings.VideoMode.Format</see> property cannot be used by the video device for displaying data or for the depth/stencil buffer.</para>
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.MultSamples.Quality">GorgonSwapChainSettings.MultiSamples.Quality</see> property is less than 0 or not less than the value returned by <see cref="M:GorgonLibrary.Graphics.GorgonVideoDevice">GorgonVideoDevice.GetMultiSampleQuality</see>.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the video output could not be determined from the window.
            <para>-or-</para>
            <para>Thrown when the swap chain is going to full screen mode and another swap chain is already on the video output.</para>
            <para>-or-</para>
            <para>Thrown if the current video device is a SM2_a_b video device and the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.Flags">Flags</see> property is not equal to RenderTarget.</para>
            </exception>
            <remarks>This will create our output swap chains for display to a window or control.  All functionality for sending or retrieving data from the video device can be accessed through the swap chain.
            <para>Passing default settings for the <see cref="T:GorgonLibrary.Graphics.GorgonSwapChainSettings">settings parameters</see> will make Gorgon choose the closest possible settings appropriate for the video device and output that the window is on.  For example, passing NULL (Nothing in VB.Net) to 
            the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.VideoMode">GorgonSwapChainSettings.VideoMode</see> parameter will make Gorgon find the closest video mode available to the current window size and desktop format (for the output).</para>
            <para>If the multisampling quality in the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.MultiSample.Quality">GorgonSwapChainSettings.MultiSample.Quality</see> property is higher than what the video device can support, an exception will be raised.  To determine 
            what the maximum quality for the sample count for the video device should be, call the <see cref="M:GorgonLibrary.Graphics.GorgonVideoDevice.GetMultiSampleQuality">GorgonVideoDevice.GetMultiSampleQuality</see> method.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.CreateRenderTarget(System.String,GorgonLibrary.Graphics.GorgonRenderTargetSettings)">
            <summary>
            Function to create a render target.
            </summary>
            <param name="name">Name of the render target.</param>
            <param name="settings">Settings for the render target.</param>
            <returns>A new render target object.</returns>
            <remarks>This allows graphics data to be rendered on to a <see cref="T:GorgonLibrary.Graphics.GorgonTexture2D">texture</see>.
            <para>Unlike the <see cref="T:GorgonLibrary.Graphics.GorgonSwapChain">GorgonSwapChain</see> object (which is also a render target), no defaults will be set for the <paramref name="settings"/> except multisampling, and DepthFormat (defaults to Unknown).  
            </para>
            <para>If the multisampling quality in the <see cref="P:GorgonLibrary.Graphics.GorgonRenderTarget.MultSample.Quality">GorgonRenderTarget.MultiSample.Quality</see> property is higher than what the video device can support, an exception will be raised.  To determine 
            what the maximum quality for the sample count for the video device should be, call the <see cref="M:GorgonLibrary.Graphics.GorgonVideoDevice.GetMultiSampleQuality">GorgonVideoDevice.GetMultiSampleQuality</see> method.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when there is no <see cref="P:GorgonLibrary.Graphics.GorgonGraphics.VideoDevice">video device present on the graphics interface</see>.
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.Width">Width</see> or <see cref="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.Width">Height</see> property is 0 or greater than the maximum size for a texture that a video device can support.</para>
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.Format">Format</see> property is unknown or is not a supported render target format.</para>
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.MultSamples.Quality">GorgonSwapChainSettings.MultiSamples.Quality</see> property is less than 0 or not less than the value returned by <see cref="M:GorgonLibrary.Graphics.GorgonVideoDevice">GorgonVideoDevice.GetMultiSampleQuality</see>.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonOutputMerger"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonOutputMerger.BlendingState">
            <summary>
            Property to return the blending render state interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonOutputMerger.DepthStencilState">
            <summary>
            Property to return the depth/stencil render state interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonOutputMerger.RenderTargets">
            <summary>
            Property to return the render target bindings.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList">
            <summary>
            A list of render targets to bind.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.HasSameBitDepth(GorgonLibrary.Graphics.BufferFormat,System.Int32)">
            <summary>
            Function to determine if the render targets have the same bit depth.
            </summary>
            <param name="format">The format to check.</param>
            <param name="index">Index of the render target being set.</param>
            <returns>TRUE if the bit depths are the same, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.ReSeat(GorgonLibrary.Graphics.GorgonRenderTarget)">
            <summary>
            Function to re-seat a render target after it's been altered.
            </summary>
            <param name="target">Target to re-seat.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.Contains(System.String)">
            <summary>
            Function to determine if a render target is bound by its name.
            </summary>
            <param name="name">Name of the render target.</param>
            <returns>TRUE if the render target was found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.IndexOf(System.String)">
            <summary>
            Function to determine the index of a bound render target by its name.
            </summary>
            <param name="name">Name of the render target to look up.</param>
            <returns>The index of the render target, -1 if not found.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.SetDepthStencil(GorgonLibrary.Graphics.GorgonDepthStencil)">
            <summary>
            Function to set the depth buffer.
            </summary>
            <param name="depthBuffer">Depth buffer to set.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.SetRenderTarget(System.Int32,GorgonLibrary.Graphics.GorgonRenderTarget,GorgonLibrary.Graphics.GorgonDepthStencil)">
            <summary>
            Function to bind a render target and a depth/stencil buffer.
            </summary>
            <param name="index">Index to bind at.</param>
            <param name="target">Target to bind.</param>
            <param name="depthStencil">Depth/stencil buffer to bind.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> parameter is less than 0 or greater than the number of allowed targets.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown if the current video device is only SM 2.0 and the targets are not the same bit depth.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.SetRenderTargetRange(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonRenderTarget},GorgonLibrary.Graphics.GorgonDepthStencil,System.Int32)">
            <summary>
            Function to set a range of render targets.
            </summary>
            <param name="targets">Render targets to set.</param>
            <param name="depthStencil">The depth/stencil buffer to use.</param>
            <param name="startIndex">The starting index that will be bound.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to the <paramref name="targets"/> parameter will set the bindings to empty (starting at <paramref name="startIndex"/>).</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="startIndex"/> parameter is less than 0 or greater than the number of allowed targets.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown if the current video device is SM 2.0 and the targets are not the same bit depth.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.SetRenderTargetRange(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonRenderTarget},GorgonLibrary.Graphics.GorgonDepthStencil)">
            <summary>
            Function to set a range of render targets.
            </summary>
            <param name="targets">Render targets to set.</param>
            <param name="depthStencil">The depth/stencil buffer to use.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to the <paramref name="targets"/> parameter will set the bindings to empty.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList"/> class.
            </summary>
            <param name="graphics">Graphics interface.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.IndexOf(GorgonLibrary.Graphics.GorgonRenderTarget)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonRenderTarget}#Insert(System.Int32,GorgonLibrary.Graphics.GorgonRenderTarget)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonRenderTarget}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonRenderTarget}#Add(GorgonLibrary.Graphics.GorgonRenderTarget)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonRenderTarget}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.Contains(GorgonLibrary.Graphics.GorgonRenderTarget)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.CopyTo(GorgonLibrary.Graphics.GorgonRenderTarget[],System.Int32)">
            <summary>
            Function to copy the bound targets to an array.
            </summary>
            <param name="array">The array to receive the targets.</param>
            <param name="arrayIndex">Index to start writing at.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonRenderTarget}#Remove(GorgonLibrary.Graphics.GorgonRenderTarget)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.Count">
            <summary>
            Property to return the number of render targets.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.DepthStencilBuffer">
            <summary>
            Property to set or return the depth/stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.Item(System.String)">
            <summary>
            Property to return a render target by name if bound.
            </summary>
            <remarks>This property is read-only.  To set a render target, use the default property that uses an index.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.Item(System.Int32)">
            <summary>
            Property to set or return a render target binding.
            </summary>
            <remarks>This will set the depth/stencil buffer to the one that's assigned to the render target.  If there is a need to set a separate depth/stencil, then use then 
            <see cref="M:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.SetRenderTarget">SetRenderTarget</see> method.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonOutputMerger.GorgonRenderTargetList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonRenderStatistics">
            <summary>
            Rendering statistics.
            </summary>
            <remarks>Returns various bits of information about rendering.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderStatistics.EndFrame">
            <summary>
            Function to reset various frame-related pieces of data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderStatistics.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.GorgonRenderStatistics"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.DrawCallCount">
            <summary>
            Property to return the number of draw calls.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.VertexBufferCount">
            <summary>
            Property to return the number of vertex buffers allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.VertexBufferSize">
            <summary>
            Property to return the size, in bytes, of all the vertex buffers allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.IndexBufferCount">
            <summary>
            Property to return the number of index buffers allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.IndexBufferSize">
            <summary>
            Property to return the size, in bytes, of all the index buffers allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.ConstantBufferCount">
            <summary>
            Property to return the number of constant buffers allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.ConstantBufferSize">
            <summary>
            Property to return the size, in bytes, of all the constant buffers allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.TextureCount">
            <summary>
            Property to return the number of textures allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.TextureSize">
            <summary>
            Property to return the size, in bytes, of all the textures allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.RenderTargetCount">
            <summary>
            Property to return the number of render targets allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.RenderTargetSize">
            <summary>
            Property to return the size, in bytes, of all the render targets allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.DepthBufferCount">
            <summary>
            Property to return the number of depth buffers allocated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderStatistics.DepthBufferSize">
            <summary>
            Property to return the size, in bytes, of all the depth buffers allocated.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.PrimitiveType">
            <summary>
            Primitive type.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PointList">
            <summary>
            A list of points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.LineList">
            <summary>
            A list of lines.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.LineStrip">
            <summary>
            A strip of lines.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.TriangleList">
            <summary>
            A list of triangles.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.TriangleStrip">
            <summary>
            A strip of triangles.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.LineListWithAdjacency">
            <summary>
            A list of lines including adjacency information.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.LineStripWithAdjacency">
            <summary>
            A strip of lines including adjacency information.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.TriangleListWithAdjacency">
            <summary>
            A list of triangles including adjacency information.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.TriangleStripWithAdjacency">
            <summary>
            A strip of triangles including adjacency information.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith1ControlPoints">
            <summary>
            A patch list with 1 control point.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith2ControlPoints">
            <summary>
            A patch list with 2 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith3ControlPoints">
            <summary>
            A patch list with 3 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith4ControlPoints">
            <summary>
            A patch list with 4 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith5ControlPoints">
            <summary>
            A patch list with 5 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith6ControlPoints">
            <summary>
            A patch list with 6 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith7ControlPoints">
            <summary>
            A patch list with 7 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith8ControlPoints">
            <summary>
            A patch list with 8 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith9ControlPoints">
            <summary>
            A patch list with 9 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith10ControlPoints">
            <summary>
            A patch list with 10 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith11ControlPoints">
            <summary>
            A patch list with 11 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith12ControlPoints">
            <summary>
            A patch list with 12 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith13ControlPoints">
            <summary>
            A patch list with 13 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith14ControlPoints">
            <summary>
            A patch list with 14 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith15ControlPoints">
            <summary>
            A patch list with 15 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith16ControlPoints">
            <summary>
            A patch list with 16 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith17ControlPoints">
            <summary>
            A patch list with 17 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith18ControlPoints">
            <summary>
            A patch list with 18 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith19ControlPoints">
            <summary>
            A patch list with 19 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith20ControlPoints">
            <summary>
            A patch list with 20 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith21ControlPoints">
            <summary>
            A patch list with 21 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith22ControlPoints">
            <summary>
            A patch list with 22 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith23ControlPoints">
            <summary>
            A patch list with 23 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith24ControlPoints">
            <summary>
            A patch list with 24 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith25ControlPoints">
            <summary>
            A patch list with 25 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith26ControlPoints">
            <summary>
            A patch list with 26 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith27ControlPoints">
            <summary>
            A patch list with 27 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith28ControlPoints">
            <summary>
            A patch list with 28 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith29ControlPoints">
            <summary>
            A patch list with 29 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith30ControlPoints">
            <summary>
            A patch list with 30 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith31ControlPoints">
            <summary>
            A patch list with 31 control points.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.PrimitiveType.PatchListWith32ControlPoints">
            <summary>
            A patch list with 32 control points.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonInputGeometry">
            <summary>
            Manages the input bindings such as the vertex/index buffer, input layout and primitive types.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.SetIndexBuffer(GorgonLibrary.Graphics.GorgonIndexBuffer,System.Int32)">
            <summary>
            Function to set the current index buffer, with an offset inside the buffer.
            </summary>
            <param name="buffer">Buffer to set.</param>
            <param name="offset">Offset into the buffer to use, in bytes.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.CreateIndexBuffer(System.Int32,GorgonLibrary.Graphics.BufferUsage,System.Boolean)">
            <summary>
            Function to create a index buffer.
            </summary>
            <param name="size">Size of the buffer, in bytes.</param>
            <param name="is32bit">TRUE to indicate that we're using 32 bit indices, FALSE to use 16 bit indices </param>
            <param name="usage">Usage of the buffer.</param>
            <returns>A new index buffer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="size"/> parameter is less than 1.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="usage"/> parameter is set to Staging or Immutable.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.CreateIndexBuffer``1(GorgonLibrary.Graphics.BufferUsage,System.Boolean,System.Collections.Generic.IList{``0})">
            <summary>
            Function to create a index buffer.
            </summary>
            <param name="usage">Usage of the buffer.</param>
            <param name="is32bit">TRUE to indicate that we're using 32 bit indices, FALSE to use 16 bit indices </param>
            <param name="data">Data used to initialize the buffer.</param>
            <typeparam name="T">Type of data used to populate the buffer.</typeparam>
            <returns>A new index buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="usage"/> parameter is set to Staging.
            <para>-or-</para>
            <para>Thrown when the usage parameter is set to Immutable and the <paramref name="data"/> is NULL (Nothing in VB.Net) or empty.</para>
            </exception>
            <remarks>If creating an immutable index buffer, be sure to pre-populate it via the initialData parameter.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.CreateIndexBuffer(System.Int32,GorgonLibrary.Graphics.BufferUsage,System.Boolean,GorgonLibrary.GorgonDataStream)">
            <summary>
            Function to create a index buffer.
            </summary>
            <param name="size">Size of the buffer, in bytes.</param>
            <param name="usage">Usage of the buffer.</param>
            <param name="is32bit">TRUE to indicate that we're using 32 bit indices, FALSE to use 16 bit indices </param>
            <param name="initialData">Initial data to populate the index buffer with.</param>
            <returns>A new index buffer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="size"/> parameter is less than 1.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="usage"/> parameter is set to Staging.
            <para>-or-</para>
            <para>Thrown when the usage parameter is set to Immutable and the <paramref name="initialData"/> is NULL (Nothing in VB.Net).</para>
            </exception>
            <remarks>If creating an immutable index buffer, be sure to pre-populate it via the initialData parameter.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.CreateVertexBuffer(System.Int32,GorgonLibrary.Graphics.BufferUsage)">
            <summary>
            Function to create a vertex buffer.
            </summary>
            <param name="size">Size of the buffer, in bytes.</param>
            <param name="usage">Usage of the buffer.</param>
            <returns>A new vertex buffer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="size"/> parameter is less than 1.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="usage"/> parameter is set to Staging or Immutable.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.CreateVertexBuffer``1(GorgonLibrary.Graphics.BufferUsage,System.Collections.Generic.IList{``0})">
            <summary>
            Function to create a vertex buffer.
            </summary>
            <param name="usage">Usage of the buffer.</param>
            <param name="data">Data used to initialize the buffer.</param>
            <typeparam name="T">Type of data used to populate the buffer.</typeparam>
            <returns>A new vertex buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="usage"/> parameter is set to Staging.
            <para>-or-</para>
            <para>Thrown when the usage parameter is set to Immutable and the <paramref name="data"/> is NULL (Nothing in VB.Net) or empty.</para>
            </exception>
            <remarks>If creating an immutable vertex buffer, be sure to pre-populate it via the initialData parameter.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.CreateVertexBuffer(System.Int32,GorgonLibrary.Graphics.BufferUsage,GorgonLibrary.GorgonDataStream)">
            <summary>
            Function to create a vertex buffer.
            </summary>
            <param name="size">Size of the buffer, in bytes.</param>
            <param name="usage">Usage of the buffer.</param>
            <param name="initialData">Initial data to populate the vertex buffer with.</param>
            <returns>A new vertex buffer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="size"/> parameter is less than 1.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="usage"/> parameter is set to Staging.
            <para>-or-</para>
            <para>Thrown when the usage parameter is set to Immutable and the <paramref name="initialData"/> is NULL (Nothing in VB.Net).</para>
            </exception>
            <remarks>If creating an immutable vertex buffer, be sure to pre-populate it via the initialData parameter.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.CreateInputLayout(System.String,System.Type,GorgonLibrary.Graphics.GorgonShader)">
            <summary>
            Function to create an input layout object from a predefined type.
            </summary>
            <param name="name">Name of the input layout.</param>
            <param name="type">Type to evaluate.</param>
            <param name="shader">The shader that holds the input layout signature.</param>
            <returns>The input layout object to create.</returns>
            <exception cref="T:System.ArgumentException">Thrown when then <paramref name="name"/> parameter is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="shader"/> parameter is NULL (Nothing in VB.Net).
            <para>-or-</para>
            <para>Thrown when the <paramref name="type"/> parameter is NULL.</para>
            <para>-or-</para>
            <para>Thrown when the name parameter is NULL.</para>
            </exception>
            <remarks>The shader parameter is used to compare input layout on the shader side with the input layout.  If the layout is mismatched, a warning will appear in the debug output.
            <para>Note that any shader can be used with the input layout as long as the shader contains the same layout for the input, i.e. there is no need to create a new layout for each shader if the element layouts are identical.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.CreateInputLayout(System.String,GorgonLibrary.Graphics.GorgonShader)">
            <summary>
            Function to create an input layout object.
            </summary>
            <param name="name">Name of the input layout.</param>
            <param name="shader">The shader that holds the input layout signature.</param>
            <returns>The input layout object to create.</returns>
            <exception cref="T:System.ArgumentException">Thrown when then name parameter is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="shader"/> parameter is NULL (Nothing in VB.Net).
            <para>-or-</para>
            <para>Thrown when the <paramref name="name"/> parameter is NULL.</para>
            </exception>
            <remarks>The shader parameter is used to compare input layout on the shader side with the input layout.  If the layout is mismatched, a warning will appear in the debug output.
            <para>Note that any shader can be used with the input layout as long as the shader contains the same layout for the input, i.e. there is no need to create a new layout for each shader if the element layouts are identical.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonInputGeometry"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputGeometry.IndexBuffer">
            <summary>
            Property to set or return the index buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputGeometry.VertexBuffers">
            <summary>
            Property to return the vertex buffer binding interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputGeometry.PrimitiveType">
            <summary>
            Property to set or return the primtive type.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputGeometry.Layout">
            <summary>
            Property to set or return the input layout.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList">
            <summary>
            A list of vertex buffer bindings.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.IndexOf(GorgonLibrary.Graphics.GorgonVertexBuffer)">
            <summary>
            Function to find the index of a vertex buffer binding that contains the specified vertex buffer.
            </summary>
            <param name="buffer">Vertex buffer to find.</param>
            <returns>The index of the buffer binding in the list, -1 if not found.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.Contains(GorgonLibrary.Graphics.GorgonVertexBuffer)">
            <summary>
            Function to return whether the vertex buffer specified has a binding in the list.
            </summary>
            <param name="buffer">The buffer to find.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.SetVertexBindingRange(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonVertexBufferBinding})">
            <summary>
            Function to set a series of bindings at once.
            </summary>
            <param name="binding">Bindings to set.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to the <paramref name="binding"/> parameter will set the bindings to empty.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.SetVertexBindingRange(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonVertexBufferBinding},System.Int32)">
            <summary>
            Function to set a series of bindings at once.
            </summary>
            <param name="binding">Bindings to set.</param>
            <param name="startIndex">Index to start writing at.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to the <paramref name="binding"/> parameter will set the bindings to empty (starting at <paramref name="startIndex"/>).</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the startIndex parameter is less than 0 or greater than the number of available bindings - 1.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator&lt;GorgonVertexBufferBinding&gt;"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.IndexOf(GorgonLibrary.Graphics.GorgonVertexBufferBinding)">
            <summary>
            Function to return the index of a binding.
            </summary>
            <param name="item">The binding to find.</param>
            <returns>The index of the binding, if found.  -1 if the binding was not found.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonVertexBufferBinding}#Insert(System.Int32,GorgonLibrary.Graphics.GorgonVertexBufferBinding)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonVertexBufferBinding}#RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonVertexBufferBinding}#Add(GorgonLibrary.Graphics.GorgonVertexBufferBinding)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonVertexBufferBinding}#Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.Contains(GorgonLibrary.Graphics.GorgonVertexBufferBinding)">
            <summary>
            Function to return whether an item exists within this collection.
            </summary>
            <param name="item">Item to scan for.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.CopyTo(GorgonLibrary.Graphics.GorgonVertexBufferBinding[],System.Int32)">
            <summary>
            Function to copy the bindings to an external array.
            </summary>
            <param name="array">The array to copy into.</param>
            <param name="arrayIndex">Index of the array to start writing at.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonVertexBufferBinding}#Remove(GorgonLibrary.Graphics.GorgonVertexBufferBinding)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.Count">
            <summary>
            Property to return the number of available bindings.
            </summary>
            <remarks>On Shader Model 4 with a 4.1 profile and better, the number of bindings available is 32, otherwise it is 16.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.Item(System.Int32)">
            <summary>
            Property to set or return the vertex buffer binding for a given slot.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputGeometry.GorgonVertexBufferBindingList.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVideoOutputCollection">
            <summary>
            A collection of video outputs for a video device.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.ClearOutputs">
            <summary>
            Function to clear the outputs from the list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.Refresh(SharpDX.Direct3D11.Device)">
            <summary>
            Function to retrieve the outputs for an adapter.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.#ctor(GorgonLibrary.Graphics.GorgonVideoDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVideoOutputCollection"/> class.
            </summary>
            <param name="videoDevice">Video device that owns the outputs in this collection.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.IndexOf(GorgonLibrary.Graphics.GorgonVideoOutput)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonVideoOutput}#Insert(System.Int32,GorgonLibrary.Graphics.GorgonVideoOutput)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonVideoOutput}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonVideoOutput}#Add(GorgonLibrary.Graphics.GorgonVideoOutput)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonVideoOutput}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.Contains(GorgonLibrary.Graphics.GorgonVideoOutput)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.CopyTo(GorgonLibrary.Graphics.GorgonVideoOutput[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonVideoOutput}#Remove(GorgonLibrary.Graphics.GorgonVideoOutput)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutputCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutputCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
              </returns>
              
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutputCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutputCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture1DData">
            <summary>
            This is used to initialize a 1 dimensional texture.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ISubResourceData">
            <summary>
            Data to pass in to sub resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ISubResourceData.Size">
            <summary>
            Property to return size, in bytes, of the data being passed to the sub resource.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.ISubResourceData.RowPitch">
            <summary>
            Property to return the number of bytes between each line in a texture.
            </summary>
            <remarks>This is only used for 2D and 3D textures and has no meaning elsewhere.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ISubResourceData.SlicePitch">
            <summary>
            Property to return the number of bytes between each depth slice in a 3D texture.
            </summary>
            <remarks>This is only used for 3D textures and has no meaning elsewhere.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.ISubResourceData.Data">
            <summary>
            Property to return the data to pass to a resource (like a texture).
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1DData.Convert(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.ISubResourceData})">
            <summary>
            Function to convert Gorgon texture 3D data into DirectX data boxes.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>An array of boxes.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1DData.#ctor(GorgonLibrary.GorgonDataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture2DData"/> struct.
            </summary>
            <param name="data">Data to pass to the texture.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="data"/> parameter is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DData.Size">
            <summary>
            Property to return size, in bytes, of the data being passed to the sub resource.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DData.GorgonLibrary#Graphics#ISubResourceData#RowPitch">
            <summary>
            Property to return the number of bytes between each line in a texture.
            </summary>
            <remarks>This is only used for 2D and 3D textures and has no meaning elsewhere.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DData.GorgonLibrary#Graphics#ISubResourceData#SlicePitch">
            <summary>
            Gets the slice pitch.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1DData.Data">
            <summary>
            Property to return the data to pass to a resource (like a texture).
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture2DData">
            <summary>
            This is used to initialize a 2 dimensional texture.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DData.Convert(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.ISubResourceData})">
            <summary>
            Function to convert Gorgon texture 2D data into DirectX data rectangles.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>An array of rectangles.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DData.#ctor(GorgonLibrary.GorgonDataStream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture2DData"/> struct.
            </summary>
            <param name="data">Data to assign to the texture.</param>
            <param name="rowPitch">Number of bytes between each line in the texture.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="data"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="rowPitch"/> parameter is less than or equal to 0.</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DData.Size">
            <summary>
            Property to return size, in bytes, of the data being passed to the sub resource.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DData.RowPitch">
            <summary>
            Property to return the number of bytes between each line in a texture.
            </summary>
            <remarks>This is only used for 2D and 3D textures and has no meaning elsewhere.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DData.GorgonLibrary#Graphics#ISubResourceData#SlicePitch">
            <summary>
            Gets the slice pitch.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2DData.Data">
            <summary>
            Property to return the data to pass to a resource (like a texture).
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture3DData">
            <summary>
            This is used to initialize a 3 dimensional texture.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3DData.Convert(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.ISubResourceData})">
            <summary>
            Function to convert Gorgon texture 3D data into DirectX data boxes.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>An array of boxes.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3DData.#ctor(GorgonLibrary.GorgonDataStream,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture3DData"/> struct.
            </summary>
            <param name="data">The data used to initialize the texture.</param>
            <param name="rowPitch">The number of bytes between each row of the texture.</param>
            <param name="slicePitch">The number of bytes between each depth slice of the texture.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="data"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="rowPitch"/> or the <paramref name="slicePitch"/> parameters are less than or equal to 0.
            </exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DData.Size">
            <summary>
            Property to return size, in bytes, of the data being passed to the sub resource.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DData.RowPitch">
            <summary>
            Property to return the number of bytes between each line in a texture.
            </summary>
            <remarks>This is only used for 2D and 3D textures and has no meaning elsewhere.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DData.SlicePitch">
            <summary>
            Property to return the number of bytes between each depth slice in a 3D texture.
            </summary>
            <remarks>This is only used for 3D textures and has no meaning elsewhere.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3DData.Data">
            <summary>
            Property to return the data to pass to a resource (like a texture).
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.StencilOperations">
            <summary>
            Operations applied to stencil buffers.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Keep">
            <summary>
            Keep existing stencil data.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Zero">
            <summary>
            Set the stencil data to 0.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Replace">
            <summary>
            Set the stencil data to a reference value defined in the depth/stencil state object.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.IncrementClamp">
            <summary>
            Increment the stencil value by 1 and clamp the result.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.DecrementClamp">
            <summary>
            Decrement the stencil value by 1 and clamp the result.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Invert">
            <summary>
            Invert the stencil value.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Increment">
            <summary>
            Increment the stencil value by 1 and wrap if necessary.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.StencilOperations.Decrement">
            <summary>
            Decrement the stencil value by 1 and wrap if necessary.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonDepthStencilStates">
            <summary>
            States for the depth/stencil.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.DefaultStates">
            <summary>
            Default depth/stencil states.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.StencilFrontFace">
            <summary>
            Operations to perform on the front face in a stencil test.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.StencilBackFace">
            <summary>
            Operations to perform on the back face in a stencil test.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.IsDepthEnabled">
            <summary>
            Is the depth buffer enabled or not.
            </summary>
            <remarks>The default value is TRUE.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.IsStencilEnabled">
            <summary>
            Is the stencil buffer enabled or not.
            </summary>
            <remarks>The default value is FALSE.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.IsDepthWriteEnabled">
            <summary>
            Is depth writing enabled or not.
            </summary>
            <remarks>The default value is TRUE.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthComparison">
            <summary>
            Comparison operator for the depth buffer test.
            </summary>
            <remarks>The default value is Less</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.StencilReadMask">
            <summary>
            The mask used to read from the stencil buffer.
            </summary>
            <remarks>The default value is 0xFF.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.StencilWriteMask">
            <summary>
            The mask used to write to the stencil buffer.
            </summary>
            <remarks>The default value is 0xFF.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.Equals(GorgonLibrary.Graphics.GorgonDepthStencilStates@,GorgonLibrary.Graphics.GorgonDepthStencilStates@)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first depth stencil state to compare.</param>
            <param name="y">The second depth stencil state to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.op_Equality(GorgonLibrary.Graphics.GorgonDepthStencilStates,GorgonLibrary.Graphics.GorgonDepthStencilStates)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.op_Inequality(GorgonLibrary.Graphics.GorgonDepthStencilStates,GorgonLibrary.Graphics.GorgonDepthStencilStates)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.Equals(GorgonLibrary.Graphics.GorgonDepthStencilStates)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations">
            <summary>
            Operations to perform on the depth/stencil buffer.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.ComparisonOperator">
            <summary>
            The comparison operator for the stencil testing.
            </summary>
            <remarks>The default value is Always.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.FailOperation">
            <summary>
            The operation to perform when the test fails.
            </summary>
            <remarks>The default value is Keep.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.DepthFailOperation">
            <summary>
            The operation to perform when the depth test fails.
            </summary>
            <remarks>The default value is Keep.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.PassOperation">
            <summary>
            The operation to perform when the test succeeds.
            </summary>
            <remarks>The default value is Keep.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.Equals(GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations@,GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations@)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first depth stencil operation to compare.</param>
            <param name="y">The second depth stencil operation to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.op_Equality(GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations,GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.op_Inequality(GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations,GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations.Equals(GorgonLibrary.Graphics.GorgonDepthStencilStates.DepthStencilOperations)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonDepthStencilRenderState">
            <summary>
            Depth/stencil buffer state.
            </summary>
            <remarks>Used to control how depth/stencil testing is applied to a scene.
            <para>State objects are immutable.  Therefore, when an application requires a different state, the user must create a new state value, give it the necessary parameters and pass it to the 
            appropriate render state.  This is different from previous methods of applying state, where one would modify a render state variable and it would apply immediately.  This model incurred performance penalties 
            from too many state changes.  This method does not suffer as much because the states can be reused.  Currently, the system will cache 4096 unique state values for each render state type and 
            will reuse these state settings to lower the impact of changing states.
            </para>
            </remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonStateObject`1">
            <summary>
            A base object for a single state.
            </summary>
            <typeparam name="T">Type of state description.</typeparam>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonStateCache`1">
            <summary>
            A cache for states.
            </summary>
            <typeparam name="T">Type of state description.</typeparam>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.EvictCache">
            <summary>
            Function to clean up the cache.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.Contains(`0)">
            <summary>
            Function to return whether the cache has the specified key.
            </summary>
            <param name="item">Key to look up.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.Touch(`0)">
            <summary>
            Function touch an item in the cache.
            </summary>
            <param name="item">Item to touch.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.GetItem(`0)">
            <summary>
            Function to retrieve a cached item.
            </summary>
            <param name="item">Item to retrieve.</param>
            <returns>The cached item.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.SetItem(`0,System.IDisposable)">
            <summary>
            Function to set an item in the cache.
            </summary>
            <param name="item">Item key.</param>
            <param name="value">Value for the item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.FreeResources">
            <summary>
            Function to free any backing resources for the state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonStateCache`1"/> class.
            </summary>
            <param name="graphics">The graphics interface to use.</param>
            <param name="cacheLimit">Size limit for the cache.</param>
            <param name="cacheObjectLifetime">The lifetime of an object in the cache, in milliseconds.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonStateCache`1.CacheLimit">
            <summary>
            Property to return the limit for the cache.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonStateCache`1.StateCacheCount">
            <summary>
            Property to return the number of items in the state cache.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonStateCache`1.Graphics">
            <summary>
            Property to return the graphics interface that created this state object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonStateCache`1.CachedObject">
            <summary>
            A cached object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.CachedObject.Touch">
            <summary>
            Function to update the last used time for this object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateCache`1.CachedObject.#ctor(System.IDisposable,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonStateCache`1.CachedObject"/> class.
            </summary>
            <param name="cacheObject">The cache object.</param>
            <param name="timeOutMilliseconds">The number of milliseconds the object has to live after the last use.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonStateCache`1.CachedObject.LastUsed">
            <summary>
            Property to set or return the time that the object was last used.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonStateCache`1.CachedObject.IsExpired">
            <summary>
            Property to return whether this object is expired or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonStateCache`1.CachedObject.CacheObject">
            <summary>
            Object being cached.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateObject`1.GetState">
            <summary>
            Function to get the state from the state cache.
            </summary>
            <returns>The Direct3D state object to apply.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateObject`1.ApplyState(System.IDisposable)">
            <summary>
            Function to apply the state to the appropriate state object.
            </summary>
            <param name="state">The Direct3D state object to apply.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateObject`1.Convert">
            <summary>
            Function to convert this state object to the native state object type.
            </summary>
            <returns>The Direct 3D state object.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonStateObject`1.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonStateObject`1"/> class.
            </summary>
            <param name="graphics">The graphics interface to use.</param>
            <param name="cacheLimit">Size limit for the cache.</param>
            <param name="cacheObjectLifetime">The lifetime of an object in the cache, in milliseconds.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonStateObject`1.States">
            <summary>
            Property to set or return the immutable states for this state object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilRenderState.ApplyState(System.IDisposable)">
            <summary>
            Function to apply the state to the appropriate state object.
            </summary>
            <param name="state">The Direct3D state object to apply.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilRenderState.Convert">
            <summary>
            Function to convert this state object to the native state object type and apply it.
            </summary>
            <returns>A direct 3D depth/stencil state object.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilRenderState.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonDepthStencilRenderState"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns this object.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencilRenderState.DepthStencilReference">
            <summary>
            Property to set or return the depth stencil reference value.
            </summary>
            <remarks>This is the value used when the stencil state is set to Replace.
            <para>The default value is 0.</para>
            </remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.InputElementAttribute">
            <summary>
            An attribute to mark a field in a structure as an input element.
            </summary>
            <remarks>Apply this to a field in a structure/object to allow the <see cref="T:GorgonLibrary.Graphics.GorgonInputLayout">GorgonInputLayout</see> to parse the object and build
            an input element element list from it.
            <para>Using Unknown for the format will tell the library to try and figure out the type from the field/property.  Use this with caution, it will be very explicit 
            about the type it chooses.  This will only work on primitive types such as byte, (u)short, (u)int, float and double or the GorgonVector2/3/4D types.  Furthermore, it can only
            deduce the format from the type given, so expecting to use a float x,y,z will result in only x getting the attribute.  That is, it is not smart enough to deduce context.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.InputElementAttribute.#ctor(System.String,GorgonLibrary.Graphics.BufferFormat,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.InputElementAttribute"/> class.
            </summary>
            <param name="context">The context of the element.</param>
            <param name="format">The format/type of the element.</param>
            <param name="offset">Offset of the element in the structure.</param>
            <param name="index">The index for the element.</param>
            <param name="slot">The vertex buffer slot for the element.</param>
            <param name="instanced">TRUE if used for instanced data, FALSE if not.</param>
            <param name="instanceCount">The number of instances allowed.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.InputElementAttribute.#ctor(System.String,GorgonLibrary.Graphics.BufferFormat,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.InputElementAttribute"/> class.
            </summary>
            <param name="context">The context of the element.</param>
            <param name="format">The format/type of the element.</param>
            <param name="offset">Offset of the element in the structure.</param>
            <param name="index">The index for the element.</param>
            <param name="slot">The vertex buffer slot for the element.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.InputElementAttribute.#ctor(System.String,GorgonLibrary.Graphics.BufferFormat,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.InputElementAttribute"/> class.
            </summary>
            <param name="context">The context of the element.</param>
            <param name="format">The format/type of the element.</param>
            <param name="offset">Offset of the element in the structure.</param>
            <param name="index">The index for the element.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.InputElementAttribute.#ctor(System.String,GorgonLibrary.Graphics.BufferFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.InputElementAttribute"/> class.
            </summary>
            <param name="context">The context of the element.</param>
            <param name="format">The format/type of the element.</param>
            <param name="offset">Offset of the element in the structure.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.InputElementAttribute.#ctor(System.Int32,System.String,GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.InputElementAttribute"/> class.
            </summary>
            <param name="fieldOrder">Explicit layout order of the field when being parsed from the type.</param>
            <param name="context">The context of the element.</param>
            <param name="format">The format/type of the element.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.InputElementAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.InputElementAttribute"/> class.
            </summary>
            <param name="fieldOrder">Explicit layout order of the field when being parsed from the type.</param>
            <param name="context">The context of the element.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.InputElementAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.InputElementAttribute"/> class.
            </summary>
            <param name="fieldOrder">Explicit layout order of the field when being parsed from the type.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.InputElementAttribute.ExplicitOrder">
            <summary>
            Property to return the explicit order of the field.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.InputElementAttribute.AutoOffset">
            <summary>
            Property to return whether to use automatic calculation for the offset.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.InputElementAttribute.Context">
            <summary>
            Property to return the context of the element.
            </summary>
            <remarks>This is a string value that corresponds to a shader input.  For example, to specify a position, the user would set this to "position".  
            These contexts can be named whatever the user wishes.  However, some APIs (such as Direct3D 9) only have a set number of contexts and thus the
            user should pass in one of the pre-defined constants for the context.
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.InputElementAttribute.Index">
            <summary>
            Property to return the index of the context.
            </summary>
            <remarks>This is used to denote the same context but at another index.  For example, to specify a second set of texture coordinates, set this 
            to 1.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.InputElementAttribute.Format">
            <summary>
            Property to return the format of the data.
            </summary>
            <remarks>This is used to specify the format and type of the element.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.InputElementAttribute.Slot">
            <summary>
            Property to return the vertex buffer slot this element will use.
            </summary>
            <remarks>Multiple vertex buffers can be used to identify parts of the same vertex.  This is used to minimize the amount of data being written to a 
            vertex buffer and provide better performance.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.InputElementAttribute.Instanced">
            <summary>
            Property to return whether this data is instanced or per vertex.
            </summary>
            <remarks>Indicates that the element should be included in instancing.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.InputElementAttribute.Offset">
            <summary>
            Property to return the offset of the element within the structure.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.InputElementAttribute.InstanceCount">
            <summary>
            Property to return the number of instances to draw.
            </summary>
            <remarks>The number of times this element should be used before moving to the next element.</remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.DeviceFeatureLevel">
            <summary>
            Available feature levels for the video device.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.DeviceFeatureLevel.Unsupported">
            <summary>
            Gorgon does not support any feature level for the video device.
            </summary>
            <remarks>This value is exclusive.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.DeviceFeatureLevel.SM2_a_b">
            <summary>
            Shader model 2.0, with a 2.0a vertex shader profile and a 2.0b pixel shader profile.
            </summary>
            <remarks>
            This the equivalent of a Direct 3D 9.0c video device.
            <para>Please note that this is for video cards that support a vertex shader model of 2.0a and a pixel shader model of 2.0b.  Nothing below that (i.e. vanilla SM 2.0) will work.  This is a limitation
            imposed by Gorgon to keep the code paths smaller.</para>
            <para>The actual restriction of shader model 2.0 is from the Direct 3D 11 API itself.  There is no way around this except to upgrade the hardware to shader model 4 hardware.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.DeviceFeatureLevel.SM4">
            <summary>
            Shader model 4.0
            </summary>
            <remarks>This the equivalent of a Direct 3D 10.0 video device.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.DeviceFeatureLevel.SM4_1">
            <summary>
            Shader model 4.0 with a 4.1 profile.
            </summary>
            <remarks>This the equivalent of a Direct 3D 10.1 video device.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.DeviceFeatureLevel.SM5">
            <summary>
            Shader model 5.0.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.VideoDeviceType">
            <summary>
            Video device types.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VideoDeviceType.Hardware">
            <summary>
            Hardware video device.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VideoDeviceType.Software">
            <summary>
            Software video device (WARP).
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.VideoDeviceType.ReferenceRasterizer">
            <summary>
            Reference rasterizer video device.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVideoDevice">
            <summary>
            Contains information about a video device.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.EnumerateFeatureLevels(SharpDX.Direct3D.FeatureLevel)">
            <summary>
            Function to enumerate a D3D feature level to a Gorgon device feature level.
            </summary>
            <param name="featureLevel">D3D Feature level to enumerate.</param>
            <returns>Gorgon device feature level.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.Convert(GorgonLibrary.Graphics.DeviceFeatureLevel)">
            <summary>
            Function to convert a Gorgon feature level into a D3D feature level.
            </summary>
            <param name="featureLevel">Feature level to convert.</param>
            <returns>The D3D feature level.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.GetDevice">
            <summary>
            Function to retrieve the Direct3D device object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.ReleaseTempDevice">
            <summary>
            Function to release the temporary device object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.CreateD3DDeviceNoLogging(GorgonLibrary.Graphics.DeviceFeatureLevel)">
            <summary>
            Function to create the Direct3D device object.
            </summary>
            <param name="maxFeatureLevel">Maximum feature level to support.</param>
            <returns>The Direct3D 11 device object.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.CreateD3DDevice(GorgonLibrary.Graphics.DeviceFeatureLevel)">
            <summary>
            Function to retrieve the D3D 11 device object associated with this video device.
            </summary>
            <param name="maxFeatureLevel">Maximum feature level to support.</param>
            <returns>The Direct3D 11 device object.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.SupportsDisplayFormat(GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Function to determine if the specified format is supported for display.
            </summary>
            <param name="format">Format to check.</param>
            <returns>TRUE if the format is supported for displaying on the video device, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.Supports3DTextureFormat(GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Function to determine if the specified format is supported for a 3D texture.
            </summary>
            <param name="format">Format to check.</param>
            <returns>TRUE if the format is supported for the texture, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.SupportsRenderTargetFormat(GorgonLibrary.Graphics.BufferFormat,System.Boolean)">
            <summary>
            Function to determine if the specified format is supported for a render target.
            </summary>
            <param name="format">Format to check.</param>
            <param name="isMultiSampled">TRUE if using a multisampled render target, FALSE if not.</param>
            <returns>TRUE if the format is supported for the render target, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.Supports2DTextureFormat(GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Function to determine if the specified format is supported for a 2D texture.
            </summary>
            <param name="format">Format to check.</param>
            <returns>TRUE if the format is supported for the texture, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.Supports1DTextureFormat(GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Function to determine if the specified format is supported for a 1D texture.
            </summary>
            <param name="format">Format to check.</param>
            <returns>TRUE if the format is supported for the texture, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.SupportsDepthFormat(GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Function to determine if the specified depth buffer format is supported.
            </summary>
            <param name="format">Format to check.</param>
            <returns>TRUE if the format is supported as a depth/stencil buffer, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.GetMultiSampleQuality(GorgonLibrary.Graphics.BufferFormat,System.Int32)">
            <summary>
            Function to return the maximum number of quality levels supported by the device for multisampling.
            </summary>
            <param name="format">Format to test.</param>
            <param name="count">Number of multisamples.</param>
            <returns>The maximum quality level for the format, or 0 if not supported.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.#ctor(SharpDX.DXGI.Adapter1,GorgonLibrary.Graphics.VideoDeviceType)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVideoDevice"/> class.
            </summary>
            <param name="adapter">DXGI video adapter.</param>
            <param name="deviceType">Type of video device.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoDevice.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.GIFactory">
            <summary>
            Property to set or return the DX GI factory interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.GIAdapter">
            <summary>
            Property to return the DX GI adapter interface for this video device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.Graphics">
            <summary>
            Property to set or return the graphics interface bound with this device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.VideoDeviceType">
            <summary>
            Property to return the type of video device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.HardwareFeatureLevel">
            <summary>
            Property to return the highest feature level that the hardware can support.
            </summary>
            <remarks>This is independant of the <see cref="P:GorgonLibrary.Graphics.GorgonGraphics.RequestedFeatureLevel">GorgonGraphics.RequestedFeatureLevel</see> property and will always return the true hardware feature level.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.SupportedFeatureLevel">
            <summary>
            Property to return the supported feature levels.
            </summary>
            <remarks>
            This property will show either the requested feature level passed into the <see cref="M:GorgonLibrary.Graphics.GorgonGraphics.#ctor(GorgonLibrary.Graphics.GorgonVideoDevice,GorgonLibrary.Graphics.DeviceFeatureLevel)">GorgonGraphics constructor</see>, or the 
            <see cref="P:GorgonLibrary.Graphics.GorgonVideoDevice.HardwareFeatureLevel">GorgonVideoDevice.HardwareFeatureLevel</see> property, depending on which is higher.
            <para>Due to the restrictions that may be imposed by specifying a feature level, the return value may differ from the <see cref="P:GorgonLibrary.GorgonGraphics.GorgonVideoDevice.HardwareFeatureLevels">HardwareFeatureLevels</see> property.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.DeviceID">
            <summary>
            Property to return the device ID.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.UUID">
            <summary>
            Property to return the unique identifier for the device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.Revision">
            <summary>
            Property to return the revision for the device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.SubSystemID">
            <summary>
            Property to return the sub system ID for the device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.VendorID">
            <summary>
            Property to return the vendor ID for the device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.DedicatedSystemMemory">
            <summary>
            Property to return the amount of dedicated system memory for the device, in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.DedicatedVideoMemory">
            <summary>
            Property to return the amount of dedicated video memory for the device, in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.SharedSystemMemory">
            <summary>
            Property to return the amount of shared system memory for the device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.Outputs">
            <summary>
            Property to return the outputs on this device.
            </summary>
            <remarks>The outputs are typically monitors attached to the device.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoDevice.Name">
            <summary>
            Property to return the name of this object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.BufferUsage">
            <summary>
            Buffer usage types.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferUsage.Default">
            <summary>
            Allows read/write access to the buffer from the GPU.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferUsage.Immutable">
            <summary>
            Can only be read by the GPU, cannot be written to or read from by the CPU, and cannot be written to by the GPU.
            </summary>
            <remarks>Pre-initialize any buffer created with this usage, or else you will not be able to after it's been created.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferUsage.Dynamic">
            <summary>
            Allows read access by the GPU and write access by the CPU.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferUsage.Staging">
            <summary>
            Allows reading/writing by the CPU and can be copied to a GPU compatiable buffer (but not used directly by the GPU).
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.BufferLockFlags">
            <summary>
            Flags used when locking the buffer for reading/writing.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferLockFlags.Read">
            <summary>
            Lock the buffer for reading.
            </summary>
            <remarks>This flag is mutually exclusive.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferLockFlags.Write">
            <summary>
            Lock the buffer for writing.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferLockFlags.NoOverwrite">
            <summary>
            Lock the buffer for writing, but guarantee that we will not overwrite a part of the buffer that's already in use.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferLockFlags.Discard">
            <summary>
            Lock the buffer for writing, but mark its contents as invalid.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonBaseBuffer">
            <summary>
            A base buffer object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Initialize(GorgonLibrary.GorgonDataStream)">
            <summary>
            Function used to initialize the buffer with data.
            </summary>
            <param name="data">Data to write.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to the <paramref name="data"/> parameter should ignore the initialization and create the backing buffer as normal.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.LockImpl(GorgonLibrary.Graphics.BufferLockFlags)">
            <summary>
            Function used to lock the underlying buffer for reading/writing.
            </summary>
            <param name="lockFlags">Flags used when locking the buffer.</param>
            <returns>A data stream containing the buffer data.</returns>		
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.UnlockImpl">
            <summary>
            Function called to unlock the underlying data buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.UpdateImpl(GorgonLibrary.GorgonDataStream,System.Int32,System.Int32)">
            <summary>
            Function to update the buffer.
            </summary>
            <param name="stream">Stream containing the data used to update the buffer.</param>
            <param name="offset">Offset, in bytes, into the buffer to start writing at.</param>
            <param name="size">The number of bytes to write.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Copy(GorgonLibrary.Graphics.GorgonBaseBuffer)">
            <summary>
            Function to copy the contents of the specified buffer to this buffer.
            </summary>
            <param name="buffer">Buffer to copy.</param>
            <remarks>This is used to copy data from one GPU buffer to another.  The size of the buffers must be the same.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="buffer"/> size is not equal to the size of this buffer.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this buffer has a usage of Immutable.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Copy(GorgonLibrary.Graphics.GorgonBaseBuffer,System.Int32,System.Int32)">
            <summary>
            Function to copy the contents of the specified buffer to this buffer.
            </summary>
            <param name="buffer">Buffer to copy.</param>
            <param name="sourceStartingIndex">Starting byte index to start copying from.</param>
            <param name="byteCount">The number of bytes to copy.</param>
            <remarks>This is used to copy data from one GPU buffer to another.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="sourceStartingIndex"/> is less than 0 or larger than the size of the source <paramref name="buffer"/>.
            <para>-or-</para>
            <para>Thrown when the <paramref name="byteCount"/> + sourceStartIndex is greater than the size of the source buffer, or less than 0.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this buffer has a usage of Immutable.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Copy(GorgonLibrary.Graphics.GorgonBaseBuffer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to copy the contents of the specified buffer to this buffer.
            </summary>
            <param name="buffer">Buffer to copy.</param>
            <param name="sourceStartingIndex">Starting byte index to start copying from.</param>
            <param name="byteCount">The number of bytes to copy.</param>
            <param name="destOffset">The offset within the destination buffer.</param>
            <remarks>This is used to copy data from one GPU buffer to another.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="sourceStartingIndex"/> is less than 0 or larger than the size of the source <paramref name="buffer"/>.
            <para>-or-</para>
            <para>Thrown when the <paramref name="byteCount"/> + sourceStartIndex is greater than the size of the source buffer, or less than 0.</para>
            <para>-or-</para>
            <para>Thrown when the <paramref name="destOffset"/> + byteCount is greater than the size of this buffer, or less than 0.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this buffer has a usage of Immutable.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Update(GorgonLibrary.GorgonDataStream,System.Int32,System.Int32)">
            <summary>
            Function to update the buffer.
            </summary>
            <param name="stream">Stream containing the data used to update the buffer.</param>
            <param name="offset">Offset, in bytes, into the buffer to start writing at.</param>
            <param name="size">The number of bytes to write.</param>
            <remarks>This method can only be used with buffers that have Default usage.  Other buffer usages will thrown an exception.
            <para>Please note that constant buffers don't use the <paramref name="offset"/> and <paramref name="size"/> parameters.</para>
            <para>This method will respect the <see cref="P:GorgonLibrary.GorgonDataStream.Position">Position</see> property of the data stream.  
            This means that it will start reading from the stream at the current position.  To read from the beginning of the stream, set the position 
            to 0.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the buffer usage is not set to default.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Unlock">
            <summary>
            Function to unlock a locked buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Lock(GorgonLibrary.Graphics.BufferLockFlags)">
            <summary>
            Function to lock the buffer for reading/writing.
            </summary>
            <param name="lockFlags">The flags to use when locking the buffer.</param>
            <returns>A data stream pointing to the memory used by the buffer.</returns>
            <remarks>A data stream locked with this method does not have to be disposed of.  After it is <see cref="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Unlock">unlocked</see>, the memory pointed 
            at by the stream will be considered invalid.  However, for the sake of following practice, it is a good idea to call the Dispose method 
            on the resulting data stream when finished.
            <para>This method only works on buffers with a Dynamic or Staging usage.  Immutable or default buffers will throw an exception when an attempt 
            is made to lock them.</para>
            <para>Some buffers may raise an exception with locking with certain <paramref name="lockFlags"/>.  This is dependant upon the type of buffer.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the buffer is already locked.
            <para>-or-</para>
            <para>Thrown when the usage for the buffer does not allow the buffer to be locked.</para>		
            </exception>		
            <exception cref="T:System.ArgumentException">Thrown when a constant buffer is locked with any other flag other than Discard.
            <para>-or-</para>
            <para>Thrown when an index/vertex buffer is locked with with a read flag, or a write flag without discard or nooverwrite.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.#ctor(GorgonLibrary.Graphics.GorgonGraphics,GorgonLibrary.Graphics.BufferUsage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonBaseBuffer"/> class.
            </summary>
            <param name="graphics">The graphics interface used to create this object.</param>
            <param name="usage">Usage for this buffer.</param>
            <param name="size">The size of the buffer, in bytes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="graphics"/> parameter is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBaseBuffer.D3DCPUAccessFlags">
            <summary>
            Property to set or return the D3D CPU access flags.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBaseBuffer.D3DUsage">
            <summary>
            Property to set or return the D3D usages.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBaseBuffer.D3DBuffer">
            <summary>
            Property to set or return the Direct 3D buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBaseBuffer.Graphics">
            <summary>
            Property to return the graphics interface that created this buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBaseBuffer.IsLocked">
            <summary>
            Property to return whether the buffer is locked or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBaseBuffer.Size">
            <summary>
            Property to return the size of the buffer, in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBaseBuffer.BufferUsage">
            <summary>
            Property to return the usage for this buffer.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture2DSM2">
            <summary>
            A 2D texture shim for SM2 cards.
            </summary>
            <remarks>As per the 10level9 documentation:
            A resource that has the shader binding flag set (which we do for our textures) and no other flags cannot use CopyResource to copy data into CPU accessible memory.  Therefore, the D3DX functions will fail every time the 
            user tries to save a texture (the CPU needs to be able to read the data from a staging texture, which is only in CPU memory).</remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture2D">
            <summary>
            A 2 dimensional texture object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture">
            <summary>
            The base texture object for all textures.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.IShaderResource">
            <summary>
            Shader resource view.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IShaderResource.D3DResourceView">
            <summary>
            Property to return the shader resource view for an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.GetTextureSize">
            <summary>
            Function to retrieve the size of the texture, in bytes.
            </summary>
            <returns>The size of the texture in bytes.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.CreateShaderResourceView">
            <summary>
            Function to create the shader resource view.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.GetTextureInformation">
            <summary>
            Function to retrieve information about an existing texture.
            </summary>
            <returns>New settings for the texture.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.CreateResourceView">
            <summary>
            Function to create a shader resource and optionally, an unordered access view
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.InitializeImpl(System.Byte[],SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>
            Function to read image data from an array of bytes.
            </summary>
            <param name="imageData">Array of bytes holding the image data.</param>
            <param name="imageInfo">Information to pass to the image loading method.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.InitializeImpl(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.ISubResourceData})">
            <summary>
            Function to create an image with initial data.
            </summary>
            <param name="initialData">Data to use when creating the image.</param>
            <remarks>The initial data can be a <see cref="T:GorgonLibrary.GorgonDataStream">GorgonDataStream</see>, <see cref="T:GorgonLibrary.Graphics.GorgonTexture2DData">GorgonTexture2DData</see> or <see cref="T:GorgonLibrary.Graphics.GorgonTexture3DData">GorgonTexture3DData</see></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.CopyResourceProxy(GorgonLibrary.Graphics.GorgonTexture,GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to copy a resource in its entirety.
            </summary>
            <param name="source">Resource to copy.</param>
            <param name="destination">Destination resource.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.CopySubResourceProxy(GorgonLibrary.Graphics.GorgonTexture,GorgonLibrary.Graphics.GorgonTexture,System.Int32,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion},System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to copy a sub resource.
            </summary>
            <param name="source">The source resource.</param>
            <param name="destination">The destination resource.</param>
            <param name="srcSubResourceIndex">Index of the source subresource.</param>
            <param name="destSubResourceIndex">Index of the destination subresource.</param>
            <param name="sourceRegion">The source region to copy.</param>
            <param name="x">Destination horizontal coordindate.</param>
            <param name="y">Destination vertical coordinate.</param>
            <param name="z">Destination depth coordinate.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Initialize(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.ISubResourceData})">
            <summary>
            Function to create an image with initial data.
            </summary>
            <param name="initialData">Data to use when creating the image.</param>
            <remarks>The initial data can be a <see cref="T:GorgonLibrary.GorgonDataStream">GorgonDataStream</see>, <see cref="T:GorgonLibrary.Graphics.GorgonTexture2DData">GorgonTexture2DData</see> or <see cref="T:GorgonLibrary.Graphics.GorgonTexture3DData">GorgonTexture3DData</see></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.InitializeFileData(System.Byte[])">
            <summary>
            Function to read image data from an array of bytes.
            </summary>
            <param name="imageData">Array of bytes holding the image data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Save(GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save the texture data to an array of bytes.
            </summary>
            <param name="format">Image format to use.</param>
            <returns>An array of bytes containing the image data.</returns>
            <remarks>The <paramref name="format"/> parameter must be set to DDS when saving 1D or 3D textures.
            <para>If the texture format is not compatiable with a file format, then an exception will be raised.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when the format is anything other than DDS for a volume (3D) or 1D texture.
            <para>-or-</para>
            <para>Thrown when the file cannot be saved with the requested file <paramref name="format"/>.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Save(System.IO.Stream,GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save the texture data to a stream.
            </summary>
            <param name="stream">Stream to write.</param>
            <param name="format">Image format to use.</param>
            <remarks>The <paramref name="format"/> parameter must be set to DDS when saving 1D or 3D textures.
            <para>If the texture format is not compatiable with a file format, then an exception will be raised.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the format is anything other than DDS for a volume (3D) or 1D texture.
            <para>-or-</para>
            <para>Thrown when the format is anything other than DDS.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Save(System.String,GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save the texture data to a file.
            </summary>
            <param name="fileName">Name of the file to save into.</param>
            <param name="format">Image format to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="fileName"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the fileName parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the format is anything other than DDS for a volume (3D) or 1D texture.</para>
            <para>-or-</para>
            <para>Thrown when the file cannot be saved with the requested file <paramref name="format"/>.</para>
            </exception>
            <remarks>The <paramref name="format"/> parameter must be set to DDS when saving 1D or 3D textures.
            <para>If the texture format is not compatiable with a file format, then an exception will be raised.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Copy(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to copy a another texture into this texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <remarks>
            This overload will copy the -entire- texture, including mipmaps, array levels, etc...  Use <see cref="M:GorgonLibrary.Graphics.GorgonTexture.CopySubResource(GorgonTexture2D, int, int, System.Drawing.Rectangle, SlimMath.Vector2)">CopySubResource</see> to copy a portion of the texture.
            <para>This method will -not- perform stretching, filtering or clipping.</para>
            <para>The <paramref name="texture"/> dimensions must be have the same dimensions as this texture.  If they do not, an exception will be thrown.</para>
            <para>If the this texture is multisampled, then the <paramref name="texture"/> must use the same multisampling parameters.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>SM2_a_b devices may copy 2D textures, but there are format restrictions (must be compatible with a render target format).  3D textures can only be copied to textures that are in GPU memory, if either texture is a staging texture, then an exception will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the multisampling count is not the same for the source texture and this texture.</para>
            <para>-or-</para>
            <para>Thrown when the texture sizes are not the same.</para>
            <para>-or-</para>
            <para>Thrown when the texture types are not the same.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            <para>-or-</para>
            <para>Thrown if this texture is a 3D texture and is in CPU accessible memory and the video device is a SM2_a_b device.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.UpdateSubResource(GorgonLibrary.Graphics.ISubResourceData,System.Int32)">
            <summary>
            Function to copy data from the CPU to a texture.
            </summary>
            <param name="data">Data to copy to the texture.</param>
            <param name="subResource">Sub resource index to use.</param>
            <remarks>Use this to copy data to this texture.  If the texture is non CPU accessible texture then an exception is raised.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture has an Immutable, Dynamic or a Staging usage.
            <para>-or-</para>
            <para>Thrown when this texture has multisampling applied.</para>
            <para>-or-</para>
            <para>Thrown if this texture is a depth/stencil buffer texture.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.UpdateSubResource(GorgonLibrary.Graphics.ISubResourceData)">
            <summary>
            Function to copy data from the CPU to a texture.
            </summary>
            <param name="data">Data to copy to the texture.</param>
            <remarks>Use this to copy data to this texture.  If the texture is non CPU accessible texture then an exception is raised.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture has an Immutable, Dynamic or a Staging usage.
            <para>-or-</para>
            <para>Thrown when this texture has multisampling applied.</para>
            <para>-or-</para>
            <para>Thrown if this texture is a depth/stencil buffer texture.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.IsLocked(System.Int32)">
            <summary>
            Function to return whether a texture sub resource is locked or not.
            </summary>
            <param name="subResource">Sub resource to check.</param>
            <returns>TRUE if it's locked, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Lock``1(GorgonLibrary.Graphics.BufferLockFlags)">
            <summary>
            Function to lock the texture for reading/writing.
            </summary>
            <param name="lockFlags">Flags used to lock.</param>
            <remarks>When locking a texture, the entire texture sub resource is locked and returned.  There is no setting to return a portion of the texture subresource.
            <para>This overload locks the first sub resource (index 0) only.</para>
            <para>This method is only available to textures created with a staging or dynamic usage setting.  Otherwise an exception will be raised.</para>
            <para>The NoOverwrite flag is not valid with texture locking and will be ignored.</para>
            <para>If the texture is not a staging texture and Read is specified, then an exception will be raised.</para>
            <para>Discard is only applied to dynamic textures.  If the texture is not dynamic, then an exception will be raised.</para>
            </remarks>
            <returns>The locked data stream and information about the lock.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the texture is not a dynamic or staging texture.
            <para>-or-</para>
            <para>Thrown when the texture is not a staging texture and the Read flag has been specified.</para>
            <para>-or-</para>
            <para>Thrown when the texture is not a dynamic texture and the discard flag has been specified.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the texture sub resource is already locked.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Lock``1(System.Int32,GorgonLibrary.Graphics.BufferLockFlags)">
            <summary>
            Function to lock a CPU accessible texture sub resource for reading/writing.
            </summary>
            <param name="subResource">Sub resource to lock.</param>
            <param name="lockFlags">Flags used to lock.</param>
            <returns>A stream used to write to the texture.</returns>
            <remarks>When locking a texture, the entire texture sub resource is locked and returned.  There is no setting to return a portion of the texture subresource.
            <para>This method is only available to textures created with a staging or dynamic usage setting.  Otherwise an exception will be raised.</para>
            <para>The NoOverwrite flag is not valid with texture locking and will be ignored.</para>
            <para>If the texture is not a staging texture and Read is specified, then an exception will be raised.</para>
            <para>Discard is only applied to dynamic textures.  If the texture is not dynamic, then an exception will be raised.</para>
            </remarks>
            <returns>The locked data stream and information about the lock.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the texture is not a dynamic or staging texture.
            <para>-or-</para>
            <para>Thrown when the texture is not a staging texture and the Read flag has been specified.</para>
            <para>-or-</para>
            <para>Thrown when the texture is not a dynamic texture and the discard flag has been specified.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the texture sub resource is already locked.</exception>
            <typeparam name="T">The type of locking data.  This must be one of <see cref="T:GorgonLibrary.Graphics.GorgonTexture1DData">GorgonTexture1DData</see>, <see cref="T:GorgonLibrary.Graphics.GorgonTexture2DData">GorgonTexture2DData</see> or <see cref="T:GorgonLibrary.Graphics.GorgonTexture3DData">GorgonTexture3DData</see></typeparam>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Unlock">
            <summary>
            Function to unlock a locked texture.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Unlock(System.Int32)">
            <summary>
            Function to unlock a locked texture sub resource.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns the texture.</param>
            <param name="name">The name of the texture.</param>
            <param name="settings">Settings for the texture.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.View">
            <summary>
            Property to set or return the shader resource view for the texture.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.D3DTexture">
            <summary>
            Property to set or return the D3D texture.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.RenderTarget">
            <summary>
            Property to return the render target that this texture belongs to.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.IsRenderTarget">
            <summary>
            Property to return whether this texture is for a render target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.Graphics">
            <summary>
            Property to return the graphics interface that owns this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.ViewFormatInformation">
            <summary>
            Property to return information about format for the shader resource view.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.FormatInformation">
            <summary>
            Property to return information about the format for the texture.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.SizeInBytes">
            <summary>
            Property to return the size of the texture, in bytes.
            </summary>
            <remarks>This will take into account whether the texture is a packed format, or compressed.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.Settings">
            <summary>
            Property to set or return the settings for the texture.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture.GorgonLibrary#Graphics#IShaderResource#D3DResourceView">
            <summary>
            Property to return the shader resource view for an object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.CreateTexture(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Function to create the texture.
            </summary>
            <param name="graphics">Graphics interface that created this object.</param>
            <param name="name">Name of the object.</param>
            <param name="settings">Settings for the object.</param>
            <returns>The new 2D texture.</returns>
            <remarks>This is here to bypass a bug when dealing with SM2_a_b video devices.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.CreateTexture(GorgonLibrary.Graphics.GorgonSwapChain)">
            <summary>
            Function to create the texture.
            </summary>
            <param name="swapChain">Swap chain to retrieve texture from.</param>
            <returns>The texture for the swap chain.</returns>
            <remarks>This is here to bypass a bug when dealing with SM2_a_b video devices.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.InitializeImpl(System.Byte[],SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>
            Function to read image data from an array of bytes.
            </summary>
            <param name="imageData">Array of bytes holding the image data.</param>
            <param name="imageInfo">Information to pass to the image loading method.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.InitializeRenderTarget">
            <summary>
            Function to initialize a render target texture.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.InitializeDepth(System.Boolean)">
            <summary>
            Function to initialize a depth/stencil texture.
            </summary>
            <param name="isShaderBound">TRUE if the texture should be used in a shader, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.InitializeImpl(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.ISubResourceData})">
            <summary>
            Function to create an image with initial data.
            </summary>
            <param name="initialData">Data to use when creating the image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.GetStagingTexture">
            <summary>
            Function to copy this texture into a staging texture.
            </summary>
            <returns>A new staging texture.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.ToPixel(SlimMath.Vector2)">
            <summary>
            Function to convert a texel space coordinate into a pixel space coordinate.
            </summary>
            <param name="texel">The texel coordinate to convert.</param>
            <returns>The pixel location of the texel on the texture.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.ToTexel(SlimMath.Vector2)">
            <summary>
            Function to convert a pixel coordinate into a texel space coordinate.
            </summary>
            <param name="pixel">The pixel coordinate to convert.</param>
            <returns>The texel space location of the pixel on the texture.</returns>
            <exception cref="T:System.DivideByZeroException">Thrown when the texture width or height is equal to 0.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.ToPixel(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Function to convert a texel space coordinate into a pixel space coordinate.
            </summary>
            <param name="texel">The texel coordinate to convert.</param>
            <param name="result">The texel converted to pixel space.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.ToTexel(SlimMath.Vector2@,SlimMath.Vector2@)">
            <summary>
            Function to convert a pixel coordinate into a texel space coordinate.
            </summary>
            <param name="pixel">The pixel coordinate to convert.</param>
            <param name="result">The texel space location of the pixel on the texture.</param>
            <exception cref="T:System.DivideByZeroException">Thrown when the texture width or height is equal to 0.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.GetSubResourceIndex(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to return the index of a sub resource (mip level, array item, etc...) in a texture.
            </summary>
            <param name="mipLevel">Mip level to look up.</param>
            <param name="arrayIndex">Array index to look up.</param>
            <param name="mipCount">Number of mip map levels in the texture.</param>
            <param name="arrayCount">Number of array indices in the texture.</param>
            <returns>The sub resource index.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.Copy(System.Drawing.Image)">
            <summary>
            Function to copy a GDI bitmap to this image.
            </summary>
            <param name="image">Image to copy.</param>
            <remarks>Use this to copy data from a GDI+ bitmap into the texture.
            <para>This overload will preserve the <see cref="P:GorgonLibrary.Graphics.GorgonTexture2D.Settings">settings</see> of the texture and make the bitmap conform to those settings.</para>
            </remarks>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.Copy(System.Drawing.Image,GorgonLibrary.Graphics.GorgonTexture2DSettings)">
            <summary>
            Function to copy a GDI bitmap to this image.
            </summary>
            <param name="image">Image to copy.</param>
            <param name="settings">Settings to apply to the current texture.</param>
            <remarks>Use this to copy data from a GDI+ bitmap into the texture.</remarks>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.ToGDIBitmap">
            <summary>
            Function to save this image to a GDI bitmap.
            </summary>
            <remarks>Use this to copy data from this texture into a GDI+ bitmap.</remarks>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture2D,System.Int32,System.Int32,System.Nullable{System.Drawing.Rectangle},SlimMath.Vector2)">
            <summary>
            Function to copy a texture subresource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <param name="subResource">Sub resource in the source texture to copy.</param>
            <param name="destSubResource">Sub resource in this texture to replace.</param>
            <param name="sourceRegion">Region on the source texture to copy.</param>
            <param name="destination">Destination point to copy to.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>The <paramref name="sourceRegion"/> and &gt;<paramref name="destination"/> must fit within the dimensions of this texture.  If they do not, then the copy will be clipped so that they fit.</para>
            <para>If the this texture is multisampled, then the <paramref name="texture"/> must use the same multisampling parameters and the sourceRegion and destination parameters will be ignored.  The same is true for Depth/Stencil buffer textures.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>When copying sub resources (e.g. mip-map levels), the <paramref name="subResource"/> and <paramref name="destSubResource"/> must be different if the source texture is the same as the destination texture.</para>
            <para>Sub resource indices can be calculated with the <see cref="M:GorgonLibrary.Graphics.GorgonTexture2D.GetSubResourceIndex">GetSubResourceIndex</see> static method.</para>
            <para>Pass NULL (Nothing in VB.Net) to the sourceRegion parameter to copy the entire sub resource.</para>
            <para>SM2_a_b devices may copy 2D textures, but there are format restrictions (must be compatible with a render target format).  3D textures can only be copied to textures that are in GPU memory, if either texture is a staging texture, then an exception will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the subResource and destSubResource are the same and the source texture is the same as this texture.</para>
            <para>-or-</para>
            <para>Thrown when the multisampling count is not the same for the source texture and this texture.</para>
            <para>-or-</para>
            <para>Thrown when the texture types are not the same.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture2D,System.Drawing.Rectangle,SlimMath.Vector2)">
            <summary>
            Function to copy a texture subresource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <param name="sourceRegion">Region on the source texture to copy.</param>
            <param name="destination">Destination point to copy to.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>The <paramref name="sourceRegion"/> and &gt;<paramref name="destination"/> must fit within the dimensions of this texture.  If they do not, then the copy will be clipped so that they fit.</para>
            <para>If the this texture is multisampled, then the <paramref name="texture"/> must use the same multisampling parameters and the sourceRegion and destination parameters will be ignored.  The same is true for Depth/Stencil buffer textures.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>SM2_a_b devices may copy 2D textures, but there are format restrictions (must be compatible with a render target format).  3D textures can only be copied to textures that are in GPU memory, if either texture is a staging texture, then an exception will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the source texture is the same as this texture.</para>
            <para>-or-</para>
            <para>Thrown when the multisampling count is not the same for the source texture and this texture.</para>
            <para>-or-</para>
            <para>Thrown when the texture types are not the same.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture2D)">
            <summary>
            Function to copy a texture subresource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>If the this texture is multisampled, then the <paramref name="texture"/> must use the same multisampling parameters and the sourceRegion and destination parameters will be ignored.  The same is true for Depth/Stencil buffer textures.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>SM2_a_b devices may copy 2D textures, but there are format restrictions (must be compatible with a render target format).  3D textures can only be copied to textures that are in GPU memory, if either texture is a staging texture, then an exception will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the source texture is the same as this texture.</para>
            <para>-or-</para>
            <para>Thrown when the multisampling count is not the same for the source texture and this texture.</para>
            <para>-or-</para>
            <para>Thrown when the texture types are not the same.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture2D,System.Int32,System.Int32)">
            <summary>
            Function to copy a texture sub resource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <param name="subResource">Sub resource in the source texture to copy.</param>
            <param name="destSubResource">Sub resource in this texture to replace.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>The source texture must fit within the dimensions of this texture.  If it does not, then the copy will be clipped so that it fits.</para>
            <para>If the this texture is multisampled, then the <paramref name="texture"/> must use the same multisampling parameters and the sourceRegion and destination parameters will be ignored.  The same is true for Depth/Stencil buffer textures.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>When copying sub resources (e.g. mip-map levels), the <paramref name="subResource"/> and <paramref name="destSubResource"/> must be different if the source texture is the same as the destination texture.</para>
            <para>Sub resource indices can be calculated with the <see cref="M:GorgonLibrary.Graphics.GorgonTexture2D.GetSubResourceIndex">GetSubResourceIndex</see> static method.</para>
            <para>SM2_a_b devices may copy 2D textures, but there are format restrictions (must be compatible with a render target format).  3D textures can only be copied to textures that are in GPU memory, if either texture is a staging texture, then an exception will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the subResource and destSubResource are the same and the source texture is the same as this texture.</para>
            <para>-or-</para>
            <para>Thrown when the multisampling count is not the same for the source texture and this texture.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.Save(System.IO.Stream,GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save the texture data to a stream.
            </summary>
            <param name="stream">Stream to write.</param>
            <param name="format">Image format to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
              
            <exception cref="T:System.ArgumentException">
            Thrown when the format is anything other than DDS for a volume (3D) texture.
              <para>-or-</para>
              <para>Thrown when the format is anything other than DDS.</para>
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.UpdateSubResource(GorgonLibrary.Graphics.ISubResourceData,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Function to copy data from the CPU to a texture.
            </summary>
            <param name="data">Data to copy to the texture.</param>
            <param name="subResource">Sub resource index to use.</param>
            <param name="destRect">Destination region to copy into.</param>
            <remarks>Use this to copy data to this texture.  If the texture is non CPU accessible texture then an exception is raised.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="destRect"/> parameter is less than 0 or larger than this texture.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture has an Immutable, Dynamic or a Staging usage.
            <para>-or-</para>
            <para>Thrown when this texture has multisampling applied.</para>
            <para>-or-</para>
            <para>Thrown if this texture is a depth/stencil buffer texture.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Prevents a default instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture2D"/> class from being created.
            </summary>
            <param name="graphics">The graphics interface that created this object.</param>
            <param name="name">The name of the texture.</param>
            <param name="texture">The source texture.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.#ctor(GorgonLibrary.Graphics.GorgonSwapChain)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture2D"/> class.
            </summary>
            <param name="swapChain">The swap chain to get texture information from.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2D.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture2D"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns this texture.</param>
            <param name="name">The name of the texture.</param>
            <param name="settings">Settings to pass to the texture.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> parameter is an empty string.</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2D.IsDepthStencil">
            <summary>
            Property to return whether this texture is for a depth/stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture2D.Settings">
            <summary>
            Property to return the settings for this texture.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DSM2.DestroyShim(GorgonLibrary.Graphics.GorgonTexture2D)">
            <summary>
            Function to destroy a shim texture.
            </summary>
            <param name="shim">Shim texture.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DSM2.CreateShim(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to create a shim resource.
            </summary>
            <param name="texture">Texture to create a shim for.</param>
            <returns>A new shim resource.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DSM2.CopyResourceProxy(GorgonLibrary.Graphics.GorgonTexture,GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to copy a resource in its entirety.
            </summary>
            <param name="source">Resource to copy.</param>
            <param name="destination">Destination resource.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DSM2.CopySubResourceProxy(GorgonLibrary.Graphics.GorgonTexture,GorgonLibrary.Graphics.GorgonTexture,System.Int32,System.Int32,System.Nullable{SharpDX.Direct3D11.ResourceRegion},System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to copy a sub resource.
            </summary>
            <param name="source">The source resource.</param>
            <param name="destination">The destination resource.</param>
            <param name="srcSubResourceIndex">Index of the source subresource.</param>
            <param name="destSubResourceIndex">Index of the destination subresource.</param>
            <param name="sourceRegion">The source region to copy.</param>
            <param name="x">Destination horizontal coordindate.</param>
            <param name="y">Destination vertical coordinate.</param>
            <param name="z">Destination depth coordinate.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DSM2.Save(System.IO.Stream,GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save the texture data to a stream.
            </summary>
            <param name="stream">Stream to write.</param>
            <param name="format">Image format to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
              
            <exception cref="T:System.ArgumentException">
            Thrown when the format is anything other than DDS for a volume (3D) texture.
              <para>-or-</para>
              <para>Thrown when the format is anything other than DDS.</para>
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DSM2.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture2DSM2"/> class.
            </summary>
            <param name="graphics">The graphics interface that created this object.</param>
            <param name="name">The name of the texture.</param>
            <param name="settings">The settings for the texture.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture2DSM2.#ctor(GorgonLibrary.Graphics.GorgonSwapChain)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture2DSM2"/> class.
            </summary>
            <param name="swapChain">The swap chain to get texture information from.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVideoModeList">
            <summary>
            A list of video modes.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.Refresh(SharpDX.Direct3D11.Device)">
            <summary>
            Function to retrieve the video mode list.
            </summary>
            <param name="d3dDevice">Direct 3D device instance to use.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.#ctor(GorgonLibrary.Graphics.GorgonVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVideoModeList"/> class.
            </summary>
            <param name="output">Output that owns the video modes.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.IndexOf(GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonVideoMode}#Insert(System.Int32,GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonVideoMode}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonVideoMode}#Add(GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonVideoMode}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.Contains(GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.CopyTo(GorgonLibrary.Graphics.GorgonVideoMode[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonVideoMode}#Remove(GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoModeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoModeList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
              </returns>
              
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoModeList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoModeList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageFileFormat">
            <summary>
            Formats for image files.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.PNG">
            <summary>
            Portable network graphics.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.JPG">
            <summary>
            Joint Photographic Experts Group.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.BMP">
            <summary>
            Windows bitmap.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFileFormat.DDS">
            <summary>
            Direct Draw Surface.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ImageFilters">
            <summary>
            Filters applied to an image when it is loaded from a stream, file, etc...
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.None">
            <summary>No scaling or filtering will take place. Pixels outside the bounds of the source image are assumed to be transparent black.</summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.Point">
            <summary>
            Each destination pixel is computed by sampling the nearest pixel from the source image.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.Linear">
            <summary>
            Each destination pixel is computed by sampling the four nearest pixels from the source image. This filter works best when the scale on both axes is less than two.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.Triangle">
            <summary>
            Every pixel in the source image contributes equally to the destination image.  This is the slowest of the filters.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.Box">
            <summary>
            Each pixel is computed by averaging a 2x2(x2) box of pixels from the source image. This filter works only when the dimensions of the destination are half those of the source, as is the case with mipmaps.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.MirrorU">
            <summary>
            Pixels off the edge of the texture on the u-axis should be mirrored, not wrapped.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.MirrorV">
            <summary>
            Pixels off the edge of the texture on the v-axis should be mirrored, not wrapped.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.MirrorW">
            <summary>
            Pixels off the edge of the texture on the w-axis should be mirrored, not wrapped.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.Dither">
            <summary>
            The resulting image must be dithered using a 4x4 ordered dither algorithm. This happens when converting from one format to another.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.DitherDiffusion">
            <summary>
            Do diffuse dithering on the image when changing from one format to another.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.SRgbIn">
            <summary>
            Input data is in standard RGB (sRGB) color space.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ImageFilters.SRgbOut">
            <summary>
            Output data is in standard RGB (sRGB) color space.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTextures">
            <summary>
            Textures interface.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.GetSettings``1">
            <summary>
            Function to return correct settings object for the specified texture.
            </summary>
            <typeparam name="T">Type of texture.</typeparam>
            <returns>The correct settings object.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.GetPow2Size(System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to return the width and height as powers of two.
            </summary>
            <param name="width">Width of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="depth">Depth of the texture.</param>
            <returns>The width, height and depth bumped to the nearest power of two.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.ValidateTexture3D(GorgonLibrary.Graphics.ITextureSettings@,System.Boolean)">
            <summary>
            Function to validate the 3D texture settings.
            </summary>
            <param name="settings">Settings to validate.</param>
            <param name="isReading">TRUE if reading from a stream, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.CleanUp">
            <summary>
            Function to perform clean up of resources.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.ValidateTexture2D(GorgonLibrary.Graphics.ITextureSettings@,System.Boolean)">
            <summary>
            Function to validate the 2D texture settings.
            </summary>
            <param name="settings">Settings to validate.</param>
            <param name="isReading">TRUE if reading from a stream, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.ValidateTexture1D(GorgonLibrary.Graphics.ITextureSettings@,System.Boolean)">
            <summary>
            Function to validate the 1D texture settings.
            </summary>
            <param name="settings">Settings to validate.</param>
            <param name="isReading">TRUE if reading from a stream, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.FromGDIBitmap(System.String,System.Drawing.Image)">
            <summary>
            Function to load a texture from a GDI+ bitmap object.
            </summary>
            <param name="name">Name of the texture.</param>
            <param name="bitmap">Bitmap to load.</param>
            <returns>The new 2D texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> or <paramref name="bitmap"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.FromGDIBitmap(System.String,System.Drawing.Image,GorgonLibrary.Graphics.GorgonTexture2DSettings)">
            <summary>
            Function to load a texture from a GDI+ bitmap object.
            </summary>
            <param name="name">Name of the texture.</param>
            <param name="bitmap">Bitmap to load.</param>
            <param name="settings">Settings for the texture.</param>
            <returns>The new 2D texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/>, <paramref name="bitmap"/> or the <paramref name="settings"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.FromMemory``1(System.String,System.Byte[])">
            <summary>
            Function to load a texture from a byte array.
            </summary>
            <typeparam name="T">Type of texture to load.</typeparam>
            <param name="name">Name of the texture.</param>
            <param name="imageData">Array containing the image data.</param>
            <returns>A new texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> or <paramref name="imageData"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the imageData parameter is empty.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.FromMemory``1(System.String,System.Byte[],GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Function to load a texture from a byte array.
            </summary>
            <typeparam name="T">Type of texture to load.</typeparam>
            <param name="name">Name of the texture.</param>
            <param name="imageData">Array containing the image data.</param>
            <param name="settings">Settings to apply to the texture.</param>
            <returns>A new texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/>, <paramref name="imageData"/> or the <paramref name="settings"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the imageData parameter is empty.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.FromStream``1(System.String,System.IO.Stream,System.Int32)">
            <summary>
            Function to load an image from a stream.
            </summary>
            <typeparam name="T">Type of texture.</typeparam>
            <param name="name">Name of the texture.</param>
            <param name="stream">Stream to load the texture from.</param>
            <param name="length">Size of the texture in the stream, in bytes.</param>
            <returns>A new 1D texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> or <paramref name="stream"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.FromStream``1(System.String,System.IO.Stream,System.Int32,GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Function to load an image from a stream.
            </summary>
            <typeparam name="T">Type of texture.</typeparam>
            <param name="name">Name of the texture.</param>
            <param name="stream">Stream to load the texture from.</param>
            <param name="length">Size of the texture in the stream, in bytes.</param>
            <param name="settings">Settings to apply to the texture.</param>
            <returns>A new 1D texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/>, <paramref name="stream"/> or <paramref name="settings"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.FromFile``1(System.String,System.String,GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Function to load a texture from a file.
            </summary>
            <typeparam name="T">Type of texture.</typeparam>
            <param name="name">Name of the texture.</param>
            <param name="filePath">Path to the file.</param>
            <param name="settings">Settings to apply to the loaded texture.</param>
            <returns>A new texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/>, <paramref name="filePath"/> or <paramref name="settings"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name or the filePath parameters are empty strings.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.FromFile``1(System.String,System.String)">
            <summary>
            Function to load a texture from a file.
            </summary>
            <typeparam name="T">Type of texture.</typeparam>
            <param name="name">Name of the texture.</param>
            <param name="filePath">Path to the file.</param>
            <returns>A new texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> or <paramref name="filePath"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name or the filePath parameters are empty strings.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too large or too small.
            <para>-or-</para>
            <para>Thrown when the format is not supported.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.CreateTexture(System.String,System.Int32,System.Int32,System.Int32,GorgonLibrary.Graphics.BufferFormat,GorgonLibrary.Graphics.BufferUsage)">
            <summary>
            Function to create a new 3D texture.
            </summary>
            <param name="name">Name of the texture.</param>
            <param name="width">Width of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="depth">Depth of the texture.</param>
            <param name="format">Format of the the texture.</param>
            <param name="usage">Usage for the texture.</param>
            <returns>A new 2D texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net)</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the usage is set to immutable.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too small or large.
            <para>-or-</para>
            <para>Thrown when the texture format isn't supported by the hardware.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.CreateTexture(System.String,System.Int32,System.Int32,GorgonLibrary.Graphics.BufferFormat,GorgonLibrary.Graphics.BufferUsage)">
            <summary>
            Function to create a new 2D texture.
            </summary>
            <param name="name">Name of the texture.</param>
            <param name="width">Width of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="format">Format of the the texture.</param>
            <param name="usage">Usage for the texture.</param>
            <returns>A new 2D texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net)</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the usage is set to immutable.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too small or large.
            <para>-or-</para>
            <para>Thrown when the texture format isn't supported by the hardware.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.CreateTexture(System.String,System.Int32,GorgonLibrary.Graphics.BufferFormat,GorgonLibrary.Graphics.BufferUsage)">
            <summary>
            Function to create a new 1D texture.
            </summary>
            <param name="name">Name of the texture.</param>
            <param name="width">Width of the texture.</param>
            <param name="format">Format of the the texture.</param>
            <param name="usage">Usage for the texture.</param>
            <returns>A new 1D texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net)</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the usage is set to immutable.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too small or large.
            <para>-or-</para>
            <para>Thrown when the texture format isn't supported by the hardware.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.CreateTexture``1(System.String,GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Function to create a new texture.
            </summary>
            <param name="name">Name of the texture.</param>
            <param name="settings">Settings for the texture.</param>
            <returns>A new texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> or the <paramref name="settings"/> parameters are NULL (Nothing in VB.Net)</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the usage is set to immutable.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too small or large.
            <para>-or-</para>
            <para>Thrown when the texture format isn't supported by the hardware.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.CreateTexture``1(System.String,GorgonLibrary.Graphics.ITextureSettings,System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.ISubResourceData})">
            <summary>
            Function to create a new texture.
            </summary>
            <typeparam name="T">Type of texture to create.</typeparam>
            <param name="name">Name of the texture.</param>
            <param name="settings">Settings for the texture.</param>
            <param name="data">Data used to initialize the texture.</param>
            <returns>A new texture.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> or the <paramref name="settings"/> parameters are NULL (Nothing in VB.Net)</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the <paramref name="data"/> parameter is NULL and the usage is set to immutable.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the texture size is too small or large.
            <para>-or-</para>
            <para>Thrown when the texture format isn't supported by the hardware.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextures.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTextures"/> class.
            </summary>
            <param name="graphics">The graphics interface.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTextures.GorgonLogo">
            <summary>
            Property to return the texture for the Gorgon logo.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTextures.MaxWidth">
            <summary>
            Property to return the maximum width of a texture.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTextures.MaxHeight">
            <summary>
            Property to return the maximum height of a texture.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTextures.MaxDepth">
            <summary>
            Property to return the maximum depth of a texture.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture1D">
            <summary>
            A 1 dimension texture object.
            </summary>
            <remarks>A 1 dimensional texture only has a width.  This is useful as a buffer of linear data in texture format.
            <para>This texture type cannot be created by SM2_a_b video devices.</para></remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.InitializeImpl(System.Byte[],SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>
            Function to read image data from an array of bytes.
            </summary>
            <param name="imageData">Array of bytes holding the image data.</param>
            <param name="imageInfo">Information to pass to the image loading method.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.InitializeImpl(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.ISubResourceData})">
            <summary>
            Function to create an image with initial data.
            </summary>
            <param name="initialData">Data to use when creating the image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.ToPixel(System.Single)">
            <summary>
            Function to convert a texel space coordinate into a pixel space coordinate.
            </summary>
            <param name="texel">The texel coordinate to convert.</param>
            <returns>The pixel location of the texel on the texture.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.ToTexel(System.Single)">
            <summary>
            Function to convert a pixel coordinate into a texel space coordinate.
            </summary>
            <param name="pixel">The pixel coordinate to convert.</param>
            <returns>The texel space location of the pixel on the texture.</returns>
            <exception cref="T:System.DivideByZeroException">Thrown when the texture width is equal to 0.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.GetSubResourceIndex(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to return the index of a sub resource (mip level, array item, etc...) in a texture.
            </summary>
            <param name="mipLevel">Mip level to look up.</param>
            <param name="arrayIndex">Array index to look up.</param>
            <param name="mipCount">Number of mip map levels in the texture.</param>
            <param name="arrayCount">Number of array indices in the texture.</param>
            <returns>The sub resource index.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.Save(System.IO.Stream,GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save the texture data to a stream.
            </summary>
            <param name="stream">Stream to write.</param>
            <param name="format">Image format to use.</param>
            <remarks>A 1D dimensional texture can only be saved to DDS format.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the format is not DDS.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture1D,System.Int32,System.Int32,System.Nullable{GorgonLibrary.GorgonMinMax},System.Int32)">
            <summary>
            Function to copy a texture subresource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <param name="subResource">Sub resource in the source texture to copy.</param>
            <param name="destSubResource">Sub resource in this texture to replace.</param>
            <param name="sourceRange">Width of the source texture to copy.</param>
            <param name="destination">Width of the destination area.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>The <paramref name="sourceRange"/> and &gt;<paramref name="destination"/> must fit within the dimensions of this texture.  If they do not, then the copy will be clipped so that they fit.</para>
            <para>The sourceRange uses absolute coorindates.  That is, Minimum is the Left coordinate, and Maximum is the Right coordinate.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>When copying sub resources (e.g. mip-map levels), the <paramref name="subResource"/> and <paramref name="destSubResource"/> must be different if the source texture is the same as the destination texture.</para>
            <para>Sub resource indices can be calculated with the <see cref="M:GorgonLibrary.Graphics.GorgonTexture1D.GetSubResourceIndex">GetSubResourceIndex</see> static method.</para>
            <para>Pass NULL (Nothing in VB.Net) to the sourceRange parameter to copy the entire sub resource.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the subResource and destSubResource are the same and the source texture is the same as this texture.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture1D,GorgonLibrary.GorgonMinMax,System.Int32)">
            <summary>
            Function to copy a texture subresource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <param name="sourceRange">Region on the source texture to copy.</param>
            <param name="destination">Destination point to copy to.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>The <paramref name="sourceRange"/> and &gt;<paramref name="destination"/> must fit within the dimensions of this texture.  If they do not, then the copy will be clipped so that they fit.</para>
            <para>The sourceRange uses absolute coorindates.  That is, Minimum is the Left coordinate, and Maximum is the Right coordinate.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the source texture is the same as this texture.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture1D)">
            <summary>
            Function to copy a texture subresource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the source texture is the same as this texture.</para>
            <para>-or-</para>
            <para>Thrown when the texture types are not the same.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture1D,System.Int32,System.Int32)">
            <summary>
            Function to copy a texture sub resource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <param name="subResource">Sub resource in the source texture to copy.</param>
            <param name="destSubResource">Sub resource in this texture to replace.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>The source texture must fit within the dimensions of this texture.  If it does not, then the copy will be clipped so that it fits.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>When copying sub resources (e.g. mip-map levels), the <paramref name="subResource"/> and <paramref name="destSubResource"/> must be different if the source texture is the same as the destination texture.</para>
            <para>Sub resource indices can be calculated with the <see cref="M:GorgonLibrary.Graphics.GorgonTexture1D.GetSubResourceIndex">GetSubResourceIndex</see> static method.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the subResource and destSubResource are the same and the source texture is the same as this texture.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.UpdateSubResource(GorgonLibrary.Graphics.ISubResourceData,System.Int32,GorgonLibrary.GorgonMinMax)">
            <summary>
            Function to copy data from the CPU to a texture.
            </summary>
            <param name="data">Data to copy to the texture.</param>
            <param name="subResource">Sub resource index to use.</param>
            <param name="destRange">The destination range to write into.</param>
            <remarks>Use this to copy data to this texture.  If the texture is non CPU accessible texture then an exception is raised.
            <para>The destRange uses absolute coorindates.  That is, Minimum is the Left coordinate, and Maximum is the Right coordinate.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture has an Immutable, Dynamic or a Staging usage.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture1D.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture1D"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns this texture.</param>
            <param name="name">The name of the texture.</param>
            <param name="settings">Settings to pass to the texture.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
              
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> parameter is an empty string.</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture1D.Settings">
            <summary>
            Property to return the settings for this texture.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ComparisonOperators">
            <summary>
            Operators used for comparison operations.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ComparisonOperators.Never">
            <summary>
            Never pass the comparison.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ComparisonOperators.Less">
            <summary>
            If the source data is less than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ComparisonOperators.Equal">
            <summary>
            If the source data is equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ComparisonOperators.LessEqual">
            <summary>
            If the source data is less than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ComparisonOperators.Greater">
            <summary>
            If the source data is greater than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ComparisonOperators.NotEqual">
            <summary>
            If the source data is not equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ComparisonOperators.GreaterEqual">
            <summary>
            If the source data is greater than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ComparisonOperators.Always">
            <summary>
            Always pass the comparison.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonGraphics">
            <summary>
            The primary object for the graphics sub system.
            </summary>
            <remarks>This interface is used to create all objects (buffers, shaders, etc...) that are to be used for graphics.  An interface is tied to a single physical video device, to use 
            multiple video devices, create additional graphics interfaces and assign the device to the <see cref="P:GorgonLibrary.Graphics.GorgonGraphics.VideoDevice">VideoDevice</see> property.
            <para>This object will enumerate video devices, monitor outputs (for multi-head adapters), and video modes for each of the video devices in the system upon creation.  These
            items are accessible in the <see cref="P:GorgonLibrary.Graphics.GorgonGraphics.VideoDevices">VideoDevices</see> property.  The user may force a new enumeration by calling the 
            <see cref="M:GorgonLibrary.Graphics.GorgonGraphics.GorgonVideoDeviceCollection.Refresh">VideoDevices.Refresh</see> method.  Please note that doing so will invalidate any objects that were created with 
            this interface, and consequently they will need to be <see cref="E:GorgonLibrary.Graphics.GorgonGraphics.BeforeDeviceEnumeration">destroyed before enumeration</see> and <see cref="E:GorgonLibrary.Graphics.GorgonGraphics.AfterDeviceEnumeration">recreated</see>.  This will also reset the current video device will be set to the first video device in the list.</para>
            <para>When switching video devices, ensure that all of your objects created by this interface are destroyed.  If they are not, then the graphics interface will attempt to 
            destroy any objects that it is aware of for you.  While this may be a convenience, it is better practice to handle the <see cref="E:GorgonLibrary.Graphics.GorgonGraphics.BeforeVideoDeviceChange">BeforeVideoDeviceChange</see> 
            event yourself.  You may recreate the objects in the <see cref="E:GorgonLibrary.Graphics.GorgonGraphics.AfterVideoDeviceChange">AfterVideoDeviceChange</see> event using the same interface.</para>
            <para>Please note that this object requires Direct3D 11 (but not necessarily a Direct3D 11 video card) and at least Windows Vista Service Pack 2 or higher.  Windows XP and operating systems before it will not work, and an exception will be thrown 
            if this object is created on those platforms.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.DestroyInterfaces">
            <summary>
            Function to clean up the categorized interfaces.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.GetFullscreenSwapChains">
            <summary>
            Function to return the currently active full screen swap chains.
            </summary>
            <returns>A list of full screen swap chains.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.AddTrackedObject(System.IDisposable)">
            <summary>
            Function to add a new object to the object tracker.
            </summary>
            <param name="trackedObject">Object to track.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="trackedObject"/> parameter is NULL (Nothing in VB.Net).</exception>
            <remarks>Use this to have the graphics interface track your custom object so that it will be disposed when the graphics interface shuts down.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.RemoveTrackedObject(System.IDisposable)">
            <summary>
            Function to remove a tracked object from the object tracker.
            </summary>
            <param name="trackedObject">Tracked object to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="trackedObject"/> parameter is NULL (Nothing in VB.Net).</exception>
            <remarks>If your custom object is being tracked by the graphics interface, then this must be called in the dispose method to remove it from the tracker.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.GetGraphicsObjectOfType``1">
            <summary>
            Function to retrieve a list of objects created by this interface by its type.
            </summary>
            <typeparam name="T">Type of object to retrieve.</typeparam>
            <returns>A list of objects of the specified type.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.#ctor(GorgonLibrary.Graphics.GorgonVideoDevice,GorgonLibrary.Graphics.DeviceFeatureLevel)">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.GorgonGraphics"/> class.
            </summary>
            <param name="device">Video device to use.</param>
            <param name="featureLevel">The maximum feature level to support for the devices enumerated.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="featureLevel"/> parameter is invalid.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when Gorgon could not find any video devices that are Shader Model 5, or the down level interfaces (Shader Model 4, and lesser).
            <para>-or-</para>
            <para>Thrown if the operating system version is not supported.  Gorgon Graphics requires at least Windows Vista Service Pack 2 or higher.</para>
            </exception>
            <remarks>
            The <paramref name="device"/> parameter is the video device that should be used with Gorgon.  If the user passes NULL (Nothing in VB.Net), then the primary device will be used. 
            To determine the devices on the system, check the <see cref="P:GorgonLibrary.Graphics.GorgonVideoDeviceCollection">GorgonVideoDeviceCollection</see> object.  The primary device will be the first device in this collection. 
            <para>The user may pass in a feature level to the featureLevel parameter to limit the feature levels available.  Note that the feature levels imply all feature levels up until the feature level passed in, for example, passing <c>DeviceFeatureLevel.SM4</c> will only allow functionality 
            for both Shader Model 4, and Shader Model 2/3 capable video devices, while DeviceFeatureLevel.SM4_1 will include Shader Model 4 with a 4.1 profile and Shader model 2/3 video devices.</para>
            <para>If a feature level is not supported by the hardware, then Gorgon will not use that feature level.  That is, passing a SM5 feature level with a SM4 card will only use a SM4 feature level.  If the user omits the feature level (in one of the constructor 
            overloads), then Gorgon will use the best available feature level for the video device being used.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.#ctor(GorgonLibrary.Graphics.GorgonVideoDevice)">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.GorgonGraphics"/> class.
            </summary>
            <param name="device">Video device to use.</param>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when Gorgon could not find any video devices that are Shader Model 5, or the down level interfaces (Shader Model 4, and lesser).
            <para>-or-</para>
            <para>Thrown if the operating system version is not supported.  Gorgon Graphics requires at least Windows Vista Service Pack 2 or higher.</para>
            </exception>
            <remarks>
            The <paramref name="device"/> parameter is the video device that should be used with Gorgon.  If the user passes NULL (Nothing in VB.Net), then the primary device will be used. 
            To determine the devices on the system, check the <see cref="P:GorgonLibrary.Graphics.GorgonVideoDeviceCollection">GorgonVideoDeviceCollection</see> object.  The primary device will be the first device in this collection. 
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.#ctor(GorgonLibrary.Graphics.DeviceFeatureLevel)">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.GorgonGraphics"/> class.
            </summary>
            <param name="featureLevel">The maximum feature level to support for the devices enumerated.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="featureLevel"/> parameter is invalid.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when Gorgon could not find any video devices that are Shader Model 5, or the down level interfaces (Shader Model 4, and lesser).
            <para>-or-</para>
            <para>Thrown if the operating system version is not supported.  Gorgon Graphics requires at least Windows Vista Service Pack 2 or higher.</para>
            </exception>
            <remarks>The user may pass in a feature level to the featureLevel parameter to limit the feature levels available.  Note that the feature levels imply all feature levels up until the feature level passed in, for example, passing <c>DeviceFeatureLevel.SM4</c> will only allow functionality 
            for both Shader Model 4, and Shader Model 2/3 capable video devices, while DeviceFeatureLevel.SM4_1 will include Shader Model 4 with a 4.1 profile and Shader model 2/3 video devices.
            <para>If a feature level is not supported by the hardware, then Gorgon will not use that feature level.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.#ctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.GorgonGraphics"/> class.
            </summary>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when Gorgon could not find any video devices that are Shader Model 5, or the down level interfaces (Shader Model 4, and lesser).
            <para>-or-</para>
            <para>Thrown if the operating system version is not supported.  Gorgon Graphics requires at least Windows Vista Service Pack 2 or higher.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.GorgonGraphics"/> class.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGraphics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.GIFactory">
            <summary>
            Property to set or return the DX GI factory.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.Context">
            <summary>
            Property to return the current device context.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.D3DDevice">
            <summary>
            Property to return the Direct3D 11 device object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.IsDWMCompositionEnabled">
            <summary>
            Property to set or return whether DWM composition is enabled or not.
            </summary>
            <remarks>This property will have no effect on systems that initially have the desktop window manager compositor disabled.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.Input">
            <summary>
            Property to return the input geometry interface.
            </summary>
            <remarks>
            The input interface covers items such as the vertex buffer, index buffer, bindings of the aforementioned buffers, the primitive type, etc...
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.Shaders">
            <summary>
            Property to return the shader interface.
            </summary>
            <remarks>This is used to create shaders, create constant buffers and bind them to the pipeline.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.Rasterizer">
            <summary>
            Property to return the current rasterizer states.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.IsObjectTrackingEnabled">
            <summary>
            Property to set or return whether object tracking is disabled.
            </summary>
            <remarks>This will enable SharpDX's object tracking to ensure references are destroyed upon application exit.
            <para>The default value for DEBUG mode is TRUE, and for RELEASE it is set to FALSE.  Disabling object tracking will
            give a slight performance increase.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.Output">
            <summary>
            Property to return the output merging interface.
            </summary>
            <remarks>This is responsible for setting blending states, depth/stencil states, creating render targets, etc...</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.Textures">
            <summary>
            Property to return the textures interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.Fonts">
            <summary>
            Property to return the fonts interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.VideoDevice">
            <summary>
            Property to set or return the video device to use for this graphics interface.
            </summary>
            <remarks>When this value is set to NULL (Nothing in VB.Net), then the first video device in the <see cref="P:GorgonLibrary.Graphics.GorgonGraphics.VideoDevices">VideoDevices</see> collection will be returned.
            <para>When the device is changed, all resources associated with the device (swap chains, buffers, etc...) will be destroyed.  The user will be responsible for re-creating these resources, and should do so in the 
            <see cref="E:GorgonLibrary.Graphics.GorgonGraphics.AfterDeviceChange">AfterDeviceChange</see> event.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGraphics.ResetFullscreenOnFocus">
            <summary>
            Property to set or return whether swap chains should reset their full screen setting on regaining focus.
            </summary>
            <remarks>
            This will control whether Gorgon will try to reacquire full screen mode when a full screen swap chain window regains focus.  When this is set to FALSE, and the window 
            containing the full screen swap chain loses focus, it will revert to windowed mode and remain in windowed mode.  When set to TRUE, it will try to reacquire full screen mode.
            <para>The default value for this is TRUE.  However, for a full screen multimonitor scenario, this should be set to FALSE.</para>
            </remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonKerningPair">
            <summary>
            A kerning pair value.
            </summary>
            <remarks>Kerning pairs are used to offset a pair of characters when they are next to each other.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonKerningPair.LeftCharacter">
            <summary>
            Left character.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonKerningPair.RightCharacter">
            <summary>
            Right character.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonKerningPair.Equals(GorgonLibrary.Graphics.GorgonKerningPair,GorgonLibrary.Graphics.GorgonKerningPair)">
            <summary>
            Function to determine if 2 kerning pairs are the same.
            </summary>
            <param name="left">Left kerning pair to compare.</param>
            <param name="right">Right kerning pair to compare.</param>
            <returns>TRUE if the same, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonKerningPair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonKerningPair.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonKerningPair.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonKerningPair.op_Equality(GorgonLibrary.Graphics.GorgonKerningPair,GorgonLibrary.Graphics.GorgonKerningPair)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonKerningPair.op_Inequality(GorgonLibrary.Graphics.GorgonKerningPair,GorgonLibrary.Graphics.GorgonKerningPair)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonKerningPair.#ctor(System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonKerningPair"/> struct.
            </summary>
            <param name="leftChar">The left char.</param>
            <param name="rightChar">The right char.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonKerningPair.Equals(GorgonLibrary.Graphics.GorgonKerningPair)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVertexBuffer">
            <summary>
            A buffer to hold a set of vertices.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBuffer.Initialize(GorgonLibrary.GorgonDataStream)">
            <summary>
            Function used to initialize the buffer with data.
            </summary>
            <param name="data">Data to write.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to the <paramref name="data"/> parameter should ignore the initialization and create the backing buffer as normal.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBuffer.LockImpl(GorgonLibrary.Graphics.BufferLockFlags)">
            <summary>
            Function used to lock the underlying buffer for reading/writing.
            </summary>
            <param name="lockFlags">Flags used when locking the buffer.</param>
            <returns>
            A data stream containing the buffer data.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBuffer.UnlockImpl">
            <summary>
            Function called to unlock the underlying data buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBuffer.UpdateImpl(GorgonLibrary.GorgonDataStream,System.Int32,System.Int32)">
            <summary>
            Function to update the buffer.
            </summary>
            <param name="stream">Stream containing the data used to update the buffer.</param>
            <param name="offset">Offset, in bytes, into the buffer to start writing at.</param>
            <param name="size">The number of bytes to write.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBuffer.Update(GorgonLibrary.GorgonDataStream)">
            <summary>
            Function to update the entire buffer.
            </summary>
            <param name="stream">Stream containing the data used to update the buffer.</param>
            <remarks>This method can only be used with buffers that have Default usage.  Other buffer usages will thrown an exception.
            <para>This method will respect the <see cref="P:GorgonLibrary.GorgonDataStream.Position">Position</see> property of the data stream.  
            This means that it will start reading from the stream at the current position.  To read from the beginning of the stream, set the position 
            to 0.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the buffer usage is not set to default.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBuffer.#ctor(GorgonLibrary.Graphics.GorgonGraphics,GorgonLibrary.Graphics.BufferUsage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVertexBuffer"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="usage">The buffer usage</param>
            <param name="size">The size.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonInputLayout">
            <summary>
            Defines the layout of an item in a buffer.
            </summary>
            <remarks>This is a collection of input elements used to describe the layout of an input object.  The user can create this by hand using explicit element types, or 
            by passing the type of the input object to the <see cref="M:GorgonLibrary.Graphics.GorgonInputLayout.GetLayoutFromType(System.Type)">GetLayoutFromType</see> method.
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.GetElementType(System.Type)">
            <summary>
            Function used to determine the type of a field/property from its type.
            </summary>
            <param name="type">Type to use when evaluating.</param>
            <returns>The element format.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.UpdateVertexSize">
            <summary>
            Function to retrieve the size, in bytes, of the input object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Convert(SharpDX.Direct3D11.Device)">
            <summary>
            Function to convert this input layout into a Direct3D input layout.
            </summary>
            <param name="device">Direct 3D device object.</param>
            <returns>The Direct 3D 11 input layout.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.NormalizeOffsets">
            <summary>
            Function to normalize the offsets in the element list.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.GetSlotSize(System.Int32)">
            <summary>
            Property to return the size of the elements for a given slot in an input element.
            </summary>
            <param name="slot">Slot to count.</param>
            <returns>The size of the elements in the slot, in bytes.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Add(GorgonLibrary.Graphics.GorgonInputElement)">
            <summary>
            Function to add an input element to the list.
            </summary>
            <param name="element">Element to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="element"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown if the element format is not supported.
            <para>-or-</para>
            <para>Thrown if the element offset or element context is in use and the element index is the same.</para>
            <para>-or-</para>
            <para>Thrown is the element slot is less than 0 or greater than 15.</para>
            </exception>
            <remarks>See the <see cref="T:GorgonLibrary.Graphics.GorgonInputElement">GorgonInputElement</see> type for details on the various parameters.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Add(System.String,GorgonLibrary.Graphics.BufferFormat,System.Nullable{System.Int32},System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Function to add an input element to the list.
            </summary>
            <param name="context">Context of the element.</param>
            <param name="format">Format of the element.</param>
            <param name="offset">Offset in bytes of the element.</param>
            <param name="index">Index of the element.</param>
            <param name="slot">Vertex buffer slot for the element.</param>
            <param name="instanced">TRUE if this element is instanced, FALSE if not.</param>
            <param name="instanceCount">If <paramref name="instanced"/> is TRUE, then the number of instances.  If FALSE, this parameter must be 0.</param>
            <returns>A new input element.</returns>
            <remarks>See the <see cref="T:GorgonLibrary.Graphics.GorgonInputElement">GorgonInputElement</see> type for details on the various parameters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="format"/> is not supported.
            <para>-or-</para>
            <para>Thrown if the <paramref name="offset"/> or <paramref name="context"/> is in use and the <paramref name="index"/> is the same.</para>
            <para>-or-</para>
            <para>Thrown is the <paramref name="slot"/> parameter is less than 0 or greater than 15.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Add(System.String,GorgonLibrary.Graphics.BufferFormat,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Function to add an input element to the list.
            </summary>
            <param name="context">Context of the element.</param>
            <param name="format">Format of the element.</param>
            <param name="offset">Offset in bytes of the element.</param>
            <param name="index">Index of the element.</param>
            <param name="slot">Vertex buffer slot for the element.</param>
            <returns>A new input element.</returns>
            <remarks>See the <see cref="T:GorgonLibrary.Graphics.GorgonInputElement">GorgonInputElement</see> type for details on the various parameters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="format"/> is not supported.
            <para>-or-</para>
            <para>Thrown if the <paramref name="offset"/> is in use and the <paramref name="index"/> is the same.</para>
            <para>-or-</para>
            <para>Thrown is the <paramref name="slot"/> parameter is less than 0 or greater than 15.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Add(System.String,GorgonLibrary.Graphics.BufferFormat,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Function to add an input element to the list.
            </summary>
            <param name="context">Context of the element.</param>
            <param name="format">Format of the element.</param>
            <param name="offset">Offset in bytes of the element.</param>
            <param name="index">Index of the element.</param>
            <returns>A new input element.</returns>
            <remarks>See the <see cref="T:GorgonLibrary.Graphics.GorgonInputElement">GorgonInputElement</see> type for details on the various parameters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="format"/> is not supported.
            <para>-or-</para>
            <para>Thrown if the <paramref name="offset"/> is in use and the <paramref name="index"/> is the same.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Add(System.String,GorgonLibrary.Graphics.BufferFormat,System.Nullable{System.Int32})">
            <summary>
            Function to add an input element to the list.
            </summary>
            <param name="context">Context of the element.</param>
            <param name="format">Format of the element.</param>
            <param name="offset">Offset in bytes of the element.</param>
            <returns>A new input element.</returns>
            <remarks>See the <see cref="T:GorgonLibrary.Graphics.GorgonInputElement">GorgonInputElement</see> type for details on the various parameters.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="format"/> is not supported.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Remove(System.Int32)">
            <summary>
            Function to remove an input element by index.
            </summary>
            <param name="index">Index of the element to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Clear">
            <summary>
            Function to clear the layout.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.GetLayoutFromType(System.Type)">
            <summary>
            Function to retrieve the input layout from a specific type.
            </summary>
            <param name="type">Type of retrieve layout info from.</param>
            <remarks>Use this to create an input element layout from a type.  Properties and fields in this type must be marked with the <see cref="T:GorgonLibrary.Graphics.InputElementAttribute">GorgonInputElementAttribute</see> in order for the element list to consider it and those fields or properties must be public.
            <para>Fields/properties marked with the attribute must be either a (u)byte, (u)short, (u)int, (u)long, float or one of the Vector2/3/4D types.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="type"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown if a field/property type cannot be mapped to a <see cref="E:GorgonLibrary.Graphics.GorgonBufferFormat">GorgonBufferFormat</see>.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.GorgonShader)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonInputLayout"/> class.
            </summary>
            <param name="graphics">Graphics interface that created this object.</param>
            <param name="name">Name of the object.</param>
            <param name="shader">Vertex shader to bind the layout with.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonInputLayout.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputLayout.D3DLayout">
            <summary>
            Property to return the Direct3D input layout.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputLayout.Graphics">
            <summary>
            Property to return the graphics interface that created this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputLayout.HasChanged">
            <summary>
            Property to set or return whether the list has been updated.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputLayout.Shader">
            <summary>
            Property to return the shader that is bound with this input layout.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputLayout.Size">
            <summary>
            Property to return the input object size in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputLayout.Item(System.Int32)">
            <summary>
            Property to return an element by index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonInputLayout.Name">
            <summary>
            Property to return the name of this object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.FontAntiAliasMode">
            <summary>
            Anti-aliasing modes for the font.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontAntiAliasMode.None">
            <summary>
            No anti-aliasing.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontAntiAliasMode.AntiAlias">
            <summary>
            Anti-aliasing, low quality.  
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontAntiAliasMode.AntiAliasHQ">
            <summary>
            Anti-aliasing, high quality.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.FontHeightMode">
            <summary>
            Font height mode.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontHeightMode.Points">
            <summary>
            Point size.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FontHeightMode.Pixels">
            <summary>
            Pixels.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonFontSettings">
            <summary>
            Settings for a font.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFontSettings.GetFontHeight(System.Single,System.Int32)">
            <summary>
            Function to return the font height, in pixels.
            </summary>
            <param name="pointSize">Size of the font, in points.</param>
            <param name="outlineSize">Size of the outline, if applicable.</param>
            <returns>The font height, in pixels.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFontSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonFontSettings"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.FontHeightMode">
            <summary>
            Property to return whether the font height is in pixels or in points.
            </summary>
            <remarks>
            When the font uses points for its height, the user must be aware of DPI scaling issues that may arise.
            <para>This will affect the <see cref="P:GorgonLibrary.Graphics.GorgonFontSettings.Size">Size</see> value in that it will alter the meaning of the units.</para>
            <para>The default value is Points.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.FontFamilyName">
            <summary>
            Property to set or return the font family name to generate the font from.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.Size">
            <summary>
            Property to set or return the font size.
            </summary>
            <remarks>This is affected by the <see cref="P:GorgonLibrary.Graphics.GorgonFontSettings.FontHeightMode">FontHeightMode</see>.  If the FontHeightMode is set to Points, then this unit is a point size height for the font. 
            Otherwise, this represents the font height in pixels.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.TextContrast">
            <summary>
            Property to set or return the contrast when anti-aliasing.
            </summary>
            <remarks>The default value is 4.  This value is has a range of 0 to 12.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.TextureSize">
            <summary>
            Property to set or return the size of the texture to use with the font.
            </summary>
            <remarks>Use this decrease or increase the number of textures used for a font.  If the number of glyphs cannot fit onto a single texture, a new texture will be created to 
            store the remaining glyphs.  This value will control the width and height of the textures created.
            <para>To retrieve the count of textures used, call the <see cref="P:GorgonLibrary.Graphics.GorgonFont.FontTextureCollection.Count">Count</see> property on the <see cref="P:GorgonLibrary.Graphics.GorgonFont.Textures">Textures</see> property.</para>
            <para>The default size is 256x256, the minimum size is 16x16 and the maximum size depends on the maximum texture size that's supported by the feature level.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.Characters">
            <summary>
            Property to set or return the list of available characters in the font.
            </summary>
            <remarks>This will be a list of characters that can be displayed by the font.
            <para>This property will re-order the string from the lowest character value to the highest.</para>
            <para>The default encompasses characters from ASCII character code 32 to 255.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.AntiAliasingMode">
            <summary>
            Property to set or return whether the anti-aliasing mode.
            </summary>
            <remarks>This is normal anti-aliasing, and not ClearType.  ClearType is not supported by Gorgon.
            <para>The default value is AntiAliasHQ.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.BaseColors">
            <summary>
            Property to set or return a list of colors to use for filling the glyph with a gradient fill.
            </summary>
            <remarks>The default value is a single color of White (A=1.0f, R=1.0f, G=1.0f, B=1.0f).</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.OutlineSize">
            <summary>
            Property to set or return the size of an outline.
            </summary>
            <remarks>The size of the outline is in pixels, and a value of 0 indicates that outlining is disabled.
            <para>The default value is 0.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.OutlineColor">
            <summary>
            Property to set or return the color of the outline.
            </summary>
            <remarks>
            If the alpha channel is set to 0.0f, then outlining will be disabled since it will be invisible.
            <para>The default value is Black (A=1.0f, R=0.0f, G=0.0f, B=0.0f).</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.Brush">
            <summary>
            Property to set or return a brush to use for special effects on the font.
            </summary>
            <remarks>The default value is NULL (Nothing in VB.Net).</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.FontStyle">
            <summary>
            Property to set or return the style for the font.
            </summary>
            <remarks>The default value is Regular.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.DefaultCharacter">
            <summary>
            Property to set or return a default character to use in place of a character that cannot be found in the font.
            </summary>
            <remarks>Some characters are unprintable, and thus have no width/height.  This character will be substituted in those cases.
            <para>The default value is a space ' '.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFontSettings.PackingSpacing">
            <summary>
            Property to set or return the spacing (in pixels) used between font glyphs on the packed texture.
            </summary>
            <remarks>Valid values are between 0 and 8.
            <para>The default value is 1 pixel.</para></remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVideoOutput">
            <summary>
            A video output on a video device.
            </summary>
            <remarks>A video output is a head on the video device.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutput.FindMode(GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Function to find the nearest video mode to the one specified.
            </summary>
            <param name="mode">Mode to find.</param>
            <returns>The closest matching video mode to the <paramref name="mode"/> parameter.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutput.#ctor(GorgonLibrary.Graphics.GorgonVideoDevice,SharpDX.DXGI.Output)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVideoOutput"/> class.
            </summary>
            <param name="videoDevice">Video device that owns this output.</param>
            <param name="output">Output to evaluate.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutput.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoOutput.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutput.GIOutput">
            <summary>
            Property to return the GI output.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutput.Name">
            <summary>
            Property to return the device name of the output.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutput.OutputBounds">
            <summary>
            Property to return the display location and dimensions of the output.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutput.IsAttachedToDesktop">
            <summary>
            Property to return whether the output device is attached to the desktop.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutput.Rotation">
            <summary>
            Property to return the rotation in degrees for the monitor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutput.VideoModes">
            <summary>
            Property to return the video modes for this output.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutput.DefaultVideoMode">
            <summary>
            Property to return the default video mode for this output.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutput.Handle">
            <summary>
            Property to return the handle of the output device.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoOutput.VideoDevice">
            <summary>
            Property to return the video device for this output.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.D3DErrors">
            <summary>
            Provides a lookup for error codes.
            </summary>
            <remarks>This is adapted from SharpDX by Alexandre Mutel.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.D3DErrors.Add(System.Int64,System.String,System.String)">
            <summary>
            Function to add a new error code.
            </summary>
            <param name="hresult">HRESULT code.</param>
            <param name="code">Text code.</param>
            <param name="desc">Description.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.D3DErrors.GetError(System.Int64)">
            <summary>
            Function to retrieve an error based on its error code.
            </summary>
            <param name="code">Error code to look up.</param>
            <returns>The error code info.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.D3DErrors.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.D3DErrors"/> class.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.D3DErrors.D3DError">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.D3DErrors.D3DError.HResult">
            <summary>
            HRESULT code.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.D3DErrors.D3DError.Code">
            <summary>
            Text code.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.D3DErrors.D3DError.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.D3DErrors.D3DError.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.D3DErrors.D3DError"/> struct.
            </summary>
            <param name="hresult">The hresult.</param>
            <param name="code">The code.</param>
            <param name="desc">The desc.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTexture3D">
            <summary>
            A 3 dimensional texture object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.InitializeImpl(System.Byte[],SharpDX.Direct3D11.ImageLoadInformation)">
            <summary>
            Function to read image data from an array of bytes.
            </summary>
            <param name="imageData">Array of bytes holding the image data.</param>
            <param name="imageInfo">Information to pass to the image loading method.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.InitializeImpl(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.ISubResourceData})">
            <summary>
            Function to create an image with initial data.
            </summary>
            <param name="initialData">Data to use when creating the image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.ToPixel(SlimMath.Vector3)">
            <summary>
            Function to convert a texel space coordinate into a pixel space coordinate.
            </summary>
            <param name="texel">The texel coordinate to convert.</param>
            <returns>The pixel location of the texel on the texture.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.ToTexel(SlimMath.Vector3)">
            <summary>
            Function to convert a pixel coordinate into a texel space coordinate.
            </summary>
            <param name="pixel">The pixel coordinate to convert.</param>
            <returns>The texel space location of the pixel on the texture.</returns>
            <exception cref="T:System.DivideByZeroException">Thrown when the texture width, height or depth is equal to 0.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.ToPixel(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Function to convert a texel space coordinate into a pixel space coordinate.
            </summary>
            <param name="texel">The texel coordinate to convert.</param>
            <param name="result">The pixel space location of the texel.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.ToTexel(SlimMath.Vector3@,SlimMath.Vector3@)">
            <summary>
            Function to convert a pixel coordinate into a texel space coordinate.
            </summary>
            <param name="pixel">The pixel coordinate to convert.</param>
            <param name="result">The pixel space location of the texel.</param>
            <exception cref="T:System.DivideByZeroException">Thrown when the texture width, height or depth is equal to 0.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.GetSubResourceIndex(System.Int32,System.Int32)">
            <summary>
            Function to return the index of a sub resource in a texture.
            </summary>
            <param name="mipLevel">Mip level to look up.</param>
            <param name="mipCount">The number of mip map levels in the texture.</param>
            <returns>The sub resource index.</returns>
            <remarks>Unlike the GetSubResourceIndex on the <see cref="M:GorgonLibrary.Graphics.GorgonTexture1D.GetSubResourceIndex">GorgonTexture1D</see> or <see cref="M:GorgonLibrary.Graphics.GorgonTexture2D.GetSubResourceIndex">GorgonTexture2D</see> objects, this version does not take an array index because 3D textures do not use array resources.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.Save(System.IO.Stream,GorgonLibrary.Graphics.ImageFileFormat)">
            <summary>
            Function to save the texture data to a stream.
            </summary>
            <param name="stream">Stream to write.</param>
            <param name="format">Image format to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
              
            <exception cref="T:System.ArgumentException">
            Thrown when the format is anything other than DDS for a volume (3D) or 1D texture.
              <para>-or-</para>
              <para>Thrown when the format is anything other than DDS.</para>
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture3D,System.Int32,System.Int32,System.Nullable{GorgonLibrary.Graphics.GorgonBox},SlimMath.Vector3)">
            <summary>
            Function to copy a texture subresource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <param name="subResource">Sub resource in the source texture to copy.</param>
            <param name="destSubResource">Sub resource in this texture to replace.</param>
            <param name="sourceRegion">Region on the source texture to copy.</param>
            <param name="destination">Destination point to copy to.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>The <paramref name="sourceRegion"/> and &gt;<paramref name="destination"/> must fit within the dimensions of this texture.  If they do not, then the copy will be clipped so that they fit.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>When copying sub resources (e.g. mip-map levels), the <paramref name="subResource"/> and <paramref name="destSubResource"/> must be different if the source texture is the same as the destination texture.</para>
            <para>Sub resource indices can be calculated with the <see cref="M:GorgonLibrary.Graphics.GorgonTexture2D.GetSubResourceIndex">GetSubResourceIndex</see> static method.</para>
            <para>Pass NULL (Nothing in VB.Net) to the sourceRegion parameter to copy the entire sub resource.</para>
            <para>SM2_a_b devices using 3D textures can only be copied to textures that are in GPU memory, if either texture is a staging texture, then an exception will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the subResource and destSubResource are the same and the source texture is the same as this texture.</para>
            <para>-or-</para>
            <para>Thrown when the texture types are not the same.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            <para>-or-</para>
            <para>Thrown when this 3D texture is in CPU accessible memory and the video device is a SM2_a_b device.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture3D,GorgonLibrary.Graphics.GorgonBox,SlimMath.Vector3)">
            <summary>
            Function to copy a texture subresource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <param name="sourceRegion">Region on the source texture to copy.</param>
            <param name="destination">Destination point to copy to.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>The <paramref name="sourceRegion"/> and &gt;<paramref name="destination"/> must fit within the dimensions of this texture.  If they do not, then the copy will be clipped so that they fit.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>SM2_a_b devices using 3D textures can only be copied to textures that are in GPU memory, if either texture is a staging texture, then an exception will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the source texture is the same as this texture.</para>
            <para>-or-</para>
            <para>Thrown when the texture types are not the same.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            <para>-or-</para>
            <para>Thrown when this 3D texture is in CPU accessible memory and the video device is a SM2_a_b device.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture3D)">
            <summary>
            Function to copy a texture subresource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>SM2_a_b devices using 3D textures can only be copied to textures that are in GPU memory, if either texture is a staging texture, then an exception will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the source texture is the same as this texture.</para>
            <para>-or-</para>
            <para>Thrown when the texture types are not the same.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            <para>-or-</para>
            <para>Thrown when this 3D texture is in CPU accessible memory and the video device is a SM2_a_b device.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.CopySubResource(GorgonLibrary.Graphics.GorgonTexture3D,System.Int32,System.Int32)">
            <summary>
            Function to copy a texture sub resource from another texture.
            </summary>
            <param name="texture">Source texture to copy.</param>
            <param name="subResource">Sub resource in the source texture to copy.</param>
            <param name="destSubResource">Sub resource in this texture to replace.</param>
            <remarks>This method will -not- perform stretching or filtering and will clip to the size of the destination texture.  
            <para>The source texture must fit within the dimensions of this texture.  If it does not, then the copy will be clipped so that it fits.</para>
            <para>For SM_4_1 and SM_5 video devices, texture formats can be converted if they belong to the same format group (e.g. R8G8B8A8, R8G8B8A8_UInt, R8G8B8A8_Int, R8G8B8A8_UIntNormal, etc.. are part of the R8G8B8A8 group).  If the 
            video device is a SM_4 or SM_2_a_b device, then no format conversion will be done and an exception will be thrown if format conversion is attempted.</para>
            <para>When copying sub resources (e.g. mip-map levels), the <paramref name="subResource"/> and <paramref name="destSubResource"/> must be different if the source texture is the same as the destination texture.</para>
            <para>Sub resource indices can be calculated with the <see cref="M:GorgonLibrary.Graphics.GorgonTexture2D.GetSubResourceIndex">GetSubResourceIndex</see> static method.</para>
            <para>SM2_a_b devices using 3D textures can only be copied to textures that are in GPU memory, if either texture is a staging texture, then an exception will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the texture parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the formats cannot be converted because they're not of the same group or the current video device is a SM_2_a_b device or a SM_4 device.
            <para>-or-</para>
            <para>Thrown when the subResource and destSubResource are the same and the source texture is the same as this texture.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture is an immutable texture.
            <para>-or-</para>
            <para>Thrown when this 3D texture is in CPU accessible memory and the video device is a SM2_a_b device.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.UpdateSubResource(GorgonLibrary.Graphics.ISubResourceData,System.Int32,GorgonLibrary.Graphics.GorgonBox)">
            <summary>
            Function to copy data from the CPU to a texture.
            </summary>
            <param name="data">Data to copy to the texture.</param>
            <param name="subResource">Sub resource index to use.</param>
            <param name="destBox">Destination region to copy into.</param>
            <remarks>Use this to copy data to this texture.  If the texture is non CPU accessible texture then an exception is raised.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="destBox"/> parameter is less than 0 or larger than this texture.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when this texture has an Immutable, Dynamic or a Staging usage.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTexture3D.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.ITextureSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonTexture3D"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns this texture.</param>
            <param name="name">The name of the texture.</param>
            <param name="settings">Settings to pass to the texture.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
              
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> parameter is an empty string.</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonTexture3D.Settings">
            <summary>
            Property to return the settings for this texture.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonViewport">
            <summary>
            A viewport rectangle to define extents for screen space rendering.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonViewport.Region">
            <summary>
            The rectangular region used for screen space clipping/scaling.
            </summary>
            <remarks>The width and height must be greater than or equal to 0.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonViewport.MinimumZ">
            <summary>
            The minimum depth for the viewport.
            </summary>
            <remarks>This must be between 0 and 1.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonViewport.MaximumZ">
            <summary>
            The maximum depth for the viewport.
            </summary>
            <remarks>This must be between 0 and 1.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonViewport.IsEnabled">
            <summary>
            Flag to indicate that the viewport is enabled.
            </summary>
            <remarks>The default value is TRUE.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.Convert">
            <summary>
            Function to convert this viewport rectangle into a Direct3D viewport.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.Equals(GorgonLibrary.Graphics.GorgonViewport@,GorgonLibrary.Graphics.GorgonViewport@)">
            <summary>
            Function to determine if the two values are equal.
            </summary>
            <param name="left">Left value to compare.</param>
            <param name="right">Right value to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.op_Equality(GorgonLibrary.Graphics.GorgonViewport,GorgonLibrary.Graphics.GorgonViewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.op_Inequality(GorgonLibrary.Graphics.GorgonViewport,GorgonLibrary.Graphics.GorgonViewport)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonViewport"/> struct.
            </summary>
            <param name="region">The position and size for the screen space region.</param>
            <param name="minZ">Minimum depth.</param>
            <param name="maxZ">Maximum depth.</param>
            <remarks>The <paramref name="minZ"/> and <paramref name="maxZ"/> parameters must be between 0 and 1.  The width and height of the <paramref name="region"/> parameter must be greater than or equal to 0.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonViewport"/> struct.
            </summary>
            <param name="region">The position and size for the screen space region.</param>
            <remarks>The width and height of the <paramref name="region"/> parameter must be greater than or equal to 0.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonViewport"/> struct.
            </summary>
            <param name="x">The horizontal position of the view.</param>
            <param name="y">The vertical position of the view.</param>
            <param name="width">The width of the view.</param>
            <param name="height">The height of the view.</param>
            <param name="minZ">Minimum depth.</param>
            <param name="maxZ">Maximum depth.</param>
            <remarks>The <paramref name="minZ"/> and <paramref name="maxZ"/> parameters must be between 0 and 1.  The <paramref name="width"/> and <paramref name="height"/> parameters must be greater than or equal to 0.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonViewport"/> struct.
            </summary>
            <param name="x">The horizontal position of the view.</param>
            <param name="y">The vertical position of the view.</param>
            <param name="width">The width of the view.</param>
            <param name="height">The height of the view.</param>
            <remarks>The <paramref name="width"/> and <paramref name="height"/> parameters must be greater than or equal to 0.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonViewport.Equals(GorgonLibrary.Graphics.GorgonViewport)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Native.MonitorFlags">
            <summary>
            Get monitor from window flags.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MonitorFlags.MONITOR_DEFAULTTONULL">
            <summary>
            Return NULL.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MonitorFlags.MONITOR_DEFAULTTOPRIMARY">
            <summary>
            Return the primary monitor.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MonitorFlags.MONITOR_DEFAULTTONEAREST">
            <summary>
            Return the monitor nearest to the window.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Native.MapModes">
            <summary>
            Map modes for SetMapMode
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MapModes.MM_TEXT">
            <summary>
            Each logical unit is mapped to one device pixel. Positive x is to the right; positive y is down.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MapModes.MM_LOMETRIC">
            <summary>
            Each logical unit is mapped to 0.1 millimeter. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MapModes.MM_HIMETRIC">
            <summary>
            Each logical unit is mapped to 0.01 millimeter. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MapModes.MM_LOENGLISH">
            <summary>
            Each logical unit is mapped to 0.1 millimeter. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MapModes.MM_HIENGLISH">
            <summary>
            Each logical unit is mapped to 0.01 inch. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MapModes.MM_TWIPS">
            <summary>
            Each logical unit is mapped to one twentieth of a printer's point (1/1440 inch, also called a twip). Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MapModes.MM_ISOTROPIC">
            <summary>
            Logical units are mapped to arbitrary units with equally scaled axes; that is, one unit along the x-axis is equal to one unit along the y-axis. 
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MapModes.MM_ANISOTROPIC">
            <summary>
            Logical units are mapped to arbitrary units with arbitrarily scaled axes.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Native.ABC">
            <summary>
            Structure for font kerning offsets.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.ABC.A">
            <summary>
            The A spacing of the character. The A spacing is the distance to add to the current position before drawing the character glyph.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.ABC.B">
            <summary>
            The B spacing of the character. The B spacing is the width of the drawn portion of the character glyph.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.ABC.C">
            <summary>
            The C spacing of the character. The C spacing is the distance to add to the current position to provide white space to the right of the character glyph.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Native.KERNINGPAIR">
            <summary>
            The KERNINGPAIR structure defines a kerning pair.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.KERNINGPAIR.First">
            <summary>
            The character code for the first character in the kerning pair.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.KERNINGPAIR.Second">
            <summary>
            The character code for the second character in the kerning pair.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.KERNINGPAIR.KernAmount">
            <summary>
            The amount this pair will be kerned if they appear side by side in the same font and size. This value is typically negative, because pair kerning usually results in two characters being set more tightly than normal. The value is specified in logical units; that is, it depends on the current mapping mode.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonGlyph">
            <summary>
            A glyph used to define a character in the font.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGlyph.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGlyph.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGlyph.#ctor(System.Char,GorgonLibrary.Graphics.GorgonTexture2D,System.Drawing.Rectangle,SlimMath.Vector2,SlimMath.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonGlyph"/> class.
            </summary>
            <param name="character">The character that the glyph represents.</param>
            <param name="texture">The texture that the glyph can be found on.</param>
            <param name="glyphCoordinates">Coordinates on the texture to indicate where the glyph is stored.</param>
            <param name="glyphOffset">Vertical offset of the glyph.</param>
            <param name="glyphAdvancing">Advancement kerning data for the glyph.</param>
            <remarks>The <paramref name="glyphCoordinates"/> parameter is in pixel coordinates (i.e. 0 .. Width/Height).</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="texture"/> parameter is NULL (Nothing in VB.Net).
            </exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGlyph.Character">
            <summary>
            Property to return the character that this glyph represents.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGlyph.Texture">
            <summary>
            Property to return the texture that the glyph can be found on.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGlyph.GlyphCoordinates">
            <summary>
            Property to return the coordinates, in pixel space, of the glyph.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGlyph.TextureCoordinates">
            <summary>
            Property to return the texture coordinates for the glyph.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGlyph.Advance">
            <summary>
            Property to return the ABC kerning advance for the glyph.
            </summary>
            <remarks>The A part is the distance added to the current position before placing the glyph, the B part is the width of the glyph and the C part is the distance added to the current position (this is white space on the right of the glyph).</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGlyph.Offset">
            <summary>
            Property to return the horizontal and vertical offset of the glyph.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGlyph.GorgonLibrary#INamedObject#Name">
            <summary>
            Property to return the name of this object.
            </summary>
            <value></value>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonFonts">
            <summary>
            Font interface for Gorgon.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFonts.CleanUp">
            <summary>
            Function to clean up any resources.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFonts.LoadFont(System.String,System.IO.Stream)">
            <summary>
            Function to load the font from a stream.
            </summary>
            <param name="fontName">Name of the font object.</param>
            <param name="stream">Stream to load from.</param>
            <returns>The font loaded from the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFonts.FromStream(System.String,System.IO.Stream)">
            <summary>
            Function to read a font from a stream.
            </summary>
            <param name="name">Name of the font object.</param>
            <param name="stream">Stream to read from.</param>
            <returns>The font in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> or the <paramref name="name"/> parameters are NULL.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the name parameter is an empty string.
            <para>-or-</para>
            <para>Thrown if the font uses external textures, but the stream is not a file stream.</para></exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown if the font cannot be read.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFonts.FromFile(System.String,System.String)">
            <summary>
            Function to read a font from a file.
            </summary>
            <param name="name">Name of the font object.</param>
            <param name="fileName">Path and filename of the font to load.</param>
            <returns>The font in the stream.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="fileName"/> or the <paramref name="name"/> parameters are NULL.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the fileName or name parameters are empty strings.
            <para>-or-</para>
            <para>Thrown if the font uses external textures, but the stream is not a file stream.</para></exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown if the font cannot be read.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFonts.CreateFont(System.String,System.String,System.Single,GorgonLibrary.Graphics.FontAntiAliasMode,System.Drawing.Size)">
            <summary>
            Function to create a new font texture object from a GDI+ font.
            </summary>
            <param name="fontName">Name of the font texture object.</param>
            <param name="fontFamily">Font family to use.</param>
            <param name="pointSize">Point size for the font.</param>
            <param name="antiAliasMode">Anti-aliasing mode.</param>
            <param name="textureSize">Size of the textures to generate.</param>
            <returns>The new font texture object.</returns>
            <remarks>This method creates an object that contains a group of textures with font glyphs.  These textures can be used by another application to 
            display text (or symbols) on the screen.  Kerning information (the proper spacing for a glyph) is included in the glyphs and font.
            <para>Please note that the <paramref name="fontName"/> parameter is user defined and does not have to be the same as the <paramref name="fontFamily"/> parameter.</para></remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the fontName or fontFamily parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the fontName or fontFamily parameters are empty strings.
            <para>-or-</para>
            <para>Thrown when the <paramref name="textureSize"/> width or height is larger than can be handled by the current feature level.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFonts.CreateFont(System.String,System.String,System.Single,System.Drawing.FontStyle,GorgonLibrary.Graphics.FontAntiAliasMode,System.Drawing.Size)">
            <summary>
            Function to create a new font texture object from a GDI+ font.
            </summary>
            <param name="fontName">Name of the font texture object.</param>
            <param name="fontFamily">Font family to use.</param>
            <param name="pointSize">Point size for the font.</param>
            <param name="style">Style to apply to the font.</param>
            <param name="antiAliasMode">Anti-aliasing mode.</param>
            <param name="textureSize">Size of the textures to generate.</param>
            <returns>The new font texture object.</returns>
            <remarks>This method creates an object that contains a group of textures with font glyphs.  These textures can be used by another application to 
            display text (or symbols) on the screen.  Kerning information (the proper spacing for a glyph) is included in the glyphs and font.
            <para>Please note that the <paramref name="fontName"/> parameter is user defined and does not have to be the same as the <paramref name="fontFamily"/> parameter.</para></remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the fontName or fontFamily parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the fontName or fontFamily parameters are empty strings.
            <para>-or-</para>
            <para>Thrown when the <paramref name="textureSize"/> width or height is larger than can be handled by the current feature level.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFonts.CreateFont(System.String,System.Drawing.Font,GorgonLibrary.Graphics.FontAntiAliasMode,System.Drawing.Size)">
            <summary>
            Function to create a new font texture object from a GDI+ font.
            </summary>
            <param name="fontName">Name of the font texture object.</param>
            <param name="font">GDI+ font to use.</param>
            <param name="antiAliasMode">Anti-aliasing mode.</param>
            <param name="textureSize">Size of the textures to generate.</param>
            <returns>The new font texture object.</returns>
            <remarks>This method creates an object that contains a group of textures with font glyphs.  These textures can be used by another application to 
            display text (or symbols) on the screen.  Kerning information (the proper spacing for a glyph) is included in the glyphs and font.
            <para>Please note that the <paramref name="fontName"/> parameter is user defined and does not have to be the same as the font family name in the <paramref name="font"/> parameter.</para></remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the fontName or <paramref name="font"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the fontName parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the <paramref name="textureSize"/> width or height is larger than can be handled by the current feature level.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFonts.CreateFont(System.String,GorgonLibrary.Graphics.GorgonFontSettings)">
            <summary>
            Function to create a new font texture object.
            </summary>
            <param name="fontName">Name of the font texture object.</param>
            <param name="settings">Settings for the font.</param>
            <returns>The new font texture object.</returns>
            <remarks>This method creates an object that contains a group of textures with font glyphs.  These textures can be used by another application to 
            display text (or symbols) on the screen.  Kerning information (the proper spacing for a glyph) is included in the glyphs and font.
            <para>Please note that the <paramref name="fontName"/> parameter is user defined and does not have to be the same as the <see cref="P:GorgonLibrary.Graphics.GorgonFontSettings.FontFamilyName">FontFamilyName</see> in the <paramref name="settings"/> parameter.</para></remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the fontName or settings parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the fontName parameter is an empty string.
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonFontSettings.TextureSize">settings.TextureSize</see> width or height is larger than can be handled by the current feature level.</para>
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonFontSettings.DefaultCharacter">settings.DefaultCharacter</see> cannot be located in the <see cref="P:GorgonLibrary.Graphics.GorgonFontSettings.Characters">settings.Characters</see> list.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonFonts.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonFonts"/> class.
            </summary>
            <param name="graphics">Graphics interface.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonFonts.DefaultFont">
            <summary>
            Property to return the default font.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.CullingMode">
            <summary>
            Defines how a triangle should be culled.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.CullingMode.None">
            <summary>
            No culling.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.CullingMode.Front">
            <summary>
            Front facing should be culled.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.CullingMode.Back">
            <summary>
            Back facing should be culled.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.FillMode">
            <summary>
            Defines how a triangle should be filled.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FillMode.Wireframe">
            <summary>
            Wireframe triangles.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FillMode.Solid">
            <summary>
            Solid triangles.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonRasterizerStates">
            <summary>
            Immutable states for the rasterizer.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.DefaultStates">
            <summary>
            Default rasterizer states.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.CullingMode">
            <summary>
            The triangle culling mode for the rasterizer.
            </summary>
            <remarks>The default value is Back.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.FillMode">
            <summary>
            Property to set or return the triangle filling mode.
            </summary>
            <remarks>The default value is Solid.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.IsFrontFacingTriangleCounterClockwise">
            <summary>
            Property to set or return whether a triangle uses clockwise or counterclockwise vertices to determine whether it is front or back facing respectively.
            </summary>
            <remarks>The default value is FALSE.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.DepthBias">
            <summary>
            Property to set or return a value to add to a pixel when comparing depth.
            </summary>
            <remarks>The default value is 0.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.DepthBiasClamp">
            <summary>
            Property to set or return the maximum depth bias for a pixel.
            </summary>
            <remarks>The default value is 0.0f.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.SlopeScaledDepthBias">
            <summary>
            Property to set or return the scalar value for a pixel slope.
            </summary>
            <remarks>The default value is 0.0f.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.IsDepthClippingEnabled">
            <summary>
            Property to set or return whether the hardware should clip the Z value.
            </summary>
            <remarks>The default value is TRUE.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.IsScissorTestingEnabled">
            <summary>
            Property to set or return whether to enable scissor testing.
            </summary>
            <remarks>When this value is set to TRUE any pixels outside the active scissor rectangle are culled.
            <para>The default value is FALSE.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.IsMultisamplingEnabled">
            <summary>
            Property to set or return whether multisampling is enabled or not.
            </summary>
            <remarks>This must be set to TRUE in order to activate multisampling.
            <para>The default value is FALSE.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRasterizerStates.IsAntialiasedLinesEnabled">
            <summary>
            Property to set or return whether antialiasing should be used when drawing lines.
            </summary>
            <remarks>This value is only valid if <see cref="P:GorgonLibrary.GorgonGraphics.GorgonRasterizerState.RasterizerStates.IsMultisamplingEnabled">IsMultisamplingEnabled</see> is equal to FALSE.
            <para>The default value is FALSE.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerStates.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerStates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerStates.Equals(GorgonLibrary.Graphics.GorgonRasterizerStates@,GorgonLibrary.Graphics.GorgonRasterizerStates@)">
            <summary>
            Function to compare two sets of rasterizer states for equality.
            </summary>
            <param name="left">Left states to compare.</param>
            <param name="right">Right states to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerStates.op_Equality(GorgonLibrary.Graphics.GorgonRasterizerStates,GorgonLibrary.Graphics.GorgonRasterizerStates)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerStates.op_Inequality(GorgonLibrary.Graphics.GorgonRasterizerStates,GorgonLibrary.Graphics.GorgonRasterizerStates)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerStates.Equals(GorgonLibrary.Graphics.GorgonRasterizerStates)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonRasterizerRenderState">
            <summary>
            Render states for the rasterizer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerRenderState.ApplyState(System.IDisposable)">
            <summary>
            Function to apply the state to the appropriate state object.
            </summary>
            <param name="state">The Direct3D state object to apply.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerRenderState.Convert">
            <summary>
            Function to convert this state object into a rasterizer state.
            </summary>
            <returns>The new rasterizer state.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerRenderState.SetViewport(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonViewport})">
            <summary>
            Function to set a list of viewports.
            </summary>
            <remarks>This will clip/scale the output to the the constraints in the viewport(s).
            <para>Viewports must have a width and height greater than 0.</para>
            <para>Which viewport to use is determined by the SV_ViewportArrayIndex semantic output by a geometry shader; if a geometry shader does not specify the semantic, then the first viewport in the list will be used.</para>
            <para>On SM2_a_b devices only the first viewport will be used.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerRenderState.SetViewport(GorgonLibrary.Graphics.GorgonViewport)">
            <summary>
            Function to set a single viewport.
            </summary>
            <param name="viewPort">Viewport to set.</param>
            <remarks>Viewports must have a width and height greater than 0.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerRenderState.SetClip(System.Drawing.Rectangle)">
            <summary>
            Function to set a scissor rectangle clipping region.
            </summary>
            <param name="region">Region to set.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerRenderState.SetClip(System.Collections.Generic.IEnumerable{System.Drawing.Rectangle})">
            <summary>
            Function to set a list of scissor rectangle clipping regions.
            </summary>
            <param name="regions">Regions to set.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to the <paramref name="regions"/> parameter will use the width/height of the current <see cref="P:GorgonLibrary.Graphics.OutputMerger.RenderTargets">render target</see>.
            <para>On SM2_a_b devices only the first clip rectangle will be used.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRasterizerRenderState.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonRasterizerRenderState"/> class.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonShaderIncludeCollection">
            <summary>
            A collection of shader include files.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.FindIncludeBlock(System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Function to find the start and end to the include block
            </summary>
            <param name="startLine">Starting line.</param>
            <param name="lines">Lines to scan.</param>
            <returns>The start and end index of the include block.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.ParseIncludeLine(System.String,System.Boolean)">
            <summary>
            Function to retrieve the include line.
            </summary>
            <param name="includeLine">Include line.</param>
            <param name="checkFileExists">TRUE to check if the file exists, FALSE to skip the check.</param>
            <returns>A path to the include file.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.GetIncludes(System.String,System.String)">
            <summary>
            Function to retrieve a list of include files from source code.
            </summary>
            <param name="searchPath">A base path to start searching from.</param>
            <param name="sourceCode">Source code to examine.</param>
            <returns>A list of include files.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.AddItem(GorgonLibrary.Graphics.GorgonShaderInclude)">
            <summary>
            Adds the item.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.FromFile(System.String)">
            <summary>
            Function to load include files referenced by a file.
            </summary>
            <param name="shaderFileName">File name and path to the shader file to examine.</param>
            <remarks>This method will recursively look for any included files within the file.  
            <para>The lookup parameter is the full (absolute) path to the shader include file.  If this method encounters a file that has already been loaded, then it will skip that file.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="shaderFileName"/> parameters is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the shaderFileName parameter is empty.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.ProcessSource(System.String)">
            <summary>
            Function to process the source code and set up any includes.
            </summary>
            <param name="sourceCode">Code to process.</param>
            <returns>The processed source.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.AddRange(System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonShaderInclude})">
            <summary>
            Function to add a list of shader includes to the collection.
            </summary>
            <param name="includes">Include files to add.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.Add(GorgonLibrary.Graphics.GorgonShaderInclude)">
            <summary>
            Function to add a new include file to the collection.
            </summary>
            <param name="includeFile">Include file to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="includeFile"/> parameter contains a NULL (Nothing in VB.Net) file name or NULL source code.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the includeFile parameter has an empty file name or source code.
            <para>-or-</para>
            <para>Thrown when the include file name already exists in this collection.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.Add(System.String,System.String)">
            <summary>
            Function to add a new include file to the collection.
            </summary>
            <param name="includeName">Filename for the include file.</param>
            <param name="includeSourceCode">Source code for the include file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="includeName"/> or the <paramref name="includeSourceCode"/> parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the includeFileName or the includeSource parameters are empty.
            <para>-or-</para>
            <para>Thrown when the includeFileName already exists in this collection.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.Remove(System.String)">
            <summary>
            Function to remove an include file from the collection.
            </summary>
            <param name="includeName">File name of the include file to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.Remove(GorgonLibrary.Graphics.GorgonShaderInclude)">
            <summary>
            Function to remove an include file from the collection.
            </summary>
            <param name="include">Include file to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.Clear">
            <summary>
            Function to clear the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonShaderIncludeCollection"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderIncludeCollection.Item(System.String)">
            <summary>
            Property to set or return an include file in the collection.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonBox">
            <summary>
            A box structure with width, height and depth.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBox.X">
            <summary>
            Horizontal position.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBox.Y">
            <summary>
            Vertical position
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBox.Z">
            <summary>
            Depth position.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBox.Width">
            <summary>
            Width of the box.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBox.Height">
            <summary>
            Height of the box.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBox.Depth">
            <summary>
            Depth of the box.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBox.Convert">
            <summary>
            Property to retrieve the resource region.
            </summary>
            <returns>The D3D resource region.</returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBox.Left">
            <summary>
            Property to set or return the left value for the box.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBox.Top">
            <summary>
            Property to set or return the top value for the box.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBox.Front">
            <summary>
            Property to set or return the front value for the box.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBox.Right">
            <summary>
            Property to return the right value of the box.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBox.Bottom">
            <summary>
            Property to return the bottom value of the box.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBox.Back">
            <summary>
            Property to return the back value of the box.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonConstantBuffer">
            <summary>
            A constant buffer for shaders.
            </summary>
            <remarks>Constant buffers are used to send groups of scalar values to a shader.  The buffer is just a block of allocated memory that is written to by one of the various Write methods.
            <para>Typically, the user will define a value type that matches a constant buffer layout.  Then, if the value type uses nothing but blittable types, the user can then write the entire 
            value type structure to the constant buffer.  If the value type contains more complex types, such as arrays, then the user can write each item in the value type to a variable in the constant 
            buffer.  Please note that the names for the variables in the value type and the shader do -not- have to match, although, for the sake of clarity, it is a good idea that they do.</para>
            <para>In order to write to a constant buffer, the user must <see cref="M:GorgonLibrary.Graphics.GorgonBaseBuffer.Lock">lock</see> the buffer beforehand, and unlock it when done.  Failure to do so will result in an exception.</para>
            <para>Constant buffers follow very specific rules, which are explained at http://msdn.microsoft.com/en-us/library/windows/desktop/bb509632(v=vs.85).aspx </para>
            <para>When passing a value type to the constant buffer, ensure that the type has a System.Runtime.InteropServices.StructLayout attribute assigned to it, and that the layout is explicit.  Also, the size of the 
            value type must be a multiple of 16, so padding variables may be required.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonConstantBuffer.Initialize(GorgonLibrary.GorgonDataStream)">
            <summary>
            Function to initialize the buffer.
            </summary>
            <param name="value">Value used to initialize the buffer.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonConstantBuffer.LockImpl(GorgonLibrary.Graphics.BufferLockFlags)">
            <summary>
            Function used to lock the underlying buffer for reading/writing.
            </summary>
            <param name="lockFlags">Flags used when locking the buffer.</param>
            <returns>
            A data stream containing the buffer data.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonConstantBuffer.UnlockImpl">
            <summary>
            Function called to unlock the underlying data buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonConstantBuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonConstantBuffer.UpdateImpl(GorgonLibrary.GorgonDataStream,System.Int32,System.Int32)">
            <summary>
            Function to update the buffer.
            </summary>
            <param name="stream">Stream containing the data used to update the buffer.</param>
            <param name="offset">Offset, in bytes, into the buffer to start writing at.</param>
            <param name="size">The number of bytes to write.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonConstantBuffer.Update(GorgonLibrary.GorgonDataStream,System.Int32,System.Int32)">
            <summary>
            Function to update the buffer.
            </summary>
            <param name="stream">Stream containing the data used to update the buffer.</param>
            <param name="offset">Offset, in bytes, into the buffer to start writing at.</param>
            <param name="size">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
              
            <exception cref="T:System.InvalidOperationException">Thrown when the buffer usage is not set to default.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonConstantBuffer.Update(GorgonLibrary.GorgonDataStream)">
            <summary>
            Function to update the buffer.
            </summary>
            <param name="stream">Stream containing the data used to update the buffer.</param>
            <remarks>This method can only be used with buffers that have Default usage.  Other buffer usages will thrown an exception.
            <para>This method will respect the <see cref="P:GorgonLibrary.GorgonDataStream.Position">Position</see> property of the data stream.  
            This means that it will start reading from the stream at the current position.  To read from the beginning of the stream, set the position 
            to 0.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the buffer usage is not set to default.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonConstantBuffer.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonConstantBuffer"/> class.
            </summary>
            <param name="graphics">Graphics interface that owns this buffer.</param>
            <param name="size">Size of the buffer, in bytes.</param>
            <param name="allowCPUWrite">TRUE to allow the CPU write access to the buffer, FALSE to disallow.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.TextureAddressing">
            <summary>
            Texture addressing flags.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureAddressing.Wrap">
            <summary>
            Wrap and repeat the texture at the texture boundary.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureAddressing.Mirror">
            <summary>
            Wrap and mirror the texture at the texture boundary.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureAddressing.Clamp">
            <summary>
            Clamp the texture at the texture boundary.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureAddressing.Border">
            <summary>
            Assign a border color at the texture boundary.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureAddressing.MirrorOnce">
            <summary>
            Wrap and mirror the texture only once at the texture boundary.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.TextureFilter">
            <summary>
            Filtering to apply to a texture.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.MinPoint">
            <summary>
            Point minification filtering.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.MagPoint">
            <summary>
            Point magnifcation filtering.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.MinLinear">
            <summary>
            Linear minification filtering.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.MagLinear">
            <summary>
            Linear magnifcation filtering.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.MipPoint">
            <summary>
            Mip map point sampling.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.MipLinear">
            <summary>
            Mip map linear sampling.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.Comparison">
            <summary>
            Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.Linear">
            <summary>
            Linear filtering.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.Point">
            <summary>
            Point filtering.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.ComparePoint">
            <summary>
            Point filtering with comparison.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.CompareLinear">
            <summary>
            Linear filtering with comparison.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.Text1Bit">
            <summary>
            1 bit texture for text.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.Anisotropic">
            <summary>
            Anisotropic filtering.
            </summary>
            <remarks>This flag is mutually exclusive and applies to minification, magnification and mip mapping.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.TextureFilter.CompareAnisotropic">
            <summary>
            Anisotropic filtering with comparison.
            </summary>
            <remarks>This flag is mutually exclusive and applies to minification, magnification and mip mapping.</remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonTextureSamplerStates">
            <summary>
            States for the texture samplers.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.DefaultStates">
            <summary>
            Default texture sampler states.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.TextureFilter">
            <summary>
            Filtering to apply to the texture.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.HorizontalAddressing">
            <summary>
            Horizontal texture addressing (U).
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.VerticalAddressing">
            <summary>
            Vertical texture addressing (V).
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.DepthAddressing">
            <summary>
            Depth texture addressing (W).
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.MipLODBias">
            <summary>
            Offset from the calculated mipmap level.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.MaxAnisotropy">
            <summary>
            Clamping value used when texture filtering is set to anisotropic.
            </summary>
            <remarks>This value should only be from 1 to 16.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.ComparisonFunction">
            <summary>
            Function to compare sampled data against existing data.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.BorderColor">
            <summary>
            Color used when the horizontal, vertical or depth addressing are set to border.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.MinLOD">
            <summary>
            Lowest level of detail to use in the mip map range.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonTextureSamplerStates.MaxLOD">
            <summary>
            Highest level of detail to use int he mip map range.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextureSamplerStates.Equals(GorgonLibrary.Graphics.GorgonTextureSamplerStates@,GorgonLibrary.Graphics.GorgonTextureSamplerStates@)">
            <summary>
            Function to determine if two texture sampler states are equal or not.
            </summary>
            <param name="left">Left side to evaluate.</param>
            <param name="right">Right side to evaluate.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextureSamplerStates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextureSamplerStates.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextureSamplerStates.op_Equality(GorgonLibrary.Graphics.GorgonTextureSamplerStates,GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextureSamplerStates.op_Inequality(GorgonLibrary.Graphics.GorgonTextureSamplerStates,GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonTextureSamplerStates.Equals(GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Native.Win32API">
            <summary>
            Win 32 API function calls.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type.
            </summary>
            <param name="hDC">A handle to the DC.</param>
            <param name="hObj">A handle to the object to be selected.</param>
            <returns>If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteDC function deletes the specified device context (DC).
            </summary>
            <param name="hObj">A handle to the device context.</param>
            <returns>If the function succeeds, the return value is nonzero.  If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.GetCharABCWidthsW(System.IntPtr,System.UInt32,System.UInt32,GorgonLibrary.Native.ABC*)">
            <summary>
            The GetCharABCWidths function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.
            </summary>
            <param name="HDC">A handle to the device context.</param>
            <param name="uFirstChar">The first character in the group of consecutive characters from the current font.</param>
            <param name="uLastChar">The last character in the group of consecutive characters from the current font.</param>
            <param name="lpABC">A pointer to an array of ABC structures that receives the character widths, in logical units. This array must contain at least as many ABC structures as there are characters in the range specified by the uFirstChar and uLastChar parameters.</param>
            <returns>TRUE if successful, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.GetKerningPairsW(System.IntPtr,System.UInt32,GorgonLibrary.Native.KERNINGPAIR*)">
            <summary>
            The GetKerningPairs function retrieves the character-kerning pairs for the currently selected font for the specified device context.
            </summary>
            <param name="HDC">A handle to the device context.</param>
            <param name="numberOfPairs">The number of pairs in the keyPairs array. If the font has more than nNumPairs kerning pairs, the function returns an error.</param>
            <param name="kernPairs">A pointer to an array of KERNINGPAIR structures that receives the kerning pairs. The array must contain at least as many structures as specified by the nNumPairs parameter. If this parameter is NULL, the function returns the total number of kerning pairs for the font.</param>
            <returns>If the function succeeds, the return value is the number of kerning pairs returned.  If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.SetMapMode(System.IntPtr,GorgonLibrary.Native.MapModes)">
            <summary>
            The SetMapMode function sets the mapping mode of the specified device context. The mapping mode defines the unit of measure used to transform page-space units into device-space units, and also defines the orientation of the device's x and y axes.
            </summary>
            <param name="HDC">A handle to the device context.</param>
            <param name="fnMapMode">The new mapping mode.</param>
            <returns>If the function succeeds, the return value identifies the previous mapping mode.  If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.MonitorFromWindow(System.IntPtr,GorgonLibrary.Native.MonitorFlags)">
            <summary>
            Function to retrieve the nearest monitor to the window.
            </summary>
            <param name="hwnd">Handle to the window.</param>
            <param name="flags">Flags to pass in.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.DwmEnableComposition(System.Int32)">
            <summary>
            Function to enable or disable desktop composition.
            </summary>
            <param name="uCompositionAction">Composition action.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.DwmIsCompositionEnabled(System.Boolean@)">
            <summary>
            Function to determine if desktop composition is enabled or not.
            </summary>
            <param name="pfEnabled"></param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.GetMonitor(System.Windows.Forms.Control)">
            <summary>
            Function to retrieve the monitor with the largest portion of the window inside of it.
            </summary>
            <param name="window">Window to locate.</param>
            <returns>The handle to the monitor.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.SetActiveFont(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Function to set the active font.
            </summary>
            <param name="graphics">Graphics interface to use.</param>
            <param name="font">Font to set.</param>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.RestoreActiveObject">
            <summary>
            Function to restore the last known active object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.GetKerningPairs">
            <summary>
            Function to get the kerning pairs for a font.
            </summary>
            <returns>A list of kerning pair values for the active font.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.GetCharABCWidths(System.Char,System.Char)">
            <summary>
            Function to get the ABC kerning widths for the active font object.
            </summary>
            <param name="firstCharacter">First character to return.</param>
            <param name="lastCharacter">Last character to return.</param>
            <returns>A list of font ABC values.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonPixelShader">
            <summary>
            A pixel shader object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonPixelShader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonPixelShader.CreateShader(SharpDX.D3DCompiler.ShaderBytecode)">
            <summary>
            Function to compile the shader.
            </summary>
            <param name="byteCode">Byte code for the shader.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonPixelShader.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonPixelShader"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns this object.</param>
            <param name="name">The name of the pixel shader.</param>
            <param name="entryPoint">The entry point method for the shader.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonPixelShader.D3DShader">
            <summary>
            Property to return the Direct3D pixel shader.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonColor">
            <summary>
            4 component (Red, Green, Blue, and Alpha) color value.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonColor.Red">
            <summary>
            Red color channel.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonColor.Green">
            <summary>
            Green color channel.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonColor.Blue">
            <summary>
            Blue color channel.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonColor.Alpha">
            <summary>
            Alpha channel.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonColor.Transparent">
            <summary>
            A completely transparent color.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonColor.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonColor.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.FromABGR(System.Int32)">
            <summary>
            Function to convert a ABGR (GDI+) color into a GorgonColor.
            </summary>
            <param name="abgrColor">GDI+ ABGR packed pixel format.</param>
            <returns>The GorgonColor representation.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.FromBGRA(System.Int32)">
            <summary>
            Function to convert a BGRA (GDI+) color into a GorgonColor.
            </summary>
            <param name="bgraColor">GDI+ BGRA packed pixel format.</param>
            <returns>The GorgonColor representation.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.FromRGBA(System.Int32)">
            <summary>
            Function to convert a RGBA color into a GorgonColor.
            </summary>
            <param name="rgbaColor">RGBA packed pixel format.</param>
            <returns>The GorgonColor representation.</returns>
            <remarks>By default, GorgonColor considers a packed int as ARGB.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.Equals(GorgonLibrary.Graphics.GorgonColor@,GorgonLibrary.Graphics.GorgonColor@)">
            <summary>
            Function to compare two colors for equality.
            </summary>
            <param name="left">Left color to compare.</param>
            <param name="right">Right color to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.Lerp(GorgonLibrary.Graphics.GorgonColor,GorgonLibrary.Graphics.GorgonColor,System.Single)">
            <summary>
            Function to perform linear interpolation between two colors.
            </summary>
            <param name="start">Starting color.</param>
            <param name="end">Ending color.</param>
            <param name="weight">Value between 0 and 1.0f to indicate weight.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.Lerp(GorgonLibrary.Graphics.GorgonColor@,GorgonLibrary.Graphics.GorgonColor@,System.Single,GorgonLibrary.Graphics.GorgonColor@)">
            <summary>
            Function to perform linear interpolation between two colors.
            </summary>
            <param name="start">Starting color.</param>
            <param name="end">Ending color.</param>
            <param name="weight">Value between 0 and 1.0f to indicate weight.</param>
            <param name="outColor">The resulting color.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.Add(GorgonLibrary.Graphics.GorgonColor@,GorgonLibrary.Graphics.GorgonColor@,GorgonLibrary.Graphics.GorgonColor@)">
            <summary>
            Function to add two colors together.
            </summary>
            <param name="left">Left color to add.</param>
            <param name="right">Right color to add.</param>
            <param name="outColor">Total of two colors.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.Subtract(GorgonLibrary.Graphics.GorgonColor@,GorgonLibrary.Graphics.GorgonColor@,GorgonLibrary.Graphics.GorgonColor@)">
            <summary>
            Function to subtract two colors.
            </summary>
            <param name="left">Left color to subtract.</param>
            <param name="right">Right color to subtract.</param>
            <param name="outColor">Difference between the two colors.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.Multiply(GorgonLibrary.Graphics.GorgonColor@,GorgonLibrary.Graphics.GorgonColor@,GorgonLibrary.Graphics.GorgonColor@)">
            <summary>
            Function to multiply two colors.
            </summary>
            <param name="left">Left color to multiply.</param>
            <param name="right">Right color to multiply.</param>
            <param name="outColor">Product of the two colors.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.Multiply(GorgonLibrary.Graphics.GorgonColor@,System.Single,GorgonLibrary.Graphics.GorgonColor@)">
            <summary>
            Function to multiply a color by a value.
            </summary>
            <param name="color">Color to multiply.</param>
            <param name="value">Value to multiply.</param>
            <param name="outColor">Product of the color and the value.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.ToARGB">
            <summary>
            Function to return a packed color value.
            </summary>
            <returns>The packed color value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.ToRGBA">
            <summary>
            Function to return a packed color value.
            </summary>
            <returns>The packed color value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.ToBGRA">
            <summary>
            Function to return a packed color value in BGRA (GDI+) packed pixel format.
            </summary>
            <returns>The packed color value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.ToABGR">
            <summary>
            Function to return a packed color value in ABGR (GDI+) packed pixel format.
            </summary>
            <returns>The packed color value.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.ToColor">
            <summary>
            Function to convert this color into a .NET drawing color.
            </summary>
            <returns>A .NET drawing color.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.ToVector3D">
            <summary>
            Function to convert this color into a 3D vector.
            </summary>
            <returns>The 3D vector.</returns>
            <remarks>This will map the R, G and B components to X, Y and Z respectively.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.ToVector4D">
            <summary>
            Function to convert this color into a 4D vector.
            </summary>
            <returns>The 4D vector.</returns>
            <remarks>This will map the R, G, B and A components to X, Y, Z and W respectively.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Addition(GorgonLibrary.Graphics.GorgonColor,GorgonLibrary.Graphics.GorgonColor)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Subtraction(GorgonLibrary.Graphics.GorgonColor,GorgonLibrary.Graphics.GorgonColor)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Multiply(GorgonLibrary.Graphics.GorgonColor,GorgonLibrary.Graphics.GorgonColor)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Multiply(GorgonLibrary.Graphics.GorgonColor,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="color">The color to multiply.</param>
            <param name="value">The value to multiply by.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Equality(GorgonLibrary.Graphics.GorgonColor,GorgonLibrary.Graphics.GorgonColor)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Inequality(GorgonLibrary.Graphics.GorgonColor,GorgonLibrary.Graphics.GorgonColor)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Implicit(GorgonLibrary.Graphics.GorgonColor)~System.Drawing.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> to <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Implicit(System.Drawing.Color)~GorgonLibrary.Graphics.GorgonColor">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Color"/> to <see cref="T:GorgonLibrary.Graphics.GorgonColor"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Implicit(GorgonLibrary.Graphics.GorgonColor)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Implicit(System.Int32)~GorgonLibrary.Graphics.GorgonColor">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:GorgonLibrary.Graphics.GorgonColor"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Explicit(GorgonLibrary.Graphics.GorgonColor)~SlimMath.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> to <see cref="T:SlimMath.Vector3"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Explicit(SlimMath.Vector3)~GorgonLibrary.Graphics.GorgonColor">
            <summary>
            Performs an explicit conversion from <see cref="T:SlimMath.Vector3"/> to <see cref="T:GorgonLibrary.Graphics.GorgonColor"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Implicit(GorgonLibrary.Graphics.GorgonColor)~SlimMath.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> to <see cref="T:SlimMath.Vector4"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.op_Implicit(SlimMath.Vector4)~GorgonLibrary.Graphics.GorgonColor">
            <summary>
            Performs an implicit conversion from <see cref="T:SlimMath.Vector4"/> to <see cref="T:GorgonLibrary.Graphics.GorgonColor"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.#ctor(SharpDX.Color3)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> struct.
            </summary>
            <param name="color">The SharpDX color to convert.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.#ctor(SharpDX.Color4)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> struct.
            </summary>
            <param name="color">The SharpDX color to convert.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> struct.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> struct.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> struct.
            </summary>
            <param name="argb">Packed color components..</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> struct.
            </summary>
            <param name="color">The .NET color value to convert.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.#ctor(SlimMath.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> struct.
            </summary>
            <param name="color">The 3D vector to convert to a color.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.#ctor(SlimMath.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonColor"/> struct.
            </summary>
            <param name="color">The 3D vector to convert to a color.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonColor.Equals(GorgonLibrary.Graphics.GorgonColor)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonColor.SharpDXColor4">
            <summary>
            Property to return a SharpDX color4 type.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonColor.SharpDXColor3">
            <summary>
            Property to return a SharpDX color3 type.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVideoMode">
            <summary>
            A video mode information record.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonVideoMode.Width">
            <summary>
            Width of the mode in pixels.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonVideoMode.Height">
            <summary>
            Height of the mode in pixels.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonVideoMode.Format">
            <summary>
            Format of the video mode.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonVideoMode.RefreshRateNumerator">
            <summary>
            Refresh rate numerator.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonVideoMode.RefreshRateDenominator">
            <summary>
            Refresh rate denominator.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.Convert(GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Converts between a DXGI mode description and a GorgonVideoMode.
            </summary>
            <param name="mode">The mode to convert.</param>
            <returns>The DXGI mode.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.Convert(SharpDX.DXGI.ModeDescription)">
            <summary>
            Converts between a DXGI mode description and a GorgonVideoMode.
            </summary>
            <param name="mode">The mode to convert.</param>
            <returns>The DXGI mode.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.op_Equality(GorgonLibrary.Graphics.GorgonVideoMode,GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="mode1">A video mode to compare.</param>
            <param name="mode2">A video mode to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.op_Inequality(GorgonLibrary.Graphics.GorgonVideoMode,GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="mode1">A video mode to compare.</param>
            <param name="mode2">A video mode to compare.</param>
            <returns>TRUE if not equal, FALSE if equal.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.Equals(GorgonLibrary.Graphics.GorgonVideoMode@,GorgonLibrary.Graphics.GorgonVideoMode@)">
            <summary>
            Function to determine if two video modes are equal.
            </summary>
            <param name="left">Left video mode to compare.</param>
            <param name="right">Right video mode to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.SetSize(System.Drawing.Size)">
            <summary>
            Method to set the width and height of the video mode.
            </summary>
            <param name="size">Width and height of the video mode, in pixels.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.SetSize(System.Int32,System.Int32)">
            <summary>
            Method to set the width and height of the video mode.
            </summary>
            <param name="width">Width of the video mode, in pixels.</param>
            <param name="height">Height of the video mode, in pixels.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.#ctor(System.Int32,System.Int32,GorgonLibrary.Graphics.BufferFormat,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVideoMode"/> struct.
            </summary>
            <param name="width">The width of the video mode.</param>
            <param name="height">The height of the video mode.</param>
            <param name="format">The format for the video mode.</param>
            <param name="refreshNumerator">The refresh rate numerator.</param>
            <param name="refreshDenominator">The refresh rate denominator.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.#ctor(System.Int32,System.Int32,GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVideoMode"/> struct.
            </summary>
            <param name="width">The width of the video mode.</param>
            <param name="height">The height of the video mode.</param>
            <param name="format">The format for the video mode.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.#ctor(System.Int32,System.Int32,GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVideoMode"/> struct.
            </summary>
            <param name="width">The width of the new video mode.</param>
            <param name="height">The height of the new video mode.</param>
            <param name="mode">The previous mode to copy settings from.</param>
            <remarks>Use this to create a new video mode with the specified with and height.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.#ctor(System.Drawing.Size,GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVideoMode"/> struct.
            </summary>
            <param name="size">The size of the new video mode.</param>
            <param name="mode">The previous mode to copy settings from.</param>
            <remarks>Use this to create a new video mode with the specified with and height.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVideoMode.Equals(GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonVideoMode.Size">
            <summary>
            Property to return the video mode width and height as a .NET Size value.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVertexBufferBinding">
            <summary>
            A vertex buffer binding.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonVertexBufferBinding.Empty">
            <summary>
            Empty vertex buffer binding.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonVertexBufferBinding.VertexBuffer">
            <summary>
            The vertex buffer to bind.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonVertexBufferBinding.Stride">
            <summary>
            Stride of the items within the vertex buffer, in bytes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonVertexBufferBinding.Offset">
            <summary>
            Offset within the buffer to start at, in bytes.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBufferBinding.Convert">
            <summary>
            Function to convert this binding to a Direct3D vertex buffer binding.
            </summary>
            <returns>The vertex buffer binding.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBufferBinding.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBufferBinding.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBufferBinding.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBufferBinding.op_Equality(GorgonLibrary.Graphics.GorgonVertexBufferBinding,GorgonLibrary.Graphics.GorgonVertexBufferBinding)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBufferBinding.op_Inequality(GorgonLibrary.Graphics.GorgonVertexBufferBinding,GorgonLibrary.Graphics.GorgonVertexBufferBinding)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBufferBinding.#ctor(GorgonLibrary.Graphics.GorgonVertexBuffer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVertexBufferBinding"/> struct.
            </summary>
            <param name="buffer">The buffer to bind.</param>
            <param name="stride">The stride of the data in the buffer, in bytes.</param>
            <param name="offset">The offset within the buffer to start at, in bytes.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBufferBinding.#ctor(GorgonLibrary.Graphics.GorgonVertexBuffer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVertexBufferBinding"/> struct.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="stride">The stride.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexBufferBinding.Equals(GorgonLibrary.Graphics.GorgonVertexBufferBinding)">
            <summary>
            Function to determine if two instances are equal.
            </summary>
            <param name="other">The other instance.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonShaderBinding">
            <summary>
            Used to manage shader bindings and shader buffers.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonShaderBinding.BinaryShaderHeader">
            <summary>
            Header for Gorgon binary shaders.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.CleanUp">
            <summary>
            Function clean up any resources within this interface.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.Reseat(GorgonLibrary.Graphics.GorgonShader)">
            <summary>
            Function to re-seat a shader after it's been altered.
            </summary>
            <param name="shader">Shader to re-seat.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.Reseat(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to re-seat a texture after it's been altered.
            </summary>
            <param name="texture">Texture to re-seat.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.Unbind(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to unbind a texture from all shaders.
            </summary>
            <param name="texture">Texture to unbind.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.CreateEffect``1(System.String,System.Int32)">
            <summary>
            Function to create an effect object.
            </summary>
            <typeparam name="T">Type of effect to create.</typeparam>
            <param name="name">Name of the effect.</param>
            <param name="passCount">Number of passes in the effect.</param>
            <returns>The new effect object.</returns>
            <remarks>Effects are used to simplify rendering with multiple passes when using a shader.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="passCount"/> parameter is less than 0.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.CreateConstantBuffer(System.Int32,System.Boolean)">
            <summary>
            Function to create a constant buffer.
            </summary>
            <param name="size">Size of the buffer, in bytes.</param>
            <param name="allowCPUWrite">TRUE to allow the CPU to write to the buffer, FALSE to disallow.</param>
            <returns>A new constant buffer.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.CreateConstantBuffer(System.Int32,System.Boolean,GorgonLibrary.GorgonDataStream)">
            <summary>
            Function to create a constant buffer.
            </summary>
            <param name="size">Size of the buffer, in bytes.</param>
            <param name="allowCPUWrite">TRUE to allow the CPU to write to the buffer, FALSE to disallow.</param>
            <param name="stream">Stream used to initialize the buffer.</param>
            <returns>A new constant buffer.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.CreateConstantBuffer``1(``0,System.Boolean)">
            <summary>
            Function to create a constant buffer and initializes it with data.
            </summary>
            <typeparam name="T">Type of data to pass to the constant buffer.</typeparam>
            <param name="value">Value to write to the buffer</param>
            <param name="allowCPUWrite">TRUE to allow the CPU to write to the buffer, FALSE to disallow.</param>
            <returns>A new constant buffer.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.FromStream``1(System.String,System.String,System.IO.Stream,System.Int32)">
            <summary>
            Function to load a shader from a stream of data.
            </summary>
            <typeparam name="T">The shader type.  Must be inherited from <see cref="T:GorgonLibrary.Graphics.GorgonShader">GorgonShader</see>.</typeparam>
            <param name="name">Name of the shader object.</param>
            <param name="entryPoint">Entry point method to call in the shader.</param>
            <param name="stream">Stream to load the shader from.</param>
            <param name="size">Size of the shader, in bytes.</param>
            <returns>The new shader loaded from the data stream.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/>, <paramref name="name"/> or <paramref name="entryPoint"/> parameters are NULL (Nothing in VB.Net).
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when the name or entryPoint parameters are empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="size"/> parameter is less than or equal to 0.</exception>
            <exception cref="T:System.TypeInitializationException">Thrown when the type of shader is unrecognized.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when there are compile errors in the shader.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.FromStream``1(System.String,System.String,System.Boolean,System.IO.Stream,System.Int32)">
            <summary>
            Function to load a shader from a stream of data.
            </summary>
            <typeparam name="T">The shader type.  Must be inherited from <see cref="T:GorgonLibrary.Graphics.GorgonShader">GorgonShader</see>.</typeparam>
            <param name="name">Name of the shader object.</param>
            <param name="entryPoint">Entry point method to call in the shader.</param>
            <param name="isDebug">TRUE to apply debug information, FALSE to exclude it.</param>
            <param name="stream">Stream to load the shader from.</param>
            <param name="size">Size of the shader, in bytes.</param>
            <returns>The new shader loaded from the data stream.</returns>
            <remarks>The <paramref name="isDebug"/> parameter is only applicable to source code shaders.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/>, <paramref name="name"/> or <paramref name="entryPoint"/> parameters are NULL (Nothing in VB.Net).
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when the name or entryPoint parameters are empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="size"/> parameter is less than or equal to 0.</exception>
            <exception cref="T:System.TypeInitializationException">Thrown when the type of shader is unrecognized.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when there are compile errors in the shader.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.FromFile``1(System.String,System.String,System.String)">
            <summary>
            Function to load a shader from a file.
            </summary>
            <typeparam name="T">The shader type.  Must be inherited from <see cref="T:GorgonLibrary.Graphics.GorgonShader">GorgonShader</see>.</typeparam>
            <param name="name">Name of the shader object.</param>
            <param name="entryPoint">Entry point method to call in the shader.</param>
            <param name="fileName">File name and path to the shader file.</param>
            <returns>The new shader loaded from the file.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/>, <paramref name="entryPoint"/> or <paramref name="fileName"/> parameters are NULL (Nothing in VB.Net).
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when the name, entryPoint or fileName parameters are empty.</exception>
            <exception cref="T:System.TypeInitializationException">Thrown when the type of shader is unrecognized.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when there are compile errors in the shader.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.FromFile``1(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Function to load a shader from a file.
            </summary>
            <typeparam name="T">The shader type.  Must be inherited from <see cref="T:GorgonLibrary.Graphics.GorgonShader">GorgonShader</see>.</typeparam>
            <param name="name">Name of the shader object.</param>
            <param name="entryPoint">Entry point method to call in the shader.</param>
            <param name="isDebug">TRUE to apply debug information, FALSE to exclude it.</param>
            <param name="fileName">File name and path to the shader file.</param>
            <returns>The new shader loaded from the file.</returns>
            <remarks>The <paramref name="isDebug"/> parameter is only applicable to source code shaders.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/>, <paramref name="entryPoint"/> or <paramref name="fileName"/> parameters are NULL (Nothing in VB.Net).
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when the name, entryPoint or fileName parameters are empty.</exception>
            <exception cref="T:System.TypeInitializationException">Thrown when the type of shader is unrecognized.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when there are compile errors in the shader.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.CreateShader``1(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Function to create a shader.
            </summary>
            <typeparam name="T">The shader type.  Must be inherited from <see cref="T:GorgonLibrary.Graphics.GorgonShader">GorgonShader</see>.</typeparam>
            <param name="name">Name of the shader.</param>
            <param name="entryPoint">Entry point for the shader.</param>
            <param name="sourceCode">Source code for the shader.</param>
            <param name="debug">TRUE to include debug information, FALSE to exclude.</param>
            <returns>A new vertex shader.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> or <paramref name="entryPoint"/> parameters are empty strings.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the name or entryPoint parameters are NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.TypeInitializationException">Thrown when the type of shader is unrecognized.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when there are compile errors in the shader.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderBinding.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonShaderBinding"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderBinding.VertexShader">
            <summary>
            Property to return the current vertex shader states.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderBinding.PixelShader">
            <summary>
            Property to return the current vertex shader states.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderBinding.IncludeFiles">
            <summary>
            Property to return a list of include files for the shaders.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GlyphNode">
            <summary>
            A node for the glyph packing.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GlyphNode.AddNode(System.Drawing.Size)">
            <summary>
            Function to add a node as a child to this node.
            </summary>
            <param name="dimensions">Dimensions that the node will occupy.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GlyphNode.#ctor(GorgonLibrary.Graphics.GlyphNode)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GlyphNode"/> class.
            </summary>
            <param name="parentNode">The parent node.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GlyphNode.Region">
            <summary>
            Property to set or return the region that this node occupies on the image.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GlyphNode.Parent">
            <summary>
            Property to return the parent node for this node.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GlyphNode.Left">
            <summary>
            Property to set or return the node to the left of this one.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GlyphNode.Right">
            <summary>
            Property to set or return the node to the right of this one.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GlyphNode.IsLeaf">
            <summary>
            Property to return whether this node is a leaf node.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonGlyphPacker">
            <summary>
            Used to determine where glyphs should be packed onto a texture.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGlyphPacker.RemoveNode(GorgonLibrary.Graphics.GlyphNode)">
            <summary>
            Function to remove a node.
            </summary>
            <param name="node">Node to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGlyphPacker.CreateRoot(System.Drawing.Size)">
            <summary>
            Function to create the root node.
            </summary>
            <param name="imageSize">Size of the image.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonGlyphPacker.Add(System.Drawing.Size)">
            <summary>
            Function to add a node to the 
            </summary>
            <param name="dimensions">The glyph dimensions.</param>
            <returns>A rectangle for the area on the image that the glyph will be located at.  NULL if there's no room.</returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonGlyphPacker.Root">
            <summary>
            Property to return the root node.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.SwapChainUsageFlags">
            <summary>
            Usage flags for the swap chain.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.SwapChainUsageFlags.RenderTarget">
            <summary>
            Specifies that the swap chain is used to display its data.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.SwapChainUsageFlags.ShaderInput">
            <summary>
            Specifies that the swap chain is used as a shader input.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.SwapEffect">
            <summary>
            Values to determine how data is displayed to the front buffer of a swap chain.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.SwapEffect.Discard">
            <summary>
            Back buffer data will be discarded when the data is displayed.
            </summary>
            <remarks>The swap chain must have more than 1 back buffer to use this.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.SwapEffect.Sequential">
            <summary>
            Back buffer data will not be discard when the data is displayed.
            </summary>
            <remarks>Use this to display the back buffer data in order from the first buffer, to the last.  This cannot be used on swap chains that have multisampling enabled.</remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonRenderTargetSettings">
            <summary>
            Settings for defining a render target.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTargetSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonRenderTargetSettings"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.Size">
            <summary>
            Property to set or return the width and height of the target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.Format">
            <summary>
            Property to set or return the format of the back buffer for the target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.Width">
            <summary>
            Property to set or return the width of the target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.Height">
            <summary>
            Property to set or return the height of the target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.MultiSample">
            <summary>
            Property to set or return the multisampling settings for the target.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.VideoMode">
            <summary>
            Property to set or return the video mode to use.
            </summary>
            <remarks>For swap chains -ONLY-: leaving the width, height or format undefined (i.e. 0, 0, or Unknown) will tell Gorgon to find the best video mode based on the window dimensions and desktop format.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonRenderTargetSettings.DepthStencilFormat">
            <summary>
            Property to set or return the depth and/or stencil buffer format.
            </summary>
            <remarks>Setting this value to Unknown will create the target without a depth buffer.  The default value is Unknown.</remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonSwapChainSettings">
            <summary>
            Settings for defining a swap chain.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChainSettings.Convert(GorgonLibrary.Graphics.SwapEffect)">
            <summary>
            Function to convert a Gorgon swap effect into a D3D swap effect.
            </summary>
            <param name="swapEffect">Swap effect to convert.</param>
            <returns>The D3D swap effect.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChainSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonSwapChainSettings"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.NoClientResize">
            <summary>
            Property to set or return whether the client area of the window should stay in sync with the swap chain back buffer size.
            </summary>
            <remarks>
            Set this to TRUE to tell the swap chain to -not- resize the client window when the swap chain back buffer is not the same size.
            <para>This is only applied when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.Window">Window</see> property is set to a windows form object, otherwise it is ignored.</para>
            <para>The default value is FALSE.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.Window">
            <summary>
            Property to return the window that is bound with the swap chain.
            </summary>
            <remarks>Leaving this value as NULL (Nothing in VB.Net) will use the <see cref="P:GorgonLibrary.Gorgon.ApplicationForm">Gorgon default application window.</see></remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.IsWindowed">
            <summary>
            Property to set or return whether to use windowed mode or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.Flags">
            <summary>
            Property to set or return usage flags for the swap chain.
            </summary>
            <remarks>This will default to SwapChainUsageFlags.RenderTarget if not defined.
            <para>If the current video device is a SM2_a_b video device, then this can only be set to RenderTarget, any other combination will not work and will throw an exception upon creation.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.BufferCount">
            <summary>
            Property to set or return the number of back buffers to use.
            </summary>
            <remarks>This value defaults to 2 if not specified.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.SwapEffect">
            <summary>
            Property to set or return the effect used when displaying data in the swap chain to the front buffer.
            </summary>
            <remarks>This value defaults to SwapEffect.Discard if not specified.
            <para>Note that multisampling cannot be used on the swap chain if SwapEffect.Sequential is used.</para>
            </remarks>
        </member>
        <member name="T:GorgonLibrary.Collections.GorgonNamedValue`1">
            <summary>
            The named value type to be stored in the collection.
            </summary>
            <typeparam name="T">Type of data for the value.</typeparam>
        </member>
        <member name="F:GorgonLibrary.Collections.GorgonNamedValue`1.Value">
            <summary>
            Value to bind with the name.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonNamedValue`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collections.GorgonNamedValue`1"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonNamedValue`1.Name">
            <summary>
            Property to return the name of the value.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Collections.GorgonCustomValueCollection`1">
            <summary>
            A collection of named values that can only be assigned to.
            </summary>
            <typeparam name="T">Type of data for the value.</typeparam>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonCustomValueCollection`1.Add(System.String,`0)">
            <summary>
            Function to add a named value to the collection.
            </summary>
            <param name="name">Name of the value to add.</param>
            <param name="value">Value to set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the name parameter is an empty string.</exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonCustomValueCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collections.GorgonCustomValueCollection`1"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonCustomValueCollection`1.Item(System.String)">
            <summary>
            Property to return a value by its name.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonCustomValueCollection`1.Names">
            <summary>
            Property to return the list of names for the values stored in this collection.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonIndexBuffer">
            <summary>
            A buffer to hold a set of indices.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonIndexBuffer.Initialize(GorgonLibrary.GorgonDataStream)">
            <summary>
            Function used to initialize the buffer with data.
            </summary>
            <param name="data">Data to write.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to the <paramref name="data"/> parameter should ignore the initialization and create the backing buffer as normal.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonIndexBuffer.LockImpl(GorgonLibrary.Graphics.BufferLockFlags)">
            <summary>
            Function used to lock the underlying buffer for reading/writing.
            </summary>
            <param name="lockFlags">Flags used when locking the buffer.</param>
            <returns>
            A data stream containing the buffer data.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonIndexBuffer.UnlockImpl">
            <summary>
            Function called to unlock the underlying data buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonIndexBuffer.UpdateImpl(GorgonLibrary.GorgonDataStream,System.Int32,System.Int32)">
            <summary>
            Function to update the buffer.
            </summary>
            <param name="stream">Stream containing the data used to update the buffer.</param>
            <param name="offset">Offset, in bytes, into the buffer to start writing at.</param>
            <param name="size">The number of bytes to write.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonIndexBuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonIndexBuffer.Update(GorgonLibrary.GorgonDataStream)">
            <summary>
            Function to update the entire buffer.
            </summary>
            <param name="stream">Stream containing the data used to update the buffer.</param>
            <remarks>This method can only be used with buffers that have Default usage.  Other buffer usages will thrown an exception.
            <para>This method will respect the <see cref="P:GorgonLibrary.GorgonDataStream.Position">Position</see> property of the data stream.  
            This means that it will start reading from the stream at the current position.  To read from the beginning of the stream, set the position 
            to 0.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="stream"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the buffer usage is not set to default.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonIndexBuffer.#ctor(GorgonLibrary.Graphics.GorgonGraphics,GorgonLibrary.Graphics.BufferUsage,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonIndexBuffer"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="usage">The buffer usage</param>
            <param name="size">The size.</param>
            <param name="is32Bit">TRUE to use 32 bit indices, FALSE to use 16 bit.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonIndexBuffer.Is32Bit">
            <summary>
            Property to return whether the buffer uses 32 bit indices or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonBeforeStateTransitionEventArgs">
            <summary>
            Event parameters for a full screen/windowed state change.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBeforeStateTransitionEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonBeforeStateTransitionEventArgs"/> class.
            </summary>
            <param name="wasWindowed">TRUE if the swap chain was previously windowed, FALSE if it was full screen.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBeforeStateTransitionEventArgs.WasWindowed">
            <summary>
            Property to return whether the swap chain was previously windowed.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonSwapChain">
            <summary>
            A swap chain used to display graphics to a window.
            </summary>
            <remarks>The swap chain is used to display data to the <see cref="T:GorgonLibrary.Graphics.GorgonVideoOutput">video output</see>, or it can be used as a shader input.
            <para>Swap chains embedded into child controls (a panel, group box, etc...) will not be able to switch to full screen mode and will automatically revert to windowed mode.</para>
            <para>Multiple swap chains can be set to full screen on different video outputs.  When setting up for multiple video outputs in full screen, ensure that the window
            for the extra video output is located on the monitor attached to that video output.  Failure to do so will keep the mode from switching.
            </para>	
            <para>
            Note that due to a known limitation on Windows 7, it is not currently possible to switch to full screen on multiple outputs on <see cref="T:GorgonLibrary.Graphics.GorgonVideoDevice">multiple video devices</see>.  
            One possible workaround is to create a full screen borderless window on the secondary device and use that as a "fake" full screen mode.  If this workaround
            is applied, then it is suggested to disable the Desktop Windows Compositor.  To disable the compositor, see this link http://msdn.microsoft.com/en-us/library/aa969510.aspx.
            </para>	
            <para>If the window loses focus and the swap chain is in full screen, it will revert to windowed mode.  The swap chain will attempt to reacquire full screen mode when it regains focus.  
            This functionality can be disabled with the <see cref="P:GorgonLibrary.Graphics.GorgonGraphics.ResetFullscreenOnFocus">GorgonGraphics.ResetFullscreenOnFocus</see> property if it does not suit the needs of the 
            developer.  This is mandatory in full screen multi-monitor applications, if the ResetFullscreenOnFocus flag is FALSE in this scenario, then the behaviour when switching between applications will be undefined.  
            It is the responsibility of the developer to handle task switching in multi-monitor environments.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain._parentForm_Deactivate(System.Object,System.EventArgs)">
            <summary>
            Handles the Deactivate event of the _parentForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain._parentForm_Activated(System.Object,System.EventArgs)">
            <summary>
            Handles the Activated event of the _parentForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.ReleaseResources">
            <summary>
            Function to release any resources bound to the swap chain.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.CreateResources">
            <summary>
            Function to create any resources bound to the swap chain.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.ResizeBuffers">
            <summary>
            Function to resize the back buffers.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.Window_Resize(System.Object,System.EventArgs)">
            <summary>
            Handles the Resize event of the Window control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.ModeStateUpdate">
            <summary>
            Function to update the fullscreen/windowed mode state.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.CleanUp">
            <summary>
            Function to force clean up.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.ValidateSwapChainSettings(GorgonLibrary.Graphics.GorgonGraphics,GorgonLibrary.Graphics.GorgonSwapChainSettings)">
            <summary>
            Function to perform updating of the swap chain settings.
            </summary>
            <param name="graphics">Gorgon graphics interface to use.</param>
            <param name="settings">Settings to change.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.Initialize">
            <summary>
            Function to intialize the swap chain.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.UpdateSettings(GorgonLibrary.Graphics.GorgonVideoMode)">
            <summary>
            Function to update the settings for the swap chain.
            </summary>
            <param name="mode">New video mode to use.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.Window">GorgonSwapChainSettings.Window</see> property is NULL (Nothing in VB.Net), and the <see cref="P:GorgonLibrary.Gorgon.ApplicationForm">Gorgon application window</see> is NULL.
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonVideoMode.Format">GorgonSwapChainSettings.VideoMode.Format</see> property cannot be used by the video device for displaying data.</para>
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.MultSamples.Quality">GorgonSwapChainSettings.MultiSamples.Quality</see> property is higher than what the video device can support.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the video output could not be determined from the window.
            <para>-or-</para>
            <para>Thrown when the swap chain is going to full screen mode and another swap chain is already on the video output.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.UpdateSettings(System.Boolean)">
            <summary>
            Function to update the settings for the swap chain.
            </summary>
            <param name="isWindowed">TRUE to use windowed mode, FALSE to use full screen mode.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.Window">GorgonSwapChainSettings.Window</see> property is NULL (Nothing in VB.Net), and the <see cref="P:GorgonLibrary.Gorgon.ApplicationForm">Gorgon application window</see> is NULL.
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonVideoMode.Format">GorgonSwapChainSettings.VideoMode.Format</see> property cannot be used by the video device for displaying data.</para>
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.MultSamples.Quality">GorgonSwapChainSettings.MultiSamples.Quality</see> property is higher than what the video device can support.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the video output could not be determined from the window.
            <para>-or-</para>
            <para>Thrown when the swap chain is going to full screen mode and another swap chain is already on the video output.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.UpdateSettings(GorgonLibrary.Graphics.GorgonVideoMode,System.Boolean)">
            <summary>
            Function to update the settings for the swap chain.
            </summary>
            <param name="mode">New video mode to use.</param>
            <param name="isWindowed">TRUE to use windowed mode, FALSE to use full screen mode.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.Window">GorgonSwapChainSettings.Window</see> property is NULL (Nothing in VB.Net), and the <see cref="P:GorgonLibrary.Gorgon.ApplicationForm">Gorgon application window</see> is NULL.
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonVideoMode.Format">GorgonSwapChainSettings.VideoMode.Format</see> property cannot be used by the video device for displaying data.</para>
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.MultSamples.Quality">GorgonSwapChainSettings.MultiSamples.Quality</see> property is higher than what the video device can support.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the video output could not be determined from the window.
            <para>-or-</para>
            <para>Thrown when the swap chain is going to full screen mode and another swap chain is already on the video output.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.UpdateSettings(GorgonLibrary.Graphics.GorgonVideoMode,GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Function to update the settings for the render target.
            </summary>
            <param name="mode">New video mode to use.</param>
            <param name="depthStencilFormat">The format of the internal depth/stencil buffer.</param>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonVideoMode.Format">GorgonRenderTargetSettings.VideoMode.Format</see> property cannot be used by the render target.
              <para>-or-</para>
              <para>The width and height are not valid for the render target.</para>
              </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.UpdateSettings(GorgonLibrary.Graphics.GorgonVideoMode,System.Boolean,GorgonLibrary.Graphics.BufferFormat,System.Int32)">
            <summary>
            Function to update the settings for the swap chain.
            </summary>
            <param name="mode">New video mode to use.</param>
            <param name="isWindowed">TRUE to switch to windowed mode, FALSE to switch to full screen.</param>
            <param name="depthStencilFormat">The format of the internal depth/stencil buffer.</param>
            <param name="bufferCount">Number of back buffers.</param>
            <remarks>If the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.SwapEffect">SwapEffect</see> for the swap chain is set to discard, then the <paramref name="bufferCount"/> must be greater than 1.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonSwapChainSettings.Window">GorgonSwapChainSettings.Window</see> property is NULL (Nothing in VB.Net), and the <see cref="P:GorgonLibrary.Gorgon.ApplicationForm">Gorgon application window</see> is NULL.
            <para>-or-</para>
            <para>Thrown when the <see cref="P:GorgonLibrary.Graphics.GorgonVideoMode.Format">GorgonSwapChainSettings.VideoMode.Format</see> property cannot be used by the video device for displaying data.</para>
            </exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the video output could not be determined from the window.
            <para>-or-</para>
            <para>Thrown when the swap chain is going to full screen mode and another swap chain is already on the video output.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.Flip(System.Int32)">
            <summary>
            Function to flip the buffers to the front buffer.
            </summary>
            <param name="interval">Vertical blank interval.</param>
            <remarks>If <paramref name="interval"/> parameter is greater than 0, then this method will synchronize to the vertical blank count specified by interval  Passing 0 will display immediately.
            <para>If the window that the swap chain is bound with is occluded and/or the swap chain is in between a mode switch, then this method will place the swap chain into stand by mode, and will recover (i.e. turn off stand by) once the device is ready for rendering again.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the interval parameter is less than 0 or greater than 4.</exception>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the method encounters an unrecoverable error.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.Flip">
            <summary>
            Function to flip the buffers to the front buffer.
            </summary>
            <remarks>If the window that the swap chain is bound with is occluded and/or the swap chain is in between a mode switch, then this method will place the swap chain into stand by mode, and will recover (i.e. turn off stand by) once the device is ready for rendering again.
            </remarks>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the method encounters an unrecoverable error.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonSwapChain.#ctor(GorgonLibrary.Graphics.GorgonGraphics,System.String,GorgonLibrary.Graphics.GorgonSwapChainSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonSwapChain"/> class.
            </summary>
            <param name="graphics">Graphics interface that owns this swap chain.</param>
            <param name="name">The name of the swap chain.</param>
            <param name="settings">Settings for the swap chain.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> parameter is an empty string.</exception>
        </member>
        <member name="E:GorgonLibrary.Graphics.GorgonSwapChain.BeforeStateTransition">
            <summary>
            Event called before the swap chain transitions to full screen or windowed mode.
            </summary>
        </member>
        <member name="E:GorgonLibrary.Graphics.GorgonSwapChain.AfterStateTransition">
            <summary>
            Event called after the swap chain transiitons to full screen or windowed mode.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChain.GISwapChain">
            <summary>
            Property to return the DXGI swap chain interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChain.AutoResize">
            <summary>
            Property to set or return whether the swap chain resizes with its parent control.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChain.IsInStandBy">
            <summary>
            Property to return whether we're in stand by mode.
            </summary>
            <remarks>Stand by mode is entered when the <see cref="M:GorgonLibrary.Graphics.GorgonSwapChain.Flip">Flip</see> method detects that the window is occluded.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChain.VideoOutput">
            <summary>
            Property to return the video output that the swap chain is operating on.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonSwapChain.Settings">
            <summary>
            Property to return the settings for this swap chain.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.BlendOperation">
            <summary>
            Blending operations.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendOperation.Add">
            <summary>
            Add source 1 and source 2.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendOperation.Subtract">
            <summary>
            Subtract source 1 from source 2.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendOperation.ReverseSubtract">
            <summary>
            Subtract source 2 from source 1.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendOperation.Minimum">
            <summary>
            Find the minimum of source 1 and source 2.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendOperation.Maximum">
            <summary>
            Find the maximum of source 1 and source 2.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.BlendType">
            <summary>
            Blending operation types for alpha/color channels.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.Zero">
            <summary>
            The data source is the color black (0, 0, 0, 0). No pre-blend operation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.One">
            <summary>
            The data source is the color white (1, 1, 1, 1). No pre-blend operation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.SourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. No pre-blend operation
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.InverseSourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.SourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.InverseSourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.DestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. No pre-blend operation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.InverseDestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.DestinationColor">
            <summary>
            The data source is color data from a rendertarget. No pre-blend operation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.InverseDestinationColor">
            <summary>
            The data source is color data from a rendertarget. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.SourceAlphaSaturate">
            <summary>
            The data source is alpha data from a pixel shader. The pre-blend operation clamps the data to 1 or less.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.BlendFactor">
            <summary>
            The data source is the blend factor set with the blend state object. No pre-blend operation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.InverseBlendFactor">
            <summary>
            The data source is the blend factor set with blend state object. The pre-blend operation inverts the blend factor, generating 1 - blend_factor.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.SecondarySourceColor">
            <summary>
            The data sources are both color data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.InverseSecondarySourceColor">
            <summary>
            The data sources are both color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.SecondarySourceAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BlendType.InverseSecondarySourceAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.ColorWriteMaskFlags">
            <summary>
            Flags to identify a specific channel(s) to perform the blending operations on.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ColorWriteMaskFlags.Red">
            <summary>
            Use the red channel.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ColorWriteMaskFlags.Green">
            <summary>
            Use the green channel.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ColorWriteMaskFlags.Blue">
            <summary>
            Use the blue channel.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ColorWriteMaskFlags.Alpha">
            <summary>
            Use the alpha channel.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.ColorWriteMaskFlags.All">
            <summary>
            Use all channels.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonRenderTargetBlendState">
            <summary>
            Blending state for an individual render target.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.DefaultStates">
            <summary>
            Default render target blending states.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.IsBlendingEnabled">
            <summary>
            Is blending enabled for this render target or not.
            </summary>
            <remarks>The default value is FALSE.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.AlphaOperation">
            <summary>
            The alpha blending operation to perform.
            </summary>
            <remarks>This defines how the source and destination alpha channels will blend together.
            <para>The default value is Add.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.BlendingOperation">
            <summary>
            The blending operation to perform.
            </summary>
            <remarks>This defines how the source and destination color channels will blend together.
            <para>The default value is Add.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.SourceBlend">
            <summary>
            The color blending type for the source.
            </summary>
            <remarks>This defines the operation to perform on color data.
            <para>The default value is One.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.DestinationBlend">
            <summary>
            The color blending type for the destination.
            </summary>
            <remarks>This defines the operation to perform on color data.
            <para>The default value is Zero.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.SourceAlphaBlend">
            <summary>
            The alpha blending type for the source.
            </summary>
            <remarks>This defines the operation to perform on alpha data.
            <para>The default value is One.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.DestinationAlphaBlend">
            <summary>
            The alpha blending type for the destination.
            </summary>
            <remarks>This defines the operation to perform on alpha data.
            <para>The default value is Zero.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.WriteMask">
            <summary>
            The channels to use when blending.
            </summary>
            <remarks>The default value is All.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.Convert">
            <summary>
            Function to convert this render target blend state to a D3D blend description.
            </summary>
            <returns>The D3D render target blend description.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.Equals(GorgonLibrary.Graphics.GorgonRenderTargetBlendState@,GorgonLibrary.Graphics.GorgonRenderTargetBlendState@)">
            <summary>
            Function to compare two render target blend states for equality.
            </summary>
            <param name="left">Left render target state to compare.</param>
            <param name="right">Right render target state to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.op_Equality(GorgonLibrary.Graphics.GorgonRenderTargetBlendState,GorgonLibrary.Graphics.GorgonRenderTargetBlendState)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.op_Inequality(GorgonLibrary.Graphics.GorgonRenderTargetBlendState,GorgonLibrary.Graphics.GorgonRenderTargetBlendState)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonRenderTargetBlendState.Equals(GorgonLibrary.Graphics.GorgonRenderTargetBlendState)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonBlendStates">
            <summary>
            Blend states.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.DefaultStates">
            <summary>
            Default blending states.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.IsAlphaCoverageEnabled">
            <summary>
            Is alpha-to-coverage is enabled or not.
            </summary>
            <remarks>This is a multisample techique that smooths out the transparent edges of polygons with alpha blending.
            <para>Please note that this is only available for devices that have a feature level of SM_4 and above.</para>
            <para>The default value is FALSE.</para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.IsIndependentBlendEnabled">
            <summary>
            Is independent blending is enabled or not.
            </summary>
            <remarks>When this value is TRUE This allows for each render target to have its own blending settings.  When it is set to FALSE, it will only use the blending settings of the 
            first target in the array.
            <para>The default value is FALSE.</para>
            </remarks>		
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.RenderTarget0">
            <summary>
            Blend states for render target 0.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.RenderTarget1">
            <summary>
            Blend states for render target 1.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.RenderTarget2">
            <summary>
            Blend states for render target 2.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.RenderTarget3">
            <summary>
            Blend states for render target 3.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.RenderTarget4">
            <summary>
            Blend states for render target 4.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.RenderTarget5">
            <summary>
            Blend states for render target 5.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.RenderTarget6">
            <summary>
            Blend states for render target 6.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonBlendStates.RenderTarget7">
            <summary>
            Blend states for render target 7.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBlendStates.Equals(GorgonLibrary.Graphics.GorgonBlendStates@,GorgonLibrary.Graphics.GorgonBlendStates@)">
            <summary>
            Function to compare and return whether two belnd states are equal or not.
            </summary>
            <param name="left">Left blend state to compare.</param>
            <param name="right">Right blend state to compare.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBlendStates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBlendStates.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBlendStates.op_Equality(GorgonLibrary.Graphics.GorgonBlendStates,GorgonLibrary.Graphics.GorgonBlendStates)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBlendStates.op_Inequality(GorgonLibrary.Graphics.GorgonBlendStates,GorgonLibrary.Graphics.GorgonBlendStates)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBlendStates.Equals(GorgonLibrary.Graphics.GorgonBlendStates)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonBlendRenderState">
            <summary>
            Blending state.
            </summary>
            <remarks>This is used to control how polygons are blended in a scene.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBlendRenderState.ApplyState(System.IDisposable)">
            <summary>
            Function to apply the state to the appropriate state object.
            </summary>
            <param name="state">The Direct3D state object to apply.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBlendRenderState.Convert">
            <summary>
            Function to convert this blend state into a Direct3D blend state.
            </summary>
            <returns>The Direct3D blend state.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBlendRenderState.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonBlendRenderState"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns this object.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBlendRenderState.BlendFactor">
            <summary>
            Property to set or return the blending factor.
            </summary>
            <remarks>This is used when the source/destination blending type is set to use the blending factor.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBlendRenderState.BlendSampleMask">
            <summary>
            Property to set or return the blending sample mask.
            </summary>
            <remarks>A sample mask determines which samples get updated in all the active render targets. The mapping of bits in a sample mask to samples in a multisample render target is the responsibility of an individual application. A sample mask is always applied; it is independent of whether multisampling is enabled, and does not depend on whether an application uses multisample render targets.</remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonMultisampling">
            <summary>
            Values to define the number and quality of multisampling.
            </summary>
            <remarks>Setting the <see cref="P:GorgonLibrary.Graphics.GorgonMultisampling.Count">count</see> and <see cref="F:GorgonLibrary.Graphics.GorgonMultisampling.Quality">quality</see> values to 1 and 0 respectively, will disable multisampling.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.GorgonMultisampling.Quality">
            <summary>
            Image quality.
            </summary>
            <remarks>There is a performance penalty for setting this value to higher levels.
            <para>This value must be 0 or less than the value returned by <see cref="M:GorgonLibrary.Graphics.GorgonVideoDevice">GorgonVideoDevice.GetMultiSampleQuality</see>.  Failure to do so will cause the anything using the value to throw an exception.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonMultisampling.Convert(GorgonLibrary.Graphics.GorgonMultisampling)">
            <summary>
            Function to convert a Gorgon multisampling value to a D3D sample description.
            </summary>
            <param name="sampling">Sampling value to convert.</param>
            <returns>The D3D sample description.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonMultisampling.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonMultisampling"/> struct.
            </summary>
            <param name="count">The number of multisamples per pixel.</param>
            <param name="quality">Image quality.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonMultisampling.Count">
            <summary>
            Property to set or return the number of samples per pixel.
            </summary>
            <remarks>This value is limited to a range of 1 to 32.</remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonDepthStencilSettings">
            <summary>
            Settings for a depth/stencil buffer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonDepthStencilSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonDepthStencilSettings"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencilSettings.Format">
            <summary>
            Property to set or return the format for the depth/stencil buffer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencilSettings.MultiSample">
            <summary>
            Property to set or return the multi sampling settings for the depth/stencil buffer.
            </summary>
            <remarks>Ensure that these settings match the render target that the depth buffer will be paired with.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencilSettings.Width">
            <summary>
            Property to set or return the width of the depth/stencil buffer.
            </summary>
            <remarks>Ensure that this setting will match the render target that the depth buffer will be paired with.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencilSettings.Height">
            <summary>
            Property to set or return the height of the depth/stencil buffer.
            </summary>
            <remarks>Ensure that this setting will match the render target that the depth buffer will be paired with.</remarks>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonDepthStencilSettings.TextureFormat">
            <summary>
            Property to set or return the format for the texture used by the depth/stencil buffer.
            </summary>
            <remarks>This is typically used for accessing the depth buffer through a shader.  The shader will require a typeless format, of which there is none for a depth buffer.  If this
            value is set to Unknown, then this property will be ignored when creating/updating the depth/stencil buffer and will make the buffer inaccessible to a shader.
            <para>The default value is Unknown.</para>
            <para>Note that this only applies to the SM_4_1 and higher feature levels, other feature levels will ignore this setting.</para>
            </remarks>
        </member>
        <member name="T:GorgonLibrary.Graphics.IObjectTracker">
            <summary>
            An interface used to define objects that do their own clean up of child objects.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.IObjectTracker.RemoveTrackedObject(System.IDisposable)">
            <summary>
            Function to remove a tracked object from the list.
            </summary>
            <param name="trackedObject">The tracked object to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.IObjectTracker.CleanUpTrackedObjects">
            <summary>
            Function to clean up any objects being tracked.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.IObjectTracker.TrackedObjects">
            <summary>
            Property to return an enumerable list of tracked objects.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonShaderState`1">
            <summary>
            Shader state interface.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.SetCurrent">
            <summary>
            Function to set the current shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.SetResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>
            Function to set resources for the shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count">Number of resources to update.</param>
            <param name="resources">Resources to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>
            Function to set the texture samplers for a shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count">Number of samplers to update.</param>
            <param name="samplers">Samplers to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.SetResources(System.Int32,System.Int32)">
            <summary>
            Function to set resources for the shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count">Number of resources to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>
            Function to set constant buffers for the shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count">Number of constant buffers to update.</param>
            <param name="buffers">Constant buffers to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.Dispose">
            <summary>
            Function to clean up.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonShaderState`1"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns this object.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.Graphics">
            <summary>
            Property to return the graphics interface that owns this object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.Current">
            <summary>
            Property to set or return the current shader.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.ConstantBuffers">
            <summary>
            Property to return the list of constant buffers for the shaders.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplers">
            <summary>
            Property to return the sampler states.
            </summary>
            <remarks>On a SM2_a_b device, and while using a Vertex Shader, setting a sampler will raise an exception.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the current video device is a SM2_a_b device.</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.Textures">
            <summary>
            Property to return the list of textures for the shaders.
            </summary>
            <remarks>On a SM2_a_b device, and while using a Vertex Shader, setting a texture will raise an exception.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the current video device is a SM2_a_b device.</exception>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState">
            <summary>
            Sampler states.
            </summary>
            <remarks>This is used to control how textures are displayed.</remarks>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.GetState(GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Function to retrieve the cached sampler state or return a new one.
            </summary>
            <param name="state">State to look up or create.</param>
            <returns>The cached/new state.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.Convert(GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Function to convert this blend state into a Direct3D blend state.
            </summary>
            <param name="states">States being converted.</param>
            <returns>The Direct3D blend state.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.SetRange(System.Int32,System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonTextureSamplerStates})">
            <summary>
            Function to set a range of states at once.
            </summary>
            <param name="slot">Starting slot for the states.</param>
            <param name="states">States to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="slot"/> is less than 0, or greater than the available number of state slots.
            <para>-or-</para>
            <para>Thrown when the <paramref name="states"/> count + the slot is greater than or equal to the number of available state slots.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.#ctor(GorgonLibrary.Graphics.GorgonShaderState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonBlendRenderState"/> class.
            </summary>
            <param name="shaderState">Shader that owns the state.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.IndexOf(GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonTextureSamplerStates}#Insert(System.Int32,GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonTextureSamplerStates}#RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonTextureSamplerStates}#Add(GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonTextureSamplerStates}#Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.Contains(GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Function to return whether the specified sampler state is bound.
            </summary>
            <param name="item">Sampler state to look up.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.CopyTo(GorgonLibrary.Graphics.GorgonTextureSamplerStates[],System.Int32)">
            <summary>
            Function to copy the list of bound sampler states to an array.
            </summary>
            <param name="array">The array to copy into.</param>
            <param name="arrayIndex">Index of the array to start writing at.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonTextureSamplerStates}#Remove(GorgonLibrary.Graphics.GorgonTextureSamplerStates)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.GetEnumerator">
            <summary>
            Function to return an enumerator for the sampler states.
            </summary>
            <returns>The enumerator for the sampler states.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>The element at the specified index.</returns>
              
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
              
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.Count">
            <summary>
            Property to return the number of sampler slots.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.TextureSamplerState.IsReadOnly">
            <summary>
            Property to return whether this list is read-only or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers">
            <summary>
            A list of constant buffers.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.Unbind(GorgonLibrary.Graphics.GorgonConstantBuffer)">
            <summary>
            Function to unbind a constant buffer.
            </summary>
            <param name="buffer">Buffer to unbind.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.SetRange(System.Int32,System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonConstantBuffer})">
            <summary>
            Function to set a range of constant buffers at once.
            </summary>
            <param name="slot">Starting slot for the buffer.</param>
            <param name="buffers">Buffers to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="slot"/> is less than 0, or greater than the available number of constant buffer slots.
            <para>-or-</para>
            <para>Thrown when the <paramref name="buffers"/> count + the slot is greater than or equal to the number of available constant buffer slots.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.#ctor(GorgonLibrary.Graphics.GorgonShaderState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers"/> class.
            </summary>
            <param name="shader">Shader stage state.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.IndexOf(GorgonLibrary.Graphics.GorgonConstantBuffer)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonConstantBuffer}#Insert(System.Int32,GorgonLibrary.Graphics.GorgonConstantBuffer)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonConstantBuffer}#RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonConstantBuffer}#Add(GorgonLibrary.Graphics.GorgonConstantBuffer)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonConstantBuffer}#Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.Contains(GorgonLibrary.Graphics.GorgonConstantBuffer)">
            <summary>
            Function to return whether the specified constant buffer is bound or not.
            </summary>
            <param name="item">Constant buffer to check.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.CopyTo(GorgonLibrary.Graphics.GorgonConstantBuffer[],System.Int32)">
            <summary>
            Function to copy the contents of this list to an array.
            </summary>
            <param name="array">Array to copy into.</param>
            <param name="arrayIndex">Index in the array to start writing at.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonConstantBuffer}#Remove(GorgonLibrary.Graphics.GorgonConstantBuffer)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.GetEnumerator">
            <summary>
            Function to return an enumerator for the list.
            </summary>
            <returns>The enumerator for the list.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.Count">
            <summary>
            Property to return the number of buffers.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.Item(System.Int32)">
            <summary>
            Property to set or return a constant buffer at the specified index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderConstantBuffers.IsReadOnly">
            <summary>
            Property to return whether this list is read only or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures">
            <summary>
            A list of shader textures.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.Unbind(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to unbind a texture.
            </summary>
            <param name="texture">Texture to bind.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.ReSeat(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to re-seat a texture after it's been altered.
            </summary>
            <param name="texture">Texture to re-seat.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.IndexOf(System.String)">
            <summary>
            Function to return the index of a texture in the list by name.
            </summary>
            <param name="name">Name of the texture to look up.</param>
            <returns>The index of the texture if found, -1 if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.Contains(System.String)">
            <summary>
            Function to return whether the list contains a texture by it's name.
            </summary>
            <param name="name">Name of the texture to look up.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.SetRange(System.Int32,System.Collections.Generic.IEnumerable{GorgonLibrary.Graphics.GorgonTexture})">
            <summary>
            Function to set a range of textures at one time.
            </summary>
            <param name="slot">Texture slot to start at.</param>
            <param name="textures">List of textures to set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="textures"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="slot"/> is less than 0, or greater than the available number of texture slots.
            <para>-or-</para>
            <para>Thrown when the buffers count + the slot is greater than or equal to the number of available texture slots.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.#ctor(GorgonLibrary.Graphics.GorgonShaderState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures"/> class.
            </summary>
            <param name="shader">Shader state that owns this interface.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.IndexOf(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to return the index of the specified texture.
            </summary>
            <param name="item">The texture to find the index of.</param>
            <returns>The index if found, or -1 if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonTexture}#Insert(System.Int32,GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.System#Collections#Generic#IList{GorgonLibrary#Graphics#GorgonTexture}#RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonTexture}#Add(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonTexture}#Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.Contains(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Function to return whether the list contains the specified texture.
            </summary>
            <param name="item">Texture to find.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.CopyTo(GorgonLibrary.Graphics.GorgonTexture[],System.Int32)">
            <summary>
            Function to copy the textures to an array.
            </summary>
            <param name="array">Array to copy into.</param>
            <param name="arrayIndex">Index in the array to start writing at.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.System#Collections#Generic#ICollection{GorgonLibrary#Graphics#GorgonTexture}#Remove(GorgonLibrary.Graphics.GorgonTexture)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.GetEnumerator">
            <summary>
            Function to return an enumerator for the list.
            </summary>
            <returns>The enumerator for the list.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.Item(System.Int32)">
            <summary>
            Property to set or return the bound texture.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.Count">
            <summary>
            Property to return the number of texture slots.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonShaderState`1.ShaderTextures.IsReadOnly">
            <summary>
            Property to return whether the list is read-only or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonPixelShaderState">
            <summary>
            Pixel shader states.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonPixelShaderState.SetCurrent">
            <summary>
            Property to set or return the current shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonPixelShaderState.SetResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>
            Function to set resources for the shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count"></param>
            <param name="resources">Resources to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonPixelShaderState.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>
            Function to set the texture samplers for a shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count"></param>
            <param name="samplers">Samplers to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonPixelShaderState.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>
            Function to set constant buffers for the shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count"></param>
            <param name="buffers">Constant buffers to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonPixelShaderState.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonPixelShaderState"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns this object.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonVertexShaderState">
            <summary>
            Vertex shader states.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexShaderState.SetCurrent">
            <summary>
            Property to set or return the current shader.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexShaderState.SetResources(System.Int32,System.Int32,SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>
            Function to set resources for the shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count"></param>
            <param name="resources">Resources to update.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the current video device is a SM2_a_b device.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexShaderState.SetSamplers(System.Int32,System.Int32,SharpDX.Direct3D11.SamplerState[])">
            <summary>
            Function to set the texture samplers for a shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count"></param>
            <param name="samplers">Samplers to update.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the current video device is a SM2_a_b device.</exception>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexShaderState.SetConstantBuffers(System.Int32,System.Int32,SharpDX.Direct3D11.Buffer[])">
            <summary>
            Function to set constant buffers for the shader.
            </summary>
            <param name="slot">Slot to start at.</param>
            <param name="count"></param>
            <param name="buffers">Constant buffers to update.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonVertexShaderState.#ctor(GorgonLibrary.Graphics.GorgonGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonVertexShaderState"/> class.
            </summary>
            <param name="graphics">The graphics interface that owns this object.</param>
        </member>
        <member name="T:GorgonLibrary.Graphics.BufferFormat">
            <summary>
            Various buffer formats supported for textures, rendertargets, swap chains and display modes.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.Unknown">
            <summary>
            Unknown format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32B32A32">
            <summary>
            The R32G32B32A32 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32B32A32_Float">
            <summary>
            The R32G32B32A32_Float format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32B32A32_UInt">
            <summary>
            The R32G32B32A32_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32B32A32_Int">
            <summary>
            The R32G32B32A32_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32B32">
            <summary>
            The R32G32B32 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32B32_Float">
            <summary>
            The R32G32B32_Float format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32B32_UInt">
            <summary>
            The R32G32B32_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32B32_Int">
            <summary>
            The R32G32B32_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16B16A16">
            <summary>
            The R16G16B16A16 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16B16A16_Float">
            <summary>
            The R16G16B16A16_Float format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16B16A16_UIntNormal">
            <summary>
            The R16G16B16A16_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16B16A16_UInt">
            <summary>
            The R16G16B16A16_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16B16A16_IntNormal">
            <summary>
            The R16G16B16A16_IntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16B16A16_Int">
            <summary>
            The R16G16B16A16_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32">
            <summary>
            The R32G32 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32_Float">
            <summary>
            The R32G32_Float format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32_UInt">
            <summary>
            The R32G32_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G32_Int">
            <summary>
            The R32G32_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32G8X24">
            <summary>
            The R32G8X24 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.D32_Float_S8X24_UInt">
            <summary>
            The D32_Float_S8X24_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32_Float_X8X24">
            <summary>
            The R32_Float_X8X24 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.X32_G8X24_UInt">
            <summary>
            The X32_G8X24_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R10G10B10A2">
            <summary>
            The R10G10B10A2 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R10G10B10A2_UIntNormal">
            <summary>
            The R10G10B10A2_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R10G10B10A2_UInt">
            <summary>
            The R10G10B10A2_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R11G11B10_Float">
            <summary>
            The R11G11B10_Float format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8B8A8">
            <summary>
            The R8G8B8A8 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8B8A8_UIntNormal">
            <summary>
            The R8G8B8A8_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8B8A8_UIntNormal_sRGB">
            <summary>
            The R8G8B8A8_UIntNormal_sRGB format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8B8A8_UInt">
            <summary>
            The R8G8B8A8_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8B8A8_IntNormal">
            <summary>
            The R8G8B8A8_IntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8B8A8_Int">
            <summary>
            The R8G8B8A8_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16">
            <summary>
            The R16G16 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16_Float">
            <summary>
            The R16G16_Float format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16_UIntNormal">
            <summary>
            The R16G16_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16_UInt">
            <summary>
            The R16G16_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16_IntNormal">
            <summary>
            The R16G16_IntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16G16_Int">
            <summary>
            The R16G16_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32">
            <summary>
            The R32 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.D32_Float">
            <summary>
            The D32_Float format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32_Float">
            <summary>
            The R32_Float format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32_UInt">
            <summary>
            The R32_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R32_Int">
            <summary>
            The R32_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R24G8">
            <summary>
            The R24G8 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.D24_UIntNormal_S8_UInt">
            <summary>
            The D24_UIntNormal_S8_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R24_UIntNormal_X8">
            <summary>
            The R24_UIntNormal_X8 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.X24_G8_UInt">
            <summary>
            The X24_G8_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8">
            <summary>
            The R8G8 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8_UIntNormal">
            <summary>
            The R8G8_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8_UInt">
            <summary>
            The R8G8_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8_IntNormal">
            <summary>
            The R8G8_IntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8_Int">
            <summary>
            The R8G8_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16">
            <summary>
            The R16 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16_Float">
            <summary>
            The R16_Float format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.D16_UIntNormal">
            <summary>
            The D16_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16_UIntNormal">
            <summary>
            The R16_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16_UInt">
            <summary>
            The R16_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16_IntNormal">
            <summary>
            The R16_IntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R16_Int">
            <summary>
            The R16_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8">
            <summary>
            The R8 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8_UIntNormal">
            <summary>
            The R8_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8_UInt">
            <summary>
            The R8_UInt format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8_IntNormal">
            <summary>
            The R8_IntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8_Int">
            <summary>
            The R8_Int format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.A8_UIntNormal">
            <summary>
            The A8_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R1_UIntNormal">
            <summary>
            The R1_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R9G9B9E5_SharedExp">
            <summary>
            The R9G9B9E5_SharedExp format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R8G8_B8G8_UIntNormal">
            <summary>
            The R8G8_B8G8_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.G8R8_G8B8_UIntNormal">
            <summary>
            The G8R8_G8B8_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC1">
            <summary>
            The BC1 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC1_UIntNormal">
            <summary>
            The BC1_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC1_UIntNormal_sRGB">
            <summary>
            The BC1_UIntNormal_sRGB format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC2">
            <summary>
            The BC2 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC2_UIntNormal">
            <summary>
            The BC2_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC2_UIntNormal_sRGB">
            <summary>
            The BC2_UIntNormal_sRGB format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC3">
            <summary>
            The BC3 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC3_UIntNormal">
            <summary>
            The BC3_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC3_UIntNormal_sRGB">
            <summary>
            The BC3_UIntNormal_sRGB format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC4">
            <summary>
            The BC4 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC4_UIntNormal">
            <summary>
            The BC4_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC4_IntNormal">
            <summary>
            The BC4_IntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC5">
            <summary>
            The BC5 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC5_UIntNormal">
            <summary>
            The BC5_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC5_IntNormal">
            <summary>
            The BC5_IntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.B5G6R5_UIntNormal">
            <summary>
            The B5G6R5_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.B5G5R5A1_UIntNormal">
            <summary>
            The B5G5R5A1_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.B8G8R8A8_UIntNormal">
            <summary>
            The B8G8R8A8_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.B8G8R8X8_UIntNormal">
            <summary>
            The B8G8R8X8_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.R10G10B10_XR_BIAS_A2_UIntNormal">
            <summary>
            The R10G10B10_XR_BIAS_A2_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.B8G8R8A8">
            <summary>
            The B8G8R8A8 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.B8G8R8A8_UIntNormal_sRGB">
            <summary>
            The B8G8R8A8_UIntNormal_sRGB format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.B8G8R8X8">
            <summary>
            The B8G8R8X8 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.B8G8R8X8_UIntNormal_sRGB">
            <summary>
            The B8G8R8X8_UIntNormal_sRGB format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC6H">
            <summary>
            The BC6H format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC6H_UF16">
            <summary>
            The BC6H_UF16 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC6H_SF16">
            <summary>
            The BC6H_SF16 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC7">
            <summary>
            The BC7 format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC7_UIntNormal">
            <summary>
            The BC7_UIntNormal format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.BufferFormat.BC7_UIntNormal_sRGB">
            <summary>
            The BC7_UIntNormal_sRGB format.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.FormatTypes">
            <summary>
            Types used in a format.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FormatTypes.Untyped">
            <summary>
            Typeless.
            </summary>
            <remarks>This flag is mutually exclusive.</remarks>
        </member>
        <member name="F:GorgonLibrary.Graphics.FormatTypes.Integer">
            <summary>
            Type is an integer.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FormatTypes.Unsigned">
            <summary>
            Type is unsigned.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FormatTypes.Normalized">
            <summary>
            Type is normalized.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FormatTypes.sRGB">
            <summary>
            Type uses sRGB data.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Graphics.FormatTypes.FloatingPoint">
            <summary>
            Type is a floating point value.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonBufferFormatInfo">
            <summary>
            Retrieves information about the format.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GetFormatInfo">
            <summary>
            Function to build the format information.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GetInfo(GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Function to retrieve information about a format.
            </summary>
            <param name="format">Format to retrieve information about.</param>
            <returns>The information for the format.  If the format is unknown, then the data for the Unknown GorgonBufferFormat will be returned.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Graphics.GorgonBufferFormatInfo"/> class.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData">
            <summary>
            Information about a specific GorgonBufferFormat.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.GetLayout(System.Tuple{System.String,GorgonLibrary.Graphics.FormatTypes})">
            <summary>
            Function to parse the layout information.
            </summary>
            <param name="layoutInfo">Layout information.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ParseFormat(GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Function to parse the format.
            </summary>
            <param name="format">Format to parse.</param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.#ctor(GorgonLibrary.Graphics.BufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData"/> class.
            </summary>
            <param name="format">The format to evaluate.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.Group">
            <summary>
            Property to return the group for the format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.Format">
            <summary>
            Property to return the format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.IsTypeless">
            <summary>
            Property to return whether the format is typeless or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.Components">
            <summary>
            Property to return information about the components in the format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.BitDepth">
            <summary>
            Property to return the bit depth for the format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.SizeInBytes">
            <summary>
            Property to return the size of the format, in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.HasDepth">
            <summary>
            Property to return whether the format has a depth component.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.HasStencil">
            <summary>
            Property to return whether the format has a stencil component.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.HasAlpha">
            <summary>
            Property to return whether the format has an alpha component.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.IsPacked">
            <summary>
            Property to return whether the pixel format is packed or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.IsCompressed">
            <summary>
            Property to return whether the pixel format is compressed or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ComponentInformation">
            <summary>
            Information about a specific component.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ComponentInformation.#ctor(System.String,GorgonLibrary.Graphics.FormatTypes,System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ComponentInformation"/> struct.
            </summary>
            <param name="name">The name of the component.</param>
            <param name="type">The type for the component.</param>
            <param name="bitDepth">The bit depth of the component.</param>
            <param name="shift">The bit shift amount for the component.</param>
            <param name="mask">The masking value for the component.</param>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ComponentInformation.Shift">
            <summary>
            Property to return the bit shift value for the component within the packed format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ComponentInformation.Mask">
            <summary>
            Property to return the masking value for the component.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ComponentInformation.Type">
            <summary>
            Property to return the type of the component.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ComponentInformation.BitDepth">
            <summary>
            Property to return the bit depth for the format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ComponentInformation.Name">
            <summary>
            Property to return the name of the component.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents">
            <summary>
            Layout for the format.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.Add(GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.ComponentInformation)">
            <summary>
            Function to add information for a component.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.GetBitDepth">
            <summary>
            Function to retrieve the total bit depth for the components.
            </summary>
            <returns>The total bit depth for the components.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.AddNames">
            <summary>
            Function to add the names of the components.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.HasComponent(System.String)">
            <summary>
            Function to return whether the format contains a particular component.
            </summary>
            <param name="name">Name of the component.</param>
            <returns>TRUE if the component exists in this format, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents"/> class.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.Count">
            <summary>
            Property to return the number of components in the format.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.Item(System.String)">
            <summary>
            Property to return the component information.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:GorgonLibrary.Graphics.GorgonBufferFormatInfo.GorgonFormatData.FormatComponents.ComponentNames">
            <summary>
            Property to return a list of names in the component list.
            </summary>
        </member>
    </members>
</doc>
