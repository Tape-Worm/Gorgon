<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gorgon.Common</name>
    </assembly>
    <members>
        <member name="T:GorgonLibrary.Native.HDITEM">
            <summary>
            Header item structure.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.mask">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.cxy">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.pszText">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.hbm">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.cchTextMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.fmt">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.lParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.iImage">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.iOrder">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.pvFilter">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HDITEM.state">
            <summary>
            
            </summary>
        </member>
        <member name="T:GorgonLibrary.Native.MemoryStatusEx">
            <summary>
            Used with GlobalMemoryStatusEx.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.MemoryStatusEx.dwLength">
            <summary/>
        </member>
        <member name="F:GorgonLibrary.Native.MemoryStatusEx.dwMemoryLoad">
            <summary/>
        </member>
        <member name="F:GorgonLibrary.Native.MemoryStatusEx.ullTotalPhysical">
            <summary/>
        </member>
        <member name="F:GorgonLibrary.Native.MemoryStatusEx.ullAvailablePhysical">
            <summary/>
        </member>
        <member name="F:GorgonLibrary.Native.MemoryStatusEx.ullTotalPageFile">
            <summary/>
        </member>
        <member name="F:GorgonLibrary.Native.MemoryStatusEx.ullAvailablePageFile">
            <summary/>
        </member>
        <member name="F:GorgonLibrary.Native.MemoryStatusEx.ullTotalVirtual">
            <summary/>
        </member>
        <member name="F:GorgonLibrary.Native.MemoryStatusEx.ullAvailableVirtual">
            <summary/>
        </member>
        <member name="F:GorgonLibrary.Native.MemoryStatusEx.ullAvailableExtendedVirtual">
            <summary/>
        </member>
        <member name="T:GorgonLibrary.Native.MSG">
            <summary>
            Value type representing a Window message.
            </summary>
            <remarks>
            See the MSDN documentation for more detail.
            <para>
            Used to pass various messages back and forth between the OS and the app.
            </para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Native.MSG.hwnd">
            <summary>Window handle.</summary>
        </member>
        <member name="F:GorgonLibrary.Native.MSG.Message">
            <summary>Message to process.</summary>
        </member>
        <member name="F:GorgonLibrary.Native.MSG.wParam">
            <summary>Window message parameter 1.</summary>
        </member>
        <member name="F:GorgonLibrary.Native.MSG.lParam">
            <summary>Window message parameter 2.</summary>
        </member>
        <member name="F:GorgonLibrary.Native.MSG.time">
            <summary>Time message was sent?</summary>
        </member>
        <member name="F:GorgonLibrary.Native.MSG.pt">
            <summary>Mouse pointer position.</summary>
        </member>
        <member name="T:GorgonLibrary.Native.Win32API">
            <summary>
            Static class for Native Win32 methods and corresponding structures.
            </summary>
            <remarks>
            This is a grouping of any Windows API calls used by Gorgon.
            <para>
            This list is by no means complete.  The Win32 API is just massive and would probably take a lifetime to map.
            </para>
            	<para>
            These calls are considered "unsafe" and thus should be used with care.  If you don't know how to use a function, or why you want it, you probably don't need to use them.
            </para>
            	<para>
            Please note that a lot of the enumerators/structures have slightly different names than their Win32 counterparts.  This was done for the sake of readability.  This does NOT affect their results or their effect on the results of their related functionality.
            </para>
            </remarks>	
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.GetForegroundWindow">
            <summary>
            Function to retrieve the foreground window.
            </summary>
            <returns>The handle to the window in the foreground.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Function to send a message to a window.
            </summary>
            <param name="hWnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,GorgonLibrary.Native.HDITEM@)">
            <summary>
            Function to send a message to a window.
            </summary>
            <param name="hWnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr@)">
            <summary>
            Function to send a message to a header.
            </summary>
            <param name="hWnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
            Function to retrieve the process ID of a window.
            </summary>
            <param name="hWnd"></param>
            <param name="lpdwProcessId"></param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.GlobalMemoryStatusEx(GorgonLibrary.Native.MemoryStatusEx@)">
            <summary/>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.PeekMessage(GorgonLibrary.Native.MSG@,System.IntPtr,System.UInt32,System.UInt32,GorgonLibrary.Native.PeekMessageFlags)">
            <summary>
            Function to process window messages.
            </summary>
            <remarks>See the MSDN documentation for a detailed description.</remarks>
            <param name="msg">Message block to retrieve.</param>
            <param name="hwnd">Window to retrieve messages from, FALSE for all.</param>
            <param name="wFilterMin">Minimum message.</param>
            <param name="wFilterMax">Maximum message.</param>
            <param name="flags">Flags for the function.</param>
            <returns>TRUE if messages are ready for processing, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.TranslateAccelerator(System.IntPtr,System.IntPtr,GorgonLibrary.Native.MSG@)">
            <summary>
            Function to translate keyboard accelerator keys.
            </summary>
            <param name="hWnd">Window handle</param>
            <param name="hAccTable">Accelerator table.</param>
            <param name="lpMsg">Window message.</param>
            <returns>Non 0 for success, 0 for failure.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.TranslateMessage(GorgonLibrary.Native.MSG@)">
            <summary>
            Function to translate windows messages.
            </summary>
            <param name="msg">Message to translate.</param>
            <returns>TRUE if successful, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.PostQuitMessage(System.Int32)">
            <summary>
            Function to post a quit message to the message queue.
            </summary>
            <param name="nExitCode">Exit code.</param>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.DispatchMessage(GorgonLibrary.Native.MSG@)">
            <summary>
            Function to dispatch windows messages.
            </summary>
            <param name="msg">Message to dispatch.</param>
            <returns>TRUE if successful, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            Function to return the frequency of the high precision timer.
            </summary>
            <remarks>See the MSDN documentation for a detailed description.</remarks>
            <param name="PerformanceFrequency">Frequency of timer.</param>
            <returns>TRUE if system supports high precision timing, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.QueryPerformanceCounter(System.Int64@)">
            <summary>
            Function to return the time from a high resolution timer.
            </summary>
            <remarks>See the MSDN documentation for a detailed description.</remarks>
            <param name="PerformanceCount">Time from the timer.</param>
            <returns>TRUE if system supports high precision timing, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.timeGetTime">
            <summary>
            Function to return time from a medium precision timer.
            </summary>
            <remarks>
            See the MSDN documentation for a detailed description.
            <para>
            This timer is of lower precision than the high precision timers, do not use unless
            your system does not support high resolution timers.
            </para>
            </remarks>
            <returns>Time in milliseconds.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.timeBeginPeriod(System.UInt32)">
            <summary>
            Function to start a timing session.
            </summary>
            <param name="uPeriod">Minimum resolution in milliseconds.</param>
            <returns>0 if successful, non 0 if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.timeEndPeriod(System.UInt32)">
            <summary>
            Function to end a timing session.
            </summary>
            <param name="uPeriod">Minimum resolution in milliseconds.</param>
            <returns>0 if successful, non 0 if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Native.Win32API.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Native.Win32API"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Native.Win32API.TotalPhysicalRAM">
            <summary>
            Property to return the number of bytes of installed physical RAM.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Native.Win32API.AvailablePhysicalRAM">
            <summary>
            Property to return the number of bytes of free available RAM.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Math.GorgonSpline">
            <summary>
            Used to return spline interpolated values across a set of points.
            </summary>
            <remarks>When adding or removing <see cref="P:GorgonLibrary.Math.GorgonSpline.Points">points</see> from the spline, remember to call <see cref="M:GorgonLibrary.Math.GorgonSpline.UpdateSpline">UpdateSpline</see> to recalculate the tangents.</remarks>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonSpline.GetInterpolatedValue(System.Int32,System.Single)">
            <summary>
            Function to return an interpolated point from the spline.
            </summary>
            <param name="startPointIndex">Index in the point list to start from.</param>
            <param name="delta">Delta value to interpolate.</param>
            <returns>The interpolated value at <paramref name="delta"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="startPointIndex"/> parameter is less than 0, or greater than/equal to the number of points in the spline minus 1.</exception>
            <remarks>The delta parameter is a unit value where 0 is the first point in the spline (referenced by startPointIndex) and 1 is the next point from the startPointIndex in the spline.</remarks>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonSpline.GetInterpolatedValue(System.Single)">
            <summary>
            Function to return an interpolated point from the spline.
            </summary>
            <param name="delta">Delta value to interpolate.</param>
            <returns>The interpolated value at <paramref name="delta"/>.</returns>
            <remarks>The delta parameter is a unit value where 0 is the first point in the spline and 1 is the 2nd last point in the spline.</remarks>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonSpline.UpdateTangents">
            <summary>
            Function to calculate the tangent vectors using Catmull-Rom interpolation.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonSpline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Math.GorgonSpline"/> object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Math.GorgonSpline.Points">
            <summary>
            Property to return the list of points for the spline.
            </summary>
            <remarks>When adding or removing <see cref="P:GorgonLibrary.Math.GorgonSpline.Points">points</see> from the spline, remember to call <see cref="M:GorgonLibrary.Math.GorgonSpline.UpdateSpline">UpdateSpline</see> to recalculate the tangents.</remarks>
        </member>
        <member name="T:GorgonLibrary.GorgonNamedObject">
            <summary>
            Implementation of the named object interface. 
            </summary>
        </member>
        <member name="T:GorgonLibrary.INamedObject">
            <summary>
            Applied to objects that require names.
            </summary>
        </member>
        <member name="P:GorgonLibrary.INamedObject.Name">
            <summary>
            Property to return the name of this object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonNamedObject.GetHashCode">
            <summary>
            Serves as a hash method for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNamedObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNamedObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonNamedObject"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> parameter is an empty string.</exception>
        </member>
        <member name="P:GorgonLibrary.GorgonNamedObject.Name">
            <summary>
            Property to return the name of this object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Diagnostics.GorgonProcess">
            <summary>
            Process management interface.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonProcess.GetForegroundWindow">
            <summary>
            Function to return the foreground window handle.
            </summary>
            <returns>The handle to the foreground window.</returns>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonProcess.GetActiveProcess">
            <summary>
            Function to retrieve the process that is associated with the current foreground window.
            </summary>
            <returns>The process for the foreground window, or NULL if not found.</returns>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonProcess.GetProcessByWindow(System.IntPtr)">
            <summary>
            Function to retrieve the process associated with a window handle.
            </summary>
            <param name="windowHandle">Handle to the window to retrieve the process from.</param>
            <returns>The process for the specified window, or NULL if not found.</returns>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonProcess.RefreshEnvironmentVariables">
            <summary>
            Method to refresh the list of process specific environment variables.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonProcess.#cctor">
            <summary>
            Initializes the <see cref="P:GorgonLibrary.Diagnostics.GorgonProcess.ApplicationProcess"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonProcess.WorkingSet">
            <summary>
            Property to return the amount of memory mapped to the current process.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonProcess.ApplicationProcess">
            <summary>
            Property to return the Gorgon process that's currently executing.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonProcess.EnvironmentVariables">
            <summary>
            Property to return a list of process specific environment variables.
            </summary>
        </member>
        <member name="T:GorgonLibrary.StreamStatus">
            <summary>
            Status for the stream.
            </summary>
        </member>
        <member name="F:GorgonLibrary.StreamStatus.ReadWrite">
            <summary>
            Buffer can be read from and written to.
            </summary>
        </member>
        <member name="F:GorgonLibrary.StreamStatus.ReadOnly">
            <summary>
            Buffer can be read from.
            </summary>
        </member>
        <member name="F:GorgonLibrary.StreamStatus.WriteOnly">
            <summary>
            Buffer can be written to.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonDataStream">
            <summary>
            A generic data stream.
            </summary>
            <remarks>This will hold generic byte data in unmanaged memory.  It is similar to the <see cref="T:System.IO.MemoryStream">MemoryStream</see> object, except that MemoryStream uses an array of bytes as a backing store.
            <para>Because this stream uses unmanaged memory, it is imperative that you call the Dispose method when you're done with the object.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.UseMarshalling(System.Type)">
            <summary>
            Function to determine if marshalling is required.
            </summary>
            <param name="type">Type to examine.</param>
            <returns>TRUE if the type requires marshalling, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ValueTypeToStream``1(``0)">
            <summary>
            Function to marshal a value type into a Gorgon Data Stream.
            </summary>
            <typeparam name="T">Type of value to marshal.</typeparam>
            <param name="value">Value to marshal.</param>
            <returns>A data stream containing the marshalled data.</returns>
            <remarks>Use this to create and initialize a data stream with marshalled data.
            <para>Value types must include the System.Runtime.InteropServices.StructLayout attribute, and must use an explicit layout.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when the type of <paramref name="value"/> is not explicitly laid out with the System.Runtime.InteropServices.StructLayout attribute.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.SizeOf``1">
            <summary>
            Function to retrieve the size of type, in bytes.
            </summary>
            <typeparam name="T">Type of data to find the size for.</typeparam>
            <returns>Number of bytes for the type.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
              
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null. </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
              
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset moves the position outside of the boundaries of the stream.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks>Calling this function will clear any data being held by the buffer, and reset the <see cref="P:GorgonLibrary.Data.GorgonDataStream.Position">position</see> to the beginning of the stream..</remarks>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
              
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null. </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
              
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteFloat(System.Single)">
            <summary>
            Writes a floating point value to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The floating point value to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteDouble(System.Double)">
            <summary>
            Writes a double to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The double to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteUInt16(System.UInt16)">
            <summary>
            Writes an unsigned 16 bit integer to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The unsigned 16 bit integer to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteUInt64(System.UInt64)">
            <summary>
            Writes an unsigned 64 bit integer to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The unsigned 64 bit integer to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteUInt32(System.UInt32)">
            <summary>
            Writes an unsigned integer to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The unsigned integer to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteInt16(System.Int16)">
            <summary>
            Writes a 16 bit integer to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The 16 bit integer to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteInt64(System.Int64)">
            <summary>
            Writes a 64 bit integer to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The 64 bit integer to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteInt32(System.Int32)">
            <summary>
            Writes an integer to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The integer to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadFloat">
            <summary>
            Function to write a floating point value to the stream and increment the position by the size of a float.
            </summary>
            <returns>
            The float, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadDouble">
            <summary>
            Function to write a double to the stream and increment the position by the size of a double.
            </summary>
            <returns>
            The double, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadUInt16">
            <summary>
            Function to write an unsigned 16 bit integer to the stream and increment the position by the size of a 16 bit integer.
            </summary>
            <returns>
            The unsigned 16 bit integer, or 0 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadUInt32">
            <summary>
            Function to write an unsigned 32 bit integer to the stream and increment the position by the size of a 32 bit integer.
            </summary>
            <returns>
            The unsigned 32 bit integer, or 0 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadUInt64">
            <summary>
            Function to write an unsigned 64 bit integer to the stream and increment the position by the size of a 64 bit integer.
            </summary>
            <returns>
            The unsigned 64 bit integer, or 0 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadInt16">
            <summary>
            Function to write a 16 bit integer to the stream and increment the position by the size of a 16 bit integer.
            </summary>
            <returns>
            The 16 bit integer, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadInt32">
            <summary>
            Function to write a 32 bit integer to the stream and increment the position by the size of a 32 bit integer.
            </summary>
            <returns>
            The 32 bit integer, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadInt64">
            <summary>
            Function to write a 64 bit integer to the stream and increment the position by the size of a 64 bit integer.
            </summary>
            <returns>
            The 64 bit integer, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Function to write a list of value types to the stream.
            </summary>
            <typeparam name="T">Type of data to write.</typeparam>
            <param name="buffer">Array of data to write.</param>
            <param name="offset">Offset into the array to start at.</param>
            <param name="count">Number of elements in the array to read.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
              
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null. </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
              
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>At this time, this function will only support structures with primitive types in them, strings and other objects will not work.</remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteRange``1(``0[])">
            <summary>
            Function to write an array of value types to the stream.
            </summary>
            <typeparam name="T">Type of data to write.</typeparam>
            <param name="buffer">Array to read from.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>At this time, this function will only support structures with primitive types in them, strings and other objects will not work.</remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Write``1(``0)">
            <summary>
            Function to write a value type to the stream.
            </summary>
            <typeparam name="T">Type of data to write.</typeparam>
            <param name="item">Value to write.</param>
            <remarks>At this time, this function will only support structures with primitive types in them, strings and other objects will not work.</remarks>
            <exception cref="T:System.AccessViolationException">Thrown when trying to write beyond the end of the stream.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Function to read an array of value types from the stream.
            </summary>
            <param name="buffer">Array to write the value types into.</param>
            <param name="offset">Offset within the array to start writing at.</param>
            <param name="count">Number of elements to write.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
              
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null. </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
              
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>At this time, this function will only support structures with primitive types in them, strings and other objects will not work.</remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadRange``1(System.Int32)">
            <summary>
            Function to read an array of value types from the stream.
            </summary>
            <typeparam name="T">Type of data to write.</typeparam>
            <param name="count">Number of items to read.</param>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <remarks>At this time, this function will only support structures with primitive types in them, strings and other objects will not work.</remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Read``1">
            <summary>
            Function to read a value type from the 
            </summary>
            <returns>The value type within the stream.</returns>
            <remarks>At this time, this function will only support structures with primitive types in them, strings and other objects will not work.</remarks>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.AccessViolationException">Thrown when trying to read beyond the end of the stream.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Read(System.IntPtr,System.Int32)">
            <summary>
            Function to write data from the stream into a pointer.
            </summary>
            <param name="pointer">Pointer to read from.</param>
            <param name="size">Size, in bytes, to read.</param>
            <exception cref="T:System.AccessViolationException">Thrown when trying to read beyond the end of the stream.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteString(System.String,System.Text.Encoding)">
            <summary>
            Function to write a string to the stream.
            </summary>
            <param name="value">String to write into the stream.</param>
            <param name="encoding">Encoding to use.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteString(System.String)">
            <summary>
            Function to write a string to the stream.
            </summary>
            <param name="value">String to write into the stream.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadString">
            <summary>
            Function to read a string from the stream.
            </summary>
            <returns>The string in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadString(System.Text.Encoding)">
            <summary>
            Function to read a string from the stream.
            </summary>
            <param name="encoding">Text encoding to use.</param>
            <returns>The string in the stream.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Write(System.IntPtr,System.Int32)">
            <summary>
            Function to read the data from a pointer into the stream.		
            </summary>
            <param name="pointer">Pointer to write into.</param>
            <param name="size">Size, in bytes, to write.</param>
            <exception cref="T:System.AccessViolationException">Thrown when trying to write beyond the end of the stream.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.WriteMarshal``1(``0,System.Boolean)">
            <summary>
            Function to marshal a structure into the stream.
            </summary>
            <typeparam name="T">Type of data to marshal.</typeparam>
            <param name="data">Data to marshal.</param>
            <param name="deleteContents">TRUE to remove any pre-allocated data within the data, FALSE to leave alone.</param>
            <remarks>This method will marshal a structure (object or value type) into unmanaged memory.
            <para>Passing FALSE to <paramref name="deleteContents"/> may result in a memory leak if the data was previously initialized.</para>
            <para>For more information, see the <see cref="M:System.RunTime.InteropServices.Marshal.StructureToPtr">Marshal.StructureToPtr</see> method.</para>
            </remarks>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.ReadMarshal``1">
            <summary>
            Function to marshal a structure from the stream.
            </summary>
            <typeparam name="T">Type of data to marshal.</typeparam>
            <returns>The data converted into a new value type or object.</returns>
            <remarks>This method will marshal unmanaged data back into a new structure (object or value type).
            <para>For more information, see the <see cref="M:System.RunTime.InteropServices.Marshal.PtrToStructure">Marshal.PtrToStructure</see> method.</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonDataStream"/> class.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.#ctor(System.Array,System.Int32,System.Int32,GorgonLibrary.StreamStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonDataStream"/> class.
            </summary>
            <param name="data">The data used to initialize the stream.</param>
            <param name="index">Index inside of the source array to start reading from.</param>
            <param name="count">Number of elements to read.</param>
            <param name="status">A flag indicating if the buffer is read only, write only or both.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the data parameter is NULL (Nothing in VB.Net).</exception>
            <remarks>The array elements should all be of the same type, and value types.
            <para>A pointer to the array will be held and released upon disposal of the stream, this may impact garbage collection performance.  
            Also, since the stream is holding a pointer, any changes to the <paramref name="data"/> parameter array elements will be reflected 
            in the stream.
            </para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.#ctor(System.Array,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonDataStream"/> class.
            </summary>
            <param name="data">The data used to initialize the stream.</param>
            <param name="index">Index inside of the source array to start reading from.</param>
            <param name="count">Number of elements to read.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the data parameter is NULL (Nothing in VB.Net).</exception>
            <remarks>The array elements should all be of the same type, and value types.
            <para>A pointer to the array will be held and released upon disposal of the stream, this may impact garbage collection performance.  
            Also, since the stream is holding a pointer, any changes to the <paramref name="data"/> parameter array elements will be reflected 
            in the stream.
            </para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.#ctor(System.Array)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonDataStream"/> class.
            </summary>
            <param name="data">The data used to initialize the stream.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the data parameter is NULL (Nothing in VB.Net).</exception>
            <remarks>The array elements should all be of the same type, and value types.
            <para>A pointer to the array will be held and released upon disposal of the stream, this may impact garbage collection performance.  
            Also, since the stream is holding a pointer, any changes to the <paramref name="data"/> parameter array elements will be reflected 
            in the stream.
            </para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonDataStream"/> class.
            </summary>
            <param name="capacity">The capacity of the underlying buffer.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonDataStream"/> class.
            </summary>
            <param name="source">The source pointer.</param>
            <param name="size">The size of the buffer (in bytes).</param>
        </member>
        <member name="M:GorgonLibrary.GorgonDataStream.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:GorgonLibrary.GorgonDataStream"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonDataStream.StreamStatus">
            <summary>
            Property to set or return the status of the stream.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonDataStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:GorgonLibrary.GorgonDataStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:GorgonLibrary.GorgonDataStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:GorgonLibrary.GorgonDataStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
              
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:GorgonLibrary.GorgonDataStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
              
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
              
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:GorgonLibrary.GorgonDataStream.BasePointer">
            <summary>
            Property to return the base pointer address to the allocated unmanaged memory.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonDataStream.PositionPointer">
            <summary>
            Property to return the pointer address of the current position in the stream.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonDataStream.UnsafePointer">
            <summary>
            Property to return the pointer to the allocated unmanaged memory.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonHandledEventArgs">
            <summary>
            A base handled event argument.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonHandledEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonHandledEventArgs"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonHandledEventArgs.IsHandled">
            <summary>
            Property to set or return whether the event was handled or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.UI.ErrorDialog">
            <summary>
            Dialog for error messages.
            </summary>
        </member>
        <member name="T:GorgonLibrary.UI.BaseDialog">
            <summary>
            Base form for common dialogs.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.ValidateFunctions">
            <summary>
            Function to validate the various functions bound to the form.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.OnLoad(System.EventArgs)">
            <summary>
            Form load event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.OnShown(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Shown"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.DrawDialog(System.Drawing.Graphics)">
            <summary>
            Function to perform the actual drawing of the dialog.
            </summary>
            <param name="g">Graphics object to use.</param>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.AdjustSize(System.Drawing.Graphics,System.Int32)">
            <summary>
            Function to adjust the size of the form based on the details.
            </summary>
            <param name="g">Graphics interface.</param>
            <param name="margin">Places a margin at the bottom of the form.</param>
            <returns>The new maximum height of the client area.</returns>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.DrawMessage(System.Drawing.Graphics,System.Single)">
            <summary>
            Function to draw the dialog box message.
            </summary>    /// 
            <param name="g">Graphics interface.</param>
            <param name="maxTextHeight">Maximum height that the text will fit into.</param>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.OnSizeChanged(System.EventArgs)">
            <summary>
            Size changed event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.BaseDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GorgonLibrary.UI.BaseDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.BaseDialog.buttonOK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="P:GorgonLibrary.UI.BaseDialog.MessageWidth">
            <summary>
            Property to set or return the maximum width of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.UI.BaseDialog.MessageHeight">
            <summary>
            Property to set or return the maximum height of the text.
            </summary>
        </member>
        <member name="P:GorgonLibrary.UI.BaseDialog.DialogImage">
            <summary>
            Property to set or return the image for the dialog.
            </summary>
        </member>
        <member name="P:GorgonLibrary.UI.BaseDialog.ButtonAction">
            <summary>
            Property to set or return the action for the default button.
            </summary>
        </member>
        <member name="P:GorgonLibrary.UI.BaseDialog.Message">
            <summary>
            Property to set or return the message for the dialog.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.ErrorDialog.detailsButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the detailsButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ErrorDialog.OKButton_Click(System.Object,System.EventArgs)">
            <summary>
            OK button click event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ErrorDialog.ValidateFunctions">
            <summary>
            Function to validate the buttons.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.ErrorDialog.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Load"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ErrorDialog.DrawDialog(System.Drawing.Graphics)">
            <summary>
            Function to perform the actual drawing of the message.
            </summary>
            <param name="g">Graphics object to use.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ErrorDialog.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ErrorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.ErrorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ErrorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.UI.ErrorDialog.ErrorDetails">
            <summary>
            Property to return or set the details of the error.
            </summary>
        </member>
        <member name="T:GorgonLibrary.UI.ConfirmationDialogEx">
            <summary>
            Dialog for confirmation + plus to all option.
            </summary>
        </member>
        <member name="T:GorgonLibrary.UI.ConfirmationDialog">
            <summary>
            Dialog for confirmation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationDialog.buttonNo">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationDialog.buttonCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationDialog._result">
            <summary>
            Result of the dialog.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialog.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.FormClosing"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.FormClosingEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialog.OKButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the OKButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialog.buttonCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the buttonCancel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialog.buttonNo_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the buttonNo control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialog.DrawDialog(System.Drawing.Graphics)">
            <summary>
            Function to perform the actual drawing of the dialog.
            </summary>
            <param name="g">Graphics object to use.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialog.OnLoad(System.EventArgs)">
            <summary>
            Form load event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialog.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.UI.ConfirmationDialog.ShowCancel">
            <summary>
            Property to set or return whether to show the cancel button.
            </summary>
        </member>
        <member name="P:GorgonLibrary.UI.ConfirmationDialog.ConfirmationResult">
            <summary>
            Property to return the confirmation dialog result.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationDialogEx.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialogEx.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialogEx.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialogEx.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.FormClosing"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.FormClosingEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialogEx.OnLoad(System.EventArgs)">
            <summary>
            Form load event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialogEx.DrawDialog(System.Drawing.Graphics)">
            <summary>
            Function to perform the actual drawing of the dialog.
            </summary>
            <param name="g">Graphics object to use.</param>
        </member>
        <member name="M:GorgonLibrary.UI.ConfirmationDialogEx.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Diagnostics.GorgonTiming">
            <summary>
            Timing data for code within a Gorgon Idle loop.
            </summary>
            <remarks>This object is used to calculate the time it takes for a single iteration (but, continuously) of the idle loop to execute, the frames per second, and the time elapsed since the application started as well as peaks, lows and averages for those values.
            <para>This object will automatically gather data if your application has an <see cref="P:GorgonLibrary.Gorgon.ApplicationIdleLoopMethod">idle loop</see> assigned.  Otherwise, if a custom idle time polling method is 
            used, then the user should call <see cref="M:GorgonLibrary.Diagnostics.GorgonTiming.Reset">Reset</see> before starting the application loop, and <see cref="M:GorgonLibrary.Diagnostics.GorgonTiming.Update">Update</see> at the beginning of the idle loop.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTiming.Update">
            <summary>
            Function to gather timing data.
            </summary>
            <remarks>You do not need to call this method unless you've got your own mechanism for handling an idle time loop.</remarks>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTiming.Reset">
            <summary>
            Function to clear the timing data and reset any timers.
            </summary>
            <remarks>You do not need to call this method unless you've got your own mechanism for handling an idle time loop.
            <para>Values set by the user (e.g. <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.UseHighResolutionTimer">UseHighResolutionTimer</see>, <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.AverageFPS">MaxAverageCount</see>, etc...) will not be reset.  
            The exception to this is if a high resolution timer is required but is not supported by the hardware.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTiming.FpsToMilliseconds(System.Double)">
            <summary>
            Function to convert the desired frames per second to milliseconds.
            </summary>
            <param name="fps">Desired frames per second.</param>
            <returns>Frames per second in milliseconds.</returns>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTiming.FpsToMicroseconds(System.Double)">
            <summary>
            Function to convert the desired frames per second to microseconds.
            </summary>
            <param name="fps">Desired frames per second.</param>
            <returns>Frames per second in microseconds.</returns>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTiming.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Diagnostics.GorgonTiming"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.TimeScale">
            <summary>
            Property to scale the frame delta times.
            </summary>
            <remarks>Setting this value to 0 will pause, and a negative value will move things in reverse when using <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.ScaledDelta">ScaledDelta</see>.</remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.SecondsSinceStart">
            <summary>
            Property to return the number of seconds since a Gorgon application was started.
            </summary>
            <remarks>This property starts counting at the first start of a Gorgon application and will continue to end of the application.
            <para>This value is not affected by the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.TimeScale">TimeScale</see> property.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.MillisecondsSinceStart">
            <summary>
            Property to return the number of milliseconds since a Gorgon application was started.
            </summary>
            <remarks>This property starts counting at the first start of a Gorgon application and will continue to end of the application.
            <para>This value is not affected by the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.TimeScale">TimeScale</see> property.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.Delta">
            <summary>
            Property to return the number of seconds to run the idle loop for a single iteration.
            </summary>
            <remarks>This is the same as the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.FrameDelta">FrameDelta</see> property when the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.TimeScale">TimeScale</see> is set to 1.0f, otherwise, this value is not affected by TimeScale.  
            <para>Because it is unaffected by TimeScale, this value is the one that should be used when measuring performance.</para></remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.ScaledDelta">
            <summary>
            Property to return the number of seconds to run the idle loop for a single iteration with scaling.
            </summary>
            <remarks>This value is affected by the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.TimeScale">TimeScale</see> property.</remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.FrameCount">
            <summary>
            Property to return the number of frames that have been presented.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.AverageFPS">
            <summary>
            Property to return the average FPS.
            </summary>
            <para>Note that the averages calculations are affected by the length of time it takes to execute a single iteration of the idle loop.</para>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.HighestFPS">
            <summary>
            Property to return the highest FPS.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.LowestFPS">
            <summary>
            Propery to return the lowest FPS.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.HighestDelta">
            <summary>
            Property to return the highest idle loop delta.
            </summary>
            <remarks>This value is affected not by the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.TimeScale">TimeScale</see> property because it is meant to be used in performance measurement.</remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.LowestDelta">
            <summary>
            Property to return the lowest idle loop delta.
            </summary>
            <remarks>This value is affected not by the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.TimeScale">TimeScale</see> property because it is meant to be used in performance measurement.</remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.AverageDelta">
            <summary>
            Property to return the average number of seconds to run the idle loop for a single iteration.
            </summary>
            <remarks>This value can be used to get a smoother delta value over time.
            <para>This value is not affected by the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.TimeScale">TimeScale</see> property.</para>
            <para>Note that the averages calculations are affected by the length of time it takes to execute a single iteration of the idle loop.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.AverageScaledDelta">
            <summary>
            Property to return the average number of seconds to run the idle loop for a single iteration.
            </summary>
            <remarks>This value can be used to get a smoother delta value over time.
            <para>This value is affected by the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.TimeScale">TimeScale</see> property.</para>
            <para>Note that the averages calculations are affected by the length of time it takes to execute a single iteration of the idle loop.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.MaxAverageCount">
            <summary>
            Property to set or return the maximum number of iterations before an average value is reset.
            </summary>
            <remarks>This only applies to the <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.AverageFPS">AverageFPS</see>, <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.AverageFPS">AverageDelta</see> and <see cref="P:GorgonLibrary.Diagnostics.GorgonTiming.AverageFPS">AverageScaledDelta</see> properties.
            <para>Note that the higher the value assigned to this property, the longer it'll take for the averages to compute, this is in addition to any overhead from the time it takes to execute a single iteration of the idle loop.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.FPS">
            <summary>
            Property to return the number of frames per second.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTiming.UseHighResolutionTimer">
            <summary>
            Property to set or return whether to use a high resolution timer
            </summary>
        </member>
        <member name="T:GorgonLibrary.UI.GorgonListViewExtensions">
            <summary>
            Extensions used for the list view object.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonListViewExtensions.SetSortIcon(System.Windows.Forms.ListView,System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Function to set the sorting icon on the list view control.
            </summary>
            <param name="listViewControl">Listview to update.</param>
            <param name="headerIndex">Column header index.</param>
            <param name="order">Sort order.</param>
        </member>
        <member name="T:GorgonLibrary.Diagnostics.GorgonDebug">
            <summary>
            Debugging utility methods.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonDebug.AssertParamString(System.String,System.String)">
            <summary>
            Function to throw an exception if a string is NULL (Nothing in VB.Net) or empty.
            </summary>
            <param name="value">The value being passed.</param>
            <param name="paramName">The name of the parameter.</param>
            <remarks>This will only throw exceptions when we're in DEBUG mode.  Release mode will do nothing.</remarks>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonDebug.AssertParamRange(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Function to throw an exception if a value is not between the range specified.
            </summary>
            <param name="value">Value to compare.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <param name="minInclusive">TRUE if the minimum is inclusive in the range (i.e. value &lt; min).</param>
            <param name="maxInclusive">TRUE if the maximum is inclusive in the range (i.e. value &gt; max).</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonDebug.AssertParamRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Function to throw an exception if a value is not between the range specified.
            </summary>
            <param name="value">Value to compare.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <param name="paramName">Name of the parameter.</param>
            <remarks>This overload includes the min value in the comparison, but excludes the max value (i.e. value &lt; 0 and value &gt;= max).</remarks>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonDebug.AssertRange(System.Int32,System.Int32)">
            <summary>
            Function to determine if a range is valid for a collection.
            </summary>
            <param name="index">Index being requested.</param>
            <param name="count">Number of items in the collection.</param>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonDebug.AssertNull``1(``0,System.String)">
            <summary>
            Function to throw an exception if an object is NULL (Nothing in VB.Net).
            </summary>
            <typeparam name="T">A reference type to evaluate.</typeparam>
            <param name="value">Value to evaluate.</param>
            <param name="paramName">Name of the parameter to evaluate.</param>
        </member>
        <member name="T:GorgonLibrary.Native.GorgonIntPtrExtensions">
            <summary>
            Extensions for manipulating memory via an Intptr.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyTo(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Function to copy the memory contents from this pointer to another.
            </summary>
            <param name="destination">Destination buffer.</param>
            <param name="source">Source buffer.</param>
            <param name="size">Size of the data to copy, in bytes.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the destination pointer is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyTo(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to copy the contents of the pointer to a byte array.
            </summary>
            <param name="source">Source pointer.</param>
            <param name="destination">Destination array of bytes.</param>
            <param name="destinationIndex">Index in the array to start writing at.</param>
            <param name="size">Size of the data to copy.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="destination"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + destinationIndex is greater than the number of elements in the destination parameter.
            <para>-or-</para>
            <para>Thrown if the destinationIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyTo(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            Function to copy the contents of the pointer to a byte array.
            </summary>
            <param name="source">Source pointer.</param>
            <param name="destination">Destination array of bytes.</param>
            <param name="size">Size of the data to copy.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="destination"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + destinationIndex is greater than the number of elements in the destination parameter.
            <para>-or-</para>
            <para>Thrown if the destinationIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyTo(System.IntPtr,System.Byte[])">
            <summary>
            Function to copy the contents of the pointer to a byte array.
            </summary>
            <param name="source">Source pointer.</param>
            <param name="destination">Destination array of bytes.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="destination"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + destinationIndex is greater than the number of elements in the destination parameter.
            <para>-or-</para>
            <para>Thrown if the destinationIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyTo``1(System.IntPtr,``0[],System.Int32,System.Int32)">
            <summary>
            Function to copy the contents of the pointer to a byte array.
            </summary>
            <typeparam name="T">Type of data in the array.</typeparam>
            <param name="source">Source pointer.</param>
            <param name="destination">Destination array of bytes.</param>
            <param name="destinationIndex">Index in the array to start writing at.</param>
            <param name="size">Size of the data to copy in bytes.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="destination"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + destinationIndex is greater than the number of elements in the destination parameter.
            <para>-or-</para>
            <para>Thrown if the destinationIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyTo``1(System.IntPtr,``0[])">
            <summary>
            Function to copy the contents of the pointer to a byte array.
            </summary>
            <typeparam name="T">Type of data in the array.</typeparam>
            <param name="source">Source pointer.</param>
            <param name="destination">Destination array.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="destination"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + destinationIndex is greater than the number of elements in the destination parameter.
            <para>-or-</para>
            <para>Thrown if the destinationIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyTo``1(System.IntPtr,``0[],System.Int32)">
            <summary>
            Function to copy the contents of the pointer to a byte array.
            </summary>
            <typeparam name="T">Type of data in the array.</typeparam>
            <param name="source">Source pointer.</param>
            <param name="destination">Destination array of bytes.</param>
            <param name="size">Size of the data to copy in bytes.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="destination"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + destinationIndex is greater than the number of elements in the destination parameter.
            <para>-or-</para>
            <para>Thrown if the destinationIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyFrom(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Function to copy the contents of a byte array into the memory pointed at by the pointer.
            </summary>
            <param name="destination">Destination pointer.</param>
            <param name="source">Source pointer to copy from.</param>
            <param name="size">Number of bytes to copy.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source pointer is NULL (Nothing in VB.Net).</exception>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyFrom(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Function to copy the contents of a byte array into the memory pointed at by the pointer.
            </summary>
            <param name="destination">Destination pointer.</param>
            <param name="source">Source array to copy from.</param>
            <param name="sourceIndex">Index to start copying from in the source array.</param>
            <param name="size">Number of bytes to copy.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="source"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + sourceIndex is greater than the number of elements in the source parameter.
            <para>-or-</para>
            <para>Thrown if the sourceIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyFrom(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            Function to copy the contents of a byte array into the memory pointed at by the pointer.
            </summary>
            <param name="destination">Destination pointer.</param>
            <param name="source">Source array to copy from.</param>
            <param name="size">Number of bytes to copy.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="source"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + sourceIndex is greater than the number of elements in the source parameter.
            <para>-or-</para>
            <para>Thrown if the sourceIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyFrom(System.IntPtr,System.Byte[])">
            <summary>
            Function to copy the contents of a byte array into the memory pointed at by the pointer.
            </summary>
            <param name="destination">Destination pointer.</param>
            <param name="source">Source array to copy from.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="source"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + sourceIndex is greater than the number of elements in the source parameter.
            <para>-or-</para>
            <para>Thrown if the sourceIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyFrom``1(System.IntPtr,``0[],System.Int32,System.Int32)">
            <summary>
            Function to copy the contents of a byte array into the memory pointed at by the pointer.
            </summary>
            <typeparam name="T">Type of data in the array.</typeparam>
            <param name="destination">Destination pointer.</param>
            <param name="source">Source array to copy from.</param>
            <param name="sourceIndex">Index to start copying from in the source array.</param>
            <param name="size">Number of bytes to copy.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="source"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + sourceIndex is greater than the number of elements in the source parameter.
            <para>-or-</para>
            <para>Thrown if the sourceIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyFrom``1(System.IntPtr,``0[],System.Int32)">
            <summary>
            Function to copy the contents of a byte array into the memory pointed at by the pointer.
            </summary>
            <typeparam name="T">Type of data in the array.</typeparam>
            <param name="destination">Destination pointer.</param>
            <param name="source">Source array to copy from.</param>
            <param name="size">Number of bytes to copy.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="source"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + sourceIndex is greater than the number of elements in the source parameter.
            <para>-or-</para>
            <para>Thrown if the sourceIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.CopyFrom``1(System.IntPtr,``0[])">
            <summary>
            Function to copy the contents of a byte array into the memory pointed at by the pointer.
            </summary>
            <typeparam name="T">Type of data in the array.</typeparam>
            <param name="destination">Destination pointer.</param>
            <param name="source">Source array to copy from.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="source"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the size + sourceIndex is greater than the number of elements in the source parameter.
            <para>-or-</para>
            <para>Thrown if the sourceIndex is less than 0.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.ZeroMemory(System.IntPtr,System.Int32)">
            <summary>
            Function to zero out the memory pointed to by this pointer.
            </summary>
            <param name="destination">Destination pointer to zero out.</param>
            <param name="size">Amount of memory to zero out.</param>
            <remarks>Since a pointer doesn't have a size associated with it, care must be taken to not overstep the bounds of the data pointed at by the pointer.</remarks>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.MarshalFrom(System.IntPtr,System.Object,System.Boolean)">
            <summary>
            Function to marshal an object or value type into unmanaged memory.
            </summary>
            <param name="destination">Pointer to marhsal the data into.</param>
            <param name="value">Object or value type to marshal.</param>
            <param name="deleteContents">TRUE to remove any pre-allocated data, FALSE to leave alone.</param>
            <remarks>This method will marshal a structure (object or value type) into unmanaged memory.
            <para>Passing FALSE to <paramref name="deleteContents"/> may result in a memory leak if the data was previously initialized.</para>
            <para>For more information, see the <see cref="M:System.RunTime.InteropServices.Marshal.StructureToPtr">Marshal.StructureToPtr</see> method.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.MarshalTo``1(System.IntPtr)">
            <summary>
            Function to marshal unmanaged data back to an object or value type.
            </summary>
            <typeparam name="T">Type of value type or object.</typeparam>
            <param name="source">Pointer to read from.</param>
            <returns>The data converted into a new value type or object.</returns>
            <remarks>This method will marshal unmanaged data back into a new structure (object or value type).
            <para>For more information, see the <see cref="M:System.RunTime.InteropServices.Marshal.PtrToStructure">Marshal.PtrToStructure</see> method.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.MarshalTo``1(System.IntPtr,``0@)">
            <summary>
            Function to marshal unmanaged data back to an existing object or value type.
            </summary>
            <typeparam name="T">Type of value type or object.</typeparam>
            <param name="source">Pointer to read from.</param>
            <param name="value">Value to copy the data into.</param>
            <returns>The data converted and copied into a value type or object.</returns>
            <remarks>This method will marshal unmanaged data back into an existing structure (object or value type).
            <para>The user must pre-allocate the object before calling this method.</para>
            <para>For more information, see the <see cref="M:System.RunTime.InteropServices.Marshal.PtrToStructure">Marshal.PtrToStructure</see> method.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="value"/> parameter is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.Write``1(System.IntPtr,``0@)">
            <summary>
            Function to write a specific value type to the memory pointed at by the pointer.
            </summary>
            <typeparam name="T">Type of value to write.</typeparam>
            <param name="destination">The destination pointer.</param>
            <param name="value">The value to write.</param>
            <remarks>This method can only write value types composed of primitives, reference objects will not work.
            <para>There is no way to determine the size of the data pointed at by the pointer, so the user must take care not to write outside the bounds of the memory.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Native.GorgonIntPtrExtensions.Read``1(System.IntPtr,``0@)">
            <summary>
            Function to read a specific value from the memory pointed at by the pointer.
            </summary>
            <typeparam name="T">Type of value to read.</typeparam>
            <param name="source">The source pointer.</param>
            <param name="value">The value that was read from memory.</param>
            <returns>The value at the pointer.</returns>
            <remarks>This method can only write value types composed of primitives, reference objects will not work.
            <para>There is no way to determine the size of the data pointed at by the pointer, so the user must take care not to write outside the bounds of the memory.</para>
            </remarks>
        </member>
        <member name="T:GorgonLibrary.Configuration.GorgonConfigurationValue">
            <summary>
            A configuration value.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonConfigurationValue.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonConfigurationValue.Equals(GorgonLibrary.Configuration.GorgonConfigurationValue@,GorgonLibrary.Configuration.GorgonConfigurationValue@)">
            <summary>
            Function to determine if two values are equal.
            </summary>
            <param name="left">Left value to compare.</param>
            <param name="right">Right value to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonConfigurationValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonConfigurationValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonConfigurationValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Configuration.GorgonConfigurationValue"/> struct.
            </summary>
            <param name="name">The name for the configuration value.</param>
            <param name="value">The value to store.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> parameter is an empty string.</exception>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonConfigurationValue.Equals(GorgonLibrary.Configuration.GorgonConfigurationValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Configuration.GorgonConfigurationValue.Value">
            <summary>
            Property to set or return the value for the configuration value.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Configuration.GorgonConfigurationValue.Name">
            <summary>
            Property to return the name for the configuration value.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:GorgonLibrary.PlugIns.AssemblyCache">
            <summary>
            A cache to hold recently loaded assemblies so we don't load them over and over.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.AssemblyCache.GetAssemblies">
            <summary>
            Function to retrieve the currently loaded assemblies in the current app domain.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.AssemblyCache.LoadAssembly(System.Reflection.AssemblyName)">
            <summary>
            Function to load an assembly holding a plug-in.
            </summary>
            <param name="assemblyName">Name of the assembly to load.</param>
            <returns>The loaded assembly.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.AssemblyCache.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.PlugIns.AssemblyCache"/> class.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonResult">
            <summary>
            A defined error message to be packaged with <see cref="T:GorgonLibrary.GorgonException"/>.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonResult.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonResult.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonResult.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonResult.op_Equality(GorgonLibrary.GorgonResult,GorgonLibrary.GorgonResult)">
            <summary>
            Operator to test for equality.
            </summary>
            <param name="left">The left item to test.</param>
            <param name="right">The right item to test.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonResult.op_Inequality(GorgonLibrary.GorgonResult,GorgonLibrary.GorgonResult)">
            <summary>
            Operator to test for inequality.
            </summary>
            <param name="left">The left item to test.</param>
            <param name="right">The right item to test.</param>
            <returns>TRUE if not equal, FALSE if the items are equal.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonResult.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonResult"/> struct.
            </summary>
            <param name="name">Name for the error.</param>
            <param name="code">The code.</param>
            <param name="description">The description.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> or <paramref name="description"/> parameter is NULL (or Nothing in VB.NET)</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> or <paramref name="description"/> parameter is an empty string.</exception>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.NotInitialized">
            <summary>
            Library was not initialized.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.CannotCreate">
            <summary>
            Error creating an object.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.CannotWrite">
            <summary>
            Error while writing data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.AccessDenied">
            <summary>
            Access is denied.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.DriverError">
            <summary>
            Error accessing driver.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.CannotRead">
            <summary>
            Error while reading data.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.CannotBind">
            <summary>
            Error trying to bind.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.CannotEnumerate">
            <summary>
            Error trying to enumerate objects.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.FormatNotSupported">
            <summary>
            Format is not supported.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.InvalidFileFormat">
            <summary>
            File format is not supported.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.CannotRollback">
            <summary>
            Error while trying to perform a rollback operation.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.Description">
            <summary>
            Property to set or return the error message to sent with the exception.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.Code">
            <summary>
            Property to set or return the error code to send with the exception.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonResult.Name">
            <summary>
            Property to return the name of the error.
            </summary>
        </member>
        <member name="T:GorgonLibrary.IO.GorgonBinaryWriter">
            <summary>
            An extended binary writer class.
            </summary>
            <remarks>The <see cref="T:System.IO.BinaryWriter">BinaryWriter</see> object included with .NET automatically closes the underlying stream when the writer
            is closed.  This object was created to allow the user to decide when to close the underlying stream.</remarks>
        </member>
        <member name="M:GorgonLibrary.IO.GorgonBinaryWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryReader"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.IO.GorgonBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.IO.GorgonBinaryWriter"/> class.
            </summary>
            <param name="output">Output stream.</param>
            <param name="encoder">Encoding for the binary writer.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the writer is closed, FALSE to close when done.</param>
        </member>
        <member name="M:GorgonLibrary.IO.GorgonBinaryWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.IO.GorgonBinaryWriter"/> class.
            </summary>
            <param name="output">Output stream.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the writer is closed, FALSE to close when done.</param>
        </member>
        <member name="P:GorgonLibrary.IO.GorgonBinaryWriter.KeepStreamOpen">
            <summary>
            Property to set or return whether to keep the underlying stream open or not after the writer is closed.
            </summary>
        </member>
        <member name="T:GorgonLibrary.IO.GorgonBinaryReader">
            <summary>
            An extended binary writer class.
            </summary>
            <remarks>The <see cref="T:System.IO.BinaryReader">BinaryReader</see> object included with .NET automatically closes the underlying stream when the reader
            is closed.  This object was created to allow the user to decide when to close the underlying stream.</remarks>
        </member>
        <member name="M:GorgonLibrary.IO.GorgonBinaryReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryReader"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:GorgonLibrary.IO.GorgonBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.IO.GorgonBinaryReader"/> class.
            </summary>
            <param name="input">Input stream.</param>
            <param name="encoder">Encoding for the binary reader.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the writer is closed, FALSE to close when done.</param>
        </member>
        <member name="M:GorgonLibrary.IO.GorgonBinaryReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.IO.GorgonBinaryReader"/> class.
            </summary>
            <param name="input">Input stream.</param>
            <param name="keepStreamOpen">TRUE to keep the underlying stream open when the writer is closed, FALSE to close when done.</param>
        </member>
        <member name="P:GorgonLibrary.IO.GorgonBinaryReader.KeepStreamOpen">
            <summary>
            Property to set or return whether to keep the underlying stream open or not after the reader is closed.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1">
            <summary>
            Base collection for Gorgon library named objects.
            </summary>
            <typeparam name="T">Type of object, must implement <see cref="T:GorgonLibrary.INamedObject">INamedObject</see>.</typeparam>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.GetItem(System.Int32)">
            <summary>
            Function to retrieve the item at the specified index.
            </summary>
            <param name="index">Index of the item to retrieve.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.AddItem(`0)">
            <summary>
            Function to add an item to the collection.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.AddItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Function to add several items to the list.
            </summary>
            <param name="items">IEnumerable containing the items to copy.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.GetItem(System.String)">
            <summary>
            Function to retrieve an item with the specified name.
            </summary>
            <param name="name">Name of the item to retrieve.</param>
            <returns>Item with the specified key.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.SetItem(System.String,`0)">
            <summary>
            Function to set an item with the specified name.
            </summary>
            <param name="name">Name of the item to set.</param>
            <param name="value">Value to set to the item.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.RemoveItem(System.Int32)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.RemoveItem(System.String)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="name">Name of the item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.RemoveItem(`0)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.ClearItems">
            <summary>
            Function to remove all the items from the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.IndexOf(System.String)">
            <summary>
            Property to return the index of an item by its name.
            </summary>
            <param name="name">Name of the object to find.</param>
            <returns>The index of the object, or -1 if not found.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.Contains(System.String)">
            <summary>
            Function to return whether an item with the specified name exists in this collection.
            </summary>
            <param name="name">Name of the item to find.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.ToArray">
            <summary>
            Function to copy the contents of the collection to an array.
            </summary>
            <returns>Array containing the contents of this collection.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1"/> class.
            </summary>
            <param name="caseSensitive">TRUE if the key names are case sensitive, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="array"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.Items">
            <summary>
            Property to return the list of items in the underlying collection.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.KeysAreCaseSensitive">
            <summary>
            Property to return whether the keys are case sensitive.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Property to set or return the item at the specified index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.GorgonExceptionHandler">
            <summary>
            Delegate to define an exception handler.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonException">
            <summary>
            Primary exception used for Gorgon.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonException.FormatStackTrace(System.String,System.String,GorgonLibrary.Diagnostics.LoggingLevel)">
            <summary>
            Function to format a stack trace to be more presentable.
            </summary>
            <param name="stack">Stack trace to format.</param>
            <param name="indicator">Inner exception indicator.</param>
            <param name="logLevel">Logging level to use.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.FormatMessage(System.String,System.String,GorgonLibrary.Diagnostics.LoggingLevel)">
            <summary>
            Function to format the exception message for the log output.
            </summary>
            <param name="message">Message to format.</param>
            <param name="indicator">Inner exception indicator.</param>
            <param name="logLevel">Logging level to use.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.LogException(System.Exception)">
            <summary>
            Function to send the exception to the log file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Catch(System.Exception)">
            <summary>
            Function to catch and log any stray exception.
            </summary>
            <param name="ex">Exception to catch.</param>
            <returns>The exception that was caught.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="ex"/> parameter is NULL (or Nothing in VB.NET).</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Catch(System.Exception,GorgonLibrary.GorgonExceptionHandler)">
            <summary>
            Functon to catch and handle an exception.
            </summary>
            <param name="ex">Exception to pass to the handler.</param>
            <param name="handler">Handler to handle the exception.</param>
            <returns>The exception that was caught.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="ex"/> or <paramref name="handler"/> parameter is NULL (or Nothing in VB.NET).</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Repackage(GorgonLibrary.GorgonResult,System.String,System.Exception)">
            <summary>
            Function to repackage an arbitrary exception as an Gorgon exception.
            </summary>
            <param name="result">Result code to use.</param>
            <param name="message">Message to append to the result.</param>
            <param name="ex">Exception to capture and rethrow.</param>
            <returns>A new Gorgon exception to throw.</returns>
            <remarks>The original exception will be the inner exception of the new <see cref="T:GorgonLibrary.GorgonException"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="ex"/> parameter is NULL (or Nothing in VB.NET).</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Repackage(GorgonLibrary.GorgonResult,System.Exception)">
            <summary>
            Function to repackage an arbitrary exception as an Gorgon exception.
            </summary>
            <param name="result">Result code to use.</param>
            <param name="ex">Exception to capture and rethrow.</param>
            <returns>A new Gorgon exception to throw.</returns>
            <remarks>The original exception will be the inner exception of the new <see cref="T:GorgonLibrary.GorgonException"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="ex"/> parameter is NULL (or Nothing in VB.NET).</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonException.Repackage(System.String,System.Exception)">
            <summary>
            Function to repackage an arbitrary exception as an Gorgon exception.
            </summary>
            <param name="message">New message to pass to the new exception.</param>
            <param name="ex">Exception to capture and rethrow.</param>
            <returns>A new Gorgon exception to throw.</returns>
            <remarks>The original exception will be the inner exception of the new <see cref="T:GorgonLibrary.GorgonException"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="ex"/> parameter is NULL (or Nothing in VB.NET).</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="errorMessage">Error message to display.</param>
            <param name="innerException">Inner exception to pass through.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="errorMessage">Error message to display.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialized constructor.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(GorgonLibrary.GorgonResult,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonException"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="message">Message data to append to the error.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(GorgonLibrary.GorgonResult,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonException"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="message">Message data to append to the error.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(GorgonLibrary.GorgonResult,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonException"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor(GorgonLibrary.GorgonResult)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonException"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonException.Log">
            <summary>
            Property to set or return the log system to use when dumping exceptions to the log.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonException.ResultCode">
            <summary>
            Property to return the exception result code.
            </summary>
        </member>
        <member name="T:GorgonLibrary.PlugIns.GorgonPlugIn">
            <summary>
            A base plug-in entry point object.
            </summary>
            <remarks>Plug-ins must implement this object as a proxy to create the actual concrete implementation object.</remarks>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugIn.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.PlugIns.GorgonPlugIn"/> class.
            </summary>
            <param name="description">Optional description of the plug-in.</param>
            <remarks>Objects that implement this base class should pass in a hard coded description on the base constructor.</remarks>
        </member>
        <member name="P:GorgonLibrary.PlugIns.GorgonPlugIn.PlugInPath">
            <summary>
            Property to return the path to the plug-in assembly.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PlugIns.GorgonPlugIn.Description">
            <summary>
            Property to return the description of the plug-in.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PlugIns.GorgonPlugIn.Name">
            <summary>
            Property to return the name of this object.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonNumericFormattingExtension">
            <summary>
            Utility for formatting numeric values into various types of strings.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatMemory(System.Byte)">
            <summary>
            Function to return a formatted string containing the memory amount.
            </summary>
            <param name="amount">Amount of memory in bytes to format.</param>
            <returns>A string containing the formatted amount of memory.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatMemory(System.Int16)">
            <summary>
            Function to return a formatted string containing the memory amount.
            </summary>
            <param name="amount">Amount of memory in bytes to format.</param>
            <returns>A string containing the formatted amount of memory.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatMemory(System.UInt16)">
            <summary>
            Function to return a formatted string containing the memory amount.
            </summary>
            <param name="amount">Amount of memory in bytes to format.</param>
            <returns>A string containing the formatted amount of memory.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatMemory(System.Int32)">
            <summary>
            Function to return a formatted string containing the memory amount.
            </summary>
            <param name="amount">Amount of memory in bytes to format.</param>
            <returns>A string containing the formatted amount of memory.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatMemory(System.UInt32)">
            <summary>
            Function to return a formatted string containing the memory amount.
            </summary>
            <param name="amount">Amount of memory in bytes to format.</param>
            <returns>A string containing the formatted amount of memory.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatMemory(System.Int64)">
            <summary>
            Function to return a formatted string containing the memory amount.
            </summary>
            <param name="amount">Amount of memory in bytes to format.</param>
            <returns>A string containing the formatted amount of memory.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatMemory(System.UInt64)">
            <summary>
            Function to return a formatted string containing the memory amount.
            </summary>
            <param name="amount">Amount of memory in bytes to format.</param>
            <returns>A string containing the formatted amount of memory.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatMemory(System.Single)">
            <summary>
            Function to return a formatted string containing the memory amount.
            </summary>
            <param name="amount">Amount of memory in bytes to format.</param>
            <returns>A string containing the formatted amount of memory.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatMemory(System.Double)">
            <summary>
            Function to return a formatted string containing the memory amount.
            </summary>
            <param name="amount">Amount of memory in bytes to format.</param>
            <returns>A string containing the formatted amount of memory.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatHex(System.Byte)">
            <summary>
            Function to format a byte value into a hexadecimal string.
            </summary>
            <param name="value">Byte value to format.</param>
            <returns>The formatted byte value.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatHex(System.Int16)">
            <summary>
            Function to format a short value into a hexadecimal string.
            </summary>
            <param name="value">Short value to format.</param>
            <returns>The formatted short value.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatHex(System.UInt16)">
            <summary>
            Function to format an unsigned short value into a hexadecimal string.
            </summary>
            <param name="value">Unsigned short value to format.</param>
            <returns>The formatted unsigned short value.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatHex(System.Int32)">
            <summary>
            Function to format an integer value into a hexadecimal string.
            </summary>
            <param name="value">Integer value to format.</param>
            <returns>The formatted integer value.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatHex(System.UInt32)">
            <summary>
            Function to format an unsigned integer value into a hexadecimal string.
            </summary>
            <param name="value">Unsigned integer value to format.</param>
            <returns>The formatted unsigned integer value.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatHex(System.Int64)">
            <summary>
            Function to format a long value into a hexadecimal string.
            </summary>
            <param name="value">Long value to format.</param>
            <returns>The formatted long value.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatHex(System.UInt64)">
            <summary>
            Function to format an unsigned long value into a hexadecimal string.
            </summary>
            <param name="value">Unsigned long value to format.</param>
            <returns>The formatted unsigned long value.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonNumericFormattingExtension.FormatHex(System.IntPtr)">
            <summary>
            Function to format a pointer (IntPtr) value into a hexadecimal string.
            </summary>
            <param name="pointer">Pointer to format.</param>
            <returns>The formatted address of the pointer.</returns>
            <remarks>This method will take into account whether the application is x64 or x86 and will format accordingly.</remarks>
        </member>
        <member name="T:GorgonLibrary.Diagnostics.PlatformArchitecture">
            <summary>
            CPU/OS platform type.
            </summary>
            <remarks>This is a replacement for the old PlatformID code in the 1.x version of </remarks>
        </member>
        <member name="F:GorgonLibrary.Diagnostics.PlatformArchitecture.x86">
            <summary>
            x86 architecture.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Diagnostics.PlatformArchitecture.x64">
            <summary>
            x64 architecture.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Diagnostics.GorgonComputerInfo">
            <summary>
            Information about the computer and operating system that is running Gorgon.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonComputerInfo.FolderPath(System.Environment.SpecialFolder)">
            <summary>
            Method to retrieve the path for a specialized folder.
            </summary>
            <param name="folder">Folder to return.</param>
            <returns>The path to the folder.</returns>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonComputerInfo.GetLogicalDrives">
            <summary>
            Method to retrieve a list of logical drives for the computer.
            </summary>
            <returns>A list of logical drives for the computer.</returns>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonComputerInfo.RefreshEnvironmentVariables">
            <summary>
            Method to refresh the list of user and machine specific environment variables.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonComputerInfo.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Diagnostics.GorgonComputerInfo"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.TotalPhysicalRAM">
            <summary>
            Property to return the total physical RAM available in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.AvailablePhysicalRAM">
            <summary>
            Property to return the available physical RAM in bytes.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.PlatformArchitecture">
            <summary>
            Property to return the platform that this instance of Gorgon was compiled for.
            </summary>
            <remarks>When the library is compiled for 64-bit processors, then this will read x64, otherwise it'll be x86.  If the platform cannot be determined it will return unknown.</remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.OperatingSystemArchitecture">
            <summary>
            Property to return the architecture of the Operating System that Gorgon is running on.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.ComputerName">
            <summary>
            Property to return the name for the computer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.OperatingSystemPlatform">
            <summary>
            Property to return the platform for the Operating System.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.OperatingSystemVersion">
            <summary>
            Property to return the version of the operating system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.OperatingSystemVersionText">
            <summary>
            Property to return the operating system version as a formatted text string.
            </summary>
            <remarks>This includes the platform, version number and service pack.</remarks>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.OperatingSystemServicePack">
            <summary>
            Property to return the service pack that is applied to the operating system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.ProcessorCount">
            <summary>
            Property to return the number of processors in the computer.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.SystemDirectory">
            <summary>
            Property to return the system directory for the operating system.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.SystemEnvironmentVariables">
            <summary>
            Property to return a list of machine specific environment variables.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonComputerInfo.UserEnvironmentVariables">
            <summary>
            Property to return a list of user specific environment variables.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Collections.Specialized.GorgonNamedObjectReadOnlyCollection`1">
            <summary>
            Read-only collection for Gorgon library named objects.
            </summary>
            <typeparam name="T">Type of object, must implement <see cref="T:GorgonLibrary.INamedObject">INamedObject</see>.</typeparam>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonNamedObjectReadOnlyCollection`1.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1"/> class.
            </summary>
            <param name="caseSensitive">TRUE if the key names are case sensitive, FALSE if not.</param>
            <param name="source">Collection to use as the source.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="source"/> parameter is NULL (or Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="source"/> parameter contains 0 items.</exception>
        </member>
        <member name="P:GorgonLibrary.Collections.Specialized.GorgonNamedObjectReadOnlyCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.Specialized.GorgonNamedObjectReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Property to return an object by its index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.Specialized.GorgonNamedObjectReadOnlyCollection`1.Item(System.String)">
            <summary>
            Property to return an object by its name.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Gorgon">
            <summary>
            The gorgon application.
            </summary>
            <remarks>Use this to replace the Application.Run(new Form()) method in the startup function.
            <para>The application uses an <see cref="P:GorgonLibrary.Gorgon.ApplicationIdleLoopMethod">idle loop method</see> to call the users code when it is running.  <see cref="P:GorgonLibrary.Gorgon.ApplicationForm">A form</see> may also be assigned as the primary form for the application.</para>
            <para>An application is started by calling its <see cref="M:GorgonLibrary.Gorgon.Run(System.Windows.Forms.Form,GorgonLibrary.ApplicationLoopMethod)">Run method</see>.  An application can be shut down by calling its <see cref="M:GorgonLibrary.Gorgon.Quit">Quit</see> method.  Applications with a main form will end when the form is closed.  
            Alternatively, the application can be terminated by returning FALSE from the idle loop method.</para>
            <para>Any objects created in Gorgon, such as the Graphics interface, will be destroyed when the application ends.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Application_Idle(System.Object,System.EventArgs)">
            <summary>
            Handles the Idle event of the Application control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Initialize">
            <summary>
            Method to initialize the main form and idle loop..
            </summary>
            <returns>TRUE if the application has signalled to quit before it starts running, FALSE to continue.</returns>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Application_ThreadExit(System.Object,System.EventArgs)">
            <summary>
            Handles the ThreadExit event of the Application control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Application_ApplicationExit(System.Object,System.EventArgs)">
            <summary>
            Handles the ApplicationExit event of the Application control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GorgonLibrary.Gorgon.CleanUp">
            <summary>
            Method to clean up after an application exits.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Quit">
            <summary>
            Method to quit the application.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Run(System.Windows.Forms.ApplicationContext,System.Func{System.Boolean})">
            <summary>
            Method to run a Gorgon application.
            </summary>
            <param name="context">Application context to use.</param>
            <param name="loop">Idle loop method for the application.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to both the <paramref name="context"/> and <paramref name="loop"/> parameters will raise an exception.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the mainForm and the loop parameters are NULL.
            <para>-or-</para>
            Thrown when the application is already in a <see cref="P:GorgonLibrary.Gorgon.IsRunning">running state</see>.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Run(System.Windows.Forms.ApplicationContext)">
            <summary>
            Method to run a Gorgon application.
            </summary>
            <param name="context">Application context to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="context"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the application is already in a <see cref="P:GorgonLibrary.Gorgon.IsRunning">running state</see>.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Run(System.Windows.Forms.Form,System.Func{System.Boolean})">
            <summary>
            Method to run a Gorgon application.
            </summary>
            <param name="mainForm">Form to use as the main form for the application.</param>
            <param name="loop">Idle loop method for the application.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to both the <paramref name="mainForm"/> and <paramref name="loop"/> parameters will raise an exception.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the mainForm and the loop parameters are NULL.
            <para>-or-</para>
            Thrown when the application is already in a <see cref="P:GorgonLibrary.Gorgon.IsRunning">running state</see>.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Run(System.Windows.Forms.Form)">
            <summary>
            Method to run a Gorgon application.
            </summary>
            <param name="mainForm">Form to use as the main form for the application.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="mainForm"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the application is already in a <see cref="P:GorgonLibrary.Gorgon.IsRunning">running state</see>.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.Run(System.Func{System.Boolean})">
            <summary>
            Method to run a Gorgon application.
            </summary>
            <param name="loop">Idle loop method for the application.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="loop"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the application is already in a <see cref="P:GorgonLibrary.Gorgon.IsRunning">running state</see>.</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.AddTrackedObject(System.IDisposable)">
            <summary>
            Function to add an object for tracking by the main Gorgon interface.
            </summary>
            <param name="trackedObject">Object to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="trackedObject"/> parameter is NULL (Nothing in VB.Net).</exception>
            <remarks>This allows Gorgon to track objects and destroy them upon <see cref="M:GorgonLibrary.Gorgon.Terminate">termination</see>.</remarks>
        </member>
        <member name="M:GorgonLibrary.Gorgon.RemoveTrackedObject(System.IDisposable)">
            <summary>
            Function to remove a tracked object from the Gorgon interface.
            </summary>
            <param name="trackedObject">Object to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="trackedObject"/> parameter is NULL (Nothing in VB.Net).</exception>
            <remarks>This will -not- destroy the tracked object.</remarks>
        </member>
        <member name="M:GorgonLibrary.Gorgon.GetTopLevelForm(System.Windows.Forms.Control)">
            <summary>
            Function to return the top level form that contains the child control.
            </summary>
            <param name="childControl">The child control that's nested within a base windows form.</param>
            <returns>The windows form that contains the control, or NULL (Nothing in VB.Net) if the control is not embedded on a form at some level.</returns>
            <remarks>If the childControl is a form, then the method will return the childControl instance.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="childControl"/> parameter is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.Gorgon.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Gorgon"/> class.
            </summary>
        </member>
        <member name="E:GorgonLibrary.Gorgon.Exit">
            <summary>
            Event fired when the application is about to exit.
            </summary>
            <remarks>Be sure to remove any event handlers assigned to this event within the event handler, otherwise the application may still retain memory and cause a leak.</remarks>
        </member>
        <member name="E:GorgonLibrary.Gorgon.ThreadExit">
            <summary>
            Event fired when a message pump thread is about to exit.
            </summary>
            <remarks>Be sure to remove any event handlers assigned to this event within the event handler, otherwise the application may still retain memory and cause a leak.</remarks>
        </member>
        <member name="P:GorgonLibrary.Gorgon.HasFocus">
            <summary>
            Property to return if the application has focus.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Gorgon.UnfocusedSleepTime">
            <summary>
            Property to set or return the amount of time in milliseconds to sleep when the application window is not focused.
            </summary>
            <remarks>
            Set this value to 0 to use all CPU time when the application is not focused.  The default is 10 milliseconds.
            <para>This is handy in situations when the application is in the background and processing does not need to continue.  For laptops this means battery savings when the application is not focused.
            </para>
            <para>This property is ignore when <see cref="P:GorgonLibrary.Gorgon.AllowBackground">AllowBackground</see> is set to FALSE.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Gorgon.AllowBackground">
            <summary>
            Property to allow the idle loop to continue running while the window is not focused or minimized.
            </summary>
            <remarks>This is set to TRUE by default, and this means that the code in the idle loop will continue to execute when the window is not focused or minimized.  When it is FALSE, the application will suspend until it regains focus.
            <para>There will be a delay for code that is executing in the background when the <see cref="P:GorgonLibrary.Gorgon.UnfocusedSleepTime">UnfocusedSleepTime</see> property is set greater than 0.</para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Gorgon.ApplicationIdleLoopMethod">
            <summary>
            Property to set or return the application idle loop.
            </summary>
            <remarks>This is used to call the users code when the application is in an idle state.
            </remarks>
        </member>
        <member name="P:GorgonLibrary.Gorgon.ApplicationDirectory">
            <summary>
            Property to return the directory for the currently running application.
            </summary>
            <remarks>This does not include the name of the assembly that is executing.</remarks>
        </member>
        <member name="P:GorgonLibrary.Gorgon.ApplicationPath">
            <summary>
            Property to return the path for the currently running application.
            </summary>
            <remarks>This includes the name of the assembly that is executing.</remarks>
        </member>
        <member name="P:GorgonLibrary.Gorgon.IsRunning">
            <summary>
            Property to return if the app is in a running state or not.
            </summary>
            <remarks>This flag is set to TRUE when the application is in a running state and FALSE when it is not.</remarks>
            <value>TRUE if the application is running, and FALSE if not.</value>
        </member>
        <member name="P:GorgonLibrary.Gorgon.ApplicationForm">
            <summary>
            Property to set or return the primary window for the application.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Gorgon.ApplicationContext">
            <summary>
            Property to set or return the application context.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Gorgon.Log">
            <summary>
            Property to return the library log file interface.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Gorgon.PlugIns">
            <summary>
            Property to return the plug-in factory interface.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Configuration.ApplicationSettingAttribute">
            <summary>
            An attribute defining whether a property is to be used as an application setting.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Configuration.ApplicationSettingAttribute.#ctor(System.String,System.Object,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Configuration.ApplicationSettingAttribute"/> class.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="propertyType">Type of property.</param>		
            <param name="section">Section for the setting.</param>
        </member>
        <member name="M:GorgonLibrary.Configuration.ApplicationSettingAttribute.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Configuration.ApplicationSettingAttribute"/> class.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="propertyType">Type of property.</param>		
        </member>
        <member name="M:GorgonLibrary.Configuration.ApplicationSettingAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Configuration.ApplicationSettingAttribute"/> class.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="propertyType">Type of property.</param>		
            <param name="section">Section for the setting.</param>
        </member>
        <member name="M:GorgonLibrary.Configuration.ApplicationSettingAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Configuration.ApplicationSettingAttribute"/> class.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="propertyType">Type of property.</param>		
        </member>
        <member name="P:GorgonLibrary.Configuration.ApplicationSettingAttribute.HasDefault">
            <summary>
            Property to return whether there's a default setting or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Configuration.ApplicationSettingAttribute.Section">
            <summary>
            Property to return the section for the setting.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Configuration.ApplicationSettingAttribute.SettingName">
            <summary>
            Property to return the name of the setting.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Configuration.ApplicationSettingAttribute.DefaultValue">
            <summary>
            Property to return the default value for the property.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Configuration.ApplicationSettingAttribute.PropertyType">
            <summary>
            Property to return the type of the property.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1">
            <summary>
            Base dictionary for Gorgon library named objects.
            </summary>
            <typeparam name="T">Type of object, must implement <see cref="T:GorgonLibrary.INamedObject">INamedObject</see>.</typeparam>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.AddItem(`0)">
            <summary>
            Function to add an item to the collection.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.AddItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Function to add several items to the list.
            </summary>
            <param name="items">IEnumerable containing the items to copy.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.GetItem(System.String)">
            <summary>
            Function to retrieve an item with the specified name.
            </summary>
            <param name="name">Name of the item to retrieve.</param>
            <returns>Item with the specified key.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.SetItem(System.String,`0)">
            <summary>
            Fnction to set an item with the specified name.
            </summary>
            <param name="name">Name of the object to set.</param>
            <param name="value">Value to set to the item.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.RemoveItem(System.String)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="name">Name of the item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.RemoveItem(`0)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.ClearItems">
            <summary>
            Function to remove all the items from the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.Contains(System.String)">
            <summary>
            Function to return whether an item with the specified name exists in this collection.
            </summary>
            <param name="name">Name of the item to find.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.Contains(`0)">
            <summary>
            Function to return whether the specified object exists in the collection.
            </summary>
            <param name="value">The value to find.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.ToArray">
            <summary>
            Function to copy the contents of the collection to an array.
            </summary>
            <returns>Array containing the contents of this collection.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1"/> class.
            </summary>
            <param name="caseSensitive">TRUE if the key names are case sensitive, FALSE if not.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#IDictionary{System#String@T}#Add(System.String,`0)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#IDictionary{System#String@T}#ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#IDictionary{System#String@T}#Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="array"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@T}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.Items">
            <summary>
            Property to return the list of items in the underlying collection.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.KeysAreCaseSensitive">
            <summary>
            Property to return whether the keys are case sensitive.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.IsReadOnly">
            <summary>
            Property to return whether the collection is read-only or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectDictionary`1.System#Collections#Generic#IDictionary{System#String@T}#Item(System.String)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection">
            <summary>
            A collection of custom objects that are managed by the another interface.
            </summary>
            <remarks>This collection is intended for use by objects that manage the lifetimes of any child objects created from it.</remarks>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.ReleaseAll">
            <summary>
            Function to clean up all objects in the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.IndexOf(System.IDisposable)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.System#Collections#Generic#IList{System#IDisposable}#Insert(System.Int32,System.IDisposable)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.System#Collections#Generic#IList{System#IDisposable}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.Add(System.IDisposable)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.System#Collections#Generic#ICollection{System#IDisposable}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.Contains(System.IDisposable)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.System#Collections#Generic#ICollection{System#IDisposable}#CopyTo(System.IDisposable[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.Remove(System.IDisposable)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
              </returns>
              
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="P:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.Specialized.GorgonTrackedObjectCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:GorgonLibrary.PlugIns.GorgonPlugInPathCollection">
            <summary>
            Collection to hold search paths for plug-ins.
            </summary>
            <remarks>By default, this object is initialized with multiple search paths, in order of preference.  These search paths are:
            <para>
            <list type="number">
            <item><description>The directory of the executable.</description></item>
            <item><description>The working directory of the executable.</description></item>
            <item><description>The system directory.</description></item>
            <item><description>The directories listed in the PATH environment variable.</description></item>
            </list>
            </para>
            <para>Calling the <see cref="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.Clear">Clear</see> method will remove these paths and give an empty collection.  
            Call the <see cref="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.GetDefaultPaths">GetDefaultPaths</see> method to restore these paths.</para>
            </remarks>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.ValidatePath(System.String)">
            <summary>
            Function to validate the path.
            </summary>
            <param name="path">Path to validate.</param>
            <returns>The validated path.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.Remove(System.String)">
            <summary>
            Function to remove a path entry.
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.Remove(System.Int32)">
            <summary>
            Function to remove a path entry by index.
            </summary>
            <param name="index">Index of the path to remove.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.GetDefaultPaths">
            <summary>
            Function to append the default paths to the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.PlugIns.GorgonPlugInPathCollection"/> class.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.IndexOf(System.String)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.System#Collections#Generic#IList{System#String}#RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.System#Collections#Generic#ICollection{System#String}#Remove(System.String)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.Add(System.String)">
            <summary>
            Function add a new path to the collection.
            </summary>
            <param name="item">The item.</param>
            <remarks>If the path is already in the collection, it will not be added again.</remarks>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.Clear">
            <summary>
            Function to clear the collection.
            </summary>
            <remarks>Note that this will not restore the default search paths.  Call <see cref="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.GetDefaultPaths">GetDefaultPaths</see> method to restore those paths.</remarks>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.Contains(System.String)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.System#Collections#Generic#ICollection{System#String}#CopyTo(System.String[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:GorgonLibrary.PlugIns.GorgonPlugInPathCollection.System#Collections#Generic#ICollection{System#String}#IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:GorgonLibrary.GorgonCancelEventArgs">
            <summary>
            A base cancel event argument.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonCancelEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonCancelEventArgs"/> class.
            </summary>
            <param name="cancel">TRUE if the operation should be canceled, FALSE if not.</param>
        </member>
        <member name="P:GorgonLibrary.GorgonCancelEventArgs.Cancel">
            <summary>
            Property to set or return whether an operation should be canceled or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Configuration.GorgonApplicationSettings">
            <summary>
            A base class used to handle settings for an application.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.ResetXML">
            <summary>
            Function to reset the XML data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.ConvertValue(System.Object)">
            <summary>
            Function to convert the specified value into a string.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>The string value for the object.</returns>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.UnconvertValue(System.String,System.Type)">
            <summary>
            Function to convert the specified value from a string.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="type">Type to convert into.</param>
            <returns>The value for the object.</returns>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.SerializeSettings">
            <summary>
            Function to serialize the property settings.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.DeserializeSettings">
            <summary>
            Function to deserialize the XML data into the properties used for the settings.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.GetProperties">
            <summary>
            Function to retrieve the properties.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.CheckVersion">
            <summary>
            Function to compare version numbers.
            </summary>
            <returns>TRUE if the versions match, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.GetSectionElement(System.String)">
            <summary>
            Function to return the section element defined by the name.
            </summary>
            <param name="sectionName">Name of the section to retrieve.</param>
            <returns>The element with the section name.</returns>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.AddSection(System.String,System.String)">
            <summary>
            Function to add a section to the configuration.
            </summary>
            <param name="section">Section that will contain the new section.</param>
            <param name="name">Name of the section.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> parameter was NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the applicationName parameter is empty or the <paramref name="section"/> does not exist.</exception>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.GetSettings(System.String,System.String,System.Type)">
            <summary>
            Function to retrieve multiple settings with the same name.
            </summary>
            <param name="section">Section the settings reside under.</param>
            <param name="settingName">Name of the setting to retrieve.</param>
            <param name="valueType">Type of values stored in the collection.</param>
            <returns>A list containing the settings with the name specified in <paramref name="settingName"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="settingName"/> parameter was NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the settingName parameter is empty or the <paramref name="section"/> or the <paramref name="settingName"/> could not be found.</exception>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.GetSetting(System.String,System.String,System.Type)">
            <summary>
            Function to retrieve a setting from the configuration.
            </summary>
            <param name="section">Name of the section that the setting belongs in.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="valueType">The value type.</param>
            <returns>The value in the setting.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="settingName"/> parameter was NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the settingName parameter is empty or the <paramref name="section"/> or the <paramref name="settingName"/> could not be found.</exception>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.UpdateSetting(System.String,System.String,System.String)">
            <summary>
            Function to update an existing setting.
            </summary>
            <param name="section">Section that the setting belongs in.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="value">Value for the setting.</param>
            <remarks>If the setting does not exist, it will be added.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="settingName"/> parameter was NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the settingName parameter is empty or the <paramref name="section"/> could not be found.</exception>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.Save">
            <summary>
            Function to save the settings to a file.
            </summary>
            <remarks>No versioning will be applied to the settings file when the <see cref="P:GorgonLibrary.Configuration.GorgonApplicationSettings.Version">Version</see> property is NULL (Nothing in VB.Net).</remarks>
            <exception cref="T:GorgonLibrary.GorgonException">Thrown when the file being saved is not of the same format as an Gorgon application setting file.</exception>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.Load">
            <summary>
            Function to load the settings from a file.
            </summary>
            <remarks>If a <see cref="P:GorgonLibrary.Configuration.GorgonApplicationSettings.Version">Version</see> is specified and the version of the loaded settings file 
            is not the same, then the settings are reset to their initial values.</remarks>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.Clear">
            <summary>
            Function to clear the settings.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonApplicationSettings.#ctor(System.String,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Configuration.GorgonApplicationSettings"/> class.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="settingsVersion">The version of the settings file.</param>
            <remarks>Passing NULL (Nothing in VB.Net) to the <paramref name="settingsVersion"/> parameter will bypass version checking for the settings.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="applicationName"/> parameter was NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the applicationName parameter is empty.</exception>
        </member>
        <member name="P:GorgonLibrary.Configuration.GorgonApplicationSettings.Version">
            <summary>
            Property to set or return the application settings version.
            </summary>
            <remarks>Assigning NULL (Nothing in VB.Net) will bypass version checking.</remarks>
        </member>
        <member name="T:GorgonLibrary.Native.WindowMessages">
            <summary>
            Types of messages that passed to a window.
            </summary>
            <remarks>See the MSDN documentation for more detail.</remarks>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SysCommand">
            <summary>System command (WM_SYSCOMMAND)</summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Quit">
            <summary>Quit command (WM_QUIT)</summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Size">
            <summary>Window has been resized. (WM_SIZE)</summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.QueryDragIcon">
            <summary>Query the drag icon. (WM_QUERYDRAGICON)</summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.GetIcon">
            <summary>Get the window icon. (WM_GETICON)</summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SetIcon">
            <summary>Set the window icon. (WM_SETICON)</summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NULL">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Create">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Destroy">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Move">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Activate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SetFocus">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.KillFocus">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Enable">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SetRedraw">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SetText">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.GetText">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.GetTextLength">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Paint">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Close">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.QueryEndSession">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.QueryOpen">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.EraseBackground">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SystemColorChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.EndSession">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ShowWindow">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ControlColor">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.WinINIChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SettingChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.DeviceModeChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ActivateApplication">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.FontChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.TimeChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.CancelMode">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SetCursor">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MouseActivate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ChildActivate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.QueueSync">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.GetMinMaxInformation">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.PaintIcon">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IconEraseBackground">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NextDialogControl">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SpoolerStatus">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.DrawItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MeasureItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.DeleteItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.VKeyToItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.CharToItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SetFont">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.GetFont">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SetHotKey">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.GetHotKey">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.CompareItem">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.GetObject">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Compacting">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.COMMNotify">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.WindowPositionChanging">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.WindowPositionChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Power">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.CopyData">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.CancelJournal">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Notify">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.InputLanguageChangeRequest">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.InputLanguageChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.TCard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Help">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.UserChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NotifyFormat">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ContextMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.StyleChanging">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.StyleChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.DisplayChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCCreate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCDestroy">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCCalcSize">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCHitTest">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCPaint">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCActivate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.GetDialogCode">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SynchronizePaint">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCMouseMove">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCLeftButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCLeftButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCLeftButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCRightButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCRightButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCRightButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCMiddleButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCMiddleButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NCMiddleButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.KeyDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.KeyUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Char">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.DeadChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SysKeyDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SysKeyUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SysChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SysDeadChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.KeyLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMEStartComposition">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMEEndComposition">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMEComposition">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMEKeyLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.InitializeDialog">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Command">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Timer">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.HorizontalScroll">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.VerticalScroll">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.InitializeMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.InitializeMenuPopup">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MenuSelect">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MenuChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.EnterIdle">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MenuRightButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MenuDrag">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MenuGetObject">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.UnInitializeMenuPopup">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MenuCommand">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ControlColorMessageBox">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ControlColorEdit">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ControlColorListBox">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ControlColorButton">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ControlColorDialog">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ControlColorScrollbar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ControlColorStatic">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MouseMove">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.LeftButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.LeftButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.LeftButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.RightButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.RightButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.RightButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MiddleButtonDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MiddleButtonUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MiddleButtonDoubleClick">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MouseWheel">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ParentNotify">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.EnterMenuLoop">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ExitMenuLoop">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.NextMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Sizing">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.CaptureChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Moving">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.DeviceChange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDICreate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDIDestroy">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDIActivate">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDIRestore">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDINext">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDIMaximize">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDITile">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDICacade">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDIIconArrange">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDIGetActive">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDISetMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.EnterSizeMove">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ExitSizeMove">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.DropFiles">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MDIRefreshMenu">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMESetContext">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMENotify">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMEControl">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMECompositionFull">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMESelect">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMEChar">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMERequest">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMEKeyDown">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.IMEKeyUp">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MouseHover">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.MouseLeave">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Cut">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Copy">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Paste">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Clear">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Undo">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.RenderFormat">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.RenderAllFormats">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.DestroyClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.DrawClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Paintclipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.VerticalScrollClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.SizeClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.AskClipboardFormatName">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.ChangeClipboardChain">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.HorizontalScrollClipboard">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.QueryNewPalette">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.PaletteIsChanging">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.PaletteChanged">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.HotKey">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Print">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.PrintClient">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.HandheldFirst">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.HandheldLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.AFXFirst">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.AFXLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.PenWindowFirst">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.PenWindowLast">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.Application">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.User">
            <summary></summary>
        </member>
        <member name="F:GorgonLibrary.Native.WindowMessages.RawInput">
            <summary></summary>
        </member>
        <member name="T:GorgonLibrary.Native.SysCommands">
            <summary>
            Types of System commands.
            </summary>
            <remarks>
            See the MSDN documentation for more detail.
            <para>
            These are often used with the WM_SYSCOMMAND message.
            </para>
            </remarks>
        </member>
        <member name="F:GorgonLibrary.Native.SysCommands.ScreenSave">
            <summary>Screen saver. (SC_SCREENSAVE)</summary>
        </member>
        <member name="F:GorgonLibrary.Native.SysCommands.MonitorPower">
            <summary>Monitor power saving. (SC_MONITORPOWER)</summary>
        </member>
        <member name="T:GorgonLibrary.Native.PeekMessageFlags">
            <summary>
            Flags for PeekMessage method.
            </summary>
            <remarks>See the MSDN documentation for more detail.</remarks>
        </member>
        <member name="F:GorgonLibrary.Native.PeekMessageFlags.NoRemove">
            <summary>Keep message on the message queue.</summary>
        </member>
        <member name="F:GorgonLibrary.Native.PeekMessageFlags.Remove">
            <summary>Remove message from the queue.</summary>
        </member>
        <member name="F:GorgonLibrary.Native.PeekMessageFlags.NoYield">
            <summary>Do not yield execution to waiting threads.</summary>
        </member>
        <member name="T:GorgonLibrary.Native.ListViewMessages">
            <summary>
            List view flags.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.ListViewMessages.LVM_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.ListViewMessages.LVM_GETHEADER">
            <summary>
            
            </summary>
        </member>
        <member name="T:GorgonLibrary.Native.HeaderMessages">
            <summary>
            Header column flags.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HeaderMessages.HDM_FIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HeaderMessages.HDM_GETITEM">
            <summary>
            
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HeaderMessages.HDM_SETITEM">
            <summary>
            
            </summary>
        </member>
        <member name="T:GorgonLibrary.Native.HeaderMask">
            <summary>
            Mask values for header.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HeaderMask.Format">
            <summary>
            HDI_FORMAT
            </summary>
        </member>
        <member name="T:GorgonLibrary.Native.HeaderFormat">
            <summary>
            Format values for header.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HeaderFormat.SortDown">
            <summary>
            HDF_SORTDOWN
            </summary>
        </member>
        <member name="F:GorgonLibrary.Native.HeaderFormat.SortUp">
            <summary>
            HDF_SORTUP
            </summary>
        </member>
        <member name="T:GorgonLibrary.Math.GorgonMathExtensions">
            <summary>
            Extensions for mathematical operations on single floating point values.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.Byte,System.Byte)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.Byte,System.Byte)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.UInt16,System.UInt16)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.UInt16,System.UInt16)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.Int16,System.Int16)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.Int16,System.Int16)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.UInt32,System.UInt32)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.UInt32,System.UInt32)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.Int32,System.Int32)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.Int32,System.Int32)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.UInt64,System.UInt64)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.UInt64,System.UInt64)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.Int64,System.Int64)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.Int64,System.Int64)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.Single,System.Single)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.Single,System.Single)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.Double,System.Double)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.Double,System.Double)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Max(System.Decimal,System.Decimal)">
            <summary>
            Function to return the maximum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The larger of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Min(System.Decimal,System.Decimal)">
            <summary>
            Function to return the minimum value between this value and another value.
            </summary>
            <param name="value1">This value to test.</param>
            <param name="value2">The secondary value to test.</param>
            <returns>The smaller of the two values.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Abs(System.Int16)">
            <summary>
            Function to return the absolute value of a floating point value.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Abs(System.Int32)">
            <summary>
            Function to return the absolute value of a floating point value.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Abs(System.Int64)">
            <summary>
            Function to return the absolute value of a floating point value.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Abs(System.Double)">
            <summary>
            Function to return the absolute value of a floating point value.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Abs(System.Decimal)">
            <summary>
            Function to return the absolute value of a floating point value.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Abs(System.Single)">
            <summary>
            Function to return the absolute value of a floating point value.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Round(System.Single)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <returns>The rounded floating point value.</returns>
            <remarks>This uses MidpointRounding.ToEven (Bankers rounding) as the default for consistency with the System.Math.Round method.</remarks>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Round(System.Single,System.Int32)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <param name="decimalCount">Number of decimal places to return.</param>
            <returns>The rounded floating point value.</returns>
            <remarks>This uses MidpointRounding.ToEven (Bankers rounding) as the default for consistency with the System.Math.Round method.</remarks>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Round(System.Single,System.Int32,System.MidpointRounding)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <param name="decimalCount">Number of decimal places to return.</param>
            <param name="rounding">Determines how to round mid point numbers.</param>
            <returns>The rounded floating point value.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Round(System.Decimal)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <returns>The rounded floating point value.</returns>
            <remarks>This uses MidpointRounding.ToEven (Bankers rounding) as the default for consistency with the System.Math.Round method.</remarks>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Round(System.Decimal,System.Int32)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <param name="decimalCount">Number of decimal places to return.</param>
            <returns>The rounded floating point value.</returns>
            <remarks>This uses MidpointRounding.ToEven (Bankers rounding) as the default for consistency with the System.Math.Round method.</remarks>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Round(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <param name="decimalCount">Number of decimal places to return.</param>
            <param name="rounding">Determines how to round mid point numbers.</param>
            <returns>The rounded floating point value.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Round(System.Double)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <returns>The rounded floating point value.</returns>
            <remarks>This uses MidpointRounding.ToEven (Bankers rounding) as the default for consistency with the System.Math.Round method.</remarks>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Round(System.Double,System.Int32)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <param name="decimalCount">Number of decimal places to return.</param>
            <returns>The rounded floating point value.</returns>
            <remarks>This uses MidpointRounding.ToEven (Bankers rounding) as the default for consistency with the System.Math.Round method.</remarks>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Function to round a floating point value.
            </summary>
            <param name="value">Value to round.</param>
            <param name="decimalCount">Number of decimal places to return.</param>
            <param name="rounding">Determines how to round mid point numbers.</param>
            <returns>The rounded floating point value.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Degrees(System.Single)">
            <summary>
            Function to convert this radian value into degrees.
            </summary>
            <param name="radians">Radian value to convert.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Radians(System.Single)">
            <summary>
            Function to convert this degree angle value into radians.
            </summary>
            <param name="degrees">Degree angle value to convert.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Degrees(System.Decimal)">
            <summary>
            Function to convert this radian value into degrees.
            </summary>
            <param name="radians">Radian value to convert.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Radians(System.Decimal)">
            <summary>
            Function to convert this degree angle value into radians.
            </summary>
            <param name="degrees">Degree angle value to convert.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Degrees(System.Double)">
            <summary>
            Function to convert this radian value into degrees.
            </summary>
            <param name="radians">Radian value to convert.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Radians(System.Double)">
            <summary>
            Function to convert this degree angle value into radians.
            </summary>
            <param name="degrees">Degree angle value to convert.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.EqualsEpsilon(System.Single,System.Single)">
            <summary>
            Function to determine if this floating point value is equal to another within a given delta range.
            </summary>
            <param name="left">Left value to compare.</param>
            <param name="right">Right value to compare.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.EqualsEpsilon(System.Single,System.Single,System.Single)">
            <summary>
            Function to determine if this floating point value is equal to another within a given delta range.
            </summary>
            <param name="left">Left value to compare.</param>
            <param name="right">Right value to compare.</param>
            <param name="delta">Delta to account for error between the two values.</param>
            <returns>TRUE if equal, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.InverseSqrt(System.Double)">
            <summary>
            Function to return the square root of this floating point value.
            </summary>
            <param name="value">Value to get the square root of.</param>
            <returns>The square root of the value.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.InverseSqrt(System.Single)">
            <summary>
            Function to return the square root of this floating point value.
            </summary>
            <param name="value">Value to get the square root of.</param>
            <returns>The square root of the value.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Sqrt(System.Double)">
            <summary>
            Function to return the square root of this floating point value.
            </summary>
            <param name="value">Value to get the square root of.</param>
            <returns>The square root of the value.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Sqrt(System.Single)">
            <summary>
            Function to return the square root of this floating point value.
            </summary>
            <param name="value">Value to get the square root of.</param>
            <returns>The square root of the value.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Sin(System.Single)">
            <summary>
            Function to return the sin of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the sin value from.</param>
            <returns>The sin value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Cos(System.Single)">
            <summary>
            Function to return the cosine of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the cosine value from.</param>
            <returns>The cosine value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Tan(System.Single)">
            <summary>
            Function to return the tangent of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the tangent from.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ASin(System.Single)">
            <summary>
            Function to return the arc sin of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the arc sin value from.</param>
            <returns>The sin value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ACos(System.Single)">
            <summary>
            Function to return the arccosine of an angle, in radians.
            </summary>
            <param name="angle">Angle,in radians, to retrieve the arc cosine value from.</param>
            <returns>The cosine value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ATan(System.Single)">
            <summary>
            Function to return the arc tangent of an angle, in radians.
            </summary>
            <param name="angle">Angle,in radians, to retrieve the arc tangent value from.</param>
            <returns>The arc tangent of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ATan(System.Single,System.Single)">
            <summary>
            Function to return the arc tangent of a slope.
            </summary>
            <param name="y">Vertical slope value to retrieve the arc tangent from.</param>
            <param name="x">Horizontal slope value to retrieve the arc tangent from.</param>
            <returns>The arc tangent of the slope.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Sin(System.Decimal)">
            <summary>
            Function to return the sin of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the sin value from.</param>
            <returns>The sin value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Cos(System.Decimal)">
            <summary>
            Function to return the cosine of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the cosine value from.</param>
            <returns>The cosine value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Tan(System.Decimal)">
            <summary>
            Function to return the tangent of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the tangent from.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ASin(System.Decimal)">
            <summary>
            Function to return the arc sin of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the arc sin value from.</param>
            <returns>The sin value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ACos(System.Decimal)">
            <summary>
            Function to return the arccosine of an angle, in radians.
            </summary>
            <param name="angle">Angle,in radians, to retrieve the arc cosine value from.</param>
            <returns>The cosine value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ATan(System.Decimal)">
            <summary>
            Function to return the arc tangent of an angle, in radians.
            </summary>
            <param name="angle">Angle,in radians, to retrieve the arc tangent value from.</param>
            <returns>The arc tangent of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ATan(System.Decimal,System.Decimal)">
            <summary>
            Function to return the arc tangent of a slope.
            </summary>
            <param name="y">Vertical slope value to retrieve the arc tangent from.</param>
            <param name="x">Horizontal slope value to retrieve the arc tangent from.</param>
            <returns>The arc tangent of the slope.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Sin(System.Double)">
            <summary>
            Function to return the sin of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the sin value from.</param>
            <returns>The sin value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Cos(System.Double)">
            <summary>
            Function to return the cosine of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the cosine value from.</param>
            <returns>The cosine value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Tan(System.Double)">
            <summary>
            Function to return the tangent of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the tangent from.</param>
            <returns></returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ASin(System.Double)">
            <summary>
            Function to return the arc sin of an angle, in radians.
            </summary>
            <param name="angle">Angle, in radians, to retrieve the arc sin value from.</param>
            <returns>The sin value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ACos(System.Double)">
            <summary>
            Function to return the arccosine of an angle, in radians.
            </summary>
            <param name="angle">Angle,in radians, to retrieve the arc cosine value from.</param>
            <returns>The cosine value of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ATan(System.Double)">
            <summary>
            Function to return the arc tangent of an angle, in radians.
            </summary>
            <param name="angle">Angle,in radians, to retrieve the arc tangent value from.</param>
            <returns>The arc tangent of the angle.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.ATan(System.Double,System.Double)">
            <summary>
            Function to return the arc tangent of a slope.
            </summary>
            <param name="y">Vertical slope value to retrieve the arc tangent from.</param>
            <param name="x">Horizontal slope value to retrieve the arc tangent from.</param>
            <returns>The arc tangent of the slope.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Exp(System.Double)">
            <summary>
            Function to take e raised to the power passed in.
            </summary>
            <param name="power">Value to take e from.</param>
            <returns><c>e</c> raised to the power specified.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Pow(System.Double,System.Double)">
            <summary>
            Function to raise a value to a specified power.
            </summary>
            <param name="value">Value to raise.</param>
            <param name="power">Power to raise up to.</param>
            <returns>The value raised to the power.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Exp(System.Decimal)">
            <summary>
            Function to take e raised to the power passed in.
            </summary>
            <param name="power">Value to take e from.</param>
            <returns><c>e</c> raised to the power specified.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Pow(System.Decimal,System.Decimal)">
            <summary>
            Function to raise a value to a specified power.
            </summary>
            <param name="value">Value to raise.</param>
            <param name="power">Power to raise up to.</param>
            <returns>The value raised to the power.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Exp(System.Single)">
            <summary>
            Function to take e raised to the power passed in.
            </summary>
            <param name="power">Value to take e from.</param>
            <returns><c>e</c> raised to the power specified.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.Pow(System.Single,System.Single)">
            <summary>
            Function to raise a value to a specified power.
            </summary>
            <param name="value">Value to raise.</param>
            <param name="power">Power to raise up to.</param>
            <returns>The value raised to the power.</returns>
        </member>
        <member name="M:GorgonLibrary.Math.GorgonMathExtensions.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Math.GorgonMathExtensions"/> class.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1">
            <summary>
            Base list type for Gorgon library named objects.
            </summary>
            <typeparam name="T">Type of object, must implement <see cref="T:GorgonLibrary.INamedObject">INamedObject</see>.</typeparam>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.GetItem(System.Int32)">
            <summary>
            Function to retrieve the item at the specified index.
            </summary>
            <param name="index">Index of the item to retrieve.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.GetItem(System.String)">
            <summary>
            Function to retrieve the item by its name.
            </summary>
            <param name="name">Name of the item to find.</param>
            <returns>The item with the specified name.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.SetItem(System.Int32,`0)">
            <summary>
            Function to set an item at the specified index.
            </summary>
            <param name="index">Index of the item to set.</param>
            <param name="value">Value to set the item.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.SetItem(`0)">
            <summary>
            Function to set an item at the specified index.
            </summary>
            <param name="value">Value used to set the item with.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.AddItem(`0)">
            <summary>
            Function to add an item to the collection.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.RemoveItem(System.Int32)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.RemoveItem(`0)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.InsertItem(System.Int32,`0)">
            <summary>
            Function to insert an item into the list.
            </summary>
            <param name="index">Index to insert at.</param>
            <param name="value">Value to insert.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.ClearItems">
            <summary>
            Function to remove all the items from the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.AddItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Function to add items to the list.
            </summary>
            <param name="items">List of items to add.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Function to insert items into the list at a given index.
            </summary>
            <param name="index">Index to insert at.</param>
            <param name="items">Items to add.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.ToArray">
            <summary>
            Function to return an array of the items in this collection.
            </summary>
            <returns>The array of items.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.Contains(System.String)">
            <summary>
            Function to return whether an item with the specified name exists in this collection.
            </summary>
            <param name="name">Name of the item to find.</param>
            <returns>TRUE if found, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.IndexOf(System.String)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="name">Name of the item to find.</param>
            <returns>
            The index of <paramref name="name"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1"/> class.
            </summary>
            <param name="isCaseSensitive">TRUE to use case sensitive keys, FALSE to ignore casing.</param>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Collections.GorgonBaseNamedObjectCollection`1"/> class.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="array"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.Items">
            <summary>
            Property to return the list of items in the underlying collection.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.KeysAreCaseSensitive">
            <summary>
            Property to return whether the keys are case sensitive.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Property to set or return the item at the specified index.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:GorgonLibrary.Collections.GorgonBaseNamedObjectList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:GorgonLibrary.INotifier">
            <summary>
            An interface used to define an object that can notify other objects of a change.
            </summary>
        </member>
        <member name="P:GorgonLibrary.INotifier.HasChanged">
            <summary>
            Property to set or return whether an object has been updated.
            </summary>
        </member>
        <member name="T:GorgonLibrary.PlugIns.PlugInSigningResult">
            <summary>
            The return values for the <see cref="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.IsPlugInSigned">IsPlugInSigned</see> method.
            </summary>
        </member>
        <member name="F:GorgonLibrary.PlugIns.PlugInSigningResult.NotSigned">
            <summary>
            Assembly is not signed.  This flag is mutally exclusive.
            </summary>
        </member>
        <member name="F:GorgonLibrary.PlugIns.PlugInSigningResult.Signed">
            <summary>
            Assembly is signed, and if it was requested, the key matches.
            </summary>
        </member>
        <member name="F:GorgonLibrary.PlugIns.PlugInSigningResult.KeyMismatch">
            <summary>
            This flag is combined with the Signed flag to indicate that it was signed, but the keys did not match.
            </summary>
        </member>
        <member name="T:GorgonLibrary.PlugIns.GorgonPlugInFactory">
            <summary>
            A collection to add, remove and keep track of plug-in interfaces.
            </summary>
            <remarks>Use this object to control loading and unloading of plug-ins.
            <para>This collection is not case-sensitive.</para></remarks>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.CheckDisposable(GorgonLibrary.PlugIns.GorgonPlugIn)">
            <summary>
            Function to determine if a plug-in implements <see cref="T:System.IDisposable">IDisposable</see> and dispose the object if it does.
            </summary>
            <param name="plugIn">Plug-in to check and dispose.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.RemoveItem(System.Int32)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.RemoveItem(GorgonLibrary.PlugIns.GorgonPlugIn)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.RemoveItem(System.String)">
            <summary>
            Function to remove an item from the collection.
            </summary>
            <param name="name">Name of the item to remove.</param>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.ClearItems">
            <summary>
            Function to remove all the items from the collection.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.EnumeratePlugIns(System.Reflection.AssemblyName)">
            <summary>
            Function to retrieve the list of plug-ins associated with a specific assembly.
            </summary>
            <param name="assemblyName">Name of the assembly to filter.</param>
            <returns>A read-only list of plug-ins.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.UnloadAll">
            <summary>
            Function to unload all the plug-ins.
            </summary>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.Unload(System.String)">
            <summary>
            Function to remove a plug-in by index.
            </summary>
            <param name="name">Name of the plug-in to remove.</param>
            <exception cref="T:System.ArgumentNullException">The <paramRef name="name"/> was NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">The name was an empty string..</exception>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.Unload(System.Int32)">
            <summary>
            Function to remove a plug-in by index.
            </summary>
            <param name="index">Index of the plug-in to remove.</param>
            <exception cref="T:System.IndexOutOfRangeException">The <paramRef name="index"/> parameter was less than 0 or greater than or equal to <see cref="P:Engine.PlugIns.EnginePlugInList.Count">Count</see>.</exception>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.Unload(GorgonLibrary.PlugIns.GorgonPlugIn)">
            <summary>
            Function to remove a plug-in.
            </summary>
            <param name="plugIn">Plug-in to remove.</param>
            <exception cref="T:System.ArgumentNullException">The <paramRef name="plugIn"/> parameter was NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.IsPlugInSigned(System.Reflection.AssemblyName,System.Byte[])">
            <summary>
            Function to determine if a plug-in is signed, and optionally, signed with the correct public key.
            </summary>
            <param name="assemblyName">Name of the assembly to check.</param>
            <param name="publicKey">Public key to compare, or NULL (Nothing in VB.Net) to bypass the key comparison.</param>
            <returns>One of the values in the <seealso cref="T:GorgonLibrary.PlugIns.PlugInSigningResult">PlugInSigningResult</seealso> enumeration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="assemblyName"/> parameter is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.IsPlugInSigned(System.Reflection.AssemblyName)">
            <summary>
            Function to determine if a plug-in is signed, and optionally, signed with the correct public key.
            </summary>
            <param name="assemblyName">Name of the assembly to check.</param>
            <returns>One of the values in the <seealso cref="T:GorgonLibrary.PlugIns.PlugInSigningResult">PlugInSigningResult</seealso> enumeration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="assemblyName"/> parameter is NULL (Nothing in VB.Net).</exception>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.IsPlugInSigned(System.String,System.Byte[])">
            <summary>
            Function to determine if a plug-in is signed, and optionally, signed with the correct public key.
            </summary>
            <param name="assemblyPath">Path to the assembly to check.</param>
            <param name="publicKey">Public key to compare, or NULL (Nothing in VB.Net) to bypass the key comparison.</param>
            <returns>One of the values in the <seealso cref="T:GorgonLibrary.PlugIns.PlugInSigningResult">PlugInSigningResult</seealso> enumeration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="assemblyPath"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="assemblyPath"/> parameter is an empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the file could not be located on any of the <see cref="P:GorgonLibrary.PlugIns.GorgonPlugInFactory.SearchPaths">search paths</see> (including the path provided in the parameter).</exception>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.IsPlugInSigned(System.String)">
            <summary>
            Function to determine if a plug-in is signed, and optionally, signed with the correct public key.
            </summary>
            <param name="assemblyPath">Path to the assembly to check.</param>
            <returns>One of the values in the <seealso cref="T:GorgonLibrary.PlugIns.PlugInSigningResult">PlugInSigningResult</seealso> enumeration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="assemblyPath"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="assemblyPath"/> parameter is an empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the file could not be located on any of the <see cref="P:GorgonLibrary.PlugIns.GorgonPlugInFactory.SearchPaths">search paths</see> (including the path provided in the parameter).</exception>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.LoadPlugInAssembly(System.String)">
            <summary>
            Function to load a plug-in assembly.
            </summary>
            <param name="assemblyPath">Path to the assembly.</param>
            <remarks>If the assembly file cannot be found, then the paths in the <see cref="P:GorgonLibrary.PlugIns.GorgonPlugInFactory.SearchPaths">SearchPaths</see> collection are used to find the assembly.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="assemblyPath"/> is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="assemblyPath"/> is an empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the file could not be located on any of the search paths (including the path provided in the parameter).</exception>
            <exception cref="T:GorgonLibrary.GorgonException">The assembly contains a plug-in type that was already loaded by another assembly.</exception>
            <returns>The fully qualified assembly name object for the assembly being loaded.</returns>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.LoadPlugInAssembly(System.Reflection.AssemblyName)">
            <summary>
            Function to load a plug-in assembly.
            </summary>
            <param name="assemblyName">Name of the assembly to load.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="assemblyName"/> is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:GorgonLibrary.GorgonException">The assembly contains a plug-in type that was already loaded by another assembly.</exception>
        </member>
        <member name="M:GorgonLibrary.PlugIns.GorgonPlugInFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.PlugIns.GorgonPlugInFactory"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.PlugIns.GorgonPlugInFactory.SearchPaths">
            <summary>
            Property to return the list of search paths to use.
            </summary>
            <remarks>The plug-in factory uses these paths to search for the plug-in when the plug-in cannot be found.
            <para>By default, the plug-in factory checks (in order):
            <list type="number">
            <item><description>The directory of the executable.</description></item>
            <item><description>The working directory of the executable.</description></item>
            <item><description>The system directory.</description></item>
            <item><description>The directories listed in the PATH environment variable.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:GorgonLibrary.PlugIns.GorgonPlugInFactory.Item(System.Int32)">
            <summary>
            Property to return a plug-in by its index in the list.
            </summary>
            <param name="index">Index of the plug-in.</param>
        </member>
        <member name="P:GorgonLibrary.PlugIns.GorgonPlugInFactory.Item(System.String)">
            <summary>
            Property to return a plug-in by its name.
            </summary>
            <param name="name">The friendly name of the plug-in or the fully qualified type name of the plug-in.</param>
        </member>
        <member name="T:GorgonLibrary.IRange`1">
            <summary>
            Interface used to define a range type.
            </summary>
            <typeparam name="T">Type of values stored in the range.</typeparam>
        </member>
        <member name="P:GorgonLibrary.IRange`1.Range">
            <summary>
            Property to return the range between the two values.
            </summary>
        </member>
        <member name="P:GorgonLibrary.IRange`1.IsEmpty">
            <summary>
            Property to return whether the value is empty or not.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonMinMaxD">
            <summary>
            Value type to indicate a range of double values.
            </summary>
        </member>
        <member name="F:GorgonLibrary.GorgonMinMaxD.Minimum">
            <summary>
            Minimum value in the range.
            </summary>
        </member>
        <member name="F:GorgonLibrary.GorgonMinMaxD.Maximum">
            <summary>
            Maximum value in the range.
            </summary>
        </member>
        <member name="F:GorgonLibrary.GorgonMinMaxD.Empty">
            <summary>
            Empty range.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Contains(System.Double)">
            <summary>
            Function to return whether the value falls within the range.
            </summary>
            <param name="value">Value to test.</param>
            <returns>TRUE if the value falls into the range.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Shrink(GorgonLibrary.GorgonMinMaxD@,System.Double,GorgonLibrary.GorgonMinMaxD@)">
            <summary>
            Function to shrink the range.
            </summary>
            <param name="range">Range to shrink.</param>
            <param name="value">Amount to shrink the range.</param>
            <param name="result">The smaller range.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Shrink(GorgonLibrary.GorgonMinMaxD,System.Double)">
            <summary>
            Function to shrink the range.
            </summary>
            <param name="range">Range to shrink.</param>
            <param name="value">Amount to shrink the range.</param>		
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Expand(GorgonLibrary.GorgonMinMaxD@,System.Double,GorgonLibrary.GorgonMinMaxD@)">
            <summary>
            Function to expand the range.
            </summary>
            <param name="range">Range to expand.</param>
            <param name="value">Amount to expand the range.</param>
            <param name="result">The larger range.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Expand(GorgonLibrary.GorgonMinMaxD,System.Double)">
            <summary>
            Function to expand the range.
            </summary>
            <param name="range">Range to expand.</param>
            <param name="value">Amount to expand the range.</param>
            <returns>The larger range.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Add(GorgonLibrary.GorgonMinMaxD@,GorgonLibrary.GorgonMinMaxD@,GorgonLibrary.GorgonMinMaxD@)">
            <summary>
            Function to add two min-max ranges together.
            </summary>
            <param name="left">Left range to add</param>
            <param name="right">Right range to add.</param>
            <param name="result">The total of both ranges.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Add(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Function to add two min-max ranges together.
            </summary>
            <param name="left">Left range to add</param>
            <param name="right">Right range to add.</param>
            <returns>The total of both ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Subtract(GorgonLibrary.GorgonMinMaxD@,GorgonLibrary.GorgonMinMaxD@,GorgonLibrary.GorgonMinMaxD@)">
            <summary>
            Function to subtract two min-max ranges from each other.
            </summary>
            <param name="left">Left range to subtract.</param>
            <param name="right">Right range to subtract.</param>
            <param name="result">The difference of both ranges.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Subtract(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Function to subtract two min-max ranges from each other.
            </summary>
            <param name="left">Left range to subtract.</param>
            <param name="right">Right range to subtract.</param>
            <returns>The difference of both ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Multiply(GorgonLibrary.GorgonMinMaxD@,GorgonLibrary.GorgonMinMaxD@,GorgonLibrary.GorgonMinMaxD@)">
            <summary>
            Function to multiply two min-max ranges together.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="right">Right range to multiply.</param>
            <param name="result">The product of both ranges.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Multiply(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Function to multiply two min-max ranges together.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="right">Right range to multiply.</param>
            <returns>The product of both ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Multiply(GorgonLibrary.GorgonMinMaxD@,System.Double,GorgonLibrary.GorgonMinMaxD@)">
            <summary>
            Function to multiply a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="scalar">Scalar value to multiply..</param>
            <param name="result">The product of the range and the scalar.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Multiply(GorgonLibrary.GorgonMinMaxD,System.Double)">
            <summary>
            Function to multiply a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="scalar">Scalar value to multiply..</param>
            <returns>The product of the range and the scalar.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Divide(GorgonLibrary.GorgonMinMaxD@,GorgonLibrary.GorgonMinMaxD@,GorgonLibrary.GorgonMinMaxD@)">
            <summary>
            Function to divide two min-max ranges.
            </summary>
            <param name="left">Left range to divide</param>
            <param name="right">Right range to divide.</param>
            <param name="result">The quotient of both ranges.</param>
            <exception cref="T:System.DivideByZeroException">Thrown if the right Minimum or Maximum value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Divide(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Function to multiply two min-max ranges.
            </summary>
            <param name="left">Left range to divide.</param>
            <param name="right">Right range to divide.</param>
            <returns>The quotient of both ranges.</returns>
            <exception cref="T:System.DivideByZeroException">Thrown if the right Minimum or Maximum value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Divide(GorgonLibrary.GorgonMinMaxD@,System.Double,GorgonLibrary.GorgonMinMaxD@)">
            <summary>
            Function to divide a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to divide.</param>
            <param name="scalar">Scalar value to divide.</param>
            <param name="result">The quotient of the range and the scalar.</param>
            <exception cref="T:System.DivideByZeroException">Thrown if the scalar value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Divide(GorgonLibrary.GorgonMinMaxD,System.Double)">
            <summary>
            Function to divide a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to divide.</param>
            <param name="scalar">Scalar value to divide.</param>
            <returns>The quotient of the range and the scalar.</returns>
            <exception cref="T:System.DivideByZeroException">Thrown if the scalar value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed floateger that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonMinMaxD"/> struct.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Explicit(GorgonLibrary.GorgonMinMaxD)~GorgonLibrary.GorgonMinMax">
            <summary>
            Performs an explicit conversion from <see cref="T:GorgonLibrary.GorgonMinMaxD"/> to <see cref="T:GorgonLibrary.GorgonMinMax"/>.
            </summary>
            <param name="range">The range.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Explicit(GorgonLibrary.GorgonMinMaxD)~GorgonLibrary.GorgonMinMaxF">
            <summary>
            Performs an explicit conversion from <see cref="T:GorgonLibrary.GorgonMinMaxD"/> to <see cref="T:GorgonLibrary.GorgonMinMaxF"/>.
            </summary>
            <param name="range">The range.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Equality(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Inequality(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Addition(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Subtraction(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Multiply(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Division(GorgonLibrary.GorgonMinMaxD,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Multiply(GorgonLibrary.GorgonMinMaxD,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left range.</param>
            <param name="scalar">The right scalar value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Multiply(System.Double,GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scalar">The scalar value.</param>
            <param name="right">The right scalar value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.op_Division(GorgonLibrary.GorgonMinMaxD,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left range.</param>
            <param name="scalar">The right scalar value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxD.Equals(GorgonLibrary.GorgonMinMaxD)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:GorgonLibrary.GorgonMinMaxD.IsEmpty">
            <summary>
            Property to return whether the range is empty or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonMinMaxD.Range">
            <summary>
            Property to return the range between the two values.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonMinMaxF">
            <summary>
            Value type to indicate a range of floating point values.
            </summary>
        </member>
        <member name="F:GorgonLibrary.GorgonMinMaxF.Minimum">
            <summary>
            Minimum value in the range.
            </summary>
        </member>
        <member name="F:GorgonLibrary.GorgonMinMaxF.Maximum">
            <summary>
            Maximum value in the range.
            </summary>
        </member>
        <member name="F:GorgonLibrary.GorgonMinMaxF.Empty">
            <summary>
            Empty range.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Contains(System.Single)">
            <summary>
            Function to return whether the value falls within the range.
            </summary>
            <param name="value">Value to test.</param>
            <returns>TRUE if the value falls into the range.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Shrink(GorgonLibrary.GorgonMinMaxF@,System.Single,GorgonLibrary.GorgonMinMaxF@)">
            <summary>
            Function to shrink the range.
            </summary>
            <param name="range">Range to shrink.</param>
            <param name="value">Amount to shrink the range.</param>
            <param name="result">The smaller range.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Shrink(GorgonLibrary.GorgonMinMaxF,System.Single)">
            <summary>
            Function to shrink the range.
            </summary>
            <param name="range">Range to shrink.</param>
            <param name="value">Amount to shrink the range.</param>		
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Expand(GorgonLibrary.GorgonMinMaxF@,System.Single,GorgonLibrary.GorgonMinMaxF@)">
            <summary>
            Function to expand the range.
            </summary>
            <param name="range">Range to expand.</param>
            <param name="value">Amount to expand the range.</param>
            <param name="result">The larger range.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Expand(GorgonLibrary.GorgonMinMaxF,System.Single)">
            <summary>
            Function to expand the range.
            </summary>
            <param name="range">Range to expand.</param>
            <param name="value">Amount to expand the range.</param>
            <returns>The larger range.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Add(GorgonLibrary.GorgonMinMaxF@,GorgonLibrary.GorgonMinMaxF@,GorgonLibrary.GorgonMinMaxF@)">
            <summary>
            Function to add two min-max ranges together.
            </summary>
            <param name="left">Left range to add</param>
            <param name="right">Right range to add.</param>
            <param name="result">The total of both ranges.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Add(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Function to add two min-max ranges together.
            </summary>
            <param name="left">Left range to add</param>
            <param name="right">Right range to add.</param>
            <returns>The total of both ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Subtract(GorgonLibrary.GorgonMinMaxF@,GorgonLibrary.GorgonMinMaxF@,GorgonLibrary.GorgonMinMaxF@)">
            <summary>
            Function to subtract two min-max ranges from each other.
            </summary>
            <param name="left">Left range to subtract.</param>
            <param name="right">Right range to subtract.</param>
            <param name="result">The difference of both ranges.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Subtract(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Function to subtract two min-max ranges from each other.
            </summary>
            <param name="left">Left range to subtract.</param>
            <param name="right">Right range to subtract.</param>
            <returns>The difference of both ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Multiply(GorgonLibrary.GorgonMinMaxF@,GorgonLibrary.GorgonMinMaxF@,GorgonLibrary.GorgonMinMaxF@)">
            <summary>
            Function to multiply two min-max ranges together.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="right">Right range to multiply.</param>
            <param name="result">The product of both ranges.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Multiply(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Function to multiply two min-max ranges together.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="right">Right range to multiply.</param>
            <returns>The product of both ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Multiply(GorgonLibrary.GorgonMinMaxF@,System.Single,GorgonLibrary.GorgonMinMaxF@)">
            <summary>
            Function to multiply a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="scalar">Scalar value to multiply..</param>
            <param name="result">The product of the range and the scalar.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Multiply(GorgonLibrary.GorgonMinMaxF,System.Single)">
            <summary>
            Function to multiply a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="scalar">Scalar value to multiply..</param>
            <returns>The product of the range and the scalar.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Divide(GorgonLibrary.GorgonMinMaxF@,GorgonLibrary.GorgonMinMaxF@,GorgonLibrary.GorgonMinMaxF@)">
            <summary>
            Function to divide two min-max ranges.
            </summary>
            <param name="left">Left range to divide</param>
            <param name="right">Right range to divide.</param>
            <param name="result">The quotient of both ranges.</param>
            <exception cref="T:System.DivideByZeroException">Thrown if the right Minimum or Maximum value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Divide(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Function to multiply two min-max ranges.
            </summary>
            <param name="left">Left range to divide.</param>
            <param name="right">Right range to divide.</param>
            <returns>The quotient of both ranges.</returns>
            <exception cref="T:System.DivideByZeroException">Thrown if the right Minimum or Maximum value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Divide(GorgonLibrary.GorgonMinMaxF@,System.Single,GorgonLibrary.GorgonMinMaxF@)">
            <summary>
            Function to divide a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to divide.</param>
            <param name="scalar">Scalar value to divide.</param>
            <param name="result">The quotient of the range and the scalar.</param>
            <exception cref="T:System.DivideByZeroException">Thrown if the scalar value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Divide(GorgonLibrary.GorgonMinMaxF,System.Single)">
            <summary>
            Function to divide a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to divide.</param>
            <param name="scalar">Scalar value to divide.</param>
            <returns>The quotient of the range and the scalar.</returns>
            <exception cref="T:System.DivideByZeroException">Thrown if the scalar value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed floateger that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonMinMaxF"/> struct.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Explicit(GorgonLibrary.GorgonMinMaxF)~GorgonLibrary.GorgonMinMax">
            <summary>
            Performs an explicit conversion from <see cref="T:GorgonLibrary.GorgonMinMaxF"/> to <see cref="T:GorgonLibrary.GorgonMinMax"/>.
            </summary>
            <param name="range">The range.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Implicit(GorgonLibrary.GorgonMinMaxF)~GorgonLibrary.GorgonMinMaxD">
            <summary>
            Performs an explicit conversion from <see cref="T:GorgonLibrary.GorgonMinMaxF"/> to <see cref="T:GorgonLibrary.GorgonMinMaxD"/>.
            </summary>
            <param name="range">The range.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Equality(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Inequality(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Addition(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Subtraction(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Multiply(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Division(GorgonLibrary.GorgonMinMaxF,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Multiply(GorgonLibrary.GorgonMinMaxF,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left range.</param>
            <param name="scalar">The right scalar value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Multiply(System.Single,GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scalar">The scalar value.</param>
            <param name="right">The right scalar value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.op_Division(GorgonLibrary.GorgonMinMaxF,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left range.</param>
            <param name="scalar">The right scalar value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMaxF.Equals(GorgonLibrary.GorgonMinMaxF)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:GorgonLibrary.GorgonMinMaxF.IsEmpty">
            <summary>
            Property to return whether the range is empty or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonMinMaxF.Range">
            <summary>
            Property to return the range between the two values.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonMinMax">
            <summary>
            Value type to indicate a range of integer values.
            </summary>
        </member>
        <member name="F:GorgonLibrary.GorgonMinMax.Minimum">
            <summary>
            Minimum value in the range.
            </summary>
        </member>
        <member name="F:GorgonLibrary.GorgonMinMax.Maximum">
            <summary>
            Maximum value in the range.
            </summary>
        </member>
        <member name="F:GorgonLibrary.GorgonMinMax.Empty">
            <summary>
            Empty range.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Contains(System.Int32)">
            <summary>
            Function to return whether the value falls within the range.
            </summary>
            <param name="value">Value to test.</param>
            <returns>TRUE if the value falls into the range.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Shrink(GorgonLibrary.GorgonMinMax@,System.Int32,GorgonLibrary.GorgonMinMax@)">
            <summary>
            Function to shrink the range.
            </summary>
            <param name="range">Range to shrink.</param>
            <param name="value">Amount to shrink the range.</param>
            <param name="result">The smaller range.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Shrink(GorgonLibrary.GorgonMinMax,System.Int32)">
            <summary>
            Function to shrink the range.
            </summary>
            <param name="range">Range to shrink.</param>
            <param name="value">Amount to shrink the range.</param>		
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Expand(GorgonLibrary.GorgonMinMax@,System.Int32,GorgonLibrary.GorgonMinMax@)">
            <summary>
            Function to expand the range.
            </summary>
            <param name="range">Range to expand.</param>
            <param name="value">Amount to expand the range.</param>
            <param name="result">The larger range.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Expand(GorgonLibrary.GorgonMinMax,System.Int32)">
            <summary>
            Function to expand the range.
            </summary>
            <param name="range">Range to expand.</param>
            <param name="value">Amount to expand the range.</param>
            <returns>The larger range.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Add(GorgonLibrary.GorgonMinMax@,GorgonLibrary.GorgonMinMax@,GorgonLibrary.GorgonMinMax@)">
            <summary>
            Function to add two min-max ranges together.
            </summary>
            <param name="left">Left range to add</param>
            <param name="right">Right range to add.</param>
            <param name="result">The total of both ranges.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Add(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Function to add two min-max ranges together.
            </summary>
            <param name="left">Left range to add</param>
            <param name="right">Right range to add.</param>
            <returns>The total of both ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Subtract(GorgonLibrary.GorgonMinMax@,GorgonLibrary.GorgonMinMax@,GorgonLibrary.GorgonMinMax@)">
            <summary>
            Function to subtract two min-max ranges from each other.
            </summary>
            <param name="left">Left range to subtract.</param>
            <param name="right">Right range to subtract.</param>
            <param name="result">The difference of both ranges.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Subtract(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Function to subtract two min-max ranges from each other.
            </summary>
            <param name="left">Left range to subtract.</param>
            <param name="right">Right range to subtract.</param>
            <returns>The difference of both ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Multiply(GorgonLibrary.GorgonMinMax@,GorgonLibrary.GorgonMinMax@,GorgonLibrary.GorgonMinMax@)">
            <summary>
            Function to multiply two min-max ranges together.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="right">Right range to multiply.</param>
            <param name="result">The product of both ranges.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Multiply(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Function to multiply two min-max ranges together.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="right">Right range to multiply.</param>
            <returns>The product of both ranges.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Multiply(GorgonLibrary.GorgonMinMax@,System.Int32,GorgonLibrary.GorgonMinMax@)">
            <summary>
            Function to multiply a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="scalar">Scalar value to multiply..</param>
            <param name="result">The product of the range and the scalar.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Multiply(GorgonLibrary.GorgonMinMax,System.Int32)">
            <summary>
            Function to multiply a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to multiply</param>
            <param name="scalar">Scalar value to multiply..</param>
            <returns>The product of the range and the scalar.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Divide(GorgonLibrary.GorgonMinMax@,GorgonLibrary.GorgonMinMax@,GorgonLibrary.GorgonMinMax@)">
            <summary>
            Function to divide two min-max ranges.
            </summary>
            <param name="left">Left range to divide</param>
            <param name="right">Right range to divide.</param>
            <param name="result">The quotient of both ranges.</param>
            <exception cref="T:System.DivideByZeroException">Thrown if the right Minimum or Maximum value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Divide(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Function to multiply two min-max ranges.
            </summary>
            <param name="left">Left range to divide.</param>
            <param name="right">Right range to divide.</param>
            <returns>The quotient of both ranges.</returns>
            <exception cref="T:System.DivideByZeroException">Thrown if the right Minimum or Maximum value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Divide(GorgonLibrary.GorgonMinMax@,System.Int32,GorgonLibrary.GorgonMinMax@)">
            <summary>
            Function to divide a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to divide.</param>
            <param name="scalar">Scalar value to divide.</param>
            <param name="result">The quotient of the range and the scalar.</param>
            <exception cref="T:System.DivideByZeroException">Thrown if the scalar value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Divide(GorgonLibrary.GorgonMinMax,System.Int32)">
            <summary>
            Function to divide a min-max range by a scalar value.
            </summary>
            <param name="left">Left range to divide.</param>
            <param name="scalar">Scalar value to divide.</param>
            <returns>The quotient of the range and the scalar.</returns>
            <exception cref="T:System.DivideByZeroException">Thrown if the scalar value is zero.</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.GorgonMinMax"/> struct.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Implicit(GorgonLibrary.GorgonMinMax)~GorgonLibrary.GorgonMinMaxF">
            <summary>
            Performs an explicit conversion from <see cref="T:GorgonLibrary.GorgonMinMax"/> to <see cref="T:GorgonLibrary.GorgonMinMaxF"/>.
            </summary>
            <param name="range">The range.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Implicit(GorgonLibrary.GorgonMinMax)~GorgonLibrary.GorgonMinMaxD">
            <summary>
            Performs an explicit conversion from <see cref="T:GorgonLibrary.GorgonMinMax"/> to <see cref="T:GorgonLibrary.GorgonMinMaxD"/>.
            </summary>
            <param name="range">The range.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Equality(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Inequality(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Addition(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Subtraction(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Multiply(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Division(GorgonLibrary.GorgonMinMax,GorgonLibrary.GorgonMinMax)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Multiply(GorgonLibrary.GorgonMinMax,System.Int32)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left range.</param>
            <param name="scalar">The right scalar value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Multiply(System.Int32,GorgonLibrary.GorgonMinMax)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scalar">The scalar value.</param>
            <param name="right">The right scalar value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.op_Division(GorgonLibrary.GorgonMinMax,System.Int32)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left range.</param>
            <param name="scalar">The right scalar value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonMinMax.Equals(GorgonLibrary.GorgonMinMax)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:GorgonLibrary.GorgonMinMax.IsEmpty">
            <summary>
            Property to return whether the range is empty or not.
            </summary>
        </member>
        <member name="P:GorgonLibrary.GorgonMinMax.Range">
            <summary>
            Property to return the range between the two values.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonHashGenerationExtension">
            <summary>
            An extension to provide hash code generation for dictionaries.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonHashGenerationExtension.GenerateHash``1(System.Int32,``0)">
            <summary>
            Function to build upon the hash code from a value.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="previousHash">The hash code of the previous value.</param>
            <param name="item">New item to add to the hash code.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:GorgonLibrary.Configuration.GorgonConfiguration">
            <summary>
            Manages the configuration for the Gorgon applications.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonConfiguration.GetSettings(System.String,System.String)">
            <summary>
            Function to retrieve a setting and its values from the configuration.
            </summary>
            <param name="sectionName">Section XML node containing the values.</param>
            <param name="settingName">Name of the setting to find.</param>
            <returns>An enumerable list of values for the setting or NULL (Nothing in VB.Net) if the setting was not found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="settingName"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="settingName"/> parameter is an empty string.
            <para>-or-</para><para>Thrown when the <paramref name="sectionName"/> could not be found.</para>
            </exception>
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonConfiguration.LoadConfiguration(System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Function to load the configuration for the framework from an XML file.  
            </summary>
            <param name="configurationPath">Path to the configuration.</param>
            <param name="plugInSigningKeys">List of plug-in type names and keys that are allowed.</param>
            <remarks>Calling this will load all the plug-ins registered in the config file.  Existing plug-ins will not be removed, if a plug-in is already loaded then that one will be used instead.
            <para>If the user requires signed plug-ins, then they should pass in a dictionary of named keys (a name and an array of bytes containing the public key) for security.  Otherwise pass NULL (Nothing in VB.Net) to the <paramref name="plugInSigningKeys"/> parameter 
            to load regardless if the assembly is signed or not.  The name of the key should be the same as the file name of the assembly (without the extension).</para>
            <para>If checking for signed plug-ins, then the configuration should contain a line with the XML attribute TypeName and the value should be the fully qualified type name of the plug-in.  This name is matched against the list in the <paramref name="plugInSigningKeys"/> parameter.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="configurationPath"/> parameter is NULL (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="configurationPath"/> parameter is an empty string.
            <para>-or-</para><para>Thrown when the configuration file could not be read.</para>
            </exception>		
        </member>
        <member name="M:GorgonLibrary.Configuration.GorgonConfiguration.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.Configuration.GorgonConfiguration"/> class.
            </summary>
        </member>
        <member name="T:GorgonLibrary.GorgonStringFormattingExtension">
            <summary>
            Various path formatting methods.
            </summary>
        </member>
        <member name="M:GorgonLibrary.GorgonStringFormattingExtension.IsValidPath(System.String)">
            <summary>
            Function to determine if this path is valid.
            </summary>
            <param name="path">Path to a file or directory.</param>
            <returns>TRUE if valid, FALSE if not.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonStringFormattingExtension.FormatFileName(System.String)">
            <summary>
            Function to return a properly file name.
            </summary>
            <param name="path">Path to the file.</param>
            <returns>The formatted path to the file.</returns>
        </member>
        <member name="M:GorgonLibrary.GorgonStringFormattingExtension.FormatDirectory(System.String,System.Char)">
            <summary>
            Function to return a properly formatted directory name.
            </summary>
            <param name="path">Path to repair.</param>
            <param name="directorySeparator">Directory separator character to use.</param>
            <returns>The formatted path.</returns>
            <remarks>When the <paramref name="directorySeparator"/> character is whitespace or illegal, then the system will use the <see cref="F:System.IO.Path.DirectorySeparatorChar"/> character.</remarks>
        </member>
        <member name="M:GorgonLibrary.GorgonStringFormattingExtension.RemoveIllegalPathChars(System.String)">
            <summary>
            Function to remove any illegal path characters from a path.
            </summary>
            <param name="path">Path to fix.</param>
            <returns>The corrected path.</returns>
            <remarks>This will replace any illegal characters with the '_' symbol.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="path"/> is NULL (or Nothing in VB.NET).</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonStringFormattingExtension.RemoveIllegalFilenameChars(System.String)">
            <summary>
            Function to remove any illegal file name characters from a path.
            </summary>
            <param name="path">Path to fix.</param>
            <returns>The corrected file name.</returns>
            <remarks>This will replace any illegal characters with the '_' symbol.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="path"/> is NULL (or Nothing in VB.NET).</exception>
        </member>
        <member name="M:GorgonLibrary.GorgonStringFormattingExtension.#cctor">
            <summary>
            Initializes the <see cref="T:GorgonLibrary.GorgonStringFormattingExtension"/> class.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Diagnostics.LoggingLevel">
            <summary>
            Enumeration containing the logging levels.
            </summary>
        </member>
        <member name="F:GorgonLibrary.Diagnostics.LoggingLevel.NoLogging">
            <summary>This will disable the log file.</summary>
        </member>
        <member name="F:GorgonLibrary.Diagnostics.LoggingLevel.Simple">
            <summary>This will only pass messages marked as simple.</summary>
        </member>
        <member name="F:GorgonLibrary.Diagnostics.LoggingLevel.Intermediate">
            <summary>This will only pass messages marked as intermediate.</summary>
        </member>
        <member name="F:GorgonLibrary.Diagnostics.LoggingLevel.Verbose">
            <summary>This will only pass messages marked as verbose.</summary>
        </member>
        <member name="F:GorgonLibrary.Diagnostics.LoggingLevel.All">
            <summary>This will print all messages regardless of level.</summary>
        </member>
        <member name="T:GorgonLibrary.Diagnostics.GorgonLogFile">
            <summary>
            Sends logging information to a file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonLogFile.Print(System.String,GorgonLibrary.Diagnostics.LoggingLevel,System.Object[])">
            <summary>
            Print a line to the logfile.
            </summary>
            <param name="formatSpecifier">Format specifier for the line.</param>
            <param name="level">Level that this message falls under.</param>
            <param name="arguments">List of optional arguments.</param>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonLogFile.Close">
            <summary>
            Function to close the log file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonLogFile.Open">
            <summary>
            Function to open the log file.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonLogFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Diagnostics.GorgonLogFile"/> class.
            </summary>
            <param name="appname">File name for the log file.</param>
            <param name="extraPath">Additional directories for the path.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="appname"/> parameter is NULL (or Nothing in VB.NET).</exception>
            <exception cref="T:System.ArgumentException">Thrown when the appname parameter is empty.</exception>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonLogFile.Dispose(System.Boolean)">
            <summary>
            Function to remove resources.
            </summary>
            <param name="disposing">TRUE if we're removing managed resources and unmanaged, FALSE if only unmanaged.</param>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonLogFile.System#IDisposable#Dispose">
            <summary>
            Function to clean up.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonLogFile.LogFilterLevel">
            <summary>
            Property to set or return the filtering level of this log.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonLogFile.LogApplication">
            <summary>
            Property to return the name of the application that is being logged.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonLogFile.LogPath">
            <summary>
            Property to return the path to the log.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonLogFile.IsClosed">
            <summary>
            Property to return whether or not the log object is in a closed state.
            </summary>
        </member>
        <member name="T:GorgonLibrary.Diagnostics.GorgonTimer">
            <summary>
            A timer interface for handling situations where higher accuracy is required for time measurement.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTimer.GetQPFTime">
            <summary>
            Function to return the Query Performance Counter time.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTimer.GetWin32Time">
            <summary>
            Function to retrieve the timeGetTime time data.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTimer.GetTime">
            <summary>
            Function to retrieve the time data.
            </summary>
            <returns>The number of clock ticks since the timer was started.</returns>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTimer.ResetLowResTimerPeriod">
            <summary>
            Function to reset the low resolution timer period.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTimer.Reset">
            <summary>
            Function to reset the timer.
            </summary>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTimer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Diagnostics.GorgonTimer"/> class.
            </summary>
            <param name="useHighResolution">TRUE to use a high resolution timer, FALSE to use the standard timer.</param>
            <remarks>The high resolution timer uses QueryPerformanceCounter, and the standard timer uses timeGetTime.</remarks>
        </member>
        <member name="M:GorgonLibrary.Diagnostics.GorgonTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GorgonLibrary.Diagnostics.GorgonTimer"/> class.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTimer.UsingLowResTimers">
            <summary>
            Property to return whether we're using low resolution timers.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTimer.Milliseconds">
            <summary>
            Property to return the number of milliseconds elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTimer.Microseconds">
            <summary>
            Property to return the number of microseconds elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTimer.Seconds">
            <summary>
            Property to return the number of seconds elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTimer.Minutes">
            <summary>
            Property to return the number of minutes elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTimer.Hours">
            <summary>
            Property to return the number of hours elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTimer.Days">
            <summary>
            Property to return the number of days elapsed since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTimer.Ticks">
            <summary>
            Property to return the number of ticks since the timer was started.
            </summary>
        </member>
        <member name="P:GorgonLibrary.Diagnostics.GorgonTimer.IsHighResolution">
            <summary>
            Property to return whether this timer is high resolution or not.
            </summary>
            <remarks>Implementors need to set this value.</remarks>
        </member>
        <member name="T:GorgonLibrary.ICloneable`1">
            <summary>
            A cloneable object interface.
            </summary>
            <typeparam name="T">Type to clone.</typeparam>
        </member>
        <member name="M:GorgonLibrary.ICloneable`1.Clone">
            <summary>
            Function to clone an object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:GorgonLibrary.UI.ConfirmationResult">
            <summary>
            Enumeration for confirmation results.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationResult.None">
            <summary>
            No confirmation.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationResult.Yes">
            <summary>
            Yes clicked.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationResult.No">
            <summary>
            No clicked.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationResult.Cancel">
            <summary>
            Cancel clicked.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.ConfirmationResult.ToAll">
            <summary>
            To all checked.
            </summary>
        </member>
        <member name="T:GorgonLibrary.UI.GorgonDialogs">
            <summary>
            Static class representing various User Interface utilities.
            </summary>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.FormatStackTrace(System.String)">
            <summary>
            Function to format the stack trace output.
            </summary>
            <param name="stackTrace">Stack trace to format.</param>
            <returns>A formatted stack trace.</returns>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ErrorBox(System.Windows.Forms.Form,System.String,System.Exception,System.String)">
            <summary>
            Function to display the enhanced error dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Supplementary error message.</param>
            <param name="innerException">Exception that was thrown.</param>
            <param name="caption">Caption for the error box.</param>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ErrorBox(System.Windows.Forms.Form,System.String,System.Exception)">
            <summary>
            Function to display the enhanced error dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Supplementary error message.</param>
            <param name="innerException">Exception that was thrown.</param>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ErrorBox(System.Windows.Forms.Form,System.Exception)">
            <summary>
            Function to display the enhanced error dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="innerException">Exception that was thrown.</param>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ErrorBox(System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Function to display the enhanced error dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="description">Error description.</param>
            <param name="details">Details for the error.</param>
            <param name="caption">Caption for the error box.</param>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ErrorBox(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            Function to display the enhanced error dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="description">Error description.</param>
            <param name="details">Details for the error.</param>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ErrorBox(System.Windows.Forms.Form,System.String)">
            <summary>
            Function to display the enhanced error dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="description">Error description.</param>		
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.InfoBox(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            Function to display an information box.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Message to display.</param>
            <param name="caption">Caption for the dialog.</param>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.InfoBox(System.Windows.Forms.Form,System.String)">
            <summary>
            Function to display an information box.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Message to display.</param>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.WarningBox(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            Function to display a warning box.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Message to display.</param>
            <param name="caption">Caption for the dialog.</param>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.WarningBox(System.Windows.Forms.Form,System.String)">
            <summary>
            Function to display a warning box.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Message to display.</param>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ConfirmBox(System.Windows.Forms.Form,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Function to display a confirmation dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Message to display.</param>
            <param name="caption">Caption for the dialog.</param>
            <param name="allowCancel">TRUE to show a Cancel button, FALSE to hide.</param>
            <param name="allowToAll">TRUE to show a 'To all' option, FALSE to hide.</param>
            <returns>Any member of ConfirmationResult except ConfirmationResult.None.</returns>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ConfirmBox(System.Windows.Forms.Form,System.String,System.Boolean,System.Boolean)">
            <summary>
            Function to display a confirmation dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Message to display.</param>
            <param name="allowCancel">TRUE to show a Cancel button, FALSE to hide.</param>
            <param name="allowToAll">TRUE to show a 'To all' option, FALSE to hide.</param>
            <returns>Any member of ConfirmationResult except ConfirmationResult.None.</returns>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ConfirmBox(System.Windows.Forms.Form,System.String,System.String,System.Boolean)">
            <summary>
            Function to display a confirmation dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Message to display.</param>
            <param name="caption">Caption for the dialog.</param>
            <param name="allowCancel">TRUE to show a Cancel button, FALSE to hide.</param>
            <returns>Any member of ConfirmationResult except ConfirmationResult.None.</returns>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ConfirmBox(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            Function to display a confirmation dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Message to display.</param>
            <param name="caption">Caption for the dialog.</param>
            <returns>Any member of ConfirmationResult except ConfirmationResult.None.</returns>
        </member>
        <member name="M:GorgonLibrary.UI.GorgonDialogs.ConfirmBox(System.Windows.Forms.Form,System.String)">
            <summary>
            Function to display a confirmation dialog.
            </summary>
            <param name="owner">Owning window of this dialog.</param>
            <param name="message">Message to display.</param>
            <returns>Any member of ConfirmationResult except ConfirmationResult.None.</returns>
        </member>
        <member name="T:GorgonLibrary.UI.Alignment">
            <summary>
            Values for aligning.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.Alignment.UpperLeft">
            <summary>
            Upper left corner.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.Alignment.CenterLeft">
            <summary>
            Vertically centered, and left aligned.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.Alignment.LowerLeft">
            <summary>
            Lower left corner.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.Alignment.UpperCenter">
            <summary>
            Centered horizontally, aligned to the top.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.Alignment.Center">
            <summary>
            Centered vertically and horizontally.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.Alignment.LowerCenter">
            <summary>
            Centered horizontally, aligned to the bottom.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.Alignment.UpperRight">
            <summary>
            Upper right corner.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.Alignment.CenterRight">
            <summary>
            Vertically centered, aligned to the right.
            </summary>
        </member>
        <member name="F:GorgonLibrary.UI.Alignment.LowerRight">
            <summary>
            Lower right corner.
            </summary>
        </member>
    </members>
</doc>
