<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GORGFX_BUFFER_ALREADY_LOCKED" xml:space="preserve">
    <value>The buffer is already locked.</value>
  </data>
  <data name="GORGFX_BUFFER_IMMUTABLE" xml:space="preserve">
    <value>This buffer is immutable and this cannot be updated.</value>
  </data>
  <data name="GORGFX_COLOR_TOSTR" xml:space="preserve">
    <value>Color Value: Red={0}, Green={1}, Blue={2}, Alpha={3}</value>
  </data>
  <data name="GORGFX_FEATURE_LEVEL_UNKNOWN" xml:space="preserve">
    <value>Must supply a known feature level.</value>
  </data>
  <data name="GORGFX_FMTPITCH_COMPRESSED_TOSTR" xml:space="preserve">
    <value>Image pitch information.  Width={0} bytes, Size={1} bytes.  Format is compressed. Block count width: {2}, Block count height: {3}</value>
  </data>
  <data name="GORGFX_FMTPITCH_TOSTR" xml:space="preserve">
    <value>Image pitch information.  Width={0} bytes, Size={1} bytes.</value>
  </data>
  <data name="GORGFX_INDEX_OUT_OF_RANGE" xml:space="preserve">
    <value>The index is out of range.  The index value [{0}] must be be 0 or less than {1}.</value>
  </data>
  <data name="GORGFX_INVALID_OS" xml:space="preserve">
    <value>The Gorgon Graphics interface requires Windows Vista Service Pack 2 or greater.</value>
  </data>
  <data name="GORGFX_NOT_DEFAULT_USAGE" xml:space="preserve">
    <value>The usage for this object must be set to 'Default'.</value>
  </data>
  <data name="GORGFX_BUFFER_USAGE_CANT_LOCK" xml:space="preserve">
    <value>A buffer with a usage of [{0}] cannot be locked.</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Gorgon_2_x_Logo_Small" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Gorgon_2.x_Logo_Small.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="GORGFX_IMAGE_TYPE_INVALID" xml:space="preserve">
    <value>The image type '{0}' is not a valid image type.</value>
  </data>
  <data name="GORGFX_ALPHA_TO_COVERAGE_NOT_AVAILABLE" xml:space="preserve">
    <value>Cannot bind the blending state.  Alpha to coverage is only available on SM 4.x or better video devices.</value>
  </data>
  <data name="GORGFX_CANNOT_RETRIEVE_ABC" xml:space="preserve">
    <value>Could not retrieve character widths for the specified characters.</value>
  </data>
  <data name="GORGFX_CANNOT_RETRIEVE_KERNING" xml:space="preserve">
    <value>Cannot retrieve kerning pairs.</value>
  </data>
  <data name="GORGFX_INVALID_D3D_CONTEXT" xml:space="preserve">
    <value>A valid device context was not found.</value>
  </data>
  <data name="GORGFX_INVALID_ENUM_VALUE" xml:space="preserve">
    <value>The value [{0}] for parameter '{1}' is not valid.</value>
  </data>
  <data name="GORGFX_BUFFER_REQUIRES_NOOVERWRITE_DISCARD" xml:space="preserve">
    <value>The buffer must use [NoOverwrite] or [Discard] when locking.</value>
  </data>
  <data name="GORGFX_BUFFER_WRITE_ONLY" xml:space="preserve">
    <value>Cannot read this buffer.</value>
  </data>
  <data name="GORGFX_BUFFER_LOCK_NOT_WRITE_DISCARD" xml:space="preserve">
    <value>This buffer must be locked with the [Write] and [Discard] flags.</value>
  </data>
  <data name="GORGFX_BUFFER_NOT_MULTIPLE" xml:space="preserve">
    <value>Cannot create the buffer.  The buffer size of {0} bytes is not a multiple of {1}.</value>
  </data>
  <data name="GORGFX_VERTEXBUFFER_BINDING_TOSTR" xml:space="preserve">
    <value>Vertex buffer binding.  Stride: {0}, Offset: {1}, VertexBuffer: {2}</value>
  </data>
  <data name="GORGFX_FORMAT_NOT_SUPPORTED" xml:space="preserve">
    <value>The format [{0}] is not supported.</value>
  </data>
  <data name="GORGFX_LAYOUT_ELEMENT_IN_USE" xml:space="preserve">
    <value>The offset [{0}] or context '{1}' is in use by another item with the same index or slot.</value>
  </data>
  <data name="GORGFX_NO_SUPPORTED_DEVICES" xml:space="preserve">
    <value>Could not find any supported video devices.  Gorgon requires a device that can support a minimum of pixel shader model 2b and a vertex shader model of 2a.</value>
  </data>
  <data name="GORGFX_PARAMETER_MUST_NOT_BE_EMPTY" xml:space="preserve">
    <value>The parameter must not be empty.</value>
  </data>
  <data name="GORGFX_SHADER_INCLUDE_TOSTR" xml:space="preserve">
    <value>Gorgon Shader Include '{0}'</value>
  </data>
  <data name="GORGFX_VALUE_OUT_OF_RANGE" xml:space="preserve">
    <value>The value is out of range.  The value [{0}] must be be 0 or less than {1}.</value>
  </data>
  <data name="GORGFX_BUFFER_IMMUTABLE_REQUIRES_DATA" xml:space="preserve">
    <value>Cannot create an immutable buffer without initial data to populate it.</value>
  </data>
  <data name="GORGFX_SHADER_VIEW_TOSTR" xml:space="preserve">
    <value>Gorgon Shader View.  Format: [{0}]</value>
  </data>
  <data name="GORGFX_BUFFER_NO_OVERWRITE_NOT_VALID" xml:space="preserve">
    <value>Cannot lock this buffer with a lock type of [NoOverwrite]</value>
  </data>
  <data name="GORGFX_VIEW_UNKNOWN_FORMAT" xml:space="preserve">
    <value>The format for the view must not be [Unknown].</value>
  </data>
  <data name="GORGFX_VIEW_ARRAY_COUNT_INVALID" xml:space="preserve">
    <value>The array count must be between 1 and {0}.</value>
  </data>
  <data name="GORGFX_VIEW_ARRAY_START_INVALID" xml:space="preserve">
    <value>The array start must be between 0 and less than {0}.</value>
  </data>
  <data name="GORGFX_VIEW_CANNOT_CAST_FORMAT" xml:space="preserve">
    <value>The format [{0}] is not compatiable or cannot be cast to [{1}].</value>
  </data>
  <data name="GORGFX_VIEW_CUBE_ARRAY_SIZE_INVALID" xml:space="preserve">
    <value>The array count for a cube texture must be a multiple of 6.</value>
  </data>
  <data name="GORGFX_VIEW_FORMAT_GROUP_INVALID" xml:space="preserve">
    <value>The resource format [{0}] is not the same group as the view format [{1}].</value>
  </data>
  <data name="GORGFX_VIEW_MIP_COUNT_INVALID" xml:space="preserve">
    <value>The mip map count must be between 1 and {0}.</value>
  </data>
  <data name="GORGFX_VIEW_MIP_START_INVALID" xml:space="preserve">
    <value>The mip map start must be between 0 and less than {0}.</value>
  </data>
  <data name="GORGFX_VIEW_NO_TYPELESS" xml:space="preserve">
    <value>The view cannot use a typeless format.</value>
  </data>
  <data name="GORGFX_VIEW_CANNOT_BIND_UNKNOWN_RESOURCE" xml:space="preserve">
    <value>Cannot bind the view to the resource, the resource type is not known.</value>
  </data>
  <data name="GORGFX_VIEW_UAV_NOT_SUPPORTED" xml:space="preserve">
    <value>Unordered access views cannot be applied to texture cubes or multi-sampled textures.</value>
  </data>
  <data name="GORGFX_VIEW_DEPTH_COUNT_INVALID" xml:space="preserve">
    <value>The depth count must be between 1 and {0}.</value>
  </data>
  <data name="GORGFX_VIEW_DEPTH_START_INVALID" xml:space="preserve">
    <value>The depth start must be between 0 and less than {0}.</value>
  </data>
  <data name="GORGFX_BUFFER_SIZE_TOO_SMALL" xml:space="preserve">
    <value>The buffer requires at least {0} byte(s).</value>
  </data>
  <data name="GORGFX_REQUIRES_SM" xml:space="preserve">
    <value>A {0} video device is necessary to use this object or perform this operation.</value>
  </data>
  <data name="GORGFX_CBUFFER_ALREADY_BOUND" xml:space="preserve">
    <value>The constant buffer '{0}' is already bound at index [{1}].</value>
  </data>
  <data name="GORGFX_EFFECT_MISSING_REQUIRED_PARAMS" xml:space="preserve">
    <value>The parameter '{0}' was required for this effect, but is not present in the parameters list.</value>
  </data>
  <data name="GORGFX_EFFECT_PARAM_TOSTR" xml:space="preserve">
    <value>Effect Parameter: {0}, Value = {1}</value>
  </data>
  <data name="GORGFX_VIEW_CANT_BIND_STAGING_NO_VIEW" xml:space="preserve">
    <value>The resource view cannot be bound, it is either a staging resource or has no default shader view.</value>
  </data>
  <data name="GORGFX_VIEW_RESOURCE_NOT_TYPE" xml:space="preserve">
    <value>The view at index [{0}] is not bound to a resource of type '{1}'.</value>
  </data>
  <data name="GORGFX_VIEW_ALREADY_BOUND" xml:space="preserve">
    <value>The view was already bound to the shader at index [{0}].</value>
  </data>
  <data name="GORGFX_BUFFER_NO_STAGING_INVALID_FLAGS" xml:space="preserve">
    <value>Buffers that allow indirect arguments, shader views, unordered access views, raw views, render target views or can be used for output cannot have a usage of [Staging].</value>
  </data>
  <data name="GORGFX_BUFFER_OUTPUT_NO_UNORDERED" xml:space="preserve">
    <value>A buffer that allows stream output cannot have unordered access.</value>
  </data>
  <data name="GORGFX_BUFFER_RAW_ACCESS_REQUIRES_VIEW_ACCESS" xml:space="preserve">
    <value>A buffer that provides raw access must allow shader views and/or unordered resource views.</value>
  </data>
  <data name="GORGFX_BUFFER_NO_OUTPUT_INVALID_TYPE" xml:space="preserve">
    <value>The {0} buffer type cannot output data.</value>
  </data>
  <data name="GORGFX_BUFFER_NO_SHADER_VIEWS" xml:space="preserve">
    <value>The buffer does not allow shader resource views.</value>
  </data>
  <data name="GORGFX_VIEW_BUFFER_NOT_RAW" xml:space="preserve">
    <value>The buffer does not allow raw views.</value>
  </data>
  <data name="GORGFX_VIEW_RAW_INVALID_FORMAT" xml:space="preserve">
    <value>Raw shader views require a format of [R32_Uint], [R32_Int], or [R32_Float].</value>
  </data>
  <data name="GORGFX_VIEW_UNORDERED_RAW_INVALID_FORMAT" xml:space="preserve">
    <value>Raw unordered views require a format of [R32] (Typeless).</value>
  </data>
  <data name="GORGFX_BUFFER_STRUCTURE_SIZE_INVALID" xml:space="preserve">
    <value>The structure size must be greater than 0 and no greater than 2048 bytes.</value>
  </data>
  <data name="GORGFX_BUFFER_DYNAMIC_NEEDS_SHADER_VIEW" xml:space="preserve">
    <value>A generic dynamic buffer must be accessible via a shader view.</value>
  </data>
  <data name="GORGFX_BUFFER_NO_DYNAMIC_INVALID_FLAGS" xml:space="preserve">
    <value>Buffers that allow unordered access views, render target views, or can be used for output cannot have a usage of [Dynamic].</value>
  </data>
  <data name="GORGFX_BUFFER_SIZE_MISMATCH" xml:space="preserve">
    <value>The size of the buffers do not match.</value>
  </data>
</root>