This list is not in order.  Please don't get excited.

* Refactor the texture class into a better abstract class using D3DResources (Done)
	+ Put in updatesubresource functionality for textures (Done)
	+ Put in map functionality for textures	(Done)
	+ Add GetSubResourceIndex1/2/3D to the Textures interface (Done, added to texture objects as static member).
	+ Update SRV for depth for binding to shaders using typeless texture and typed srv. (Done)
	+ Make SRV/UAV more flexible for resource types.  Currently limited to 1 view to 1 resource, not ideal. (Done)
	+ Update 1D /2D textures for depth, 3D cannot be used as depth. (Done)
	+ Test depth/stencil for unordered access view support. (Done)
	+ Update buffers and 1D/3D textures for render target destination. (Done)
		- Refactor GorgonRenderTarget into GorgonRenderTarget/1D/2D/3D/Buffer types. (Done)
+ Add methods to set or return buffers for stream output. (Done, all inside of Geometry shader stuff)
* Add buffers (DONE)
	+ Update vertex buffer (and index buffer?  Need to research) code to allow for stream output from Geometry shaders. (Done)
	+ Add raw buffers (N/A - Any buffer except constant, structured can be raw)
	+ Add structured buffer (Done)
		- Add append and counter buffers (N/A - This is a view type)
	+ Add typed buffer (N/A - All buffers are "typed" buffers)
	+ Update buffers to allow for creation of staging buffer. (Done)	
	+ Add generic buffer creation to GorgonBuffers. (Done)
	+ Add argument buffer (for DrawIndirect) (N/A - Most buffers can be used as an indirect args buffer)
* Finish shader objects in base graphics library.
	+ Add ability to load/save shaders from text file and compiled form. (Done)
	+ Maybe consider putting in shader reflection.
	+ Add compute, domain, hull and geometry shaders (Geometry = Done).
		- Add stream output shader inherited from geometry shader. (Done)
	+ Add #include support - This is necessary especially when pulling stuff from a virtual file system. (Done)
	+ A lightweight effects framework to simplify shaders. (Done)
	+ Some basic shaders for blurring, color inversion, sharpening, etc... (Done - in 2D library)
		- Expose these as 'Effect' objects for easier use. (Done)
	+ Add functionality to allow creation of custom shader resource/unordered views for objects. (Done, added to buffers/textures)
	+ Add Dispatch command for compute shaders (Done).
		- Will need dispatch for indirect argument buffers too (Done).
	+ Add class support to shaders for SM5 dynamic linking.
* Add multi-threaded support for D3D 11 device contexts. (Done)	
	+ Add a "Finish" command to this deferred object type (Done)
	+ Add command list type.  Will have Execute method.  Note that we can chain command lists to other command lists. (Done)
	+ Add functionality to check for threading support.  Limit support to SM5 or better devices. (Done)
* Maybe update Gorgon2D to create a swap chain in its Create2DRenderer method in addition to passing one in. (Done)
* Update 2D shader code (Not necessary, 2D specific shader types are now gone and integrated via #GorgonInclude in the shader).
* Add bounding box/circle for renderable objects. (Done)
* Add font management code.
	+ Code for generating (for use in the editor, but will be public) (Done).	
	+ Loading/saving bitmap fonts. (Done)
* Add text output code.
	+ Add text sprite.  (Done)
	+ Add alignment (Done)
	+ Add word wrap (Done)
	+ Add shadowing (Done)
	+ Add global "DrawText" to Drawing property. (Done)
* Add horizontal/vertical flip to sprites. (Done)
* Add animation to renderable objects. (Done)
* Add more primitives:
	+ Line polygon (Done)
	+ Filled polygon (Done, same as line polygon).
* Add a batch renderable using a static vertex buffer (possible with dynamic, may be worth looking into)
* Add perspective camera (Done)
* Add perspective sprites
* Write editor for creating/editing sprites, fonts, shaders (maybe), textures (maybe, probably not)
	+ This time make it one large program that uses a project so everything can be integrated.
	+ Maybe allow for pack file support like zip, previous gorgon bzip stuff.
* Consider dropping feature level 9 support, it's really painful and limits what we can do.
* Maybe add higher level code for GUI, scenegraph, collisions, etc... once base library is working and relatively bug free
* Way in the future... maybe write a 3D component for Gorgon.  A lot of work though, very lazy.
* Fix up animation to use chunked format (Done).
* Fix up chunking code to be more efficient, currently it's ass (Done).
* Test FromStream methods for textures.  Currently WICStream seems to not like streams with a position greater than 0. (Done/Fixed).
* Add encoding options to codecs (Done)
* Add FromMemory to Gorgon Fonts (Done)
* Make save/load methods orthogonal. (Done)
* Try to fix up unreleased COM objects for DXGI/WIC.  This problem is in SharpDX, and may not be resolved until an update is released.

----
Examples
----

Common:
Done

Input:
Done

File System:
1.  Write an example to show mounting a zip file. (Done)
2.  Write an example to show mounting multiple file system types. (Done)
3.  Write an example to show how to use the write directory. (Done)
4.  Import Gorgon 1.x examples. (Done)

Graphics:
TBD

2D:
TBD